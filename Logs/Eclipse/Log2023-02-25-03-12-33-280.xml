<Events startTimestamp="1677312753280" logVersion="1.0.0.202111260825">
  <Command __id="1" _type="MoveCaretCommand" caretOffset="6201" date="Sat Feb 25 03:12:49 EST 2023" docOffset="7081" starttimestamp="1677312753280" timestamp="16181" />
  <Command __id="3" _type="PauseCommand" date="Sat Feb 25 03:13:29 EST 2023" range="30s-1m" starttimestamp="1677312753280" timestamp="55775">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[39569]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2" _type="MoveCaretCommand" caretOffset="6541" date="Sat Feb 25 03:13:29 EST 2023" docOffset="7421" starttimestamp="1677312753280" timestamp="55750" />
  <Command __id="5" _type="PauseCommand" date="Sat Feb 25 03:14:03 EST 2023" range="30s-1m" starttimestamp="1677312753280" timestamp="90087">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[34336]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="4" _type="MoveCaretCommand" caretOffset="174" date="Sat Feb 25 03:14:03 EST 2023" docOffset="1054" starttimestamp="1677312753280" timestamp="90086" />
  <Command __id="6" _type="SelectTextCommand" caretOffset="178" date="Sat Feb 25 03:14:03 EST 2023" end="178" start="169" starttimestamp="1677312753280" timestamp="90310" />
  <Command __id="7" _type="MoveCaretCommand" caretOffset="189" date="Sat Feb 25 03:14:04 EST 2023" docOffset="1069" starttimestamp="1677312753280" timestamp="91052" />
  <Command __id="8" _type="SelectTextCommand" caretOffset="198" date="Sat Feb 25 03:14:04 EST 2023" end="198" start="184" starttimestamp="1677312753280" timestamp="91273" />
  <Command __id="10" _type="PauseCommand" date="Sat Feb 25 03:14:32 EST 2023" range="20s-30s" starttimestamp="1677312753280" timestamp="119277">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[28004]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="9" _type="MoveCaretCommand" caretOffset="6154" date="Sat Feb 25 03:14:32 EST 2023" docOffset="7034" starttimestamp="1677312753280" timestamp="119277" />
  <Command __id="12" _type="PauseCommand" date="Sat Feb 25 03:14:35 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="122609">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3332]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="11" _type="MoveCaretCommand" caretOffset="6154" date="Sat Feb 25 03:14:35 EST 2023" docOffset="7034" starttimestamp="1677312753280" timestamp="122609" />
  <Command __id="14" _type="PauseCommand" date="Sat Feb 25 03:14:39 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="126133">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3524]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="13" _type="MoveCaretCommand" caretOffset="6154" date="Sat Feb 25 03:14:39 EST 2023" docOffset="7034" starttimestamp="1677312753280" timestamp="126133" />
  <Command __id="16" _type="PauseCommand" date="Sat Feb 25 03:15:07 EST 2023" range="20s-30s" starttimestamp="1677312753280" timestamp="154114">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[27981]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15" _type="ShellCommand" date="Sat Feb 25 03:15:07 EST 2023" starttimestamp="1677312753280" timestamp="154114" type="ECLIPSE_MINIMIZED" />
  <Command __id="17" _type="ShellCommand" date="Sat Feb 25 03:15:07 EST 2023" starttimestamp="1677312753280" timestamp="154129" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="19" _type="PauseCommand" date="Sat Feb 25 03:15:14 EST 2023" range="5s-10s" starttimestamp="1677312753280" timestamp="161624">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[7495]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="18" _type="ShellCommand" date="Sat Feb 25 03:15:14 EST 2023" starttimestamp="1677312753280" timestamp="161624" type="ECLIPSE_MAXIMIZED" />
  <Command __id="20" _type="ShellCommand" date="Sat Feb 25 03:15:14 EST 2023" starttimestamp="1677312753280" timestamp="161662" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="22" _type="PauseCommand" date="Sat Feb 25 03:17:22 EST 2023" range="2m-5m" starttimestamp="1677312753280" timestamp="289330">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[127668]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="21" _type="MoveCaretCommand" caretOffset="237" date="Sat Feb 25 03:17:22 EST 2023" docOffset="1117" starttimestamp="1677312753280" timestamp="289330" />
  <Command __id="24" _type="PauseCommand" date="Sat Feb 25 03:17:51 EST 2023" range="20s-30s" starttimestamp="1677312753280" timestamp="317995">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[28665]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="23" _type="MoveCaretCommand" caretOffset="2484" date="Sat Feb 25 03:17:51 EST 2023" docOffset="3364" starttimestamp="1677312753280" timestamp="317995" />
  <Command __id="26" _type="PauseCommand" date="Sat Feb 25 03:17:52 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="319038">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1043]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="25" _type="MoveCaretCommand" caretOffset="2527" date="Sat Feb 25 03:17:52 EST 2023" docOffset="3407" starttimestamp="1677312753280" timestamp="319038" />
  <Command __id="27" _type="SelectTextCommand" caretOffset="2531" date="Sat Feb 25 03:17:52 EST 2023" end="2531" start="2521" starttimestamp="1677312753280" timestamp="319263" />
  <Command __id="29" _type="PauseCommand" date="Sat Feb 25 03:17:57 EST 2023" range="5s-10s" starttimestamp="1677312753280" timestamp="324361">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[5098]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="28" _type="MoveCaretCommand" caretOffset="2482" date="Sat Feb 25 03:17:57 EST 2023" docOffset="3362" starttimestamp="1677312753280" timestamp="324361" />
  <Command __id="30" _type="SelectTextCommand" caretOffset="2487" date="Sat Feb 25 03:17:58 EST 2023" end="2487" start="2478" starttimestamp="1677312753280" timestamp="324797" />
  <Command __id="31" _type="SelectTextCommand" caretOffset="2499" date="Sat Feb 25 03:17:58 EST 2023" end="2499" start="2460" starttimestamp="1677312753280" timestamp="325020" />
  <Command __id="32" _type="MoveCaretCommand" caretOffset="2482" date="Sat Feb 25 03:17:58 EST 2023" docOffset="3362" starttimestamp="1677312753280" timestamp="325575" />
  <Command __id="34" _type="PauseCommand" date="Sat Feb 25 03:18:01 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="328421">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2846]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="33" _type="MoveCaretCommand" caretOffset="2396" date="Sat Feb 25 03:18:01 EST 2023" docOffset="3276" starttimestamp="1677312753280" timestamp="328421" />
  <Command __id="35" _type="SelectTextCommand" caretOffset="2401" date="Sat Feb 25 03:18:01 EST 2023" end="2401" start="2392" starttimestamp="1677312753280" timestamp="328647" />
  <Command __id="37" _type="PauseCommand" date="Sat Feb 25 03:18:04 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="331670">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[3023]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="36" _type="MoveCaretCommand" caretOffset="2513" date="Sat Feb 25 03:18:04 EST 2023" docOffset="3393" starttimestamp="1677312753280" timestamp="331670" />
  <Command __id="39" _type="PauseCommand" date="Sat Feb 25 03:18:06 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="332777">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1107]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="38" _type="MoveCaretCommand" caretOffset="2397" date="Sat Feb 25 03:18:06 EST 2023" docOffset="3277" starttimestamp="1677312753280" timestamp="332777" />
  <Command __id="41" _type="PauseCommand" date="Sat Feb 25 03:18:29 EST 2023" range="20s-30s" starttimestamp="1677312753280" timestamp="356340">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[23563]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="40" _type="MoveCaretCommand" caretOffset="2417" date="Sat Feb 25 03:18:29 EST 2023" docOffset="3297" starttimestamp="1677312753280" timestamp="356340" />
  <Command __id="42" _type="MoveCaretCommand" caretOffset="2416" date="Sat Feb 25 03:18:30 EST 2023" docOffset="3296" starttimestamp="1677312753280" timestamp="357215" />
  <Command __id="44" _type="PauseCommand" date="Sat Feb 25 03:19:21 EST 2023" range="30s-1m" starttimestamp="1677312753280" timestamp="408292">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[51077]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="43" _type="SelectTextCommand" caretOffset="2450" date="Sat Feb 25 03:19:21 EST 2023" end="2450" start="2397" starttimestamp="1677312753280" timestamp="408292" />
  <Command __id="45" _type="SelectTextCommand" caretOffset="2443" date="Sat Feb 25 03:19:22 EST 2023" end="2450" start="2443" starttimestamp="1677312753280" timestamp="408971" />
  <Command __id="46" _type="MoveCaretCommand" caretOffset="2443" date="Sat Feb 25 03:19:22 EST 2023" docOffset="3323" starttimestamp="1677312753280" timestamp="409366" />
  <Command __id="48" _type="PauseCommand" date="Sat Feb 25 03:19:24 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="411665">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2299]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="47" _type="SelectTextCommand" caretOffset="2446" date="Sat Feb 25 03:19:24 EST 2023" end="2446" start="2437" starttimestamp="1677312753280" timestamp="411665" />
  <Command __id="50" _type="PauseCommand" date="Sat Feb 25 03:19:29 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="415796">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[4131]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="49" _type="MoveCaretCommand" caretOffset="2454" date="Sat Feb 25 03:19:29 EST 2023" docOffset="3334" starttimestamp="1677312753280" timestamp="415796" />
  <Command __id="51" _type="SelectTextCommand" caretOffset="2454" date="Sat Feb 25 03:19:29 EST 2023" end="2454" start="2448" starttimestamp="1677312753280" timestamp="416022" />
  <Command __id="53" _type="PauseCommand" date="Sat Feb 25 03:19:31 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="417723">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1701]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="52" _type="MoveCaretCommand" caretOffset="2456" date="Sat Feb 25 03:19:31 EST 2023" docOffset="3336" starttimestamp="1677312753280" timestamp="417723" />
  <Command __id="55" _type="PauseCommand" date="Sat Feb 25 03:19:32 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="419175">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1452]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="54" _type="MoveCaretCommand" caretOffset="2447" date="Sat Feb 25 03:19:32 EST 2023" docOffset="3327" starttimestamp="1677312753280" timestamp="419175" />
  <Command __id="56" _type="SelectTextCommand" caretOffset="2454" date="Sat Feb 25 03:19:32 EST 2023" end="2454" start="2448" starttimestamp="1677312753280" timestamp="419306" />
  <Command __id="57" _type="SelectTextCommand" caretOffset="2460" date="Sat Feb 25 03:19:32 EST 2023" end="2460" start="2414" starttimestamp="1677312753280" timestamp="419523" />
  <Command __id="59" _type="PauseCommand" date="Sat Feb 25 03:19:37 EST 2023" range="5s-10s" starttimestamp="1677312753280" timestamp="424596">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[5073]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="58" _type="MoveCaretCommand" caretOffset="2440" date="Sat Feb 25 03:19:37 EST 2023" docOffset="3320" starttimestamp="1677312753280" timestamp="424596" />
  <Command __id="61" _type="PauseCommand" date="Sat Feb 25 03:19:44 EST 2023" range="5s-10s" starttimestamp="1677312753280" timestamp="431032">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[6436]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="60" _type="MoveCaretCommand" caretOffset="2480" date="Sat Feb 25 03:19:44 EST 2023" docOffset="3360" starttimestamp="1677312753280" timestamp="431032" />
  <Command __id="62" _type="SelectTextCommand" caretOffset="2487" date="Sat Feb 25 03:19:44 EST 2023" end="2487" start="2478" starttimestamp="1677312753280" timestamp="431247" />
  <Command __id="64" _type="PauseCommand" date="Sat Feb 25 03:19:51 EST 2023" range="5s-10s" starttimestamp="1677312753280" timestamp="438596">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[7349]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="63" _type="MoveCaretCommand" caretOffset="2365" date="Sat Feb 25 03:19:51 EST 2023" docOffset="3245" starttimestamp="1677312753280" timestamp="438596" />
  <Command __id="66" _type="PauseCommand" date="Sat Feb 25 03:19:52 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="439713">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1116]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="65" _type="MoveCaretCommand" caretOffset="2400" date="Sat Feb 25 03:19:52 EST 2023" docOffset="3280" starttimestamp="1677312753280" timestamp="439712" />
  <Command __id="67" _type="SelectTextCommand" caretOffset="2401" date="Sat Feb 25 03:19:53 EST 2023" end="2401" start="2392" starttimestamp="1677312753280" timestamp="439886" />
  <Command __id="68" _type="SelectTextCommand" caretOffset="2414" date="Sat Feb 25 03:19:53 EST 2023" end="2414" start="2374" starttimestamp="1677312753280" timestamp="440115" />
  <Command __id="70" _type="PauseCommand" date="Sat Feb 25 03:19:55 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="442287">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[2172]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="69" _type="MoveCaretCommand" caretOffset="2442" date="Sat Feb 25 03:19:55 EST 2023" docOffset="3322" starttimestamp="1677312753280" timestamp="442287" />
  <Command __id="71" _type="SelectTextCommand" caretOffset="2447" date="Sat Feb 25 03:19:55 EST 2023" end="2447" start="2437" starttimestamp="1677312753280" timestamp="442424" />
  <Command __id="72" _type="SelectTextCommand" caretOffset="2460" date="Sat Feb 25 03:19:55 EST 2023" end="2460" start="2414" starttimestamp="1677312753280" timestamp="442557" />
  <Command __id="73" _type="SelectTextCommand" caretOffset="2430" date="Sat Feb 25 03:19:56 EST 2023" end="2430" start="2414" starttimestamp="1677312753280" timestamp="442777" />
  <Command __id="74" _type="MoveCaretCommand" caretOffset="2442" date="Sat Feb 25 03:19:56 EST 2023" docOffset="3322" starttimestamp="1677312753280" timestamp="443450" />
  <Command __id="75" _type="SelectTextCommand" caretOffset="2447" date="Sat Feb 25 03:19:56 EST 2023" end="2447" start="2437" starttimestamp="1677312753280" timestamp="443614" />
  <Command __id="76" _type="SelectTextCommand" caretOffset="2460" date="Sat Feb 25 03:19:57 EST 2023" end="2460" start="2414" starttimestamp="1677312753280" timestamp="443832" />
  <Command __id="78" _type="PauseCommand" date="Sat Feb 25 03:20:11 EST 2023" range="10s-20s" starttimestamp="1677312753280" timestamp="458516">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[14684]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="77" _type="MoveCaretCommand" caretOffset="2609" date="Sat Feb 25 03:20:11 EST 2023" docOffset="3489" starttimestamp="1677312753280" timestamp="458516" />
  <Command __id="80" _type="PauseCommand" date="Sat Feb 25 03:21:00 EST 2023" range="30s-1m" starttimestamp="1677312753280" timestamp="507433">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[48917]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="79" _type="ShellCommand" date="Sat Feb 25 03:21:00 EST 2023" starttimestamp="1677312753280" timestamp="507433" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="82" _type="PauseCommand" date="Sat Feb 25 04:06:12 EST 2023" range="30m-1h" starttimestamp="1677312753280" timestamp="3219520">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2712086]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="81" _type="ShellCommand" date="Sat Feb 25 04:06:12 EST 2023" starttimestamp="1677312753280" timestamp="3219519" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="84" _type="PauseCommand" date="Sat Feb 25 04:06:14 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="3221292">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1773]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="83" _type="ShellCommand" date="Sat Feb 25 04:06:14 EST 2023" starttimestamp="1677312753280" timestamp="3221292" type="ECLIPSE_MINIMIZED" />
  <Command __id="85" _type="ShellCommand" date="Sat Feb 25 04:06:14 EST 2023" starttimestamp="1677312753280" timestamp="3221300" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="87" _type="PauseCommand" date="Sat Feb 25 10:31:57 EST 2023" range=">1h" starttimestamp="1677312753280" timestamp="26364343">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[23143043]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[BalloonCommand]]></next>
  </Command>
  <Command __id="86" _type="BalloonCommand" date="Sat Feb 25 10:31:57 EST 2023" message="*******************************************
Worked 0 minutes(fixed)/6 minutes(context based) from
Sat Feb 25 03:12:49 EST 2023 to Sat Feb 25 04:06:14 EST 2023
Edited 0 Projects: 
Edited 0 Files: 
Number of insert: 0
Number of delete: 0
" starttimestamp="1677312753280" timestamp="26364343">
    <fineGrainedWorkTime><![CDATA[6]]></fineGrainedWorkTime>
    <insert><![CDATA[0]]></insert>
    <startTime><![CDATA[1677312769234]]></startTime>
    <endTime><![CDATA[1677315974580]]></endTime>
    <workTime><![CDATA[0]]></workTime>
    <delete><![CDATA[0]]></delete>
  </Command>
  <Command __id="89" _type="PauseCommand" date="Sat Feb 25 10:37:34 EST 2023" range="5m-10m" starttimestamp="1677312753280" timestamp="26700828">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[BalloonCommand]]></prev>
    <pause><![CDATA[336485]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="88" _type="ShellCommand" date="Sat Feb 25 10:37:34 EST 2023" starttimestamp="1677312753280" timestamp="26700828" type="ECLIPSE_MAXIMIZED" />
  <Command __id="90" _type="ShellCommand" date="Sat Feb 25 10:37:34 EST 2023" starttimestamp="1677312753280" timestamp="26701100" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="92" _type="PauseCommand" date="Sat Feb 25 10:37:49 EST 2023" range="10s-20s" starttimestamp="1677312753280" timestamp="26715766">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[14666]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="91" _type="MoveCaretCommand" caretOffset="5530" date="Sat Feb 25 10:37:49 EST 2023" docOffset="6410" starttimestamp="1677312753280" timestamp="26715766" />
  <Command __id="94" _type="PauseCommand" date="Sat Feb 25 10:38:01 EST 2023" range="10s-20s" starttimestamp="1677312753280" timestamp="26728355">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[12589]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="93" _type="MoveCaretCommand" caretOffset="5964" date="Sat Feb 25 10:38:01 EST 2023" docOffset="6844" starttimestamp="1677312753280" timestamp="26728355" />
  <Command __id="96" _type="PauseCommand" date="Sat Feb 25 10:43:25 EST 2023" range="5m-10m" starttimestamp="1677312753280" timestamp="27052020">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[323664]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="95" _type="MoveCaretCommand" caretOffset="5816" date="Sat Feb 25 10:43:25 EST 2023" docOffset="6696" starttimestamp="1677312753280" timestamp="27052019" />
  <Command __id="0" _type="DiffBasedFileOpenCommand" date="Sat Feb 25 03:12:49 EST 2023" docASTNodeCount="1675" docActiveCodeLength="9773" docExpressionCount="1160" docLength="10344" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="15954">
    <filePath><![CDATA[C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\graphics\AProducerConsumerScene.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package graphics;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

import animations.ACookingPlateAnimator;
import animations.ACookingPlateCommand;
import animations.AServingPlateAnimator;
import animations.AServingPlateCommand;
import animations.CookingPlateAnimator;
import animations.ServingPlateAnimator;
import bus.uigen.OEFrame;
import bus.uigen.ObjectEditor;
import bus.uigen.shapes.ALineModel;
import bus.uigen.shapes.AStringModel;
import bus.uigen.shapes.AnImageModel;
import bus.uigen.shapes.OEShapeModel;
import shapes.FlexibleTextShape;
import util.annotations.EditablePropertyNames;
import util.annotations.Label;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Visible;
import util.misc.ThreadSupport;

import java.awt.Color;

@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({
	"patronList",
	"chefList",
	"buffer",
	"plateList",
	"otherPlateList",
	"bellsList",
	"queueBellList"
})
@EditablePropertyNames({
})
public class AProducerConsumerScene implements ProducerConsumerScene {
	
	//Avatar offsets inside scene
	int[] chefXValues = {120,-50,-50,120};
	int[] chefYValues = {-50,35,210,320};
	int[] patronXValues = {650,850,850,650};
	int[] patronYValues = {-50,35,220,320};
	int[] bellXValues = {680,880,880,680};
	int[] bellYValues = {75,160,345,445};
	int INIT_HEAD_Y = 60;
	int INIT_HEAD_X = 163;
	int INIT_HEAD_HEIGHT = 90;
	int INIT_HEAD_WIDTH = 80;
	int PLATE_OFFSET_X = 30;
	int PLATE_OFFSET_Y = 10;
	int PAUSE = 5;
	
	//Booleans that help with the functionality of the below methods
	boolean INIT_COOK = true;
	boolean full = false;
	int fullPlateOffset = -5;
	
	//Defining the chef and patron images
	String[] chefImages = {"images/0.png","images/1.png","images/2.png","images/3.png"};
	String[] patronImages = {"images/4.png", "images/5.png", "images/6.png", "images/7.png"};
	
	//Buffer arrays
	int[] bufferXValues = {625, 680, 680, 620, 535, 460, 460, 535};
	int[] bufferYValues = {200, 275, 365, 425, 425, 365, 275, 200};
	boolean[] isFull = {false, false, false, false, false, false, false, false};
	
	//The properties of our class
	List<APatron> patronList;
	List<AChef> chefList;
	BoundedBuffer buffer = new ABoundedBuffer();
	List<APlate> plateList;
	Queue<APlate> otherPlateList;
	
	OEShapeModel[] lineArray = {buffer.getLineTwo(), buffer.getLineThree(), buffer.getLineFour(), 
								buffer.getLineFive(), buffer.getLineSix(), buffer.getLineSeven(), 
								buffer.getLineEight(), buffer.getLineOne()};
	
	List<ABell> bellsList;
	Queue<ABell> queueBellList;
	int[] bellValues = {127, 212, 397, 497};
	Queue<Integer> bellIntegerList;
	
	ACookingPlateCommand cookingCommand;
	CookingPlateAnimator cookingAnimator;
	
	AServingPlateCommand servingCommand;
	ServingPlateAnimator servingAnimator;
	
	//The constructor sets the scene with one chef, patron, a buffer, and a plate (not visible)
	public AProducerConsumerScene() {
		patronList = new ArrayList<APatron>();
		chefList = new ArrayList<AChef>();
		//buffer = new ABoundedBuffer();
		plateList = new ArrayList<APlate>();
		otherPlateList = new LinkedList<APlate>();
		bellsList = new ArrayList<ABell>();
		queueBellList = new LinkedList<ABell>();
		bellIntegerList = new LinkedList<Integer>();
		
		patronList.add(0, new APatron());
		OEShapeModel initPatronHead = new AnImageModel(patronImages[0]);
		initPatronHead.setX(INIT_HEAD_X);
		initPatronHead.setY(INIT_HEAD_Y);
		initPatronHead.setHeight(INIT_HEAD_HEIGHT);
		initPatronHead.setWidth(INIT_HEAD_WIDTH);
		patronList.get(0).patron.setHead(initPatronHead);
		patronList.get(0).move(patronXValues[0], patronYValues[0]);
		
		chefList.add(0, new AChef());
		OEShapeModel initChefHead = new AnImageModel(chefImages[0]);
		initChefHead.setX(INIT_HEAD_X);
		initChefHead.setY(INIT_HEAD_Y);
		initChefHead.setHeight(INIT_HEAD_HEIGHT);
		initChefHead.setWidth(INIT_HEAD_WIDTH);
		chefList.get(0).chef.setHead(initChefHead);
		chefList.get(0).move(chefXValues[0], chefYValues[0]);
		
		plateList.add(new APlate());
		plateList.get(0).getPlate().setHeight(0);
		plateList.get(0).getPlate().setWidth(0);
		
		otherPlateList.add(new APlate());
		otherPlateList.peek().getPlate().setHeight(0);
		otherPlateList.peek().getPlate().setWidth(0);
		
		cookingAnimator = new ACookingPlateAnimator();
		servingAnimator = new AServingPlateAnimator();
		
		bellsList.add(new ABell());
		bellsList.get(0).getBell().setHeight(0);
		bellsList.get(0).getBell().setWidth(0);
		
		queueBellList.add(new ABell());
		queueBellList.peek().getBell().setHeight(0);
		queueBellList.peek().getBell().setWidth(0);
		
		bellIntegerList.add(0);
	}
	
	//Producer consumer methods
	
	//Init Scene sets the number of patrons and chefs in the scene
	@Label("Init Scene")
	public void initScene(int patronAmount, int chefAmount) {
		bellsList.clear();
		for (int i=0; i<patronAmount; i++) { 
			APatron patron = new APatron();
			patronList.add(i, patron);
			OEShapeModel newHead = new AnImageModel(patronImages[i]);
			patron.patron.setHead(newHead); 
			newHead.setX(INIT_HEAD_X); 
			newHead.setY(INIT_HEAD_Y);
			newHead.setHeight(INIT_HEAD_HEIGHT);
			newHead.setWidth(INIT_HEAD_WIDTH);
			patron.move(patronXValues[i], patronYValues[i]);
			
			bellsList.add(new ABell());
			bellsList.get(i).move(bellXValues[i], bellYValues[i]);
		}
		for (int i=0; i<chefAmount; i++) {
			AChef chef = new AChef();
			chefList.add(i, chef);
			OEShapeModel newHead = new AnImageModel(chefImages[i]);
			chef.chef.setHead(newHead);
			newHead.setX(INIT_HEAD_X); 
			newHead.setY(INIT_HEAD_Y);
			newHead.setHeight(INIT_HEAD_HEIGHT);
			newHead.setWidth(INIT_HEAD_WIDTH);
			chef.move(chefXValues[i], chefYValues[i]);
		}
	}
	
	//Once the head of an avatar is chosen, it makes the plate that they "cook" appear
	public void cook(OEShapeModel head) {
		if (INIT_COOK) {
			INIT_COOK=!INIT_COOK;
			plateList.remove(0);
			otherPlateList.remove();
		}
		
		int headX = head.getCenterX();
		int headY = head.getCenterY();
		APlate newPlate = new APlate(plateList.size()+1);
		newPlate.getPlate().setHeight(0);
		newPlate.getPlate().setWidth(0);
		plateList.add(newPlate);
		otherPlateList.add(newPlate);
		
		if (full) {
			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y+fullPlateOffset);
			fullPlateOffset = fullPlateOffset - 5;
		} else {
			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y);
		}
		
		cookingCommand = new ACookingPlateCommand(cookingAnimator, newPlate, 40, 15);
		Thread thread = new Thread (cookingCommand);
		thread.start();
	}
	
	public void serve() {
		//Checks to see if the buffer is full. If it is, then can't serve.
		resetLineColors();
		if(checkIfFull()) {
			resetLineColors();
			return;
		}
		
		Plate workingPlate = otherPlateList.peek();
		int workingPlatePlace = Integer.valueOf(workingPlate.getText().getText())-1;
		changeLineColors(workingPlatePlace);
		servingCommand = new AServingPlateCommand(servingAnimator,workingPlate,PAUSE, bufferXValues[workingPlatePlace], bufferYValues[workingPlatePlace]);
		Thread thread = new Thread(servingCommand);
		thread.start();
		isFull[workingPlatePlace] = true;
		otherPlateList.remove();
	}
	
	public void order(OEShapeModel bell) {
		if(checkIfFull()) {
			resetLineColors();
			resetBuffer();
		}
		bellIntegerList.add(0);
		int bellPlace = findBell(bell.getCenterY());
		bellsList.get(bellPlace).getText().setText(String.valueOf(bellIntegerList.size()-1));
		
		int platePlace = findFirstAvailablePlate();
		servingCommand = new AServingPlateCommand(servingAnimator,plateList.get(platePlace),PAUSE, bell.getCenterX() , bell.getCenterY());
		Thread thread = new Thread(servingCommand);
		thread.start();
		
		cookingCommand = new ACookingPlateCommand(cookingAnimator, plateList.get(0), 0, 15);
		Thread eatingThread = new Thread (cookingCommand);
		eatingThread.start();
		plateList.get(0).getText().setText("");
	}
	
	public void eat() {
		plateList.remove(0);
	}
	
	@Override
	@Visible(false)
	public int findBell(int centerY) {
		for(int i=0; i<bellsList.size();i++) {
			if(bellsList.get(i).getBell().getCenterY() == centerY) {
				return i;
			}
		}
		return 0;
	}
	
	@Override
	@Visible(false)
	public int findFirstAvailablePlate() {
		for (int i=0; i<isFull.length;i++) {
			if(isFull[i] == true) {
				return i;
			}
		}
		return 0;
	}
	
	@Override
	@Visible(false)
	public void resetBuffer() {
		
		for (int i=0; i<isFull.length;i++) {
			isFull[i] = false;
		}
	}
	
	@Override
	@Visible(false)
	public int findPatron(OEShapeModel patronHead) {
		return 0;
	}
	
	@Override
	@Visible(false)
	public boolean checkIfFull() {
		for (int i=0; i<isFull.length;i++) {
			if (isFull[i] == false) {
				full = false;
				return full;
			}
		}
		full = true;
		return full;
	}
	
	@Override
	@Visible(false)
	public void changeLineColors(int workingPlatePlace) {
		if(workingPlatePlace == lineArray.length-1) {
			lineArray[workingPlatePlace].setColor(Color.GREEN);
			lineArray[0].setColor(Color.GREEN);
		} else {
			lineArray[workingPlatePlace].setColor(Color.GREEN);
			lineArray[workingPlatePlace+1].setColor(Color.GREEN);
		}
	}
	
	
	@Override
	@Visible(false)
	public void resetLineColors() {
		for (int i=0; i<lineArray.length; i++) {
			lineArray[i].setColor(Color.WHITE);
		}
	}
	
	//Getters for properties of the scene
	@Override
	public List<AChef> getChefList() {
		return chefList;
	}
	
	@Override
	public List<APatron> getPatronList() {
		return patronList;
	}
	
	@Override
	public BoundedBuffer getBuffer() {
		return buffer;
	}
	
	@Override
	public List<APlate> getPlateList() {
		return plateList;
	}	
	
	@Override
	@util.annotations.Visible(false)
	public Queue<APlate> getOtherPlateList() {
		return otherPlateList;
	}
	
	@Override
	public List<ABell> getBellsList() {
		return bellsList;
	}
	
	@Override
	@Visible(false)
	public Queue<ABell> getQueueBellList() {
		return queueBellList;
	}
}
]]></snapshot>
  </Command>
  <Command __id="98" _type="PauseCommand" date="Sat Feb 25 10:43:26 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27053064">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1045]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="99" _type="InsertStringCommand" date="Sat Feb 25 10:43:26 EST 2023" starttimestamp="1677312753280" timestamp="27053195" timestamp2="27053195">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="102" _type="PauseCommand" date="Sat Feb 25 10:43:27 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27054213">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1018]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="101" _type="InsertStringCommand" date="Sat Feb 25 10:43:27 EST 2023" starttimestamp="1677312753280" timestamp="27054213" timestamp2="27054213">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="104" _type="InsertStringCommand" date="Sat Feb 25 10:43:27 EST 2023" starttimestamp="1677312753280" timestamp="27054331" timestamp2="27054331">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="106" _type="InsertStringCommand" date="Sat Feb 25 10:43:27 EST 2023" starttimestamp="1677312753280" timestamp="27054512" timestamp2="27054512">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="108" _type="InsertStringCommand" date="Sat Feb 25 10:43:28 EST 2023" starttimestamp="1677312753280" timestamp="27054943" timestamp2="27054943">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="110" _type="InsertStringCommand" date="Sat Feb 25 10:43:28 EST 2023" starttimestamp="1677312753280" timestamp="27055188" timestamp2="27055188">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="112" _type="InsertStringCommand" date="Sat Feb 25 10:43:28 EST 2023" starttimestamp="1677312753280" timestamp="27055310" timestamp2="27055310">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="114" _type="InsertStringCommand" date="Sat Feb 25 10:43:28 EST 2023" starttimestamp="1677312753280" timestamp="27055446" timestamp2="27055446">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="116" _type="InsertStringCommand" date="Sat Feb 25 10:43:28 EST 2023" starttimestamp="1677312753280" timestamp="27055590" timestamp2="27055590">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="118" _type="InsertStringCommand" date="Sat Feb 25 10:43:29 EST 2023" starttimestamp="1677312753280" timestamp="27055724" timestamp2="27055724">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="119" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sat Feb 25 10:43:29 EST 2023" start_end="START" starttimestamp="1677312753280" timestamp="27055833" />
  <Command __id="124" _type="PauseCommand" date="Sat Feb 25 10:43:32 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="27058796">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[2963]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <DocumentChange __id="97" _type="Insert" date="Sat Feb 25 10:43:26 EST 2023" docASTNodeCount="1679" docActiveCodeLength="9789" docExpressionCount="1162" docLength="10360" length="16" offset="6696" repeat="13" starttimestamp="1677312753280" timestamp="27053064" timestamp2="27057092">
    <text><![CDATA[
		newPlate.get]]></text>
  </DocumentChange>
  <DocumentChange __id="125" _type="Replace" date="Sat Feb 25 10:43:32 EST 2023" docASTNodeCount="1679" docActiveCodeLength="9796" docExpressionCount="1163" docLength="10367" endLine="202" insertionLength="10" int_docASTNodeCount="1677" int_docActiveCodeLength="9786" int_docExpressionCount="1162" int_docLength="10357" length="3" offset="6709" startLine="202" starttimestamp="1677312753280" timestamp="27058858">
    <deletedText><![CDATA[get]]></deletedText>
    <insertedText><![CDATA[getClass()]]></insertedText>
  </DocumentChange>
  <Command __id="123" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sat Feb 25 10:43:32 EST 2023" start_end="END" starttimestamp="1677312753280" timestamp="27058796" />
  <Command __id="126" _type="InsertStringCommand" date="Sat Feb 25 10:43:32 EST 2023" starttimestamp="1677312753280" timestamp="27058986" timestamp2="27058986">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="128" _type="InsertStringCommand" date="Sat Feb 25 10:43:33 EST 2023" starttimestamp="1677312753280" timestamp="27059983" timestamp2="27059983">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="129" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sat Feb 25 10:43:33 EST 2023" start_end="START" starttimestamp="1677312753280" timestamp="27059991" />
  <Command __id="134" _type="PauseCommand" date="Sat Feb 25 10:44:00 EST 2023" range="20s-30s" starttimestamp="1677312753280" timestamp="27086889">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[26898]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="133" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sat Feb 25 10:44:00 EST 2023" start_end="END" starttimestamp="1677312753280" timestamp="27086889" />
  <Command __id="136" _type="PauseCommand" date="Sat Feb 25 10:44:01 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27088392">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[1503]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="159" _type="EclipseCommand" commandID="" date="Sat Feb 25 10:45:20 EST 2023" starttimestamp="1677312753280" timestamp="27167231" />
  <Command __id="161" _type="EclipseCommand" commandID="" date="Sat Feb 25 10:45:20 EST 2023" starttimestamp="1677312753280" timestamp="27167235" />
  <Command __id="162" _type="EclipseCommand" commandID="" date="Sat Feb 25 10:45:20 EST 2023" starttimestamp="1677312753280" timestamp="27167257" />
  <Command __id="163" _type="EclipseCommand" commandID="" date="Sat Feb 25 10:45:20 EST 2023" starttimestamp="1677312753280" timestamp="27167259" />
  <Command __id="164" _type="EclipseCommand" commandID="" date="Sat Feb 25 10:45:20 EST 2023" starttimestamp="1677312753280" timestamp="27167387" />
  <Command __id="165" _type="EclipseCommand" commandID="" date="Sat Feb 25 10:45:20 EST 2023" starttimestamp="1677312753280" timestamp="27167389" />
  <Command __id="166" _type="EclipseCommand" commandID="" date="Sat Feb 25 10:45:21 EST 2023" starttimestamp="1677312753280" timestamp="27167739" />
  <Command __id="167" _type="EclipseCommand" commandID="" date="Sat Feb 25 10:45:21 EST 2023" starttimestamp="1677312753280" timestamp="27167742" />
  <Command __id="168" _type="EclipseCommand" commandID="" date="Sat Feb 25 10:45:21 EST 2023" starttimestamp="1677312753280" timestamp="27167763" />
  <Command __id="169" _type="EclipseCommand" commandID="" date="Sat Feb 25 10:45:21 EST 2023" starttimestamp="1677312753280" timestamp="27167769" />
  <Command __id="170" _type="EclipseCommand" commandID="" date="Sat Feb 25 10:45:21 EST 2023" starttimestamp="1677312753280" timestamp="27167874" />
  <Command __id="171" _type="EclipseCommand" commandID="" date="Sat Feb 25 10:45:21 EST 2023" starttimestamp="1677312753280" timestamp="27167875" />
  <Command __id="172" _type="EclipseCommand" commandID="" date="Sat Feb 25 10:45:21 EST 2023" starttimestamp="1677312753280" timestamp="27167892" />
  <Command __id="173" _type="EclipseCommand" commandID="" date="Sat Feb 25 10:45:21 EST 2023" starttimestamp="1677312753280" timestamp="27167893" />
  <Command __id="174" _type="EclipseCommand" commandID="" date="Sat Feb 25 10:45:21 EST 2023" starttimestamp="1677312753280" timestamp="27167910" />
  <Command __id="175" _type="ShellCommand" date="Sat Feb 25 10:45:21 EST 2023" starttimestamp="1677312753280" timestamp="27168011" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="177" _type="PauseCommand" date="Sat Feb 25 10:45:23 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="27170232">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2221]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="176" _type="ShellCommand" date="Sat Feb 25 10:45:23 EST 2023" starttimestamp="1677312753280" timestamp="27170232" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="179" _type="PauseCommand" date="Sat Feb 25 10:45:30 EST 2023" range="5s-10s" starttimestamp="1677312753280" timestamp="27177485">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[7253]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[CopyCommand]]></next>
  </Command>
  <Command __id="178" _type="CopyCommand" date="Sat Feb 25 10:45:30 EST 2023" starttimestamp="1677312753280" timestamp="27177485" />
  <Command __id="181" _type="PauseCommand" date="Sat Feb 25 10:45:40 EST 2023" range="5s-10s" starttimestamp="1677312753280" timestamp="27187239">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[9754]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="180" _type="ShellCommand" date="Sat Feb 25 10:45:40 EST 2023" starttimestamp="1677312753280" timestamp="27187239" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="183" _type="PauseCommand" date="Sat Feb 25 10:45:43 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="27190563">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3323]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="182" _type="ShellCommand" date="Sat Feb 25 10:45:43 EST 2023" starttimestamp="1677312753280" timestamp="27190562" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="184" _type="PasteCommand" date="Sat Feb 25 10:45:44 EST 2023" starttimestamp="1677312753280" timestamp="27190961" />
  <Command __id="185" _type="EclipseCommand" commandID="" date="Sat Feb 25 10:45:44 EST 2023" starttimestamp="1677312753280" timestamp="27191094" />
  <Command __id="186" _type="EclipseCommand" commandID="" date="Sat Feb 25 10:45:44 EST 2023" starttimestamp="1677312753280" timestamp="27191214" />
  <DocumentChange __id="127" _type="Insert" date="Sat Feb 25 10:43:33 EST 2023" docASTNodeCount="1683" docActiveCodeLength="9800" docExpressionCount="1167" docLength="10371" length="4" offset="6719" repeat="4" starttimestamp="1677312753280" timestamp="27059914" timestamp2="27062709">
    <text><![CDATA[.get]]></text>
  </DocumentChange>
  <DocumentChange __id="137" _type="Delete" date="Sat Feb 25 10:44:02 EST 2023" docASTNodeCount="1675" docActiveCodeLength="9773" docExpressionCount="1160" docLength="10344" endLine="202" length="27" offset="6696" repeat="4" startLine="201" starttimestamp="1677312753280" timestamp="27089263" timestamp2="27090106">
    <text><![CDATA[
		newPlate.getClass().get]]></text>
  </DocumentChange>
  <Command __id="188" _type="PauseCommand" date="Sat Feb 25 10:45:48 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="27194912">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3698]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="189" _type="MoveCaretCommand" caretOffset="0" date="Sat Feb 25 10:45:48 EST 2023" docOffset="0" starttimestamp="1677312753280" timestamp="27195287" />
  <Command __id="187" _type="DiffBasedFileOpenCommand" date="Sat Feb 25 10:45:48 EST 2023" docASTNodeCount="1675" docActiveCodeLength="9775" docExpressionCount="1160" docLength="10346" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="27194912">
    <filePath><![CDATA[C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\graphics\AProducerConsumerScene2.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package graphics;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

import animations.ACookingPlateAnimator;
import animations.ACookingPlateCommand;
import animations.AServingPlateAnimator;
import animations.AServingPlateCommand;
import animations.CookingPlateAnimator;
import animations.ServingPlateAnimator;
import bus.uigen.OEFrame;
import bus.uigen.ObjectEditor;
import bus.uigen.shapes.ALineModel;
import bus.uigen.shapes.AStringModel;
import bus.uigen.shapes.AnImageModel;
import bus.uigen.shapes.OEShapeModel;
import shapes.FlexibleTextShape;
import util.annotations.EditablePropertyNames;
import util.annotations.Label;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Visible;
import util.misc.ThreadSupport;

import java.awt.Color;

@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({
	"patronList",
	"chefList",
	"buffer",
	"plateList",
	"otherPlateList",
	"bellsList",
	"queueBellList"
})
@EditablePropertyNames({
})
public class AProducerConsumerScene2 implements ProducerConsumerScene {
	
	//Avatar offsets inside scene
	int[] chefXValues = {120,-50,-50,120};
	int[] chefYValues = {-50,35,210,320};
	int[] patronXValues = {650,850,850,650};
	int[] patronYValues = {-50,35,220,320};
	int[] bellXValues = {680,880,880,680};
	int[] bellYValues = {75,160,345,445};
	int INIT_HEAD_Y = 60;
	int INIT_HEAD_X = 163;
	int INIT_HEAD_HEIGHT = 90;
	int INIT_HEAD_WIDTH = 80;
	int PLATE_OFFSET_X = 30;
	int PLATE_OFFSET_Y = 10;
	int PAUSE = 5;
	
	//Booleans that help with the functionality of the below methods
	boolean INIT_COOK = true;
	boolean full = false;
	int fullPlateOffset = -5;
	
	//Defining the chef and patron images
	String[] chefImages = {"images/0.png","images/1.png","images/2.png","images/3.png"};
	String[] patronImages = {"images/4.png", "images/5.png", "images/6.png", "images/7.png"};
	
	//Buffer arrays
	int[] bufferXValues = {625, 680, 680, 620, 535, 460, 460, 535};
	int[] bufferYValues = {200, 275, 365, 425, 425, 365, 275, 200};
	boolean[] isFull = {false, false, false, false, false, false, false, false};
	
	//The properties of our class
	List<APatron> patronList;
	List<AChef> chefList;
	BoundedBuffer buffer = new ABoundedBuffer();
	List<APlate> plateList;
	Queue<APlate> otherPlateList;
	
	OEShapeModel[] lineArray = {buffer.getLineTwo(), buffer.getLineThree(), buffer.getLineFour(), 
								buffer.getLineFive(), buffer.getLineSix(), buffer.getLineSeven(), 
								buffer.getLineEight(), buffer.getLineOne()};
	
	List<ABell> bellsList;
	Queue<ABell> queueBellList;
	int[] bellValues = {127, 212, 397, 497};
	Queue<Integer> bellIntegerList;
	
	ACookingPlateCommand cookingCommand;
	CookingPlateAnimator cookingAnimator;
	
	AServingPlateCommand servingCommand;
	ServingPlateAnimator servingAnimator;
	
	//The constructor sets the scene with one chef, patron, a buffer, and a plate (not visible)
	public AProducerConsumerScene2() {
		patronList = new ArrayList<APatron>();
		chefList = new ArrayList<AChef>();
		//buffer = new ABoundedBuffer();
		plateList = new ArrayList<APlate>();
		otherPlateList = new LinkedList<APlate>();
		bellsList = new ArrayList<ABell>();
		queueBellList = new LinkedList<ABell>();
		bellIntegerList = new LinkedList<Integer>();
		
		patronList.add(0, new APatron());
		OEShapeModel initPatronHead = new AnImageModel(patronImages[0]);
		initPatronHead.setX(INIT_HEAD_X);
		initPatronHead.setY(INIT_HEAD_Y);
		initPatronHead.setHeight(INIT_HEAD_HEIGHT);
		initPatronHead.setWidth(INIT_HEAD_WIDTH);
		patronList.get(0).patron.setHead(initPatronHead);
		patronList.get(0).move(patronXValues[0], patronYValues[0]);
		
		chefList.add(0, new AChef());
		OEShapeModel initChefHead = new AnImageModel(chefImages[0]);
		initChefHead.setX(INIT_HEAD_X);
		initChefHead.setY(INIT_HEAD_Y);
		initChefHead.setHeight(INIT_HEAD_HEIGHT);
		initChefHead.setWidth(INIT_HEAD_WIDTH);
		chefList.get(0).chef.setHead(initChefHead);
		chefList.get(0).move(chefXValues[0], chefYValues[0]);
		
		plateList.add(new APlate());
		plateList.get(0).getPlate().setHeight(0);
		plateList.get(0).getPlate().setWidth(0);
		
		otherPlateList.add(new APlate());
		otherPlateList.peek().getPlate().setHeight(0);
		otherPlateList.peek().getPlate().setWidth(0);
		
		cookingAnimator = new ACookingPlateAnimator();
		servingAnimator = new AServingPlateAnimator();
		
		bellsList.add(new ABell());
		bellsList.get(0).getBell().setHeight(0);
		bellsList.get(0).getBell().setWidth(0);
		
		queueBellList.add(new ABell());
		queueBellList.peek().getBell().setHeight(0);
		queueBellList.peek().getBell().setWidth(0);
		
		bellIntegerList.add(0);
	}
	
	//Producer consumer methods
	
	//Init Scene sets the number of patrons and chefs in the scene
	@Label("Init Scene")
	public void initScene(int patronAmount, int chefAmount) {
		bellsList.clear();
		for (int i=0; i<patronAmount; i++) { 
			APatron patron = new APatron();
			patronList.add(i, patron);
			OEShapeModel newHead = new AnImageModel(patronImages[i]);
			patron.patron.setHead(newHead); 
			newHead.setX(INIT_HEAD_X); 
			newHead.setY(INIT_HEAD_Y);
			newHead.setHeight(INIT_HEAD_HEIGHT);
			newHead.setWidth(INIT_HEAD_WIDTH);
			patron.move(patronXValues[i], patronYValues[i]);
			
			bellsList.add(new ABell());
			bellsList.get(i).move(bellXValues[i], bellYValues[i]);
		}
		for (int i=0; i<chefAmount; i++) {
			AChef chef = new AChef();
			chefList.add(i, chef);
			OEShapeModel newHead = new AnImageModel(chefImages[i]);
			chef.chef.setHead(newHead);
			newHead.setX(INIT_HEAD_X); 
			newHead.setY(INIT_HEAD_Y);
			newHead.setHeight(INIT_HEAD_HEIGHT);
			newHead.setWidth(INIT_HEAD_WIDTH);
			chef.move(chefXValues[i], chefYValues[i]);
		}
	}
	
	//Once the head of an avatar is chosen, it makes the plate that they "cook" appear
	public void cook(OEShapeModel head) {
		if (INIT_COOK) {
			INIT_COOK=!INIT_COOK;
			plateList.remove(0);
			otherPlateList.remove();
		}
		
		int headX = head.getCenterX();
		int headY = head.getCenterY();
		APlate newPlate = new APlate(plateList.size()+1);
		newPlate.getPlate().setHeight(0);
		newPlate.getPlate().setWidth(0);
		plateList.add(newPlate);
		otherPlateList.add(newPlate);
		
		if (full) {
			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y+fullPlateOffset);
			fullPlateOffset = fullPlateOffset - 5;
		} else {
			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y);
		}
		
		cookingCommand = new ACookingPlateCommand(cookingAnimator, newPlate, 40, 15);
		Thread thread = new Thread (cookingCommand);
		thread.start();
	}
	
	public void serve() {
		//Checks to see if the buffer is full. If it is, then can't serve.
		resetLineColors();
		if(checkIfFull()) {
			resetLineColors();
			return;
		}
		
		Plate workingPlate = otherPlateList.peek();
		int workingPlatePlace = Integer.valueOf(workingPlate.getText().getText())-1;
		changeLineColors(workingPlatePlace);
		servingCommand = new AServingPlateCommand(servingAnimator,workingPlate,PAUSE, bufferXValues[workingPlatePlace], bufferYValues[workingPlatePlace]);
		Thread thread = new Thread(servingCommand);
		thread.start();
		isFull[workingPlatePlace] = true;
		otherPlateList.remove();
	}
	
	public void order(OEShapeModel bell) {
		if(checkIfFull()) {
			resetLineColors();
			resetBuffer();
		}
		bellIntegerList.add(0);
		int bellPlace = findBell(bell.getCenterY());
		bellsList.get(bellPlace).getText().setText(String.valueOf(bellIntegerList.size()-1));
		
		int platePlace = findFirstAvailablePlate();
		servingCommand = new AServingPlateCommand(servingAnimator,plateList.get(platePlace),PAUSE, bell.getCenterX() , bell.getCenterY());
		Thread thread = new Thread(servingCommand);
		thread.start();
		
		cookingCommand = new ACookingPlateCommand(cookingAnimator, plateList.get(0), 0, 15);
		Thread eatingThread = new Thread (cookingCommand);
		eatingThread.start();
		plateList.get(0).getText().setText("");
	}
	
	public void eat() {
		plateList.remove(0);
	}
	
	@Override
	@Visible(false)
	public int findBell(int centerY) {
		for(int i=0; i<bellsList.size();i++) {
			if(bellsList.get(i).getBell().getCenterY() == centerY) {
				return i;
			}
		}
		return 0;
	}
	
	@Override
	@Visible(false)
	public int findFirstAvailablePlate() {
		for (int i=0; i<isFull.length;i++) {
			if(isFull[i] == true) {
				return i;
			}
		}
		return 0;
	}
	
	@Override
	@Visible(false)
	public void resetBuffer() {
		
		for (int i=0; i<isFull.length;i++) {
			isFull[i] = false;
		}
	}
	
	@Override
	@Visible(false)
	public int findPatron(OEShapeModel patronHead) {
		return 0;
	}
	
	@Override
	@Visible(false)
	public boolean checkIfFull() {
		for (int i=0; i<isFull.length;i++) {
			if (isFull[i] == false) {
				full = false;
				return full;
			}
		}
		full = true;
		return full;
	}
	
	@Override
	@Visible(false)
	public void changeLineColors(int workingPlatePlace) {
		if(workingPlatePlace == lineArray.length-1) {
			lineArray[workingPlatePlace].setColor(Color.GREEN);
			lineArray[0].setColor(Color.GREEN);
		} else {
			lineArray[workingPlatePlace].setColor(Color.GREEN);
			lineArray[workingPlatePlace+1].setColor(Color.GREEN);
		}
	}
	
	
	@Override
	@Visible(false)
	public void resetLineColors() {
		for (int i=0; i<lineArray.length; i++) {
			lineArray[i].setColor(Color.WHITE);
		}
	}
	
	//Getters for properties of the scene
	@Override
	public List<AChef> getChefList() {
		return chefList;
	}
	
	@Override
	public List<APatron> getPatronList() {
		return patronList;
	}
	
	@Override
	public BoundedBuffer getBuffer() {
		return buffer;
	}
	
	@Override
	public List<APlate> getPlateList() {
		return plateList;
	}	
	
	@Override
	@util.annotations.Visible(false)
	public Queue<APlate> getOtherPlateList() {
		return otherPlateList;
	}
	
	@Override
	public List<ABell> getBellsList() {
		return bellsList;
	}
	
	@Override
	@Visible(false)
	public Queue<ABell> getQueueBellList() {
		return queueBellList;
	}
}
]]></snapshot>
  </Command>
  <Command __id="191" _type="PauseCommand" date="Sat Feb 25 10:45:54 EST 2023" range="5s-10s" starttimestamp="1677312753280" timestamp="27201057">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[5770]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="192" _type="MoveCaretCommand" caretOffset="5816" date="Sat Feb 25 10:45:54 EST 2023" docOffset="6696" starttimestamp="1677312753280" timestamp="27201245" />
  <Command __id="190" _type="DiffBasedFileOpenCommand" date="Sat Feb 25 10:45:54 EST 2023" docASTNodeCount="1675" docActiveCodeLength="9773" docExpressionCount="1160" docLength="10344" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="27201057">
    <filePath><![CDATA[C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\graphics\AProducerConsumerScene.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package graphics;¶¶import java.util.ArrayList;¶import java.util.LinkedList;¶import java.util.List;¶import java.util.Queue;¶¶import animations.ACookingPlateAnimator;¶import animations.ACookingPlateCommand;¶import animations.AServingPlateAnimator;¶import animations.AServingPlateCommand;¶import animations.CookingPlateAnimator;¶import animations.ServingPlateAnimator;¶import bus.uigen.OEFrame;¶import bus.uigen.ObjectEditor;¶import bus.uigen.shapes.ALineModel;¶import bus.uigen.shapes.AStringModel;¶import bus.uigen.shapes.AnImageModel;¶import bus.uigen.shapes.OEShapeModel;¶import shapes.FlexibleTextShape;¶import util.annotations.EditablePropertyNames;¶import util.annotations.Label;¶import util.annotations.PropertyNames;¶import util.annotations.StructurePattern;¶import util.annotations.StructurePatternNames;¶import util.annotations.Visible;¶import util.misc.ThreadSupport;¶¶import java.awt.Color;¶¶@StructurePattern(StructurePatternNames.BEAN_PATTERN)¶@PropertyNames({¶	"patronList",¶	"chefList",¶	"buffer",¶	"plateList",¶	"otherPlateList",¶	"bellsList",¶	"queueBellList"¶})¶@EditablePropertyNames({¶})¶public class AProducerConsumerScene implements ProducerConsumerScene {¶	¶	//Avatar offsets inside scene¶	int[] chefXValues = {120,-50,-50,120};¶	int[] chefYValues = {-50,35,210,320};¶	int[] patronXValues = {650,850,850,650};¶	int[] patronYValues = {-50,35,220,320};¶	int[] bellXValues = {680,880,880,680};¶	int[] bellYValues = {75,160,345,445};¶	int INIT_HEAD_Y = 60;¶	int INIT_HEAD_X = 163;¶	int INIT_HEAD_HEIGHT = 90;¶	int INIT_HEAD_WIDTH = 80;¶	int PLATE_OFFSET_X = 30;¶	int PLATE_OFFSET_Y = 10;¶	int PAUSE = 5;¶	¶	//Booleans that help with the functionality of the below methods¶	boolean INIT_COOK = true;¶	boolean full = false;¶	int fullPlateOffset = -5;¶	¶	//Defining the chef and patron images¶	String[] chefImages = {"images/0.png","images/1.png","images/2.png","images/3.png"};¶	String[] patronImages = {"images/4.png", "images/5.png", "images/6.png", "images/7.png"};¶	¶	//Buffer arrays¶	int[] bufferXValues = {625, 680, 680, 620, 535, 460, 460, 535};¶	int[] bufferYValues = {200, 275, 365, 425, 425, 365, 275, 200};¶	boolean[] isFull = {false, false, false, false, false, false, false, false};¶	¶	//The properties of our class¶	List<APatron> patronList;¶	List<AChef> chefList;¶	BoundedBuffer buffer = new ABoundedBuffer();¶	List<APlate> plateList;¶	Queue<APlate> otherPlateList;¶	¶	OEShapeModel[] lineArray = {buffer.getLineTwo(), buffer.getLineThree(), buffer.getLineFour(), ¶								buffer.getLineFive(), buffer.getLineSix(), buffer.getLineSeven(), ¶								buffer.getLineEight(), buffer.getLineOne()};¶	¶	List<ABell> bellsList;¶	Queue<ABell> queueBellList;¶	int[] bellValues = {127, 212, 397, 497};¶	Queue<Integer> bellIntegerList;¶	¶	ACookingPlateCommand cookingCommand;¶	CookingPlateAnimator cookingAnimator;¶	¶	AServingPlateCommand servingCommand;¶	ServingPlateAnimator servingAnimator;¶	¶	//The constructor sets the scene with one chef, patron, a buffer, and a plate (not visible)¶	public AProducerConsumerScene() {¶		patronList = new ArrayList<APatron>();¶		chefList = new ArrayList<AChef>();¶		//buffer = new ABoundedBuffer();¶		plateList = new ArrayList<APlate>();¶		otherPlateList = new LinkedList<APlate>();¶		bellsList = new ArrayList<ABell>();¶		queueBellList = new LinkedList<ABell>();¶		bellIntegerList = new LinkedList<Integer>();¶		¶		patronList.add(0, new APatron());¶		OEShapeModel initPatronHead = new AnImageModel(patronImages[0]);¶		initPatronHead.setX(INIT_HEAD_X);¶		initPatronHead.setY(INIT_HEAD_Y);¶		initPatronHead.setHeight(INIT_HEAD_HEIGHT);¶		initPatronHead.setWidth(INIT_HEAD_WIDTH);¶		patronList.get(0).patron.setHead(initPatronHead);¶		patronList.get(0).move(patronXValues[0], patronYValues[0]);¶		¶		chefList.add(0, new AChef());¶		OEShapeModel initChefHead = new AnImageModel(chefImages[0]);¶		initChefHead.setX(INIT_HEAD_X);¶		initChefHead.setY(INIT_HEAD_Y);¶		initChefHead.setHeight(INIT_HEAD_HEIGHT);¶		initChefHead.setWidth(INIT_HEAD_WIDTH);¶		chefList.get(0).chef.setHead(initChefHead);¶		chefList.get(0).move(chefXValues[0], chefYValues[0]);¶		¶		plateList.add(new APlate());¶		plateList.get(0).getPlate().setHeight(0);¶		plateList.get(0).getPlate().setWidth(0);¶		¶		otherPlateList.add(new APlate());¶		otherPlateList.peek().getPlate().setHeight(0);¶		otherPlateList.peek().getPlate().setWidth(0);¶		¶		cookingAnimator = new ACookingPlateAnimator();¶		servingAnimator = new AServingPlateAnimator();¶		¶		bellsList.add(new ABell());¶		bellsList.get(0).getBell().setHeight(0);¶		bellsList.get(0).getBell().setWidth(0);¶		¶		queueBellList.add(new ABell());¶		queueBellList.peek().getBell().setHeight(0);¶		queueBellList.peek().getBell().setWidth(0);¶		¶		bellIntegerList.add(0);¶	}¶	¶	//Producer consumer methods¶	¶	//Init Scene sets the number of patrons and chefs in the scene¶	@Label("Init Scene")¶	public void initScene(int patronAmount, int chefAmount) {¶		bellsList.clear();¶		for (int i=0; i<patronAmount; i++) { ¶			APatron patron = new APatron();¶			patronList.add(i, patron);¶			OEShapeModel newHead = new AnImageModel(patronImages[i]);¶			patron.patron.setHead(newHead); ¶			newHead.setX(INIT_HEAD_X); ¶			newHead.setY(INIT_HEAD_Y);¶			newHead.setHeight(INIT_HEAD_HEIGHT);¶			newHead.setWidth(INIT_HEAD_WIDTH);¶			patron.move(patronXValues[i], patronYValues[i]);¶			¶			bellsList.add(new ABell());¶			bellsList.get(i).move(bellXValues[i], bellYValues[i]);¶		}¶		for (int i=0; i<chefAmount; i++) {¶			AChef chef = new AChef();¶			chefList.add(i, chef);¶			OEShapeModel newHead = new AnImageModel(chefImages[i]);¶			chef.chef.setHead(newHead);¶			newHead.setX(INIT_HEAD_X); ¶			newHead.setY(INIT_HEAD_Y);¶			newHead.setHeight(INIT_HEAD_HEIGHT);¶			newHead.setWidth(INIT_HEAD_WIDTH);¶			chef.move(chefXValues[i], chefYValues[i]);¶		}¶	}¶	¶	//Once the head of an avatar is chosen, it makes the plate that they "cook" appear¶	public void cook(OEShapeModel head) {¶		if (INIT_COOK) {¶			INIT_COOK=!INIT_COOK;¶			plateList.remove(0);¶			otherPlateList.remove();¶		}¶		¶		int headX = head.getCenterX();¶		int headY = head.getCenterY();¶		APlate newPlate = new APlate(plateList.size()+1);¶		newPlate.getPlate().setHeight(0);¶		newPlate.getPlate().setWidth(0);¶		plateList.add(newPlate);¶		otherPlateList.add(newPlate);¶		¶		if (full) {¶			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y+fullPlateOffset);¶			fullPlateOffset = fullPlateOffset - 5;¶		} else {¶			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y);¶		}¶		¶		cookingCommand = new ACookingPlateCommand(cookingAnimator, newPlate, 40, 15);¶		Thread thread = new Thread (cookingCommand);¶		thread.start();¶	}¶	¶	public void serve() {¶		//Checks to see if the buffer is full. If it is, then can't serve.¶		resetLineColors();¶		if(checkIfFull()) {¶			resetLineColors();¶			return;¶		}¶		¶		Plate workingPlate = otherPlateList.peek();¶		int workingPlatePlace = Integer.valueOf(workingPlate.getText().getText())-1;¶		changeLineColors(workingPlatePlace);¶		servingCommand = new AServingPlateCommand(servingAnimator,workingPlate,PAUSE, bufferXValues[workingPlatePlace], bufferYValues[workingPlatePlace]);¶		Thread thread = new Thread(servingCommand);¶		thread.start();¶		isFull[workingPlatePlace] = true;¶		otherPlateList.remove();¶	}¶	¶	public void order(OEShapeModel bell) {¶		if(checkIfFull()) {¶			resetLineColors();¶			resetBuffer();¶		}¶		bellIntegerList.add(0);¶		int bellPlace = findBell(bell.getCenterY());¶		bellsList.get(bellPlace).getText().setText(String.valueOf(bellIntegerList.size()-1));¶		¶		int platePlace = findFirstAvailablePlate();¶		servingCommand = new AServingPlateCommand(servingAnimator,plateList.get(platePlace),PAUSE, bell.getCenterX() , bell.getCenterY());¶		Thread thread = new Thread(servingCommand);¶		thread.start();¶		¶		cookingCommand = new ACookingPlateCommand(cookingAnimator, plateList.get(0), 0, 15);¶		Thread eatingThread = new Thread (cookingCommand);¶		eatingThread.start();¶		plateList.get(0).getText().setText("");¶	}¶	¶	public void eat() {¶		plateList.remove(0);¶	}¶	¶	@Override¶	@Visible(false)¶	public int findBell(int centerY) {¶		for(int i=0; i<bellsList.size();i++) {¶			if(bellsList.get(i).getBell().getCenterY() == centerY) {¶				return i;¶			}¶		}¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public int findFirstAvailablePlate() {¶		for (int i=0; i<isFull.length;i++) {¶			if(isFull[i] == true) {¶				return i;¶			}¶		}¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public void resetBuffer() {¶		¶		for (int i=0; i<isFull.length;i++) {¶			isFull[i] = false;¶		}¶	}¶	¶	@Override¶	@Visible(false)¶	public int findPatron(OEShapeModel patronHead) {¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public boolean checkIfFull() {¶		for (int i=0; i<isFull.length;i++) {¶			if (isFull[i] == false) {¶				full = false;¶				return full;¶			}¶		}¶		full = true;¶		return full;¶	}¶	¶	@Override¶	@Visible(false)¶	public void changeLineColors(int workingPlatePlace) {¶		if(workingPlatePlace == lineArray.length-1) {¶			lineArray[workingPlatePlace].setColor(Color.GREEN);¶			lineArray[0].setColor(Color.GREEN);¶		} else {¶			lineArray[workingPlatePlace].setColor(Color.GREEN);¶			lineArray[workingPlatePlace+1].setColor(Color.GREEN);¶		}¶	}¶	¶	¶	@Override¶	@Visible(false)¶	public void resetLineColors() {¶		for (int i=0; i<lineArray.length; i++) {¶			lineArray[i].setColor(Color.WHITE);¶		}¶	}¶	¶	//Getters for properties of the scene¶	@Override¶	public List<AChef> getChefList() {¶		return chefList;¶	}¶	¶	@Override¶	public List<APatron> getPatronList() {¶		return patronList;¶	}¶	¶	@Override¶	public BoundedBuffer getBuffer() {¶		return buffer;¶	}¶	¶	@Override¶	public List<APlate> getPlateList() {¶		return plateList;¶	}	¶	¶	@Override¶	@util.annotations.Visible(false)¶	public Queue<APlate> getOtherPlateList() {¶		return otherPlateList;¶	}¶	¶	@Override¶	public List<ABell> getBellsList() {¶		return bellsList;¶	}¶	¶	@Override¶	@Visible(false)¶	public Queue<ABell> getQueueBellList() {¶		return queueBellList;¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="194" _type="PauseCommand" date="Sat Feb 25 10:45:55 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27202428">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1183]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="195" _type="MoveCaretCommand" caretOffset="0" date="Sat Feb 25 10:45:56 EST 2023" docOffset="0" starttimestamp="1677312753280" timestamp="27202731" />
  <Command __id="197" _type="PauseCommand" date="Sat Feb 25 10:46:09 EST 2023" range="10s-20s" starttimestamp="1677312753280" timestamp="27216245">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[13514]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="196" _type="MoveCaretCommand" caretOffset="1540" date="Sat Feb 25 10:46:09 EST 2023" docOffset="2420" starttimestamp="1677312753280" timestamp="27216245" />
  <Command __id="193" _type="DiffBasedFileOpenCommand" date="Sat Feb 25 10:45:55 EST 2023" docASTNodeCount="1675" docActiveCodeLength="9775" docExpressionCount="1160" docLength="10346" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="27202428">
    <filePath><![CDATA[C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\graphics\AProducerConsumerScene2.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package graphics;¶¶import java.util.ArrayList;¶import java.util.LinkedList;¶import java.util.List;¶import java.util.Queue;¶¶import animations.ACookingPlateAnimator;¶import animations.ACookingPlateCommand;¶import animations.AServingPlateAnimator;¶import animations.AServingPlateCommand;¶import animations.CookingPlateAnimator;¶import animations.ServingPlateAnimator;¶import bus.uigen.OEFrame;¶import bus.uigen.ObjectEditor;¶import bus.uigen.shapes.ALineModel;¶import bus.uigen.shapes.AStringModel;¶import bus.uigen.shapes.AnImageModel;¶import bus.uigen.shapes.OEShapeModel;¶import shapes.FlexibleTextShape;¶import util.annotations.EditablePropertyNames;¶import util.annotations.Label;¶import util.annotations.PropertyNames;¶import util.annotations.StructurePattern;¶import util.annotations.StructurePatternNames;¶import util.annotations.Visible;¶import util.misc.ThreadSupport;¶¶import java.awt.Color;¶¶@StructurePattern(StructurePatternNames.BEAN_PATTERN)¶@PropertyNames({¶	"patronList",¶	"chefList",¶	"buffer",¶	"plateList",¶	"otherPlateList",¶	"bellsList",¶	"queueBellList"¶})¶@EditablePropertyNames({¶})¶public class AProducerConsumerScene2 implements ProducerConsumerScene {¶	¶	//Avatar offsets inside scene¶	int[] chefXValues = {120,-50,-50,120};¶	int[] chefYValues = {-50,35,210,320};¶	int[] patronXValues = {650,850,850,650};¶	int[] patronYValues = {-50,35,220,320};¶	int[] bellXValues = {680,880,880,680};¶	int[] bellYValues = {75,160,345,445};¶	int INIT_HEAD_Y = 60;¶	int INIT_HEAD_X = 163;¶	int INIT_HEAD_HEIGHT = 90;¶	int INIT_HEAD_WIDTH = 80;¶	int PLATE_OFFSET_X = 30;¶	int PLATE_OFFSET_Y = 10;¶	int PAUSE = 5;¶	¶	//Booleans that help with the functionality of the below methods¶	boolean INIT_COOK = true;¶	boolean full = false;¶	int fullPlateOffset = -5;¶	¶	//Defining the chef and patron images¶	String[] chefImages = {"images/0.png","images/1.png","images/2.png","images/3.png"};¶	String[] patronImages = {"images/4.png", "images/5.png", "images/6.png", "images/7.png"};¶	¶	//Buffer arrays¶	int[] bufferXValues = {625, 680, 680, 620, 535, 460, 460, 535};¶	int[] bufferYValues = {200, 275, 365, 425, 425, 365, 275, 200};¶	boolean[] isFull = {false, false, false, false, false, false, false, false};¶	¶	//The properties of our class¶	List<APatron> patronList;¶	List<AChef> chefList;¶	BoundedBuffer buffer = new ABoundedBuffer();¶	List<APlate> plateList;¶	Queue<APlate> otherPlateList;¶	¶	OEShapeModel[] lineArray = {buffer.getLineTwo(), buffer.getLineThree(), buffer.getLineFour(), ¶								buffer.getLineFive(), buffer.getLineSix(), buffer.getLineSeven(), ¶								buffer.getLineEight(), buffer.getLineOne()};¶	¶	List<ABell> bellsList;¶	Queue<ABell> queueBellList;¶	int[] bellValues = {127, 212, 397, 497};¶	Queue<Integer> bellIntegerList;¶	¶	ACookingPlateCommand cookingCommand;¶	CookingPlateAnimator cookingAnimator;¶	¶	AServingPlateCommand servingCommand;¶	ServingPlateAnimator servingAnimator;¶	¶	//The constructor sets the scene with one chef, patron, a buffer, and a plate (not visible)¶	public AProducerConsumerScene2() {¶		patronList = new ArrayList<APatron>();¶		chefList = new ArrayList<AChef>();¶		//buffer = new ABoundedBuffer();¶		plateList = new ArrayList<APlate>();¶		otherPlateList = new LinkedList<APlate>();¶		bellsList = new ArrayList<ABell>();¶		queueBellList = new LinkedList<ABell>();¶		bellIntegerList = new LinkedList<Integer>();¶		¶		patronList.add(0, new APatron());¶		OEShapeModel initPatronHead = new AnImageModel(patronImages[0]);¶		initPatronHead.setX(INIT_HEAD_X);¶		initPatronHead.setY(INIT_HEAD_Y);¶		initPatronHead.setHeight(INIT_HEAD_HEIGHT);¶		initPatronHead.setWidth(INIT_HEAD_WIDTH);¶		patronList.get(0).patron.setHead(initPatronHead);¶		patronList.get(0).move(patronXValues[0], patronYValues[0]);¶		¶		chefList.add(0, new AChef());¶		OEShapeModel initChefHead = new AnImageModel(chefImages[0]);¶		initChefHead.setX(INIT_HEAD_X);¶		initChefHead.setY(INIT_HEAD_Y);¶		initChefHead.setHeight(INIT_HEAD_HEIGHT);¶		initChefHead.setWidth(INIT_HEAD_WIDTH);¶		chefList.get(0).chef.setHead(initChefHead);¶		chefList.get(0).move(chefXValues[0], chefYValues[0]);¶		¶		plateList.add(new APlate());¶		plateList.get(0).getPlate().setHeight(0);¶		plateList.get(0).getPlate().setWidth(0);¶		¶		otherPlateList.add(new APlate());¶		otherPlateList.peek().getPlate().setHeight(0);¶		otherPlateList.peek().getPlate().setWidth(0);¶		¶		cookingAnimator = new ACookingPlateAnimator();¶		servingAnimator = new AServingPlateAnimator();¶		¶		bellsList.add(new ABell());¶		bellsList.get(0).getBell().setHeight(0);¶		bellsList.get(0).getBell().setWidth(0);¶		¶		queueBellList.add(new ABell());¶		queueBellList.peek().getBell().setHeight(0);¶		queueBellList.peek().getBell().setWidth(0);¶		¶		bellIntegerList.add(0);¶	}¶	¶	//Producer consumer methods¶	¶	//Init Scene sets the number of patrons and chefs in the scene¶	@Label("Init Scene")¶	public void initScene(int patronAmount, int chefAmount) {¶		bellsList.clear();¶		for (int i=0; i<patronAmount; i++) { ¶			APatron patron = new APatron();¶			patronList.add(i, patron);¶			OEShapeModel newHead = new AnImageModel(patronImages[i]);¶			patron.patron.setHead(newHead); ¶			newHead.setX(INIT_HEAD_X); ¶			newHead.setY(INIT_HEAD_Y);¶			newHead.setHeight(INIT_HEAD_HEIGHT);¶			newHead.setWidth(INIT_HEAD_WIDTH);¶			patron.move(patronXValues[i], patronYValues[i]);¶			¶			bellsList.add(new ABell());¶			bellsList.get(i).move(bellXValues[i], bellYValues[i]);¶		}¶		for (int i=0; i<chefAmount; i++) {¶			AChef chef = new AChef();¶			chefList.add(i, chef);¶			OEShapeModel newHead = new AnImageModel(chefImages[i]);¶			chef.chef.setHead(newHead);¶			newHead.setX(INIT_HEAD_X); ¶			newHead.setY(INIT_HEAD_Y);¶			newHead.setHeight(INIT_HEAD_HEIGHT);¶			newHead.setWidth(INIT_HEAD_WIDTH);¶			chef.move(chefXValues[i], chefYValues[i]);¶		}¶	}¶	¶	//Once the head of an avatar is chosen, it makes the plate that they "cook" appear¶	public void cook(OEShapeModel head) {¶		if (INIT_COOK) {¶			INIT_COOK=!INIT_COOK;¶			plateList.remove(0);¶			otherPlateList.remove();¶		}¶		¶		int headX = head.getCenterX();¶		int headY = head.getCenterY();¶		APlate newPlate = new APlate(plateList.size()+1);¶		newPlate.getPlate().setHeight(0);¶		newPlate.getPlate().setWidth(0);¶		plateList.add(newPlate);¶		otherPlateList.add(newPlate);¶		¶		if (full) {¶			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y+fullPlateOffset);¶			fullPlateOffset = fullPlateOffset - 5;¶		} else {¶			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y);¶		}¶		¶		cookingCommand = new ACookingPlateCommand(cookingAnimator, newPlate, 40, 15);¶		Thread thread = new Thread (cookingCommand);¶		thread.start();¶	}¶	¶	public void serve() {¶		//Checks to see if the buffer is full. If it is, then can't serve.¶		resetLineColors();¶		if(checkIfFull()) {¶			resetLineColors();¶			return;¶		}¶		¶		Plate workingPlate = otherPlateList.peek();¶		int workingPlatePlace = Integer.valueOf(workingPlate.getText().getText())-1;¶		changeLineColors(workingPlatePlace);¶		servingCommand = new AServingPlateCommand(servingAnimator,workingPlate,PAUSE, bufferXValues[workingPlatePlace], bufferYValues[workingPlatePlace]);¶		Thread thread = new Thread(servingCommand);¶		thread.start();¶		isFull[workingPlatePlace] = true;¶		otherPlateList.remove();¶	}¶	¶	public void order(OEShapeModel bell) {¶		if(checkIfFull()) {¶			resetLineColors();¶			resetBuffer();¶		}¶		bellIntegerList.add(0);¶		int bellPlace = findBell(bell.getCenterY());¶		bellsList.get(bellPlace).getText().setText(String.valueOf(bellIntegerList.size()-1));¶		¶		int platePlace = findFirstAvailablePlate();¶		servingCommand = new AServingPlateCommand(servingAnimator,plateList.get(platePlace),PAUSE, bell.getCenterX() , bell.getCenterY());¶		Thread thread = new Thread(servingCommand);¶		thread.start();¶		¶		cookingCommand = new ACookingPlateCommand(cookingAnimator, plateList.get(0), 0, 15);¶		Thread eatingThread = new Thread (cookingCommand);¶		eatingThread.start();¶		plateList.get(0).getText().setText("");¶	}¶	¶	public void eat() {¶		plateList.remove(0);¶	}¶	¶	@Override¶	@Visible(false)¶	public int findBell(int centerY) {¶		for(int i=0; i<bellsList.size();i++) {¶			if(bellsList.get(i).getBell().getCenterY() == centerY) {¶				return i;¶			}¶		}¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public int findFirstAvailablePlate() {¶		for (int i=0; i<isFull.length;i++) {¶			if(isFull[i] == true) {¶				return i;¶			}¶		}¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public void resetBuffer() {¶		¶		for (int i=0; i<isFull.length;i++) {¶			isFull[i] = false;¶		}¶	}¶	¶	@Override¶	@Visible(false)¶	public int findPatron(OEShapeModel patronHead) {¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public boolean checkIfFull() {¶		for (int i=0; i<isFull.length;i++) {¶			if (isFull[i] == false) {¶				full = false;¶				return full;¶			}¶		}¶		full = true;¶		return full;¶	}¶	¶	@Override¶	@Visible(false)¶	public void changeLineColors(int workingPlatePlace) {¶		if(workingPlatePlace == lineArray.length-1) {¶			lineArray[workingPlatePlace].setColor(Color.GREEN);¶			lineArray[0].setColor(Color.GREEN);¶		} else {¶			lineArray[workingPlatePlace].setColor(Color.GREEN);¶			lineArray[workingPlatePlace+1].setColor(Color.GREEN);¶		}¶	}¶	¶	¶	@Override¶	@Visible(false)¶	public void resetLineColors() {¶		for (int i=0; i<lineArray.length; i++) {¶			lineArray[i].setColor(Color.WHITE);¶		}¶	}¶	¶	//Getters for properties of the scene¶	@Override¶	public List<AChef> getChefList() {¶		return chefList;¶	}¶	¶	@Override¶	public List<APatron> getPatronList() {¶		return patronList;¶	}¶	¶	@Override¶	public BoundedBuffer getBuffer() {¶		return buffer;¶	}¶	¶	@Override¶	public List<APlate> getPlateList() {¶		return plateList;¶	}	¶	¶	@Override¶	@util.annotations.Visible(false)¶	public Queue<APlate> getOtherPlateList() {¶		return otherPlateList;¶	}¶	¶	@Override¶	public List<ABell> getBellsList() {¶		return bellsList;¶	}¶	¶	@Override¶	@Visible(false)¶	public Queue<ABell> getQueueBellList() {¶		return queueBellList;¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="199" _type="PauseCommand" date="Sat Feb 25 10:46:11 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27218025">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1780]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="200" _type="InsertStringCommand" date="Sat Feb 25 10:46:11 EST 2023" starttimestamp="1677312753280" timestamp="27218070" timestamp2="27218070">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="202" _type="InsertStringCommand" date="Sat Feb 25 10:46:11 EST 2023" starttimestamp="1677312753280" timestamp="27218398" timestamp2="27218398">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="204" _type="PauseCommand" date="Sat Feb 25 10:46:16 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="27223130">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[4732]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="203" _type="SelectTextCommand" caretOffset="1569" date="Sat Feb 25 10:46:16 EST 2023" end="1569" start="1546" starttimestamp="1677312753280" timestamp="27223130" />
  <Command __id="206" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:46:17 EST 2023" starttimestamp="1677312753280" timestamp="27223752" />
  <Command __id="208" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:46:17 EST 2023" starttimestamp="1677312753280" timestamp="27224072" />
  <Command __id="210" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:46:18 EST 2023" starttimestamp="1677312753280" timestamp="27224863" />
  <Command __id="212" _type="PauseCommand" date="Sat Feb 25 10:46:20 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="27227684">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2821]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="211" _type="MoveCaretCommand" caretOffset="1572" date="Sat Feb 25 10:46:20 EST 2023" docOffset="2452" starttimestamp="1677312753280" timestamp="27227684" />
  <Command __id="213" _type="SelectTextCommand" caretOffset="1574" date="Sat Feb 25 10:46:21 EST 2023" end="1574" start="1560" starttimestamp="1677312753280" timestamp="27227881" />
  <DocumentChange __id="198" _type="Insert" date="Sat Feb 25 10:46:11 EST 2023" docASTNodeCount="1675" docActiveCodeLength="9781" docExpressionCount="1160" docLength="10352" length="6" offset="2420" repeat="2" starttimestamp="1677312753280" timestamp="27218025" timestamp2="27218363">
    <text><![CDATA[
	
	]]></text>
  </DocumentChange>
  <DocumentChange __id="205" _type="Delete" date="Sat Feb 25 10:46:16 EST 2023" docASTNodeCount="1667" docActiveCodeLength="9755" docExpressionCount="1157" docLength="10326" endLine="79" length="26" offset="2423" repeat="3" startLine="78" starttimestamp="1677312753280" timestamp="27223708" timestamp2="27224813">
    <text><![CDATA[
	List<APlate> plateList;]]></text>
  </DocumentChange>
  <Command __id="215" _type="PauseCommand" date="Sat Feb 25 10:46:22 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27228917">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1036]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Replace]]></next>
  </Command>
  <DocumentChange __id="214" _type="Replace" date="Sat Feb 25 10:46:22 EST 2023" docASTNodeCount="1667" docActiveCodeLength="9742" docExpressionCount="1157" docLength="10313" endLine="79" insertionLength="1" int_docASTNodeCount="1659" int_docActiveCodeLength="9741" int_docExpressionCount="1154" int_docLength="10312" length="14" offset="2440" startLine="79" starttimestamp="1677312753280" timestamp="27228917">
    <deletedText><![CDATA[otherPlateList]]></deletedText>
    <insertedText><![CDATA[q]]></insertedText>
  </DocumentChange>
  <Command __id="216" _type="InsertStringCommand" date="Sat Feb 25 10:46:22 EST 2023" starttimestamp="1677312753280" timestamp="27229004" timestamp2="27229004">
    <data><![CDATA[q]]></data>
  </Command>
  <DocumentChange __id="217" _type="Insert" date="Sat Feb 25 10:46:22 EST 2023" docASTNodeCount="1667" docActiveCodeLength="9744" docExpressionCount="1157" docLength="10315" length="2" offset="2441" repeat="2" starttimestamp="1677312753280" timestamp="27229144" timestamp2="27229960">
    <text><![CDATA[uu]]></text>
  </DocumentChange>
  <Command __id="218" _type="InsertStringCommand" date="Sat Feb 25 10:46:22 EST 2023" starttimestamp="1677312753280" timestamp="27229193" timestamp2="27229193">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="220" _type="InsertStringCommand" date="Sat Feb 25 10:46:23 EST 2023" starttimestamp="1677312753280" timestamp="27230008" timestamp2="27230008">
    <data><![CDATA[u]]></data>
  </Command>
  <DocumentChange __id="221" _type="Delete" date="Sat Feb 25 10:46:23 EST 2023" docASTNodeCount="1667" docActiveCodeLength="9743" docExpressionCount="1157" docLength="10314" endLine="79" length="1" offset="2442" startLine="79" starttimestamp="1677312753280" timestamp="27230359">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <Command __id="222" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:46:23 EST 2023" starttimestamp="1677312753280" timestamp="27230397" />
  <DocumentChange __id="223" _type="Insert" date="Sat Feb 25 10:46:23 EST 2023" docASTNodeCount="1667" docActiveCodeLength="9748" docExpressionCount="1157" docLength="10319" length="5" offset="2442" repeat="5" starttimestamp="1677312753280" timestamp="27230577" timestamp2="27231517">
    <text><![CDATA[eued ]]></text>
  </DocumentChange>
  <Command __id="224" _type="InsertStringCommand" date="Sat Feb 25 10:46:23 EST 2023" starttimestamp="1677312753280" timestamp="27230621" timestamp2="27230621">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="226" _type="InsertStringCommand" date="Sat Feb 25 10:46:24 EST 2023" starttimestamp="1677312753280" timestamp="27230829" timestamp2="27230829">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="228" _type="InsertStringCommand" date="Sat Feb 25 10:46:24 EST 2023" starttimestamp="1677312753280" timestamp="27231013" timestamp2="27231013">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="230" _type="InsertStringCommand" date="Sat Feb 25 10:46:24 EST 2023" starttimestamp="1677312753280" timestamp="27231280" timestamp2="27231280">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="232" _type="InsertStringCommand" date="Sat Feb 25 10:46:24 EST 2023" starttimestamp="1677312753280" timestamp="27231539" timestamp2="27231539">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="233" _type="Delete" date="Sat Feb 25 10:46:25 EST 2023" docASTNodeCount="1667" docActiveCodeLength="9747" docExpressionCount="1157" docLength="10318" endLine="79" length="1" offset="2446" startLine="79" starttimestamp="1677312753280" timestamp="27231860">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="234" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:46:25 EST 2023" starttimestamp="1677312753280" timestamp="27231877" />
  <Command __id="236" _type="InsertStringCommand" date="Sat Feb 25 10:46:25 EST 2023" starttimestamp="1677312753280" timestamp="27232232" timestamp2="27232232">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="238" _type="InsertStringCommand" date="Sat Feb 25 10:46:25 EST 2023" starttimestamp="1677312753280" timestamp="27232478" timestamp2="27232478">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="240" _type="InsertStringCommand" date="Sat Feb 25 10:46:25 EST 2023" starttimestamp="1677312753280" timestamp="27232573" timestamp2="27232573">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="242" _type="InsertStringCommand" date="Sat Feb 25 10:46:26 EST 2023" starttimestamp="1677312753280" timestamp="27232793" timestamp2="27232793">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="244" _type="PauseCommand" date="Sat Feb 25 10:46:27 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27234270">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1477]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="243" _type="MoveCaretCommand" caretOffset="1543" date="Sat Feb 25 10:46:27 EST 2023" docOffset="2423" starttimestamp="1677312753280" timestamp="27234270" />
  <Command __id="246" _type="InsertStringCommand" date="Sat Feb 25 10:46:28 EST 2023" starttimestamp="1677312753280" timestamp="27235294" timestamp2="27235294">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="248" _type="InsertStringCommand" date="Sat Feb 25 10:46:28 EST 2023" starttimestamp="1677312753280" timestamp="27235404" timestamp2="27235404">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="250" _type="InsertStringCommand" date="Sat Feb 25 10:46:29 EST 2023" starttimestamp="1677312753280" timestamp="27236006" timestamp2="27236006">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="252" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:46:29 EST 2023" starttimestamp="1677312753280" timestamp="27236397" />
  <Command __id="254" _type="InsertStringCommand" date="Sat Feb 25 10:46:29 EST 2023" starttimestamp="1677312753280" timestamp="27236579" timestamp2="27236579">
    <data><![CDATA[T]]></data>
  </Command>
  <Command __id="256" _type="InsertStringCommand" date="Sat Feb 25 10:46:30 EST 2023" starttimestamp="1677312753280" timestamp="27236840" timestamp2="27236840">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="258" _type="InsertStringCommand" date="Sat Feb 25 10:46:30 EST 2023" starttimestamp="1677312753280" timestamp="27236935" timestamp2="27236935">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="260" _type="InsertStringCommand" date="Sat Feb 25 10:46:30 EST 2023" starttimestamp="1677312753280" timestamp="27237086" timestamp2="27237086">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="262" _type="InsertStringCommand" date="Sat Feb 25 10:46:30 EST 2023" starttimestamp="1677312753280" timestamp="27237309" timestamp2="27237309">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="264" _type="InsertStringCommand" date="Sat Feb 25 10:46:30 EST 2023" starttimestamp="1677312753280" timestamp="27237499" timestamp2="27237499">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="266" _type="InsertStringCommand" date="Sat Feb 25 10:46:30 EST 2023" starttimestamp="1677312753280" timestamp="27237580" timestamp2="27237580">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="268" _type="InsertStringCommand" date="Sat Feb 25 10:46:31 EST 2023" starttimestamp="1677312753280" timestamp="27237733" timestamp2="27237733">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="270" _type="InsertStringCommand" date="Sat Feb 25 10:46:31 EST 2023" starttimestamp="1677312753280" timestamp="27237990" timestamp2="27237990">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="272" _type="InsertStringCommand" date="Sat Feb 25 10:46:31 EST 2023" starttimestamp="1677312753280" timestamp="27238270" timestamp2="27238270">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="274" _type="InsertStringCommand" date="Sat Feb 25 10:46:32 EST 2023" starttimestamp="1677312753280" timestamp="27239203" timestamp2="27239203">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="276" _type="InsertStringCommand" date="Sat Feb 25 10:46:32 EST 2023" starttimestamp="1677312753280" timestamp="27239339" timestamp2="27239339">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="278" _type="InsertStringCommand" date="Sat Feb 25 10:46:32 EST 2023" starttimestamp="1677312753280" timestamp="27239446" timestamp2="27239446">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="280" _type="InsertStringCommand" date="Sat Feb 25 10:46:32 EST 2023" starttimestamp="1677312753280" timestamp="27239640" timestamp2="27239640">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="282" _type="InsertStringCommand" date="Sat Feb 25 10:46:33 EST 2023" starttimestamp="1677312753280" timestamp="27239762" timestamp2="27239762">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="284" _type="InsertStringCommand" date="Sat Feb 25 10:46:33 EST 2023" starttimestamp="1677312753280" timestamp="27239838" timestamp2="27239838">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="286" _type="InsertStringCommand" date="Sat Feb 25 10:46:33 EST 2023" starttimestamp="1677312753280" timestamp="27239932" timestamp2="27239932">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="288" _type="InsertStringCommand" date="Sat Feb 25 10:46:33 EST 2023" starttimestamp="1677312753280" timestamp="27240091" timestamp2="27240091">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="290" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:46:33 EST 2023" starttimestamp="1677312753280" timestamp="27240642" />
  <Command __id="292" _type="InsertStringCommand" date="Sat Feb 25 10:46:34 EST 2023" starttimestamp="1677312753280" timestamp="27240780" timestamp2="27240780">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="294" _type="InsertStringCommand" date="Sat Feb 25 10:46:34 EST 2023" starttimestamp="1677312753280" timestamp="27240864" timestamp2="27240864">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="296" _type="InsertStringCommand" date="Sat Feb 25 10:46:34 EST 2023" starttimestamp="1677312753280" timestamp="27241019" timestamp2="27241019">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="298" _type="InsertStringCommand" date="Sat Feb 25 10:46:34 EST 2023" starttimestamp="1677312753280" timestamp="27241077" timestamp2="27241077">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="300" _type="InsertStringCommand" date="Sat Feb 25 10:46:34 EST 2023" starttimestamp="1677312753280" timestamp="27241159" timestamp2="27241159">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="302" _type="InsertStringCommand" date="Sat Feb 25 10:46:34 EST 2023" starttimestamp="1677312753280" timestamp="27241215" timestamp2="27241215">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="304" _type="InsertStringCommand" date="Sat Feb 25 10:46:34 EST 2023" starttimestamp="1677312753280" timestamp="27241400" timestamp2="27241400">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="306" _type="InsertStringCommand" date="Sat Feb 25 10:46:34 EST 2023" starttimestamp="1677312753280" timestamp="27241609" timestamp2="27241609">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="308" _type="InsertStringCommand" date="Sat Feb 25 10:46:35 EST 2023" starttimestamp="1677312753280" timestamp="27241732" timestamp2="27241732">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="310" _type="InsertStringCommand" date="Sat Feb 25 10:46:35 EST 2023" starttimestamp="1677312753280" timestamp="27241964" timestamp2="27241964">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="312" _type="InsertStringCommand" date="Sat Feb 25 10:46:35 EST 2023" starttimestamp="1677312753280" timestamp="27242124" timestamp2="27242124">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="314" _type="InsertStringCommand" date="Sat Feb 25 10:46:35 EST 2023" starttimestamp="1677312753280" timestamp="27242308" timestamp2="27242308">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="316" _type="InsertStringCommand" date="Sat Feb 25 10:46:35 EST 2023" starttimestamp="1677312753280" timestamp="27242449" timestamp2="27242449">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="318" _type="InsertStringCommand" date="Sat Feb 25 10:46:36 EST 2023" starttimestamp="1677312753280" timestamp="27242919" timestamp2="27242919">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="320" _type="InsertStringCommand" date="Sat Feb 25 10:46:36 EST 2023" starttimestamp="1677312753280" timestamp="27243083" timestamp2="27243083">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="322" _type="InsertStringCommand" date="Sat Feb 25 10:46:36 EST 2023" starttimestamp="1677312753280" timestamp="27243245" timestamp2="27243245">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="324" _type="InsertStringCommand" date="Sat Feb 25 10:46:36 EST 2023" starttimestamp="1677312753280" timestamp="27243398" timestamp2="27243398">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="326" _type="InsertStringCommand" date="Sat Feb 25 10:46:36 EST 2023" starttimestamp="1677312753280" timestamp="27243540" timestamp2="27243540">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="328" _type="InsertStringCommand" date="Sat Feb 25 10:46:37 EST 2023" starttimestamp="1677312753280" timestamp="27243797" timestamp2="27243797">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="330" _type="InsertStringCommand" date="Sat Feb 25 10:46:37 EST 2023" starttimestamp="1677312753280" timestamp="27243942" timestamp2="27243942">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="332" _type="InsertStringCommand" date="Sat Feb 25 10:46:37 EST 2023" starttimestamp="1677312753280" timestamp="27244203" timestamp2="27244203">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="334" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:46:37 EST 2023" starttimestamp="1677312753280" timestamp="27244597" />
  <Command __id="336" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:46:38 EST 2023" starttimestamp="1677312753280" timestamp="27245041" />
  <Command __id="338" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:46:38 EST 2023" starttimestamp="1677312753280" timestamp="27245084" />
  <Command __id="340" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:46:38 EST 2023" starttimestamp="1677312753280" timestamp="27245132" />
  <Command __id="342" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:46:38 EST 2023" starttimestamp="1677312753280" timestamp="27245178" />
  <Command __id="344" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:46:38 EST 2023" starttimestamp="1677312753280" timestamp="27245205" />
  <Command __id="346" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:46:38 EST 2023" starttimestamp="1677312753280" timestamp="27245237" />
  <Command __id="348" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:46:38 EST 2023" starttimestamp="1677312753280" timestamp="27245265" />
  <Command __id="350" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:46:38 EST 2023" starttimestamp="1677312753280" timestamp="27245294" />
  <Command __id="352" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:46:38 EST 2023" starttimestamp="1677312753280" timestamp="27245322" />
  <Command __id="354" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:46:38 EST 2023" starttimestamp="1677312753280" timestamp="27245351" />
  <Command __id="356" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:46:38 EST 2023" starttimestamp="1677312753280" timestamp="27245381" />
  <Command __id="358" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:46:38 EST 2023" starttimestamp="1677312753280" timestamp="27245408" />
  <Command __id="360" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:46:38 EST 2023" starttimestamp="1677312753280" timestamp="27245437" />
  <Command __id="362" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:46:39 EST 2023" starttimestamp="1677312753280" timestamp="27245763" />
  <Command __id="364" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:46:39 EST 2023" starttimestamp="1677312753280" timestamp="27245930" />
  <Command __id="366" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:46:39 EST 2023" starttimestamp="1677312753280" timestamp="27246067" />
  <Command __id="368" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:46:39 EST 2023" starttimestamp="1677312753280" timestamp="27246196" />
  <Command __id="370" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:46:39 EST 2023" starttimestamp="1677312753280" timestamp="27246336" />
  <Command __id="372" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:46:39 EST 2023" starttimestamp="1677312753280" timestamp="27246482" />
  <Command __id="374" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:46:39 EST 2023" starttimestamp="1677312753280" timestamp="27246619" />
  <Command __id="376" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:46:40 EST 2023" starttimestamp="1677312753280" timestamp="27246760" />
  <Command __id="378" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:46:40 EST 2023" starttimestamp="1677312753280" timestamp="27246908" />
  <Command __id="380" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:46:40 EST 2023" starttimestamp="1677312753280" timestamp="27247057" />
  <Command __id="382" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:46:40 EST 2023" starttimestamp="1677312753280" timestamp="27247198" />
  <Command __id="384" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:46:40 EST 2023" starttimestamp="1677312753280" timestamp="27247342" />
  <Command __id="386" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:46:40 EST 2023" starttimestamp="1677312753280" timestamp="27247482" />
  <DocumentChange __id="235" _type="Insert" date="Sat Feb 25 10:46:25 EST 2023" docASTNodeCount="1667" docActiveCodeLength="9751" docExpressionCount="1157" docLength="10322" length="4" offset="2446" repeat="4" starttimestamp="1677312753280" timestamp="27232182" timestamp2="27232749">
    <text><![CDATA[List]]></text>
  </DocumentChange>
  <DocumentChange __id="245" _type="Insert" date="Sat Feb 25 10:46:28 EST 2023" docASTNodeCount="1667" docActiveCodeLength="9751" docExpressionCount="1157" docLength="10325" length="3" offset="2423" repeat="3" starttimestamp="1677312753280" timestamp="27235248" timestamp2="27235958">
    <text><![CDATA[// ]]></text>
  </DocumentChange>
  <DocumentChange __id="251" _type="Delete" date="Sat Feb 25 10:46:29 EST 2023" docASTNodeCount="1667" docActiveCodeLength="9751" docExpressionCount="1157" docLength="10324" endLine="78" length="1" offset="2425" startLine="78" starttimestamp="1677312753280" timestamp="27236356">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="253" _type="Insert" date="Sat Feb 25 10:46:29 EST 2023" docASTNodeCount="1667" docActiveCodeLength="9751" docExpressionCount="1157" docLength="10342" length="18" offset="2425" repeat="18" starttimestamp="1677312753280" timestamp="27236533" timestamp2="27240067">
    <text><![CDATA[This list is wher ]]></text>
  </DocumentChange>
  <DocumentChange __id="289" _type="Delete" date="Sat Feb 25 10:46:33 EST 2023" docASTNodeCount="1667" docActiveCodeLength="9751" docExpressionCount="1157" docLength="10341" endLine="78" length="1" offset="2442" startLine="78" starttimestamp="1677312753280" timestamp="27240601">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="291" _type="Insert" date="Sat Feb 25 10:46:34 EST 2023" docASTNodeCount="1667" docActiveCodeLength="9751" docExpressionCount="1157" docLength="10362" length="21" offset="2442" repeat="21" starttimestamp="1677312753280" timestamp="27240733" timestamp2="27244139">
    <text><![CDATA[e the plates will be ]]></text>
  </DocumentChange>
  <DocumentChange __id="333" _type="Delete" date="Sat Feb 25 10:46:37 EST 2023" docASTNodeCount="1667" docActiveCodeLength="9751" docExpressionCount="1157" docLength="10333" endLine="78" length="29" offset="2434" repeat="29" startLine="78" starttimestamp="1677312753280" timestamp="27244558" timestamp2="27247740">
    <text><![CDATA[ is where the plates will be ]]></text>
  </DocumentChange>
  <Command __id="388" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:46:40 EST 2023" starttimestamp="1677312753280" timestamp="27247614" />
  <Command __id="390" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:46:41 EST 2023" starttimestamp="1677312753280" timestamp="27247761" />
  <Command __id="392" _type="InsertStringCommand" date="Sat Feb 25 10:46:41 EST 2023" starttimestamp="1677312753280" timestamp="27248134" timestamp2="27248134">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="394" _type="InsertStringCommand" date="Sat Feb 25 10:46:41 EST 2023" starttimestamp="1677312753280" timestamp="27248413" timestamp2="27248413">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="396" _type="InsertStringCommand" date="Sat Feb 25 10:46:41 EST 2023" starttimestamp="1677312753280" timestamp="27248532" timestamp2="27248532">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="398" _type="InsertStringCommand" date="Sat Feb 25 10:46:41 EST 2023" starttimestamp="1677312753280" timestamp="27248713" timestamp2="27248713">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="400" _type="InsertStringCommand" date="Sat Feb 25 10:46:42 EST 2023" starttimestamp="1677312753280" timestamp="27248836" timestamp2="27248836">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="402" _type="InsertStringCommand" date="Sat Feb 25 10:46:42 EST 2023" starttimestamp="1677312753280" timestamp="27249000" timestamp2="27249000">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="405" _type="PauseCommand" date="Sat Feb 25 10:46:43 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27250514">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1514]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="404" _type="InsertStringCommand" date="Sat Feb 25 10:46:43 EST 2023" starttimestamp="1677312753280" timestamp="27250514" timestamp2="27250514">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="407" _type="InsertStringCommand" date="Sat Feb 25 10:46:43 EST 2023" starttimestamp="1677312753280" timestamp="27250693" timestamp2="27250693">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="409" _type="InsertStringCommand" date="Sat Feb 25 10:46:44 EST 2023" starttimestamp="1677312753280" timestamp="27250818" timestamp2="27250818">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="411" _type="InsertStringCommand" date="Sat Feb 25 10:46:44 EST 2023" starttimestamp="1677312753280" timestamp="27250914" timestamp2="27250914">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="413" _type="InsertStringCommand" date="Sat Feb 25 10:46:44 EST 2023" starttimestamp="1677312753280" timestamp="27251147" timestamp2="27251147">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="415" _type="InsertStringCommand" date="Sat Feb 25 10:46:44 EST 2023" starttimestamp="1677312753280" timestamp="27251672" timestamp2="27251672">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="417" _type="InsertStringCommand" date="Sat Feb 25 10:46:45 EST 2023" starttimestamp="1677312753280" timestamp="27251998" timestamp2="27251998">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="419" _type="InsertStringCommand" date="Sat Feb 25 10:46:45 EST 2023" starttimestamp="1677312753280" timestamp="27252479" timestamp2="27252479">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="421" _type="InsertStringCommand" date="Sat Feb 25 10:46:46 EST 2023" starttimestamp="1677312753280" timestamp="27252809" timestamp2="27252809">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="423" _type="InsertStringCommand" date="Sat Feb 25 10:46:46 EST 2023" starttimestamp="1677312753280" timestamp="27253034" timestamp2="27253034">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="425" _type="InsertStringCommand" date="Sat Feb 25 10:46:46 EST 2023" starttimestamp="1677312753280" timestamp="27253263" timestamp2="27253263">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="427" _type="InsertStringCommand" date="Sat Feb 25 10:46:46 EST 2023" starttimestamp="1677312753280" timestamp="27253421" timestamp2="27253421">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="429" _type="InsertStringCommand" date="Sat Feb 25 10:46:46 EST 2023" starttimestamp="1677312753280" timestamp="27253564" timestamp2="27253564">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="431" _type="InsertStringCommand" date="Sat Feb 25 10:46:46 EST 2023" starttimestamp="1677312753280" timestamp="27253682" timestamp2="27253682">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="433" _type="InsertStringCommand" date="Sat Feb 25 10:46:47 EST 2023" starttimestamp="1677312753280" timestamp="27253803" timestamp2="27253803">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="435" _type="InsertStringCommand" date="Sat Feb 25 10:46:47 EST 2023" starttimestamp="1677312753280" timestamp="27253907" timestamp2="27253907">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="437" _type="InsertStringCommand" date="Sat Feb 25 10:46:47 EST 2023" starttimestamp="1677312753280" timestamp="27254087" timestamp2="27254087">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="439" _type="InsertStringCommand" date="Sat Feb 25 10:46:47 EST 2023" starttimestamp="1677312753280" timestamp="27254236" timestamp2="27254236">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="441" _type="InsertStringCommand" date="Sat Feb 25 10:46:47 EST 2023" starttimestamp="1677312753280" timestamp="27254283" timestamp2="27254283">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="443" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:46:47 EST 2023" starttimestamp="1677312753280" timestamp="27254549" />
  <Command __id="445" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:46:47 EST 2023" starttimestamp="1677312753280" timestamp="27254691" />
  <Command __id="447" _type="InsertStringCommand" date="Sat Feb 25 10:46:48 EST 2023" starttimestamp="1677312753280" timestamp="27254881" timestamp2="27254881">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="449" _type="InsertStringCommand" date="Sat Feb 25 10:46:48 EST 2023" starttimestamp="1677312753280" timestamp="27255053" timestamp2="27255053">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="451" _type="InsertStringCommand" date="Sat Feb 25 10:46:48 EST 2023" starttimestamp="1677312753280" timestamp="27255146" timestamp2="27255146">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="453" _type="InsertStringCommand" date="Sat Feb 25 10:46:48 EST 2023" starttimestamp="1677312753280" timestamp="27255200" timestamp2="27255200">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="455" _type="InsertStringCommand" date="Sat Feb 25 10:46:48 EST 2023" starttimestamp="1677312753280" timestamp="27255364" timestamp2="27255364">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="457" _type="InsertStringCommand" date="Sat Feb 25 10:46:48 EST 2023" starttimestamp="1677312753280" timestamp="27255448" timestamp2="27255448">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="459" _type="InsertStringCommand" date="Sat Feb 25 10:46:48 EST 2023" starttimestamp="1677312753280" timestamp="27255589" timestamp2="27255589">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="461" _type="InsertStringCommand" date="Sat Feb 25 10:46:48 EST 2023" starttimestamp="1677312753280" timestamp="27255691" timestamp2="27255691">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="463" _type="InsertStringCommand" date="Sat Feb 25 10:46:49 EST 2023" starttimestamp="1677312753280" timestamp="27255879" timestamp2="27255879">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="465" _type="InsertStringCommand" date="Sat Feb 25 10:46:49 EST 2023" starttimestamp="1677312753280" timestamp="27255984" timestamp2="27255984">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="391" _type="Insert" date="Sat Feb 25 10:46:41 EST 2023" docASTNodeCount="1667" docActiveCodeLength="9751" docExpressionCount="1157" docLength="10358" length="25" offset="2434" repeat="25" starttimestamp="1677312753280" timestamp="27248088" timestamp2="27254262">
    <text><![CDATA[ will keep a track of te ]]></text>
  </DocumentChange>
  <DocumentChange __id="442" _type="Delete" date="Sat Feb 25 10:46:47 EST 2023" docASTNodeCount="1667" docActiveCodeLength="9751" docExpressionCount="1157" docLength="10356" endLine="78" length="2" offset="2457" repeat="2" startLine="78" starttimestamp="1677312753280" timestamp="27254513" timestamp2="27254649">
    <text><![CDATA[e ]]></text>
  </DocumentChange>
  <DocumentChange __id="446" _type="Insert" date="Sat Feb 25 10:46:48 EST 2023" docASTNodeCount="1667" docActiveCodeLength="9751" docExpressionCount="1157" docLength="10366" length="10" offset="2457" repeat="10" starttimestamp="1677312753280" timestamp="27254863" timestamp2="27255939">
    <text><![CDATA[he plates ]]></text>
  </DocumentChange>
  <Command __id="467" _type="PauseCommand" date="Sat Feb 25 10:46:51 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27257983">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1999]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <DocumentChange __id="466" _type="Insert" date="Sat Feb 25 10:46:51 EST 2023" docASTNodeCount="1667" docActiveCodeLength="9751" docExpressionCount="1157" docLength="10368" length="2" offset="2467" repeat="2" starttimestamp="1677312753280" timestamp="27257983" timestamp2="27258182">
    <text><![CDATA[ta]]></text>
  </DocumentChange>
  <Command __id="468" _type="InsertStringCommand" date="Sat Feb 25 10:46:51 EST 2023" starttimestamp="1677312753280" timestamp="27258039" timestamp2="27258039">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="470" _type="InsertStringCommand" date="Sat Feb 25 10:46:51 EST 2023" starttimestamp="1677312753280" timestamp="27258226" timestamp2="27258226">
    <data><![CDATA[a]]></data>
  </Command>
  <DocumentChange __id="471" _type="Delete" date="Sat Feb 25 10:46:51 EST 2023" docASTNodeCount="1667" docActiveCodeLength="9751" docExpressionCount="1157" docLength="10367" endLine="78" length="1" offset="2468" startLine="78" starttimestamp="1677312753280" timestamp="27258462">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <Command __id="472" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:46:51 EST 2023" starttimestamp="1677312753280" timestamp="27258478" />
  <Command __id="474" _type="InsertStringCommand" date="Sat Feb 25 10:46:51 EST 2023" starttimestamp="1677312753280" timestamp="27258712" timestamp2="27258712">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="476" _type="InsertStringCommand" date="Sat Feb 25 10:46:52 EST 2023" starttimestamp="1677312753280" timestamp="27258861" timestamp2="27258861">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="478" _type="InsertStringCommand" date="Sat Feb 25 10:46:52 EST 2023" starttimestamp="1677312753280" timestamp="27258914" timestamp2="27258914">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="480" _type="InsertStringCommand" date="Sat Feb 25 10:46:52 EST 2023" starttimestamp="1677312753280" timestamp="27258972" timestamp2="27258972">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="482" _type="InsertStringCommand" date="Sat Feb 25 10:46:52 EST 2023" starttimestamp="1677312753280" timestamp="27259114" timestamp2="27259114">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="484" _type="InsertStringCommand" date="Sat Feb 25 10:46:52 EST 2023" starttimestamp="1677312753280" timestamp="27259188" timestamp2="27259188">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="486" _type="InsertStringCommand" date="Sat Feb 25 10:46:52 EST 2023" starttimestamp="1677312753280" timestamp="27259293" timestamp2="27259293">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="488" _type="InsertStringCommand" date="Sat Feb 25 10:46:52 EST 2023" starttimestamp="1677312753280" timestamp="27259456" timestamp2="27259456">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="490" _type="InsertStringCommand" date="Sat Feb 25 10:46:52 EST 2023" starttimestamp="1677312753280" timestamp="27259561" timestamp2="27259561">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="492" _type="InsertStringCommand" date="Sat Feb 25 10:46:52 EST 2023" starttimestamp="1677312753280" timestamp="27259598" timestamp2="27259598">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="494" _type="InsertStringCommand" date="Sat Feb 25 10:46:53 EST 2023" starttimestamp="1677312753280" timestamp="27259773" timestamp2="27259773">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="496" _type="InsertStringCommand" date="Sat Feb 25 10:46:53 EST 2023" starttimestamp="1677312753280" timestamp="27259865" timestamp2="27259865">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="498" _type="InsertStringCommand" date="Sat Feb 25 10:46:53 EST 2023" starttimestamp="1677312753280" timestamp="27259984" timestamp2="27259984">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="500" _type="InsertStringCommand" date="Sat Feb 25 10:46:53 EST 2023" starttimestamp="1677312753280" timestamp="27260184" timestamp2="27260184">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="502" _type="InsertStringCommand" date="Sat Feb 25 10:46:53 EST 2023" starttimestamp="1677312753280" timestamp="27260476" timestamp2="27260476">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="504" _type="InsertStringCommand" date="Sat Feb 25 10:46:54 EST 2023" starttimestamp="1677312753280" timestamp="27261167" timestamp2="27261167">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="506" _type="InsertStringCommand" date="Sat Feb 25 10:46:54 EST 2023" starttimestamp="1677312753280" timestamp="27261374" timestamp2="27261374">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="508" _type="InsertStringCommand" date="Sat Feb 25 10:46:54 EST 2023" starttimestamp="1677312753280" timestamp="27261510" timestamp2="27261510">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="510" _type="InsertStringCommand" date="Sat Feb 25 10:46:54 EST 2023" starttimestamp="1677312753280" timestamp="27261690" timestamp2="27261690">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="512" _type="InsertStringCommand" date="Sat Feb 25 10:46:55 EST 2023" starttimestamp="1677312753280" timestamp="27261805" timestamp2="27261805">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="514" _type="InsertStringCommand" date="Sat Feb 25 10:46:55 EST 2023" starttimestamp="1677312753280" timestamp="27261872" timestamp2="27261872">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="517" _type="PauseCommand" date="Sat Feb 25 10:46:56 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27262955">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1083]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="516" _type="InsertStringCommand" date="Sat Feb 25 10:46:56 EST 2023" starttimestamp="1677312753280" timestamp="27262955" timestamp2="27262955">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="519" _type="InsertStringCommand" date="Sat Feb 25 10:46:56 EST 2023" starttimestamp="1677312753280" timestamp="27263077" timestamp2="27263077">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="521" _type="InsertStringCommand" date="Sat Feb 25 10:46:56 EST 2023" starttimestamp="1677312753280" timestamp="27263166" timestamp2="27263166">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="523" _type="InsertStringCommand" date="Sat Feb 25 10:46:56 EST 2023" starttimestamp="1677312753280" timestamp="27263441" timestamp2="27263441">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="525" _type="InsertStringCommand" date="Sat Feb 25 10:46:56 EST 2023" starttimestamp="1677312753280" timestamp="27263590" timestamp2="27263590">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="527" _type="InsertStringCommand" date="Sat Feb 25 10:46:56 EST 2023" starttimestamp="1677312753280" timestamp="27263711" timestamp2="27263711">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="529" _type="InsertStringCommand" date="Sat Feb 25 10:46:57 EST 2023" starttimestamp="1677312753280" timestamp="27263778" timestamp2="27263778">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="531" _type="InsertStringCommand" date="Sat Feb 25 10:46:57 EST 2023" starttimestamp="1677312753280" timestamp="27263914" timestamp2="27263914">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="533" _type="InsertStringCommand" date="Sat Feb 25 10:46:57 EST 2023" starttimestamp="1677312753280" timestamp="27264042" timestamp2="27264042">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="535" _type="InsertStringCommand" date="Sat Feb 25 10:46:57 EST 2023" starttimestamp="1677312753280" timestamp="27264148" timestamp2="27264148">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="537" _type="InsertStringCommand" date="Sat Feb 25 10:46:57 EST 2023" starttimestamp="1677312753280" timestamp="27264230" timestamp2="27264230">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="539" _type="InsertStringCommand" date="Sat Feb 25 10:46:57 EST 2023" starttimestamp="1677312753280" timestamp="27264292" timestamp2="27264292">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="541" _type="InsertStringCommand" date="Sat Feb 25 10:46:57 EST 2023" starttimestamp="1677312753280" timestamp="27264439" timestamp2="27264439">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="543" _type="InsertStringCommand" date="Sat Feb 25 10:46:57 EST 2023" starttimestamp="1677312753280" timestamp="27264514" timestamp2="27264514">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="545" _type="InsertStringCommand" date="Sat Feb 25 10:46:57 EST 2023" starttimestamp="1677312753280" timestamp="27264664" timestamp2="27264664">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="547" _type="InsertStringCommand" date="Sat Feb 25 10:46:58 EST 2023" starttimestamp="1677312753280" timestamp="27265039" timestamp2="27265039">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="549" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:46:58 EST 2023" starttimestamp="1677312753280" timestamp="27265308" />
  <Command __id="551" _type="InsertStringCommand" date="Sat Feb 25 10:46:58 EST 2023" starttimestamp="1677312753280" timestamp="27265433" timestamp2="27265433">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="553" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:46:59 EST 2023" starttimestamp="1677312753280" timestamp="27265789" />
  <Command __id="555" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:46:59 EST 2023" starttimestamp="1677312753280" timestamp="27265877" />
  <Command __id="557" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:46:59 EST 2023" starttimestamp="1677312753280" timestamp="27266058" />
  <Command __id="559" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:46:59 EST 2023" starttimestamp="1677312753280" timestamp="27266175" />
  <Command __id="561" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:46:59 EST 2023" starttimestamp="1677312753280" timestamp="27266434" />
  <Command __id="563" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:46:59 EST 2023" starttimestamp="1677312753280" timestamp="27266671" />
  <Command __id="565" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:47:00 EST 2023" starttimestamp="1677312753280" timestamp="27266824" />
  <Command __id="567" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:47:00 EST 2023" starttimestamp="1677312753280" timestamp="27266952" />
  <Command __id="569" _type="InsertStringCommand" date="Sat Feb 25 10:47:00 EST 2023" starttimestamp="1677312753280" timestamp="27267367" timestamp2="27267367">
    <data><![CDATA[F]]></data>
  </Command>
  <Command __id="571" _type="InsertStringCommand" date="Sat Feb 25 10:47:00 EST 2023" starttimestamp="1677312753280" timestamp="27267467" timestamp2="27267467">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="573" _type="InsertStringCommand" date="Sat Feb 25 10:47:00 EST 2023" starttimestamp="1677312753280" timestamp="27267594" timestamp2="27267594">
    <data><![CDATA[F]]></data>
  </Command>
  <Command __id="575" _type="InsertStringCommand" date="Sat Feb 25 10:47:01 EST 2023" starttimestamp="1677312753280" timestamp="27268001" timestamp2="27268001">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="577" _type="PauseCommand" date="Sat Feb 25 10:47:03 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27269795">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1794]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="576" _type="MoveCaretCommand" caretOffset="1652" date="Sat Feb 25 10:47:03 EST 2023" docOffset="2532" starttimestamp="1677312753280" timestamp="27269795" />
  <Command __id="579" _type="PauseCommand" date="Sat Feb 25 10:47:06 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="27273612">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3817]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="578" _type="MoveCaretCommand" caretOffset="1907" date="Sat Feb 25 10:47:06 EST 2023" docOffset="2787" starttimestamp="1677312753280" timestamp="27273612" />
  <Command __id="580" _type="MoveCaretCommand" caretOffset="1937" date="Sat Feb 25 10:47:07 EST 2023" docOffset="2817" starttimestamp="1677312753280" timestamp="27274388" />
  <Command __id="582" _type="PauseCommand" date="Sat Feb 25 10:47:09 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27276197">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1809]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="581" _type="MoveCaretCommand" caretOffset="1954" date="Sat Feb 25 10:47:09 EST 2023" docOffset="2834" starttimestamp="1677312753280" timestamp="27276197" />
  <Command __id="583" _type="SelectTextCommand" caretOffset="1956" date="Sat Feb 25 10:47:09 EST 2023" end="1956" start="1946" starttimestamp="1677312753280" timestamp="27276342" />
  <Command __id="584" _type="SelectTextCommand" caretOffset="1982" date="Sat Feb 25 10:47:09 EST 2023" end="1982" start="1939" starttimestamp="1677312753280" timestamp="27276563" />
  <Command __id="586" _type="PauseCommand" date="Sat Feb 25 10:47:12 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="27278750">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[2186]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="585" _type="MoveCaretCommand" caretOffset="1985" date="Sat Feb 25 10:47:12 EST 2023" docOffset="2865" starttimestamp="1677312753280" timestamp="27278749" />
  <Command __id="588" _type="PauseCommand" date="Sat Feb 25 10:47:13 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27279957">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1208]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="587" _type="MoveCaretCommand" caretOffset="2014" date="Sat Feb 25 10:47:13 EST 2023" docOffset="2894" starttimestamp="1677312753280" timestamp="27279957" />
  <Command __id="590" _type="PauseCommand" date="Sat Feb 25 10:47:24 EST 2023" range="10s-20s" starttimestamp="1677312753280" timestamp="27291690">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[11733]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="589" _type="SelectTextCommand" caretOffset="2468" date="Sat Feb 25 10:47:24 EST 2023" end="2468" start="2432" starttimestamp="1677312753280" timestamp="27291690" />
  <Command __id="592" _type="PauseCommand" date="Sat Feb 25 10:47:31 EST 2023" range="5s-10s" starttimestamp="1677312753280" timestamp="27298093">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[6403]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="591" _type="MoveCaretCommand" caretOffset="2479" date="Sat Feb 25 10:47:31 EST 2023" docOffset="3359" starttimestamp="1677312753280" timestamp="27298093" />
  <Command __id="593" _type="SelectTextCommand" caretOffset="2486" date="Sat Feb 25 10:47:31 EST 2023" end="2486" start="2472" starttimestamp="1677312753280" timestamp="27298260" />
  <Command __id="595" _type="InsertStringCommand" date="Sat Feb 25 10:47:32 EST 2023" starttimestamp="1677312753280" timestamp="27299275" timestamp2="27299275">
    <data><![CDATA[q]]></data>
  </Command>
  <Command __id="597" _type="InsertStringCommand" date="Sat Feb 25 10:47:32 EST 2023" starttimestamp="1677312753280" timestamp="27299531" timestamp2="27299531">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="599" _type="InsertStringCommand" date="Sat Feb 25 10:47:33 EST 2023" starttimestamp="1677312753280" timestamp="27299956" timestamp2="27299956">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="601" _type="InsertStringCommand" date="Sat Feb 25 10:47:33 EST 2023" starttimestamp="1677312753280" timestamp="27300259" timestamp2="27300259">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="603" _type="InsertStringCommand" date="Sat Feb 25 10:47:33 EST 2023" starttimestamp="1677312753280" timestamp="27300560" timestamp2="27300560">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="605" _type="InsertStringCommand" date="Sat Feb 25 10:47:33 EST 2023" starttimestamp="1677312753280" timestamp="27300717" timestamp2="27300717">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="607" _type="InsertStringCommand" date="Sat Feb 25 10:47:34 EST 2023" starttimestamp="1677312753280" timestamp="27301033" timestamp2="27301033">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="609" _type="InsertStringCommand" date="Sat Feb 25 10:47:34 EST 2023" starttimestamp="1677312753280" timestamp="27301277" timestamp2="27301277">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="611" _type="InsertStringCommand" date="Sat Feb 25 10:47:34 EST 2023" starttimestamp="1677312753280" timestamp="27301354" timestamp2="27301354">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="613" _type="InsertStringCommand" date="Sat Feb 25 10:47:34 EST 2023" starttimestamp="1677312753280" timestamp="27301587" timestamp2="27301587">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="615" _type="PauseCommand" date="Sat Feb 25 10:47:39 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="27306177">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[4590]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="614" _type="SelectTextCommand" caretOffset="2468" date="Sat Feb 25 10:47:39 EST 2023" end="2468" start="2432" starttimestamp="1677312753280" timestamp="27306177" />
  <Command __id="617" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:47:40 EST 2023" starttimestamp="1677312753280" timestamp="27306868" />
  <Command __id="619" _type="PauseCommand" date="Sat Feb 25 10:47:44 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="27311658">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[4790]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <DocumentChange __id="473" _type="Insert" date="Sat Feb 25 10:46:51 EST 2023" docASTNodeCount="1667" docActiveCodeLength="9751" docExpressionCount="1157" docLength="10404" length="37" offset="2468" repeat="37" starttimestamp="1677312753280" timestamp="27258670" timestamp2="27264988">
    <text><![CDATA[hat enter the buffer so that the firt]]></text>
  </DocumentChange>
  <DocumentChange __id="548" _type="Delete" date="Sat Feb 25 10:46:58 EST 2023" docASTNodeCount="1667" docActiveCodeLength="9751" docExpressionCount="1157" docLength="10403" endLine="78" length="1" offset="2504" startLine="78" starttimestamp="1677312753280" timestamp="27265285">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="550" _type="Insert" date="Sat Feb 25 10:46:58 EST 2023" docASTNodeCount="1667" docActiveCodeLength="9751" docExpressionCount="1157" docLength="10404" length="1" offset="2504" starttimestamp="1677312753280" timestamp="27265385">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="552" _type="Delete" date="Sat Feb 25 10:46:59 EST 2023" docASTNodeCount="1667" docActiveCodeLength="9751" docExpressionCount="1157" docLength="10396" endLine="78" length="8" offset="2497" repeat="8" startLine="78" starttimestamp="1677312753280" timestamp="27265751" timestamp2="27266913">
    <text><![CDATA[the firs]]></text>
  </DocumentChange>
  <DocumentChange __id="568" _type="Insert" date="Sat Feb 25 10:47:00 EST 2023" docASTNodeCount="1667" docActiveCodeLength="9751" docExpressionCount="1157" docLength="10400" length="4" offset="2497" repeat="4" starttimestamp="1677312753280" timestamp="27267310" timestamp2="27267952">
    <text><![CDATA[FIFO]]></text>
  </DocumentChange>
  <DocumentChange __id="594" _type="Replace" date="Sat Feb 25 10:47:32 EST 2023" docASTNodeCount="1667" docActiveCodeLength="9738" docExpressionCount="1157" docLength="10387" endLine="102" insertionLength="1" int_docASTNodeCount="1665" int_docActiveCodeLength="9737" int_docExpressionCount="1155" int_docLength="10386" length="14" offset="3352" startLine="102" starttimestamp="1677312753280" timestamp="27299240">
    <deletedText><![CDATA[otherPlateList]]></deletedText>
    <insertedText><![CDATA[q]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="596" _type="Insert" date="Sat Feb 25 10:47:32 EST 2023" docASTNodeCount="1667" docActiveCodeLength="9747" docExpressionCount="1157" docLength="10396" length="9" offset="3353" repeat="9" starttimestamp="1677312753280" timestamp="27299507" timestamp2="27301538">
    <text><![CDATA[ueuedList]]></text>
  </DocumentChange>
  <DocumentChange __id="616" _type="Delete" date="Sat Feb 25 10:47:40 EST 2023" docASTNodeCount="1658" docActiveCodeLength="9711" docExpressionCount="1152" docLength="10360" endLine="101" length="36" offset="3312" startLine="101" starttimestamp="1677312753280" timestamp="27306804">
    <text><![CDATA[plateList = new ArrayList<APlate>();]]></text>
  </DocumentChange>
  <Command __id="618" _type="SelectTextCommand" caretOffset="3488" date="Sat Feb 25 10:47:44 EST 2023" end="3488" start="3367" starttimestamp="1677312753280" timestamp="27311658" />
  <Command __id="621" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:47:45 EST 2023" starttimestamp="1677312753280" timestamp="27312269" />
  <Command __id="623" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:47:45 EST 2023" starttimestamp="1677312753280" timestamp="27312678" />
  <Command __id="625" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:47:46 EST 2023" starttimestamp="1677312753280" timestamp="27312954" />
  <Command __id="628" _type="PauseCommand" date="Sat Feb 25 10:47:47 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27314063">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1108]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="627" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:47:47 EST 2023" starttimestamp="1677312753280" timestamp="27314062" />
  <Command __id="630" _type="PauseCommand" date="Sat Feb 25 10:47:52 EST 2023" range="5s-10s" starttimestamp="1677312753280" timestamp="27319309">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[5247]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="629" _type="SelectTextCommand" caretOffset="3381" date="Sat Feb 25 10:47:52 EST 2023" end="3381" start="3367" starttimestamp="1677312753280" timestamp="27319309" />
  <Command __id="632" _type="InsertStringCommand" date="Sat Feb 25 10:47:53 EST 2023" starttimestamp="1677312753280" timestamp="27320121" timestamp2="27320121">
    <data><![CDATA[q]]></data>
  </Command>
  <Command __id="634" _type="InsertStringCommand" date="Sat Feb 25 10:47:53 EST 2023" starttimestamp="1677312753280" timestamp="27320221" timestamp2="27320221">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="636" _type="InsertStringCommand" date="Sat Feb 25 10:47:53 EST 2023" starttimestamp="1677312753280" timestamp="27320369" timestamp2="27320369">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="638" _type="InsertStringCommand" date="Sat Feb 25 10:47:53 EST 2023" starttimestamp="1677312753280" timestamp="27320593" timestamp2="27320593">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="640" _type="InsertStringCommand" date="Sat Feb 25 10:47:54 EST 2023" starttimestamp="1677312753280" timestamp="27320844" timestamp2="27320844">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="642" _type="InsertStringCommand" date="Sat Feb 25 10:47:54 EST 2023" starttimestamp="1677312753280" timestamp="27321055" timestamp2="27321055">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="644" _type="InsertStringCommand" date="Sat Feb 25 10:47:54 EST 2023" starttimestamp="1677312753280" timestamp="27321451" timestamp2="27321451">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="646" _type="InsertStringCommand" date="Sat Feb 25 10:47:55 EST 2023" starttimestamp="1677312753280" timestamp="27321889" timestamp2="27321889">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="648" _type="InsertStringCommand" date="Sat Feb 25 10:47:55 EST 2023" starttimestamp="1677312753280" timestamp="27321997" timestamp2="27321997">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="650" _type="InsertStringCommand" date="Sat Feb 25 10:47:55 EST 2023" starttimestamp="1677312753280" timestamp="27322245" timestamp2="27322245">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="652" _type="PauseCommand" date="Sat Feb 25 10:47:57 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27323996">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1751]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="651" _type="MoveCaretCommand" caretOffset="3411" date="Sat Feb 25 10:47:57 EST 2023" docOffset="4291" starttimestamp="1677312753280" timestamp="27323996" />
  <Command __id="653" _type="SelectTextCommand" caretOffset="3414" date="Sat Feb 25 10:47:57 EST 2023" end="3414" start="3400" starttimestamp="1677312753280" timestamp="27324188" />
  <DocumentChange __id="620" _type="Delete" date="Sat Feb 25 10:47:45 EST 2023" docASTNodeCount="1631" docActiveCodeLength="9586" docExpressionCount="1129" docLength="10235" endLine="128" length="125" offset="4243" repeat="4" startLine="124" starttimestamp="1677312753280" timestamp="27312204" timestamp2="27314010">
    <text><![CDATA[
		plateList.add(new APlate());
		plateList.get(0).getPlate().setHeight(0);
		plateList.get(0).getPlate().setWidth(0);
		]]></text>
  </DocumentChange>
  <DocumentChange __id="631" _type="Replace" date="Sat Feb 25 10:47:53 EST 2023" docASTNodeCount="1631" docActiveCodeLength="9573" docExpressionCount="1129" docLength="10222" endLine="125" insertionLength="1" int_docASTNodeCount="1630" int_docActiveCodeLength="9572" int_docExpressionCount="1128" int_docLength="10221" length="14" offset="4247" startLine="125" starttimestamp="1677312753280" timestamp="27320050">
    <deletedText><![CDATA[otherPlateList]]></deletedText>
    <insertedText><![CDATA[q]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="633" _type="Insert" date="Sat Feb 25 10:47:53 EST 2023" docASTNodeCount="1631" docActiveCodeLength="9582" docExpressionCount="1129" docLength="10231" length="9" offset="4248" repeat="9" starttimestamp="1677312753280" timestamp="27320200" timestamp2="27322196">
    <text><![CDATA[ueuedList]]></text>
  </DocumentChange>
  <Command __id="655" _type="PauseCommand" date="Sat Feb 25 10:47:58 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27325244">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1056]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Replace]]></next>
  </Command>
  <DocumentChange __id="654" _type="Replace" date="Sat Feb 25 10:47:58 EST 2023" docASTNodeCount="1631" docActiveCodeLength="9569" docExpressionCount="1129" docLength="10218" endLine="126" insertionLength="1" int_docASTNodeCount="1630" int_docActiveCodeLength="9568" int_docExpressionCount="1128" int_docLength="10217" length="14" offset="4280" startLine="126" starttimestamp="1677312753280" timestamp="27325244">
    <deletedText><![CDATA[otherPlateList]]></deletedText>
    <insertedText><![CDATA[q]]></insertedText>
  </DocumentChange>
  <Command __id="656" _type="InsertStringCommand" date="Sat Feb 25 10:47:58 EST 2023" starttimestamp="1677312753280" timestamp="27325283" timestamp2="27325283">
    <data><![CDATA[q]]></data>
  </Command>
  <DocumentChange __id="657" _type="Insert" date="Sat Feb 25 10:47:58 EST 2023" docASTNodeCount="1631" docActiveCodeLength="9578" docExpressionCount="1129" docLength="10227" length="9" offset="4281" repeat="9" starttimestamp="1677312753280" timestamp="27325297" timestamp2="27326478">
    <text><![CDATA[ueuedLiss]]></text>
  </DocumentChange>
  <Command __id="658" _type="InsertStringCommand" date="Sat Feb 25 10:47:58 EST 2023" starttimestamp="1677312753280" timestamp="27325326" timestamp2="27325326">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="660" _type="InsertStringCommand" date="Sat Feb 25 10:47:58 EST 2023" starttimestamp="1677312753280" timestamp="27325364" timestamp2="27325364">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="662" _type="InsertStringCommand" date="Sat Feb 25 10:47:58 EST 2023" starttimestamp="1677312753280" timestamp="27325421" timestamp2="27325421">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="664" _type="InsertStringCommand" date="Sat Feb 25 10:47:58 EST 2023" starttimestamp="1677312753280" timestamp="27325621" timestamp2="27325621">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="666" _type="InsertStringCommand" date="Sat Feb 25 10:47:59 EST 2023" starttimestamp="1677312753280" timestamp="27325823" timestamp2="27325823">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="668" _type="InsertStringCommand" date="Sat Feb 25 10:47:59 EST 2023" starttimestamp="1677312753280" timestamp="27326123" timestamp2="27326123">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="670" _type="InsertStringCommand" date="Sat Feb 25 10:47:59 EST 2023" starttimestamp="1677312753280" timestamp="27326369" timestamp2="27326369">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="672" _type="InsertStringCommand" date="Sat Feb 25 10:47:59 EST 2023" starttimestamp="1677312753280" timestamp="27326459" timestamp2="27326459">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="674" _type="InsertStringCommand" date="Sat Feb 25 10:47:59 EST 2023" starttimestamp="1677312753280" timestamp="27326520" timestamp2="27326520">
    <data><![CDATA[s]]></data>
  </Command>
  <DocumentChange __id="675" _type="Delete" date="Sat Feb 25 10:48:00 EST 2023" docASTNodeCount="1631" docActiveCodeLength="9577" docExpressionCount="1129" docLength="10226" endLine="126" length="1" offset="4289" startLine="126" starttimestamp="1677312753280" timestamp="27327100">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="676" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:48:00 EST 2023" starttimestamp="1677312753280" timestamp="27327139" />
  <Command __id="678" _type="InsertStringCommand" date="Sat Feb 25 10:48:00 EST 2023" starttimestamp="1677312753280" timestamp="27327305" timestamp2="27327305">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="680" _type="PauseCommand" date="Sat Feb 25 10:48:02 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27329045">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1739]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="679" _type="MoveCaretCommand" caretOffset="3448" date="Sat Feb 25 10:48:02 EST 2023" docOffset="4328" starttimestamp="1677312753280" timestamp="27329044" />
  <Command __id="681" _type="SelectTextCommand" caretOffset="3460" date="Sat Feb 25 10:48:02 EST 2023" end="3460" start="3446" starttimestamp="1677312753280" timestamp="27329216" />
  <Command __id="683" _type="InsertStringCommand" date="Sat Feb 25 10:48:02 EST 2023" starttimestamp="1677312753280" timestamp="27329591" timestamp2="27329591">
    <data><![CDATA[q]]></data>
  </Command>
  <Command __id="685" _type="InsertStringCommand" date="Sat Feb 25 10:48:03 EST 2023" starttimestamp="1677312753280" timestamp="27329819" timestamp2="27329819">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="687" _type="InsertStringCommand" date="Sat Feb 25 10:48:03 EST 2023" starttimestamp="1677312753280" timestamp="27329982" timestamp2="27329982">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="689" _type="InsertStringCommand" date="Sat Feb 25 10:48:03 EST 2023" starttimestamp="1677312753280" timestamp="27330174" timestamp2="27330174">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="691" _type="InsertStringCommand" date="Sat Feb 25 10:48:03 EST 2023" starttimestamp="1677312753280" timestamp="27330292" timestamp2="27330292">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="693" _type="InsertStringCommand" date="Sat Feb 25 10:48:03 EST 2023" starttimestamp="1677312753280" timestamp="27330511" timestamp2="27330511">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="695" _type="InsertStringCommand" date="Sat Feb 25 10:48:04 EST 2023" starttimestamp="1677312753280" timestamp="27330818" timestamp2="27330818">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="697" _type="InsertStringCommand" date="Sat Feb 25 10:48:04 EST 2023" starttimestamp="1677312753280" timestamp="27331081" timestamp2="27331081">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="699" _type="InsertStringCommand" date="Sat Feb 25 10:48:04 EST 2023" starttimestamp="1677312753280" timestamp="27331163" timestamp2="27331163">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="701" _type="InsertStringCommand" date="Sat Feb 25 10:48:04 EST 2023" starttimestamp="1677312753280" timestamp="27331475" timestamp2="27331475">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="703" _type="PauseCommand" date="Sat Feb 25 10:48:06 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27332734">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1259]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="702" _type="MoveCaretCommand" caretOffset="3491" date="Sat Feb 25 10:48:06 EST 2023" docOffset="4371" starttimestamp="1677312753280" timestamp="27332734" />
  <Command __id="704" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sat Feb 25 10:48:06 EST 2023" starttimestamp="1677312753280" timestamp="27333546" />
  <Command __id="705" _type="EclipseCommand" commandID="" date="Sat Feb 25 10:48:06 EST 2023" starttimestamp="1677312753280" timestamp="27333617" />
  <Command __id="706" _type="EclipseCommand" commandID="" date="Sat Feb 25 10:48:07 EST 2023" starttimestamp="1677312753280" timestamp="27333739" />
  <Command __id="708" _type="PauseCommand" date="Sat Feb 25 10:48:17 EST 2023" range="10s-20s" starttimestamp="1677312753280" timestamp="27343844">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[10105]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="707" _type="SelectTextCommand" caretOffset="5177" date="Sat Feb 25 10:48:17 EST 2023" end="5177" start="5157" starttimestamp="1677312753280" timestamp="27343844" />
  <Command __id="710" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:48:18 EST 2023" starttimestamp="1677312753280" timestamp="27344742" />
  <Command __id="712" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:48:18 EST 2023" starttimestamp="1677312753280" timestamp="27345047" />
  <Command __id="714" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:48:18 EST 2023" starttimestamp="1677312753280" timestamp="27345377" />
  <Command __id="716" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:48:19 EST 2023" starttimestamp="1677312753280" timestamp="27345746" />
  <Command __id="718" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:48:19 EST 2023" starttimestamp="1677312753280" timestamp="27346201" />
  <Command __id="720" _type="PauseCommand" date="Sat Feb 25 10:48:20 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27347675">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1474]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="719" _type="MoveCaretCommand" caretOffset="5166" date="Sat Feb 25 10:48:20 EST 2023" docOffset="6046" starttimestamp="1677312753280" timestamp="27347675" />
  <Command __id="721" _type="SelectTextCommand" caretOffset="5171" date="Sat Feb 25 10:48:21 EST 2023" end="5171" start="5157" starttimestamp="1677312753280" timestamp="27347865" />
  <Command __id="723" _type="InsertStringCommand" date="Sat Feb 25 10:48:22 EST 2023" starttimestamp="1677312753280" timestamp="27348877" timestamp2="27348877">
    <data><![CDATA[q]]></data>
  </Command>
  <Command __id="725" _type="InsertStringCommand" date="Sat Feb 25 10:48:22 EST 2023" starttimestamp="1677312753280" timestamp="27348907" timestamp2="27348907">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="727" _type="InsertStringCommand" date="Sat Feb 25 10:48:22 EST 2023" starttimestamp="1677312753280" timestamp="27349145" timestamp2="27349145">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="729" _type="InsertStringCommand" date="Sat Feb 25 10:48:22 EST 2023" starttimestamp="1677312753280" timestamp="27349322" timestamp2="27349322">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="731" _type="InsertStringCommand" date="Sat Feb 25 10:48:22 EST 2023" starttimestamp="1677312753280" timestamp="27349461" timestamp2="27349461">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="733" _type="InsertStringCommand" date="Sat Feb 25 10:48:22 EST 2023" starttimestamp="1677312753280" timestamp="27349666" timestamp2="27349666">
    <data><![CDATA[d]]></data>
  </Command>
  <DocumentChange __id="677" _type="Insert" date="Sat Feb 25 10:48:00 EST 2023" docASTNodeCount="1631" docActiveCodeLength="9578" docExpressionCount="1129" docLength="10227" length="1" offset="4289" starttimestamp="1677312753280" timestamp="27327276">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="682" _type="Replace" date="Sat Feb 25 10:48:02 EST 2023" docASTNodeCount="1631" docActiveCodeLength="9565" docExpressionCount="1129" docLength="10214" endLine="127" insertionLength="1" int_docASTNodeCount="1630" int_docActiveCodeLength="9564" int_docExpressionCount="1128" int_docLength="10213" length="14" offset="4326" startLine="127" starttimestamp="1677312753280" timestamp="27329536">
    <deletedText><![CDATA[otherPlateList]]></deletedText>
    <insertedText><![CDATA[q]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="684" _type="Insert" date="Sat Feb 25 10:48:03 EST 2023" docASTNodeCount="1631" docActiveCodeLength="9574" docExpressionCount="1129" docLength="10223" length="9" offset="4327" repeat="9" starttimestamp="1677312753280" timestamp="27329774" timestamp2="27331431">
    <text><![CDATA[ueuedList]]></text>
  </DocumentChange>
  <DocumentChange __id="709" _type="Delete" date="Sat Feb 25 10:48:17 EST 2023" docASTNodeCount="1626" docActiveCodeLength="9549" docExpressionCount="1125" docLength="10198" endLine="180" length="25" offset="6032" repeat="5" startLine="179" starttimestamp="1677312753280" timestamp="27344693" timestamp2="27346157">
    <text><![CDATA[
			plateList.remove(0);]]></text>
  </DocumentChange>
  <DocumentChange __id="722" _type="Replace" date="Sat Feb 25 10:48:22 EST 2023" docASTNodeCount="1626" docActiveCodeLength="9536" docExpressionCount="1125" docLength="10185" endLine="180" insertionLength="1" int_docASTNodeCount="1625" int_docActiveCodeLength="9535" int_docExpressionCount="1124" int_docLength="10184" length="14" offset="6037" startLine="180" starttimestamp="1677312753280" timestamp="27348843">
    <deletedText><![CDATA[otherPlateList]]></deletedText>
    <insertedText><![CDATA[q]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="724" _type="Insert" date="Sat Feb 25 10:48:22 EST 2023" docASTNodeCount="1626" docActiveCodeLength="9541" docExpressionCount="1125" docLength="10190" length="5" offset="6038" repeat="5" starttimestamp="1677312753280" timestamp="27348888" timestamp2="27349622">
    <text><![CDATA[ueued]]></text>
  </DocumentChange>
  <Command __id="735" _type="PauseCommand" date="Sat Feb 25 10:48:28 EST 2023" range="5s-10s" starttimestamp="1677312753280" timestamp="27355594">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[5928]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="736" _type="InsertStringCommand" date="Sat Feb 25 10:48:28 EST 2023" starttimestamp="1677312753280" timestamp="27355659" timestamp2="27355659">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="738" _type="InsertStringCommand" date="Sat Feb 25 10:48:29 EST 2023" starttimestamp="1677312753280" timestamp="27355846" timestamp2="27355846">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="740" _type="InsertStringCommand" date="Sat Feb 25 10:48:29 EST 2023" starttimestamp="1677312753280" timestamp="27355932" timestamp2="27355932">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="742" _type="InsertStringCommand" date="Sat Feb 25 10:48:29 EST 2023" starttimestamp="1677312753280" timestamp="27356127" timestamp2="27356127">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="744" _type="PauseCommand" date="Sat Feb 25 10:48:39 EST 2023" range="5s-10s" starttimestamp="1677312753280" timestamp="27365865">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[9738]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="743" _type="SelectTextCommand" caretOffset="5305" date="Sat Feb 25 10:48:39 EST 2023" end="5305" start="5288" starttimestamp="1677312753280" timestamp="27365865" />
  <DocumentChange __id="734" _type="Insert" date="Sat Feb 25 10:48:28 EST 2023" docASTNodeCount="1626" docActiveCodeLength="9545" docExpressionCount="1125" docLength="10194" length="4" offset="6043" repeat="4" starttimestamp="1677312753280" timestamp="27355594" timestamp2="27356084">
    <text><![CDATA[List]]></text>
  </DocumentChange>
  <Command __id="746" _type="PauseCommand" date="Sat Feb 25 10:48:40 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27367265">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1400]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="747" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:48:40 EST 2023" starttimestamp="1677312753280" timestamp="27367310" />
  <Command __id="749" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:48:40 EST 2023" starttimestamp="1677312753280" timestamp="27367614" />
  <Command __id="751" _type="PauseCommand" date="Sat Feb 25 10:48:41 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27368695">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1081]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="750" _type="MoveCaretCommand" caretOffset="5289" date="Sat Feb 25 10:48:41 EST 2023" docOffset="6169" starttimestamp="1677312753280" timestamp="27368695" />
  <Command __id="752" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sat Feb 25 10:48:42 EST 2023" starttimestamp="1677312753280" timestamp="27369690" />
  <Command __id="753" _type="EclipseCommand" commandID="" date="Sat Feb 25 10:48:43 EST 2023" starttimestamp="1677312753280" timestamp="27369766" />
  <Command __id="754" _type="EclipseCommand" commandID="" date="Sat Feb 25 10:48:43 EST 2023" starttimestamp="1677312753280" timestamp="27369873" />
  <Command __id="755" _type="MoveCaretCommand" caretOffset="5254" date="Sat Feb 25 10:48:44 EST 2023" docOffset="6134" starttimestamp="1677312753280" timestamp="27370753" />
  <Command __id="757" _type="InsertStringCommand" date="Sat Feb 25 10:48:44 EST 2023" starttimestamp="1677312753280" timestamp="27371124" timestamp2="27371124">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="759" _type="InsertStringCommand" date="Sat Feb 25 10:48:45 EST 2023" starttimestamp="1677312753280" timestamp="27371859" timestamp2="27371859">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="745" _type="Delete" date="Sat Feb 25 10:48:40 EST 2023" docASTNodeCount="1621" docActiveCodeLength="9527" docExpressionCount="1120" docLength="10176" endLine="185" length="18" offset="6167" repeat="2" startLine="185" starttimestamp="1677312753280" timestamp="27367265" timestamp2="27367575">
    <text><![CDATA[plateList.size()+1]]></text>
  </DocumentChange>
  <DocumentChange __id="756" _type="Insert" date="Sat Feb 25 10:48:44 EST 2023" docASTNodeCount="1621" docActiveCodeLength="9535" docExpressionCount="1120" docLength="10184" length="8" offset="6134" repeat="2" starttimestamp="1677312753280" timestamp="27371096" timestamp2="27371832">
    <text><![CDATA[
		
		]]></text>
  </DocumentChange>
  <Command __id="761" _type="PauseCommand" date="Sat Feb 25 10:48:46 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27373408">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1549]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="762" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:48:46 EST 2023" starttimestamp="1677312753280" timestamp="27373445" />
  <Command __id="764" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:48:47 EST 2023" starttimestamp="1677312753280" timestamp="27373729" />
  <Command __id="766" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:48:47 EST 2023" starttimestamp="1677312753280" timestamp="27374094" />
  <Command __id="768" _type="PauseCommand" date="Sat Feb 25 10:48:53 EST 2023" range="5s-10s" starttimestamp="1677312753280" timestamp="27380027">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[5933]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="767" _type="SelectTextCommand" caretOffset="5394" date="Sat Feb 25 10:48:53 EST 2023" end="5394" start="5370" starttimestamp="1677312753280" timestamp="27380027" />
  <Command __id="770" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:48:53 EST 2023" starttimestamp="1677312753280" timestamp="27380556" />
  <Command __id="772" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:48:54 EST 2023" starttimestamp="1677312753280" timestamp="27380857" />
  <Command __id="774" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:48:54 EST 2023" starttimestamp="1677312753280" timestamp="27381069" />
  <Command __id="776" _type="PauseCommand" date="Sat Feb 25 10:48:56 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="27383708">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2639]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <DocumentChange __id="760" _type="Delete" date="Sat Feb 25 10:48:46 EST 2023" docASTNodeCount="1621" docActiveCodeLength="9531" docExpressionCount="1120" docLength="10180" endLine="186" length="4" offset="6138" repeat="3" startLine="185" starttimestamp="1677312753280" timestamp="27373408" timestamp2="27374054">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <DocumentChange __id="769" _type="Delete" date="Sat Feb 25 10:48:53 EST 2023" docASTNodeCount="1616" docActiveCodeLength="9505" docExpressionCount="1116" docLength="10154" endLine="189" length="26" offset="6248" repeat="3" startLine="189" starttimestamp="1677312753280" timestamp="27380518" timestamp2="27381046">
    <text><![CDATA[		plateList.add(newPlate);]]></text>
  </DocumentChange>
  <Command __id="775" _type="SelectTextCommand" caretOffset="5401" date="Sat Feb 25 10:48:56 EST 2023" end="5401" start="5372" starttimestamp="1677312753280" timestamp="27383708" />
  <Command __id="778" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:48:57 EST 2023" starttimestamp="1677312753280" timestamp="27384125" />
  <Command __id="780" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:48:57 EST 2023" starttimestamp="1677312753280" timestamp="27384457" />
  <Command __id="782" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:48:58 EST 2023" starttimestamp="1677312753280" timestamp="27384752" />
  <Command __id="785" _type="PauseCommand" date="Sat Feb 25 10:48:59 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27385895">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1142]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="784" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:48:59 EST 2023" starttimestamp="1677312753280" timestamp="27385894" />
  <Command __id="787" _type="PauseCommand" date="Sat Feb 25 10:49:00 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27386977">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1083]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="786" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sat Feb 25 10:49:00 EST 2023" starttimestamp="1677312753280" timestamp="27386977" />
  <Command __id="788" _type="EclipseCommand" commandID="" date="Sat Feb 25 10:49:00 EST 2023" starttimestamp="1677312753280" timestamp="27387076" />
  <Command __id="789" _type="EclipseCommand" commandID="" date="Sat Feb 25 10:49:00 EST 2023" starttimestamp="1677312753280" timestamp="27387168" />
  <DocumentChange __id="777" _type="Delete" date="Sat Feb 25 10:48:57 EST 2023" docASTNodeCount="1611" docActiveCodeLength="9472" docExpressionCount="1112" docLength="10121" endLine="190" length="33" offset="6248" repeat="4" startLine="189" starttimestamp="1677312753280" timestamp="27384095" timestamp2="27385867">
    <text><![CDATA[
		otherPlateList.add(newPlate);]]></text>
  </DocumentChange>
  <Command __id="791" _type="PauseCommand" date="Sat Feb 25 10:49:03 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="27389805">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2636]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="792" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:49:03 EST 2023" starttimestamp="1677312753280" timestamp="27389869" />
  <Command __id="794" _type="PauseCommand" date="Sat Feb 25 10:49:04 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27391251">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1382]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="793" _type="MoveCaretCommand" caretOffset="5370" date="Sat Feb 25 10:49:04 EST 2023" docOffset="6250" starttimestamp="1677312753280" timestamp="27391251" />
  <Command __id="795" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sat Feb 25 10:49:05 EST 2023" starttimestamp="1677312753280" timestamp="27392143" />
  <Command __id="796" _type="EclipseCommand" commandID="" date="Sat Feb 25 10:49:05 EST 2023" starttimestamp="1677312753280" timestamp="27392279" />
  <Command __id="797" _type="EclipseCommand" commandID="" date="Sat Feb 25 10:49:05 EST 2023" starttimestamp="1677312753280" timestamp="27392360" />
  <Command __id="799" _type="PauseCommand" date="Sat Feb 25 10:49:09 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="27395931">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3571]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="798" _type="MoveCaretCommand" caretOffset="5385" date="Sat Feb 25 10:49:09 EST 2023" docOffset="6265" starttimestamp="1677312753280" timestamp="27395931" />
  <Command __id="800" _type="MoveCaretCommand" caretOffset="5519" date="Sat Feb 25 10:49:10 EST 2023" docOffset="6399" starttimestamp="1677312753280" timestamp="27396835" />
  <Command __id="802" _type="PauseCommand" date="Sat Feb 25 10:49:12 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27398774">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1939]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="801" _type="MoveCaretCommand" caretOffset="5743" date="Sat Feb 25 10:49:12 EST 2023" docOffset="6623" starttimestamp="1677312753280" timestamp="27398774" />
  <Command __id="803" _type="MoveCaretCommand" caretOffset="5739" date="Sat Feb 25 10:49:12 EST 2023" docOffset="6619" starttimestamp="1677312753280" timestamp="27399642" />
  <Command __id="805" _type="PauseCommand" date="Sat Feb 25 10:49:28 EST 2023" range="10s-20s" starttimestamp="1677312753280" timestamp="27415701">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[16059]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="804" _type="MoveCaretCommand" caretOffset="5767" date="Sat Feb 25 10:49:28 EST 2023" docOffset="6647" starttimestamp="1677312753280" timestamp="27415701" />
  <DocumentChange __id="790" _type="Delete" date="Sat Feb 25 10:49:03 EST 2023" docASTNodeCount="1611" docActiveCodeLength="9470" docExpressionCount="1112" docLength="10119" endLine="189" length="2" offset="6246" startLine="188" starttimestamp="1677312753280" timestamp="27389804">
    <text><![CDATA[
]]></text>
  </DocumentChange>
  <Command __id="807" _type="PauseCommand" date="Sat Feb 25 10:49:30 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27417309">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1608]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="808" _type="InsertStringCommand" date="Sat Feb 25 10:49:30 EST 2023" starttimestamp="1677312753280" timestamp="27417376" timestamp2="27417376">
    <data><![CDATA[A]]></data>
  </Command>
  <Command __id="810" _type="InsertStringCommand" date="Sat Feb 25 10:49:31 EST 2023" starttimestamp="1677312753280" timestamp="27417740" timestamp2="27417740">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="812" _type="InsertStringCommand" date="Sat Feb 25 10:49:31 EST 2023" starttimestamp="1677312753280" timestamp="27417954" timestamp2="27417954">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="814" _type="InsertStringCommand" date="Sat Feb 25 10:49:31 EST 2023" starttimestamp="1677312753280" timestamp="27418047" timestamp2="27418047">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="816" _type="InsertStringCommand" date="Sat Feb 25 10:49:31 EST 2023" starttimestamp="1677312753280" timestamp="27418161" timestamp2="27418161">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="818" _type="InsertStringCommand" date="Sat Feb 25 10:49:31 EST 2023" starttimestamp="1677312753280" timestamp="27418364" timestamp2="27418364">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="820" _type="InsertStringCommand" date="Sat Feb 25 10:49:31 EST 2023" starttimestamp="1677312753280" timestamp="27418458" timestamp2="27418458">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="822" _type="InsertStringCommand" date="Sat Feb 25 10:49:32 EST 2023" starttimestamp="1677312753280" timestamp="27419193" timestamp2="27419193">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="824" _type="InsertStringCommand" date="Sat Feb 25 10:49:32 EST 2023" starttimestamp="1677312753280" timestamp="27419355" timestamp2="27419355">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="826" _type="InsertStringCommand" date="Sat Feb 25 10:49:32 EST 2023" starttimestamp="1677312753280" timestamp="27419471" timestamp2="27419471">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="828" _type="InsertStringCommand" date="Sat Feb 25 10:49:32 EST 2023" starttimestamp="1677312753280" timestamp="27419643" timestamp2="27419643">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="830" _type="InsertStringCommand" date="Sat Feb 25 10:49:33 EST 2023" starttimestamp="1677312753280" timestamp="27419795" timestamp2="27419795">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="832" _type="PauseCommand" date="Sat Feb 25 10:49:39 EST 2023" range="5s-10s" starttimestamp="1677312753280" timestamp="27425954">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[6159]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="831" _type="SelectTextCommand" caretOffset="5988" date="Sat Feb 25 10:49:39 EST 2023" end="5988" start="5945" starttimestamp="1677312753280" timestamp="27425954" />
  <DocumentChange __id="806" _type="Insert" date="Sat Feb 25 10:49:30 EST 2023" docASTNodeCount="1615" docActiveCodeLength="9482" docExpressionCount="1114" docLength="10131" length="12" offset="6647" repeat="12" starttimestamp="1677312753280" timestamp="27417309" timestamp2="27419751">
    <text><![CDATA[APlate plate]]></text>
  </DocumentChange>
  <Command __id="834" _type="PauseCommand" date="Sat Feb 25 10:49:41 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27427848">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1894]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="835" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:49:41 EST 2023" starttimestamp="1677312753280" timestamp="27427893" />
  <DocumentChange __id="833" _type="Delete" date="Sat Feb 25 10:49:41 EST 2023" docASTNodeCount="1607" docActiveCodeLength="9439" docExpressionCount="1109" docLength="10088" endLine="210" length="43" offset="6825" startLine="210" starttimestamp="1677312753280" timestamp="27427848">
    <text><![CDATA[Plate workingPlate = otherPlateList.peek();]]></text>
  </DocumentChange>
  <Command __id="837" _type="PauseCommand" date="Sat Feb 25 10:49:46 EST 2023" range="5s-10s" starttimestamp="1677312753280" timestamp="27433124">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[5231]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <DocumentChange __id="836" _type="Insert" date="Sat Feb 25 10:49:46 EST 2023" docASTNodeCount="1611" docActiveCodeLength="9453" docExpressionCount="1112" docLength="10102" length="14" offset="6825" repeat="14" starttimestamp="1677312753280" timestamp="27433124" timestamp2="27435660">
    <text><![CDATA[queuedList.add]]></text>
  </DocumentChange>
  <Command __id="838" _type="InsertStringCommand" date="Sat Feb 25 10:49:46 EST 2023" starttimestamp="1677312753280" timestamp="27433168" timestamp2="27433168">
    <data><![CDATA[q]]></data>
  </Command>
  <Command __id="840" _type="InsertStringCommand" date="Sat Feb 25 10:49:46 EST 2023" starttimestamp="1677312753280" timestamp="27433345" timestamp2="27433345">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="842" _type="InsertStringCommand" date="Sat Feb 25 10:49:46 EST 2023" starttimestamp="1677312753280" timestamp="27433434" timestamp2="27433434">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="844" _type="InsertStringCommand" date="Sat Feb 25 10:49:46 EST 2023" starttimestamp="1677312753280" timestamp="27433614" timestamp2="27433614">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="846" _type="InsertStringCommand" date="Sat Feb 25 10:49:47 EST 2023" starttimestamp="1677312753280" timestamp="27433724" timestamp2="27433724">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="848" _type="InsertStringCommand" date="Sat Feb 25 10:49:47 EST 2023" starttimestamp="1677312753280" timestamp="27433913" timestamp2="27433913">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="850" _type="InsertStringCommand" date="Sat Feb 25 10:49:47 EST 2023" starttimestamp="1677312753280" timestamp="27434197" timestamp2="27434197">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="852" _type="InsertStringCommand" date="Sat Feb 25 10:49:47 EST 2023" starttimestamp="1677312753280" timestamp="27434420" timestamp2="27434420">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="854" _type="InsertStringCommand" date="Sat Feb 25 10:49:47 EST 2023" starttimestamp="1677312753280" timestamp="27434484" timestamp2="27434484">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="856" _type="InsertStringCommand" date="Sat Feb 25 10:49:48 EST 2023" starttimestamp="1677312753280" timestamp="27434720" timestamp2="27434720">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="858" _type="InsertStringCommand" date="Sat Feb 25 10:49:48 EST 2023" starttimestamp="1677312753280" timestamp="27434902" timestamp2="27434902">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="859" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sat Feb 25 10:49:48 EST 2023" start_end="START" starttimestamp="1677312753280" timestamp="27434904" />
  <Command __id="864" _type="PauseCommand" date="Sat Feb 25 10:49:49 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27436582">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[1678]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="863" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sat Feb 25 10:49:49 EST 2023" start_end="END" starttimestamp="1677312753280" timestamp="27436582" />
  <DocumentChange __id="865" _type="Replace" date="Sat Feb 25 10:49:49 EST 2023" docASTNodeCount="1612" docActiveCodeLength="9460" docExpressionCount="1113" docLength="10109" endLine="210" insertionLength="10" int_docASTNodeCount="1608" int_docActiveCodeLength="9450" int_docExpressionCount="1112" int_docLength="10099" length="3" offset="6836" startLine="210" starttimestamp="1677312753280" timestamp="27436590">
    <deletedText><![CDATA[add]]></deletedText>
    <insertedText><![CDATA[add(plate)]]></insertedText>
  </DocumentChange>
  <Command __id="866" _type="InsertStringCommand" date="Sat Feb 25 10:49:50 EST 2023" starttimestamp="1677312753280" timestamp="27436733" timestamp2="27436733">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="867" _type="Replace" date="Sat Feb 25 10:49:50 EST 2023" docASTNodeCount="1612" docActiveCodeLength="9460" docExpressionCount="1113" docLength="10109" endLine="210" insertionLength="5" int_docASTNodeCount="1611" int_docActiveCodeLength="9455" int_docExpressionCount="1112" int_docLength="10104" length="5" offset="6840" startLine="210" starttimestamp="1677312753280" timestamp="27437163">
    <deletedText><![CDATA[plate]]></deletedText>
    <insertedText><![CDATA[plate]]></insertedText>
  </DocumentChange>
  <Command __id="868" _type="InsertStringCommand" date="Sat Feb 25 10:49:50 EST 2023" starttimestamp="1677312753280" timestamp="27437202" timestamp2="27437202">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="870" _type="InsertStringCommand" date="Sat Feb 25 10:49:51 EST 2023" starttimestamp="1677312753280" timestamp="27438107" timestamp2="27438107">
    <data><![CDATA[;]]></data>
  </Command>
  <DocumentChange __id="869" _type="Insert" date="Sat Feb 25 10:49:51 EST 2023" docASTNodeCount="1612" docActiveCodeLength="9461" docExpressionCount="1113" docLength="10110" length="1" offset="6846" starttimestamp="1677312753280" timestamp="27438052">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <Command __id="872" _type="PauseCommand" date="Sat Feb 25 10:49:57 EST 2023" range="5s-10s" starttimestamp="1677312753280" timestamp="27444233">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[6125]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="873" _type="InsertStringCommand" date="Sat Feb 25 10:49:57 EST 2023" starttimestamp="1677312753280" timestamp="27444272" timestamp2="27444272">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="871" _type="Insert" date="Sat Feb 25 10:49:57 EST 2023" docASTNodeCount="1612" docActiveCodeLength="9465" docExpressionCount="1113" docLength="10114" length="4" offset="6847" starttimestamp="1677312753280" timestamp="27444232">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <Command __id="875" _type="PauseCommand" date="Sat Feb 25 10:50:01 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="27447818">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[3546]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="876" _type="InsertStringCommand" date="Sat Feb 25 10:50:01 EST 2023" starttimestamp="1677312753280" timestamp="27447867" timestamp2="27447867">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="878" _type="InsertStringCommand" date="Sat Feb 25 10:50:01 EST 2023" starttimestamp="1677312753280" timestamp="27448052" timestamp2="27448052">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="880" _type="InsertStringCommand" date="Sat Feb 25 10:50:01 EST 2023" starttimestamp="1677312753280" timestamp="27448150" timestamp2="27448150">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="882" _type="InsertStringCommand" date="Sat Feb 25 10:50:01 EST 2023" starttimestamp="1677312753280" timestamp="27448367" timestamp2="27448367">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="884" _type="InsertStringCommand" date="Sat Feb 25 10:50:01 EST 2023" starttimestamp="1677312753280" timestamp="27448466" timestamp2="27448466">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="886" _type="InsertStringCommand" date="Sat Feb 25 10:50:01 EST 2023" starttimestamp="1677312753280" timestamp="27448636" timestamp2="27448636">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="887" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sat Feb 25 10:50:01 EST 2023" start_end="START" starttimestamp="1677312753280" timestamp="27448639" />
  <DocumentChange __id="874" _type="Insert" date="Sat Feb 25 10:50:01 EST 2023" docASTNodeCount="1616" docActiveCodeLength="9474" docExpressionCount="1116" docLength="10123" length="9" offset="6851" repeat="9" starttimestamp="1677312753280" timestamp="27447818" timestamp2="27450307">
    <text><![CDATA[plate.set]]></text>
  </DocumentChange>
  <Command __id="892" _type="PauseCommand" date="Sat Feb 25 10:50:04 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="27451378">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[2739]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="905" _type="PauseCommand" date="Sat Feb 25 10:50:08 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="27455598">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Delete]]></prev>
    <pause><![CDATA[4220]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="904" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sat Feb 25 10:50:08 EST 2023" start_end="END" starttimestamp="1677312753280" timestamp="27455598" />
  <Command __id="906" _type="MoveCaretCommand" caretOffset="5955" date="Sat Feb 25 10:50:08 EST 2023" docOffset="6835" starttimestamp="1677312753280" timestamp="27455666" />
  <Command __id="908" _type="PauseCommand" date="Sat Feb 25 10:50:22 EST 2023" range="10s-20s" starttimestamp="1677312753280" timestamp="27469118">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[13452]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="907" _type="SelectTextCommand" caretOffset="6047" date="Sat Feb 25 10:50:22 EST 2023" end="6047" start="5971" starttimestamp="1677312753280" timestamp="27469118" />
  <DocumentChange __id="891" _type="Delete" date="Sat Feb 25 10:50:04 EST 2023" docASTNodeCount="1612" docActiveCodeLength="9461" docExpressionCount="1113" docLength="10110" endLine="211" length="13" offset="6847" repeat="12" startLine="210" starttimestamp="1677312753280" timestamp="27451378" timestamp2="27454205">
    <text><![CDATA[
		plate.set]]></text>
  </DocumentChange>
  <Command __id="910" _type="PauseCommand" date="Sat Feb 25 10:50:24 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="27471522">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[2404]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="911" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:50:24 EST 2023" starttimestamp="1677312753280" timestamp="27471571" />
  <DocumentChange __id="909" _type="Delete" date="Sat Feb 25 10:50:24 EST 2023" docASTNodeCount="1598" docActiveCodeLength="9385" docExpressionCount="1102" docLength="10034" endLine="211" length="76" offset="6851" startLine="211" starttimestamp="1677312753280" timestamp="27471522">
    <text><![CDATA[int workingPlatePlace = Integer.valueOf(workingPlate.getText().getText())-1;]]></text>
  </DocumentChange>
  <Command __id="913" _type="PauseCommand" date="Sat Feb 25 10:50:26 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27473507">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1936]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="914" _type="UndoCommand" date="Sat Feb 25 10:50:26 EST 2023" starttimestamp="1677312753280" timestamp="27473530" />
  <Command __id="916" _type="PauseCommand" date="Sat Feb 25 10:50:27 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27474669">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[UndoCommand]]></prev>
    <pause><![CDATA[1139]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="915" _type="MoveCaretCommand" caretOffset="5967" date="Sat Feb 25 10:50:27 EST 2023" docOffset="6847" starttimestamp="1677312753280" timestamp="27474669" />
  <Command __id="918" _type="InsertStringCommand" date="Sat Feb 25 10:50:28 EST 2023" starttimestamp="1677312753280" timestamp="27474986" timestamp2="27474986">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="920" _type="PauseCommand" date="Sat Feb 25 10:50:53 EST 2023" range="20s-30s" starttimestamp="1677312753280" timestamp="27500532">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[25546]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="919" _type="MoveCaretCommand" caretOffset="6158" date="Sat Feb 25 10:50:53 EST 2023" docOffset="7038" starttimestamp="1677312753280" timestamp="27500532" />
  <Command __id="921" _type="SelectTextCommand" caretOffset="6165" date="Sat Feb 25 10:50:53 EST 2023" end="6165" start="6153" starttimestamp="1677312753280" timestamp="27500712" />
  <Command __id="923" _type="InsertStringCommand" date="Sat Feb 25 10:50:54 EST 2023" starttimestamp="1677312753280" timestamp="27501396" timestamp2="27501396">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="925" _type="InsertStringCommand" date="Sat Feb 25 10:50:54 EST 2023" starttimestamp="1677312753280" timestamp="27501596" timestamp2="27501596">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="927" _type="InsertStringCommand" date="Sat Feb 25 10:50:54 EST 2023" starttimestamp="1677312753280" timestamp="27501711" timestamp2="27501711">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="929" _type="InsertStringCommand" date="Sat Feb 25 10:50:55 EST 2023" starttimestamp="1677312753280" timestamp="27501895" timestamp2="27501895">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="931" _type="InsertStringCommand" date="Sat Feb 25 10:50:55 EST 2023" starttimestamp="1677312753280" timestamp="27501999" timestamp2="27501999">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="933" _type="PauseCommand" date="Sat Feb 25 10:50:56 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27503112">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1113]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="932" _type="MoveCaretCommand" caretOffset="6300" date="Sat Feb 25 10:50:56 EST 2023" docOffset="7180" starttimestamp="1677312753280" timestamp="27503112" />
  <Command __id="935" _type="PauseCommand" date="Sat Feb 25 10:50:59 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="27506683">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3571]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="934" _type="MoveCaretCommand" caretOffset="6351" date="Sat Feb 25 10:50:59 EST 2023" docOffset="7231" starttimestamp="1677312753280" timestamp="27506683" />
  <Command __id="936" _type="SelectTextCommand" caretOffset="6355" date="Sat Feb 25 10:51:00 EST 2023" end="6355" start="6341" starttimestamp="1677312753280" timestamp="27506822" />
  <Command __id="937" _type="SelectTextCommand" caretOffset="6367" date="Sat Feb 25 10:51:00 EST 2023" end="6367" start="6339" starttimestamp="1677312753280" timestamp="27507042" />
  <DocumentChange __id="912" _type="Insert" date="Sat Feb 25 10:50:26 EST 2023" docASTNodeCount="1612" docActiveCodeLength="9461" docExpressionCount="1113" docLength="10110" length="76" offset="6851" starttimestamp="1677312753280" timestamp="27473507">
    <text><![CDATA[int workingPlatePlace = Integer.valueOf(workingPlate.getText().getText())-1;]]></text>
  </DocumentChange>
  <DocumentChange __id="917" _type="Insert" date="Sat Feb 25 10:50:28 EST 2023" docASTNodeCount="1612" docActiveCodeLength="9465" docExpressionCount="1113" docLength="10114" length="4" offset="6847" starttimestamp="1677312753280" timestamp="27474952">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <DocumentChange __id="922" _type="Replace" date="Sat Feb 25 10:50:54 EST 2023" docASTNodeCount="1612" docActiveCodeLength="9454" docExpressionCount="1113" docLength="10103" endLine="214" insertionLength="1" int_docASTNodeCount="1611" int_docActiveCodeLength="9453" int_docExpressionCount="1112" int_docLength="10102" length="12" offset="7033" startLine="214" starttimestamp="1677312753280" timestamp="27501345">
    <deletedText><![CDATA[workingPlate]]></deletedText>
    <insertedText><![CDATA[p]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="924" _type="Insert" date="Sat Feb 25 10:50:54 EST 2023" docASTNodeCount="1612" docActiveCodeLength="9458" docExpressionCount="1113" docLength="10107" length="4" offset="7034" repeat="4" starttimestamp="1677312753280" timestamp="27501549" timestamp2="27501943">
    <text><![CDATA[late]]></text>
  </DocumentChange>
  <Command __id="939" _type="PauseCommand" date="Sat Feb 25 10:51:04 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="27511159">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[4117]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="940" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:51:04 EST 2023" starttimestamp="1677312753280" timestamp="27511194" />
  <Command __id="942" _type="PauseCommand" date="Sat Feb 25 10:51:08 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="27514722">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3528]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="941" _type="MoveCaretCommand" caretOffset="6300" date="Sat Feb 25 10:51:08 EST 2023" docOffset="7180" starttimestamp="1677312753280" timestamp="27514722" />
  <Command __id="944" _type="PauseCommand" date="Sat Feb 25 10:51:10 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="27517140">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2418]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="943" _type="MoveCaretCommand" caretOffset="6323" date="Sat Feb 25 10:51:10 EST 2023" docOffset="7203" starttimestamp="1677312753280" timestamp="27517140" />
  <Command __id="945" _type="SelectTextCommand" caretOffset="6328" date="Sat Feb 25 10:51:10 EST 2023" end="6328" start="6311" starttimestamp="1677312753280" timestamp="27517356" />
  <Command __id="947" _type="PauseCommand" date="Sat Feb 25 10:51:11 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27518450">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1094]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="946" _type="MoveCaretCommand" caretOffset="6300" date="Sat Feb 25 10:51:11 EST 2023" docOffset="7180" starttimestamp="1677312753280" timestamp="27518450" />
  <Command __id="949" _type="PauseCommand" date="Sat Feb 25 10:51:13 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="27520543">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2093]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="948" _type="MoveCaretCommand" caretOffset="6091" date="Sat Feb 25 10:51:13 EST 2023" docOffset="6971" starttimestamp="1677312753280" timestamp="27520543" />
  <Command __id="951" _type="InsertStringCommand" date="Sat Feb 25 10:51:14 EST 2023" starttimestamp="1677312753280" timestamp="27521034" timestamp2="27521034">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="938" _type="Delete" date="Sat Feb 25 10:51:04 EST 2023" docASTNodeCount="1608" docActiveCodeLength="9430" docExpressionCount="1110" docLength="10079" endLine="219" length="28" offset="7219" startLine="218" starttimestamp="1677312753280" timestamp="27511159">
    <text><![CDATA[		otherPlateList.remove();
]]></text>
  </DocumentChange>
  <DocumentChange __id="950" _type="Insert" date="Sat Feb 25 10:51:14 EST 2023" docASTNodeCount="1608" docActiveCodeLength="9434" docExpressionCount="1110" docLength="10083" length="4" offset="6971" starttimestamp="1677312753280" timestamp="27521003">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <Command __id="953" _type="PauseCommand" date="Sat Feb 25 10:51:15 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27522205">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1171]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="954" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:51:15 EST 2023" starttimestamp="1677312753280" timestamp="27522238" />
  <Command __id="956" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:51:15 EST 2023" starttimestamp="1677312753280" timestamp="27522421" />
  <Command __id="958" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:51:16 EST 2023" starttimestamp="1677312753280" timestamp="27522770" />
  <Command __id="960" _type="PauseCommand" date="Sat Feb 25 10:51:17 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27524027">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1257]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="959" _type="MoveCaretCommand" caretOffset="6055" date="Sat Feb 25 10:51:17 EST 2023" docOffset="6935" starttimestamp="1677312753280" timestamp="27524027" />
  <Command __id="962" _type="InsertStringCommand" date="Sat Feb 25 10:51:17 EST 2023" starttimestamp="1677312753280" timestamp="27524395" timestamp2="27524395">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="964" _type="PauseCommand" date="Sat Feb 25 10:51:19 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="27526508">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2113]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="963" _type="MoveCaretCommand" caretOffset="6024" date="Sat Feb 25 10:51:19 EST 2023" docOffset="6904" starttimestamp="1677312753280" timestamp="27526508" />
  <Command __id="965" _type="SelectTextCommand" caretOffset="6027" date="Sat Feb 25 10:51:19 EST 2023" end="6027" start="6015" starttimestamp="1677312753280" timestamp="27526709" />
  <Command __id="967" _type="PauseCommand" date="Sat Feb 25 10:51:22 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="27528739">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[2030]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="966" _type="MoveCaretCommand" caretOffset="6055" date="Sat Feb 25 10:51:22 EST 2023" docOffset="6935" starttimestamp="1677312753280" timestamp="27528739" />
  <Command __id="969" _type="PauseCommand" date="Sat Feb 25 10:51:51 EST 2023" range="20s-30s" starttimestamp="1677312753280" timestamp="27557913">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[29174]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="968" _type="MoveCaretCommand" caretOffset="5971" date="Sat Feb 25 10:51:51 EST 2023" docOffset="6851" starttimestamp="1677312753280" timestamp="27557913" />
  <DocumentChange __id="952" _type="Delete" date="Sat Feb 25 10:51:15 EST 2023" docASTNodeCount="1608" docActiveCodeLength="9430" docExpressionCount="1110" docLength="10079" endLine="214" length="4" offset="6971" repeat="3" startLine="213" starttimestamp="1677312753280" timestamp="27522205" timestamp2="27522723">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <DocumentChange __id="961" _type="Insert" date="Sat Feb 25 10:51:17 EST 2023" docASTNodeCount="1608" docActiveCodeLength="9434" docExpressionCount="1110" docLength="10083" length="4" offset="6935" starttimestamp="1677312753280" timestamp="27524362">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <Command __id="971" _type="PauseCommand" date="Sat Feb 25 10:51:59 EST 2023" range="5s-10s" starttimestamp="1677312753280" timestamp="27565988">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[8075]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="972" _type="MoveCaretCommand" caretOffset="5816" date="Sat Feb 25 10:51:59 EST 2023" docOffset="6696" starttimestamp="1677312753280" timestamp="27566353" />
  <Command __id="970" _type="DiffBasedFileOpenCommand" date="Sat Feb 25 10:51:59 EST 2023" docASTNodeCount="1675" docActiveCodeLength="9773" docExpressionCount="1160" docLength="10344" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="27565988">
    <filePath><![CDATA[C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\graphics\AProducerConsumerScene.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package graphics;¶¶import java.util.ArrayList;¶import java.util.LinkedList;¶import java.util.List;¶import java.util.Queue;¶¶import animations.ACookingPlateAnimator;¶import animations.ACookingPlateCommand;¶import animations.AServingPlateAnimator;¶import animations.AServingPlateCommand;¶import animations.CookingPlateAnimator;¶import animations.ServingPlateAnimator;¶import bus.uigen.OEFrame;¶import bus.uigen.ObjectEditor;¶import bus.uigen.shapes.ALineModel;¶import bus.uigen.shapes.AStringModel;¶import bus.uigen.shapes.AnImageModel;¶import bus.uigen.shapes.OEShapeModel;¶import shapes.FlexibleTextShape;¶import util.annotations.EditablePropertyNames;¶import util.annotations.Label;¶import util.annotations.PropertyNames;¶import util.annotations.StructurePattern;¶import util.annotations.StructurePatternNames;¶import util.annotations.Visible;¶import util.misc.ThreadSupport;¶¶import java.awt.Color;¶¶@StructurePattern(StructurePatternNames.BEAN_PATTERN)¶@PropertyNames({¶	"patronList",¶	"chefList",¶	"buffer",¶	"plateList",¶	"otherPlateList",¶	"bellsList",¶	"queueBellList"¶})¶@EditablePropertyNames({¶})¶public class AProducerConsumerScene implements ProducerConsumerScene {¶	¶	//Avatar offsets inside scene¶	int[] chefXValues = {120,-50,-50,120};¶	int[] chefYValues = {-50,35,210,320};¶	int[] patronXValues = {650,850,850,650};¶	int[] patronYValues = {-50,35,220,320};¶	int[] bellXValues = {680,880,880,680};¶	int[] bellYValues = {75,160,345,445};¶	int INIT_HEAD_Y = 60;¶	int INIT_HEAD_X = 163;¶	int INIT_HEAD_HEIGHT = 90;¶	int INIT_HEAD_WIDTH = 80;¶	int PLATE_OFFSET_X = 30;¶	int PLATE_OFFSET_Y = 10;¶	int PAUSE = 5;¶	¶	//Booleans that help with the functionality of the below methods¶	boolean INIT_COOK = true;¶	boolean full = false;¶	int fullPlateOffset = -5;¶	¶	//Defining the chef and patron images¶	String[] chefImages = {"images/0.png","images/1.png","images/2.png","images/3.png"};¶	String[] patronImages = {"images/4.png", "images/5.png", "images/6.png", "images/7.png"};¶	¶	//Buffer arrays¶	int[] bufferXValues = {625, 680, 680, 620, 535, 460, 460, 535};¶	int[] bufferYValues = {200, 275, 365, 425, 425, 365, 275, 200};¶	boolean[] isFull = {false, false, false, false, false, false, false, false};¶	¶	//The properties of our class¶	List<APatron> patronList;¶	List<AChef> chefList;¶	BoundedBuffer buffer = new ABoundedBuffer();¶	List<APlate> plateList;¶	Queue<APlate> otherPlateList;¶	¶	OEShapeModel[] lineArray = {buffer.getLineTwo(), buffer.getLineThree(), buffer.getLineFour(), ¶								buffer.getLineFive(), buffer.getLineSix(), buffer.getLineSeven(), ¶								buffer.getLineEight(), buffer.getLineOne()};¶	¶	List<ABell> bellsList;¶	Queue<ABell> queueBellList;¶	int[] bellValues = {127, 212, 397, 497};¶	Queue<Integer> bellIntegerList;¶	¶	ACookingPlateCommand cookingCommand;¶	CookingPlateAnimator cookingAnimator;¶	¶	AServingPlateCommand servingCommand;¶	ServingPlateAnimator servingAnimator;¶	¶	//The constructor sets the scene with one chef, patron, a buffer, and a plate (not visible)¶	public AProducerConsumerScene() {¶		patronList = new ArrayList<APatron>();¶		chefList = new ArrayList<AChef>();¶		//buffer = new ABoundedBuffer();¶		plateList = new ArrayList<APlate>();¶		otherPlateList = new LinkedList<APlate>();¶		bellsList = new ArrayList<ABell>();¶		queueBellList = new LinkedList<ABell>();¶		bellIntegerList = new LinkedList<Integer>();¶		¶		patronList.add(0, new APatron());¶		OEShapeModel initPatronHead = new AnImageModel(patronImages[0]);¶		initPatronHead.setX(INIT_HEAD_X);¶		initPatronHead.setY(INIT_HEAD_Y);¶		initPatronHead.setHeight(INIT_HEAD_HEIGHT);¶		initPatronHead.setWidth(INIT_HEAD_WIDTH);¶		patronList.get(0).patron.setHead(initPatronHead);¶		patronList.get(0).move(patronXValues[0], patronYValues[0]);¶		¶		chefList.add(0, new AChef());¶		OEShapeModel initChefHead = new AnImageModel(chefImages[0]);¶		initChefHead.setX(INIT_HEAD_X);¶		initChefHead.setY(INIT_HEAD_Y);¶		initChefHead.setHeight(INIT_HEAD_HEIGHT);¶		initChefHead.setWidth(INIT_HEAD_WIDTH);¶		chefList.get(0).chef.setHead(initChefHead);¶		chefList.get(0).move(chefXValues[0], chefYValues[0]);¶		¶		plateList.add(new APlate());¶		plateList.get(0).getPlate().setHeight(0);¶		plateList.get(0).getPlate().setWidth(0);¶		¶		otherPlateList.add(new APlate());¶		otherPlateList.peek().getPlate().setHeight(0);¶		otherPlateList.peek().getPlate().setWidth(0);¶		¶		cookingAnimator = new ACookingPlateAnimator();¶		servingAnimator = new AServingPlateAnimator();¶		¶		bellsList.add(new ABell());¶		bellsList.get(0).getBell().setHeight(0);¶		bellsList.get(0).getBell().setWidth(0);¶		¶		queueBellList.add(new ABell());¶		queueBellList.peek().getBell().setHeight(0);¶		queueBellList.peek().getBell().setWidth(0);¶		¶		bellIntegerList.add(0);¶	}¶	¶	//Producer consumer methods¶	¶	//Init Scene sets the number of patrons and chefs in the scene¶	@Label("Init Scene")¶	public void initScene(int patronAmount, int chefAmount) {¶		bellsList.clear();¶		for (int i=0; i<patronAmount; i++) { ¶			APatron patron = new APatron();¶			patronList.add(i, patron);¶			OEShapeModel newHead = new AnImageModel(patronImages[i]);¶			patron.patron.setHead(newHead); ¶			newHead.setX(INIT_HEAD_X); ¶			newHead.setY(INIT_HEAD_Y);¶			newHead.setHeight(INIT_HEAD_HEIGHT);¶			newHead.setWidth(INIT_HEAD_WIDTH);¶			patron.move(patronXValues[i], patronYValues[i]);¶			¶			bellsList.add(new ABell());¶			bellsList.get(i).move(bellXValues[i], bellYValues[i]);¶		}¶		for (int i=0; i<chefAmount; i++) {¶			AChef chef = new AChef();¶			chefList.add(i, chef);¶			OEShapeModel newHead = new AnImageModel(chefImages[i]);¶			chef.chef.setHead(newHead);¶			newHead.setX(INIT_HEAD_X); ¶			newHead.setY(INIT_HEAD_Y);¶			newHead.setHeight(INIT_HEAD_HEIGHT);¶			newHead.setWidth(INIT_HEAD_WIDTH);¶			chef.move(chefXValues[i], chefYValues[i]);¶		}¶	}¶	¶	//Once the head of an avatar is chosen, it makes the plate that they "cook" appear¶	public void cook(OEShapeModel head) {¶		if (INIT_COOK) {¶			INIT_COOK=!INIT_COOK;¶			plateList.remove(0);¶			otherPlateList.remove();¶		}¶		¶		int headX = head.getCenterX();¶		int headY = head.getCenterY();¶		APlate newPlate = new APlate(plateList.size()+1);¶		newPlate.getPlate().setHeight(0);¶		newPlate.getPlate().setWidth(0);¶		plateList.add(newPlate);¶		otherPlateList.add(newPlate);¶		¶		if (full) {¶			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y+fullPlateOffset);¶			fullPlateOffset = fullPlateOffset - 5;¶		} else {¶			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y);¶		}¶		¶		cookingCommand = new ACookingPlateCommand(cookingAnimator, newPlate, 40, 15);¶		Thread thread = new Thread (cookingCommand);¶		thread.start();¶	}¶	¶	public void serve() {¶		//Checks to see if the buffer is full. If it is, then can't serve.¶		resetLineColors();¶		if(checkIfFull()) {¶			resetLineColors();¶			return;¶		}¶		¶		Plate workingPlate = otherPlateList.peek();¶		int workingPlatePlace = Integer.valueOf(workingPlate.getText().getText())-1;¶		changeLineColors(workingPlatePlace);¶		servingCommand = new AServingPlateCommand(servingAnimator,workingPlate,PAUSE, bufferXValues[workingPlatePlace], bufferYValues[workingPlatePlace]);¶		Thread thread = new Thread(servingCommand);¶		thread.start();¶		isFull[workingPlatePlace] = true;¶		otherPlateList.remove();¶	}¶	¶	public void order(OEShapeModel bell) {¶		if(checkIfFull()) {¶			resetLineColors();¶			resetBuffer();¶		}¶		bellIntegerList.add(0);¶		int bellPlace = findBell(bell.getCenterY());¶		bellsList.get(bellPlace).getText().setText(String.valueOf(bellIntegerList.size()-1));¶		¶		int platePlace = findFirstAvailablePlate();¶		servingCommand = new AServingPlateCommand(servingAnimator,plateList.get(platePlace),PAUSE, bell.getCenterX() , bell.getCenterY());¶		Thread thread = new Thread(servingCommand);¶		thread.start();¶		¶		cookingCommand = new ACookingPlateCommand(cookingAnimator, plateList.get(0), 0, 15);¶		Thread eatingThread = new Thread (cookingCommand);¶		eatingThread.start();¶		plateList.get(0).getText().setText("");¶	}¶	¶	public void eat() {¶		plateList.remove(0);¶	}¶	¶	@Override¶	@Visible(false)¶	public int findBell(int centerY) {¶		for(int i=0; i<bellsList.size();i++) {¶			if(bellsList.get(i).getBell().getCenterY() == centerY) {¶				return i;¶			}¶		}¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public int findFirstAvailablePlate() {¶		for (int i=0; i<isFull.length;i++) {¶			if(isFull[i] == true) {¶				return i;¶			}¶		}¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public void resetBuffer() {¶		¶		for (int i=0; i<isFull.length;i++) {¶			isFull[i] = false;¶		}¶	}¶	¶	@Override¶	@Visible(false)¶	public int findPatron(OEShapeModel patronHead) {¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public boolean checkIfFull() {¶		for (int i=0; i<isFull.length;i++) {¶			if (isFull[i] == false) {¶				full = false;¶				return full;¶			}¶		}¶		full = true;¶		return full;¶	}¶	¶	@Override¶	@Visible(false)¶	public void changeLineColors(int workingPlatePlace) {¶		if(workingPlatePlace == lineArray.length-1) {¶			lineArray[workingPlatePlace].setColor(Color.GREEN);¶			lineArray[0].setColor(Color.GREEN);¶		} else {¶			lineArray[workingPlatePlace].setColor(Color.GREEN);¶			lineArray[workingPlatePlace+1].setColor(Color.GREEN);¶		}¶	}¶	¶	¶	@Override¶	@Visible(false)¶	public void resetLineColors() {¶		for (int i=0; i<lineArray.length; i++) {¶			lineArray[i].setColor(Color.WHITE);¶		}¶	}¶	¶	//Getters for properties of the scene¶	@Override¶	public List<AChef> getChefList() {¶		return chefList;¶	}¶	¶	@Override¶	public List<APatron> getPatronList() {¶		return patronList;¶	}¶	¶	@Override¶	public BoundedBuffer getBuffer() {¶		return buffer;¶	}¶	¶	@Override¶	public List<APlate> getPlateList() {¶		return plateList;¶	}	¶	¶	@Override¶	@util.annotations.Visible(false)¶	public Queue<APlate> getOtherPlateList() {¶		return otherPlateList;¶	}¶	¶	@Override¶	public List<ABell> getBellsList() {¶		return bellsList;¶	}¶	¶	@Override¶	@Visible(false)¶	public Queue<ABell> getQueueBellList() {¶		return queueBellList;¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="974" _type="PauseCommand" date="Sat Feb 25 10:52:11 EST 2023" range="10s-20s" starttimestamp="1677312753280" timestamp="27577759">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[11406]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="975" _type="MoveCaretCommand" caretOffset="5971" date="Sat Feb 25 10:52:11 EST 2023" docOffset="6851" starttimestamp="1677312753280" timestamp="27577853" />
  <Command __id="973" _type="DiffBasedFileOpenCommand" date="Sat Feb 25 10:52:11 EST 2023" docASTNodeCount="1608" docActiveCodeLength="9434" docExpressionCount="1110" docLength="10083" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="27577759">
    <filePath><![CDATA[C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\graphics\AProducerConsumerScene2.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package graphics;¶¶import java.util.ArrayList;¶import java.util.LinkedList;¶import java.util.List;¶import java.util.Queue;¶¶import animations.ACookingPlateAnimator;¶import animations.ACookingPlateCommand;¶import animations.AServingPlateAnimator;¶import animations.AServingPlateCommand;¶import animations.CookingPlateAnimator;¶import animations.ServingPlateAnimator;¶import bus.uigen.OEFrame;¶import bus.uigen.ObjectEditor;¶import bus.uigen.shapes.ALineModel;¶import bus.uigen.shapes.AStringModel;¶import bus.uigen.shapes.AnImageModel;¶import bus.uigen.shapes.OEShapeModel;¶import shapes.FlexibleTextShape;¶import util.annotations.EditablePropertyNames;¶import util.annotations.Label;¶import util.annotations.PropertyNames;¶import util.annotations.StructurePattern;¶import util.annotations.StructurePatternNames;¶import util.annotations.Visible;¶import util.misc.ThreadSupport;¶¶import java.awt.Color;¶¶@StructurePattern(StructurePatternNames.BEAN_PATTERN)¶@PropertyNames({¶	"patronList",¶	"chefList",¶	"buffer",¶	"plateList",¶	"otherPlateList",¶	"bellsList",¶	"queueBellList"¶})¶@EditablePropertyNames({¶})¶public class AProducerConsumerScene2 implements ProducerConsumerScene {¶	¶	//Avatar offsets inside scene¶	int[] chefXValues = {120,-50,-50,120};¶	int[] chefYValues = {-50,35,210,320};¶	int[] patronXValues = {650,850,850,650};¶	int[] patronYValues = {-50,35,220,320};¶	int[] bellXValues = {680,880,880,680};¶	int[] bellYValues = {75,160,345,445};¶	int INIT_HEAD_Y = 60;¶	int INIT_HEAD_X = 163;¶	int INIT_HEAD_HEIGHT = 90;¶	int INIT_HEAD_WIDTH = 80;¶	int PLATE_OFFSET_X = 30;¶	int PLATE_OFFSET_Y = 10;¶	int PAUSE = 5;¶	¶	//Booleans that help with the functionality of the below methods¶	boolean INIT_COOK = true;¶	boolean full = false;¶	int fullPlateOffset = -5;¶	¶	//Defining the chef and patron images¶	String[] chefImages = {"images/0.png","images/1.png","images/2.png","images/3.png"};¶	String[] patronImages = {"images/4.png", "images/5.png", "images/6.png", "images/7.png"};¶	¶	//Buffer arrays¶	int[] bufferXValues = {625, 680, 680, 620, 535, 460, 460, 535};¶	int[] bufferYValues = {200, 275, 365, 425, 425, 365, 275, 200};¶	boolean[] isFull = {false, false, false, false, false, false, false, false};¶	¶	//The properties of our class¶	List<APatron> patronList;¶	List<AChef> chefList;¶	BoundedBuffer buffer = new ABoundedBuffer();¶	"), Diff(DELETE,"List<APlate> plateList;"), Diff(INSERT,"¶	//This list will keep a track of the plates that enter the buffer so that FIFO"), Diff(EQUAL,"¶	Queue<APlate> "), Diff(DELETE,"otherPlate"), Diff(INSERT,"queued"), Diff(EQUAL,"List;¶	¶	OEShapeModel[] lineArray = {buffer.getLineTwo(), buffer.getLineThree(), buffer.getLineFour(), ¶								buffer.getLineFive(), buffer.getLineSix(), buffer.getLineSeven(), ¶								buffer.getLineEight(), buffer.getLineOne()};¶	¶	List<ABell> bellsList;¶	Queue<ABell> queueBellList;¶	int[] bellValues = {127, 212, 397, 497};¶	Queue<Integer> bellIntegerList;¶	¶	ACookingPlateCommand cookingCommand;¶	CookingPlateAnimator cookingAnimator;¶	¶	AServingPlateCommand servingCommand;¶	ServingPlateAnimator servingAnimator;¶	¶	//The constructor sets the scene with one chef, patron, a buffer, and a plate (not visible)¶	public AProducerConsumerScene2() {¶		patronList = new ArrayList<APatron>();¶		chefList = new ArrayList<AChef>();¶		//buffer = new ABoundedBuffer();¶		"), Diff(DELETE,"plateList = new ArrayList<APlate>();¶		otherPlate"), Diff(INSERT,"¶		queued"), Diff(EQUAL,"List = new LinkedList<APlate>();¶		bellsList = new ArrayList<ABell>();¶		queueBellList = new LinkedList<ABell>();¶		bellIntegerList = new LinkedList<Integer>();¶		¶		patronList.add(0, new APatron());¶		OEShapeModel initPatronHead = new AnImageModel(patronImages[0]);¶		initPatronHead.setX(INIT_HEAD_X);¶		initPatronHead.setY(INIT_HEAD_Y);¶		initPatronHead.setHeight(INIT_HEAD_HEIGHT);¶		initPatronHead.setWidth(INIT_HEAD_WIDTH);¶		patronList.get(0).patron.setHead(initPatronHead);¶		patronList.get(0).move(patronXValues[0], patronYValues[0]);¶		¶		chefList.add(0, new AChef());¶		OEShapeModel initChefHead = new AnImageModel(chefImages[0]);¶		initChefHead.setX(INIT_HEAD_X);¶		initChefHead.setY(INIT_HEAD_Y);¶		initChefHead.setHeight(INIT_HEAD_HEIGHT);¶		initChefHead.setWidth(INIT_HEAD_WIDTH);¶		chefList.get(0).chef.setHead(initChefHead);¶		chefList.get(0).move(chefXValues[0], chefYValues[0]);¶		¶		"), Diff(DELETE,"plateList.add(new APlate());¶		plateList.get(0).getPlate().setHeight(0);¶		plateList.get(0).getPlate().setWidth(0);¶		¶		otherPlate"), Diff(INSERT,"queued"), Diff(EQUAL,"List.add(new APlate());¶		"), Diff(DELETE,"otherPlate"), Diff(INSERT,"queued"), Diff(EQUAL,"List.peek().getPlate().setHeight(0);¶		"), Diff(DELETE,"otherPlate"), Diff(INSERT,"queued"), Diff(EQUAL,"List.peek().getPlate().setWidth(0);¶		¶		cookingAnimator = new ACookingPlateAnimator();¶		servingAnimator = new AServingPlateAnimator();¶		¶		bellsList.add(new ABell());¶		bellsList.get(0).getBell().setHeight(0);¶		bellsList.get(0).getBell().setWidth(0);¶		¶		queueBellList.add(new ABell());¶		queueBellList.peek().getBell().setHeight(0);¶		queueBellList.peek().getBell().setWidth(0);¶		¶		bellIntegerList.add(0);¶	}¶	¶	//Producer consumer methods¶	¶	//Init Scene sets the number of patrons and chefs in the scene¶	@Label("Init Scene")¶	public void initScene(int patronAmount, int chefAmount) {¶		bellsList.clear();¶		for (int i=0; i<patronAmount; i++) { ¶			APatron patron = new APatron();¶			patronList.add(i, patron);¶			OEShapeModel newHead = new AnImageModel(patronImages[i]);¶			patron.patron.setHead(newHead); ¶			newHead.setX(INIT_HEAD_X); ¶			newHead.setY(INIT_HEAD_Y);¶			newHead.setHeight(INIT_HEAD_HEIGHT);¶			newHead.setWidth(INIT_HEAD_WIDTH);¶			patron.move(patronXValues[i], patronYValues[i]);¶			¶			bellsList.add(new ABell());¶			bellsList.get(i).move(bellXValues[i], bellYValues[i]);¶		}¶		for (int i=0; i<chefAmount; i++) {¶			AChef chef = new AChef();¶			chefList.add(i, chef);¶			OEShapeModel newHead = new AnImageModel(chefImages[i]);¶			chef.chef.setHead(newHead);¶			newHead.setX(INIT_HEAD_X); ¶			newHead.setY(INIT_HEAD_Y);¶			newHead.setHeight(INIT_HEAD_HEIGHT);¶			newHead.setWidth(INIT_HEAD_WIDTH);¶			chef.move(chefXValues[i], chefYValues[i]);¶		}¶	}¶	¶	//Once the head of an avatar is chosen, it makes the plate that they "cook" appear¶	public void cook(OEShapeModel head) {¶		if (INIT_COOK) {¶			INIT_COOK=!INIT_COOK;¶			"), Diff(DELETE,"plateList.remove(0);¶			otherPlate"), Diff(INSERT,"queued"), Diff(EQUAL,"List.remove();¶		}¶		¶		int headX = head.getCenterX();¶		int headY = head.getCenterY();¶		"), Diff(INSERT,"¶		"), Diff(EQUAL,"APlate newPlate = new APlate("), Diff(DELETE,"plateList.size()+1"), Diff(EQUAL,");¶		newPlate.getPlate().setHeight(0);¶		newPlate.getPlate().setWidth(0);¶		"), Diff(DELETE,"plateList.add(newPlate);¶		otherPlateList.add(newPlate);¶		"), Diff(EQUAL,"¶		if (full) {¶			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y+fullPlateOffset);¶			fullPlateOffset = fullPlateOffset - 5;¶		} else {¶			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y);¶		}¶		¶		cookingCommand = new ACookingPlateCommand(cookingAnimator, newPlate, 40, 15);¶		Thread thread = new Thread (cookingCommand);¶		thread.start();¶	}¶	¶	public void serve("), Diff(INSERT,"APlate plate"), Diff(EQUAL,") {¶		//Checks to see if the buffer is full. If it is, then can't serve.¶		resetLineColors();¶		if(checkIfFull()) {¶			resetLineColors();¶			return;¶		}¶		¶		"), Diff(DELETE,"Plate workingPlate = otherPlateList.peek();"), Diff(INSERT,"queuedList.add(plate);¶		"), Diff(EQUAL,"¶		int workingPlatePlace = Integer.valueOf(workingPlate.getText().getText())-1;¶		"), Diff(INSERT,"¶		"), Diff(EQUAL,"changeLineColors(workingPlatePlace);¶		servingCommand = new AServingPlateCommand(servingAnimator,"), Diff(DELETE,"workingP"), Diff(INSERT,"p"), Diff(EQUAL,"late,PAUSE, bufferXValues[workingPlatePlace], bufferYValues[workingPlatePlace]);¶		Thread thread = new Thread(servingCommand);¶		thread.start();¶"), Diff(INSERT,""), Diff(EQUAL,"		isFull[workingPlatePlace] = true;¶	"), Diff(DELETE,"	otherPlateList.remove();¶	"), Diff(EQUAL,"}¶	¶	public void order(OEShapeModel bell) {¶		if(checkIfFull()) {¶			resetLineColors();¶			resetBuffer();¶		}¶		bellIntegerList.add(0);¶		int bellPlace = findBell(bell.getCenterY());¶		bellsList.get(bellPlace).getText().setText(String.valueOf(bellIntegerList.size()-1));¶		¶		int platePlace = findFirstAvailablePlate();¶		servingCommand = new AServingPlateCommand(servingAnimator,plateList.get(platePlace),PAUSE, bell.getCenterX() , bell.getCenterY());¶		Thread thread = new Thread(servingCommand);¶		thread.start();¶		¶		cookingCommand = new ACookingPlateCommand(cookingAnimator, plateList.get(0), 0, 15);¶		Thread eatingThread = new Thread (cookingCommand);¶		eatingThread.start();¶		plateList.get(0).getText().setText("");¶	}¶	¶	public void eat() {¶		plateList.remove(0);¶	}¶	¶	@Override¶	@Visible(false)¶	public int findBell(int centerY) {¶		for(int i=0; i<bellsList.size();i++) {¶			if(bellsList.get(i).getBell().getCenterY() == centerY) {¶				return i;¶			}¶		}¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public int findFirstAvailablePlate() {¶		for (int i=0; i<isFull.length;i++) {¶			if(isFull[i] == true) {¶				return i;¶			}¶		}¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public void resetBuffer() {¶		¶		for (int i=0; i<isFull.length;i++) {¶			isFull[i] = false;¶		}¶	}¶	¶	@Override¶	@Visible(false)¶	public int findPatron(OEShapeModel patronHead) {¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public boolean checkIfFull() {¶		for (int i=0; i<isFull.length;i++) {¶			if (isFull[i] == false) {¶				full = false;¶				return full;¶			}¶		}¶		full = true;¶		return full;¶	}¶	¶	@Override¶	@Visible(false)¶	public void changeLineColors(int workingPlatePlace) {¶		if(workingPlatePlace == lineArray.length-1) {¶			lineArray[workingPlatePlace].setColor(Color.GREEN);¶			lineArray[0].setColor(Color.GREEN);¶		} else {¶			lineArray[workingPlatePlace].setColor(Color.GREEN);¶			lineArray[workingPlatePlace+1].setColor(Color.GREEN);¶		}¶	}¶	¶	¶	@Override¶	@Visible(false)¶	public void resetLineColors() {¶		for (int i=0; i<lineArray.length; i++) {¶			lineArray[i].setColor(Color.WHITE);¶		}¶	}¶	¶	//Getters for properties of the scene¶	@Override¶	public List<AChef> getChefList() {¶		return chefList;¶	}¶	¶	@Override¶	public List<APatron> getPatronList() {¶		return patronList;¶	}¶	¶	@Override¶	public BoundedBuffer getBuffer() {¶		return buffer;¶	}¶	¶	@Override¶	public List<APlate> getPlateList() {¶		return plateList;¶	}	¶	¶	@Override¶	@util.annotations.Visible(false)¶	public Queue<APlate> getOtherPlateList() {¶		return otherPlateList;¶	}¶	¶	@Override¶	public List<ABell> getBellsList() {¶		return bellsList;¶	}¶	¶	@Override¶	@Visible(false)¶	public Queue<ABell> getQueueBellList() {¶		return queueBellList;¶	}¶}¶")]]]></diff>
    <snapshot><![CDATA[package graphics;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

import animations.ACookingPlateAnimator;
import animations.ACookingPlateCommand;
import animations.AServingPlateAnimator;
import animations.AServingPlateCommand;
import animations.CookingPlateAnimator;
import animations.ServingPlateAnimator;
import bus.uigen.OEFrame;
import bus.uigen.ObjectEditor;
import bus.uigen.shapes.ALineModel;
import bus.uigen.shapes.AStringModel;
import bus.uigen.shapes.AnImageModel;
import bus.uigen.shapes.OEShapeModel;
import shapes.FlexibleTextShape;
import util.annotations.EditablePropertyNames;
import util.annotations.Label;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Visible;
import util.misc.ThreadSupport;

import java.awt.Color;

@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({
	"patronList",
	"chefList",
	"buffer",
	"plateList",
	"otherPlateList",
	"bellsList",
	"queueBellList"
})
@EditablePropertyNames({
})
public class AProducerConsumerScene2 implements ProducerConsumerScene {
	
	//Avatar offsets inside scene
	int[] chefXValues = {120,-50,-50,120};
	int[] chefYValues = {-50,35,210,320};
	int[] patronXValues = {650,850,850,650};
	int[] patronYValues = {-50,35,220,320};
	int[] bellXValues = {680,880,880,680};
	int[] bellYValues = {75,160,345,445};
	int INIT_HEAD_Y = 60;
	int INIT_HEAD_X = 163;
	int INIT_HEAD_HEIGHT = 90;
	int INIT_HEAD_WIDTH = 80;
	int PLATE_OFFSET_X = 30;
	int PLATE_OFFSET_Y = 10;
	int PAUSE = 5;
	
	//Booleans that help with the functionality of the below methods
	boolean INIT_COOK = true;
	boolean full = false;
	int fullPlateOffset = -5;
	
	//Defining the chef and patron images
	String[] chefImages = {"images/0.png","images/1.png","images/2.png","images/3.png"};
	String[] patronImages = {"images/4.png", "images/5.png", "images/6.png", "images/7.png"};
	
	//Buffer arrays
	int[] bufferXValues = {625, 680, 680, 620, 535, 460, 460, 535};
	int[] bufferYValues = {200, 275, 365, 425, 425, 365, 275, 200};
	boolean[] isFull = {false, false, false, false, false, false, false, false};
	
	//The properties of our class
	List<APatron> patronList;
	List<AChef> chefList;
	BoundedBuffer buffer = new ABoundedBuffer();
	
	//This list will keep a track of the plates that enter the buffer so that FIFO
	Queue<APlate> queuedList;
	
	OEShapeModel[] lineArray = {buffer.getLineTwo(), buffer.getLineThree(), buffer.getLineFour(), 
								buffer.getLineFive(), buffer.getLineSix(), buffer.getLineSeven(), 
								buffer.getLineEight(), buffer.getLineOne()};
	
	List<ABell> bellsList;
	Queue<ABell> queueBellList;
	int[] bellValues = {127, 212, 397, 497};
	Queue<Integer> bellIntegerList;
	
	ACookingPlateCommand cookingCommand;
	CookingPlateAnimator cookingAnimator;
	
	AServingPlateCommand servingCommand;
	ServingPlateAnimator servingAnimator;
	
	//The constructor sets the scene with one chef, patron, a buffer, and a plate (not visible)
	public AProducerConsumerScene2() {
		patronList = new ArrayList<APatron>();
		chefList = new ArrayList<AChef>();
		//buffer = new ABoundedBuffer();
		
		queuedList = new LinkedList<APlate>();
		bellsList = new ArrayList<ABell>();
		queueBellList = new LinkedList<ABell>();
		bellIntegerList = new LinkedList<Integer>();
		
		patronList.add(0, new APatron());
		OEShapeModel initPatronHead = new AnImageModel(patronImages[0]);
		initPatronHead.setX(INIT_HEAD_X);
		initPatronHead.setY(INIT_HEAD_Y);
		initPatronHead.setHeight(INIT_HEAD_HEIGHT);
		initPatronHead.setWidth(INIT_HEAD_WIDTH);
		patronList.get(0).patron.setHead(initPatronHead);
		patronList.get(0).move(patronXValues[0], patronYValues[0]);
		
		chefList.add(0, new AChef());
		OEShapeModel initChefHead = new AnImageModel(chefImages[0]);
		initChefHead.setX(INIT_HEAD_X);
		initChefHead.setY(INIT_HEAD_Y);
		initChefHead.setHeight(INIT_HEAD_HEIGHT);
		initChefHead.setWidth(INIT_HEAD_WIDTH);
		chefList.get(0).chef.setHead(initChefHead);
		chefList.get(0).move(chefXValues[0], chefYValues[0]);
		
		queuedList.add(new APlate());
		queuedList.peek().getPlate().setHeight(0);
		queuedList.peek().getPlate().setWidth(0);
		
		cookingAnimator = new ACookingPlateAnimator();
		servingAnimator = new AServingPlateAnimator();
		
		bellsList.add(new ABell());
		bellsList.get(0).getBell().setHeight(0);
		bellsList.get(0).getBell().setWidth(0);
		
		queueBellList.add(new ABell());
		queueBellList.peek().getBell().setHeight(0);
		queueBellList.peek().getBell().setWidth(0);
		
		bellIntegerList.add(0);
	}
	
	//Producer consumer methods
	
	//Init Scene sets the number of patrons and chefs in the scene
	@Label("Init Scene")
	public void initScene(int patronAmount, int chefAmount) {
		bellsList.clear();
		for (int i=0; i<patronAmount; i++) { 
			APatron patron = new APatron();
			patronList.add(i, patron);
			OEShapeModel newHead = new AnImageModel(patronImages[i]);
			patron.patron.setHead(newHead); 
			newHead.setX(INIT_HEAD_X); 
			newHead.setY(INIT_HEAD_Y);
			newHead.setHeight(INIT_HEAD_HEIGHT);
			newHead.setWidth(INIT_HEAD_WIDTH);
			patron.move(patronXValues[i], patronYValues[i]);
			
			bellsList.add(new ABell());
			bellsList.get(i).move(bellXValues[i], bellYValues[i]);
		}
		for (int i=0; i<chefAmount; i++) {
			AChef chef = new AChef();
			chefList.add(i, chef);
			OEShapeModel newHead = new AnImageModel(chefImages[i]);
			chef.chef.setHead(newHead);
			newHead.setX(INIT_HEAD_X); 
			newHead.setY(INIT_HEAD_Y);
			newHead.setHeight(INIT_HEAD_HEIGHT);
			newHead.setWidth(INIT_HEAD_WIDTH);
			chef.move(chefXValues[i], chefYValues[i]);
		}
	}
	
	//Once the head of an avatar is chosen, it makes the plate that they "cook" appear
	public void cook(OEShapeModel head) {
		if (INIT_COOK) {
			INIT_COOK=!INIT_COOK;
			queuedList.remove();
		}
		
		int headX = head.getCenterX();
		int headY = head.getCenterY();
		
		APlate newPlate = new APlate();
		newPlate.getPlate().setHeight(0);
		newPlate.getPlate().setWidth(0);
		
		if (full) {
			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y+fullPlateOffset);
			fullPlateOffset = fullPlateOffset - 5;
		} else {
			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y);
		}
		
		cookingCommand = new ACookingPlateCommand(cookingAnimator, newPlate, 40, 15);
		Thread thread = new Thread (cookingCommand);
		thread.start();
	}
	
	public void serve(APlate plate) {
		//Checks to see if the buffer is full. If it is, then can't serve.
		resetLineColors();
		if(checkIfFull()) {
			resetLineColors();
			return;
		}
		
		queuedList.add(plate);
		
		int workingPlatePlace = Integer.valueOf(workingPlate.getText().getText())-1;
		
		changeLineColors(workingPlatePlace);
		servingCommand = new AServingPlateCommand(servingAnimator,plate,PAUSE, bufferXValues[workingPlatePlace], bufferYValues[workingPlatePlace]);
		Thread thread = new Thread(servingCommand);
		thread.start();
		isFull[workingPlatePlace] = true;
	}
	
	public void order(OEShapeModel bell) {
		if(checkIfFull()) {
			resetLineColors();
			resetBuffer();
		}
		bellIntegerList.add(0);
		int bellPlace = findBell(bell.getCenterY());
		bellsList.get(bellPlace).getText().setText(String.valueOf(bellIntegerList.size()-1));
		
		int platePlace = findFirstAvailablePlate();
		servingCommand = new AServingPlateCommand(servingAnimator,plateList.get(platePlace),PAUSE, bell.getCenterX() , bell.getCenterY());
		Thread thread = new Thread(servingCommand);
		thread.start();
		
		cookingCommand = new ACookingPlateCommand(cookingAnimator, plateList.get(0), 0, 15);
		Thread eatingThread = new Thread (cookingCommand);
		eatingThread.start();
		plateList.get(0).getText().setText("");
	}
	
	public void eat() {
		plateList.remove(0);
	}
	
	@Override
	@Visible(false)
	public int findBell(int centerY) {
		for(int i=0; i<bellsList.size();i++) {
			if(bellsList.get(i).getBell().getCenterY() == centerY) {
				return i;
			}
		}
		return 0;
	}
	
	@Override
	@Visible(false)
	public int findFirstAvailablePlate() {
		for (int i=0; i<isFull.length;i++) {
			if(isFull[i] == true) {
				return i;
			}
		}
		return 0;
	}
	
	@Override
	@Visible(false)
	public void resetBuffer() {
		
		for (int i=0; i<isFull.length;i++) {
			isFull[i] = false;
		}
	}
	
	@Override
	@Visible(false)
	public int findPatron(OEShapeModel patronHead) {
		return 0;
	}
	
	@Override
	@Visible(false)
	public boolean checkIfFull() {
		for (int i=0; i<isFull.length;i++) {
			if (isFull[i] == false) {
				full = false;
				return full;
			}
		}
		full = true;
		return full;
	}
	
	@Override
	@Visible(false)
	public void changeLineColors(int workingPlatePlace) {
		if(workingPlatePlace == lineArray.length-1) {
			lineArray[workingPlatePlace].setColor(Color.GREEN);
			lineArray[0].setColor(Color.GREEN);
		} else {
			lineArray[workingPlatePlace].setColor(Color.GREEN);
			lineArray[workingPlatePlace+1].setColor(Color.GREEN);
		}
	}
	
	
	@Override
	@Visible(false)
	public void resetLineColors() {
		for (int i=0; i<lineArray.length; i++) {
			lineArray[i].setColor(Color.WHITE);
		}
	}
	
	//Getters for properties of the scene
	@Override
	public List<AChef> getChefList() {
		return chefList;
	}
	
	@Override
	public List<APatron> getPatronList() {
		return patronList;
	}
	
	@Override
	public BoundedBuffer getBuffer() {
		return buffer;
	}
	
	@Override
	public List<APlate> getPlateList() {
		return plateList;
	}	
	
	@Override
	@util.annotations.Visible(false)
	public Queue<APlate> getOtherPlateList() {
		return otherPlateList;
	}
	
	@Override
	public List<ABell> getBellsList() {
		return bellsList;
	}
	
	@Override
	@Visible(false)
	public Queue<ABell> getQueueBellList() {
		return queueBellList;
	}
}
]]></snapshot>
  </Command>
  <Command __id="977" _type="PauseCommand" date="Sat Feb 25 10:52:15 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="27581916">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[4062]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="978" _type="MoveCaretCommand" caretOffset="5816" date="Sat Feb 25 10:52:15 EST 2023" docOffset="6696" starttimestamp="1677312753280" timestamp="27582087" />
  <Command __id="976" _type="DiffBasedFileOpenCommand" date="Sat Feb 25 10:52:15 EST 2023" docASTNodeCount="1675" docActiveCodeLength="9773" docExpressionCount="1160" docLength="10344" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="27581915">
    <filePath><![CDATA[C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\graphics\AProducerConsumerScene.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package graphics;¶¶import java.util.ArrayList;¶import java.util.LinkedList;¶import java.util.List;¶import java.util.Queue;¶¶import animations.ACookingPlateAnimator;¶import animations.ACookingPlateCommand;¶import animations.AServingPlateAnimator;¶import animations.AServingPlateCommand;¶import animations.CookingPlateAnimator;¶import animations.ServingPlateAnimator;¶import bus.uigen.OEFrame;¶import bus.uigen.ObjectEditor;¶import bus.uigen.shapes.ALineModel;¶import bus.uigen.shapes.AStringModel;¶import bus.uigen.shapes.AnImageModel;¶import bus.uigen.shapes.OEShapeModel;¶import shapes.FlexibleTextShape;¶import util.annotations.EditablePropertyNames;¶import util.annotations.Label;¶import util.annotations.PropertyNames;¶import util.annotations.StructurePattern;¶import util.annotations.StructurePatternNames;¶import util.annotations.Visible;¶import util.misc.ThreadSupport;¶¶import java.awt.Color;¶¶@StructurePattern(StructurePatternNames.BEAN_PATTERN)¶@PropertyNames({¶	"patronList",¶	"chefList",¶	"buffer",¶	"plateList",¶	"otherPlateList",¶	"bellsList",¶	"queueBellList"¶})¶@EditablePropertyNames({¶})¶public class AProducerConsumerScene implements ProducerConsumerScene {¶	¶	//Avatar offsets inside scene¶	int[] chefXValues = {120,-50,-50,120};¶	int[] chefYValues = {-50,35,210,320};¶	int[] patronXValues = {650,850,850,650};¶	int[] patronYValues = {-50,35,220,320};¶	int[] bellXValues = {680,880,880,680};¶	int[] bellYValues = {75,160,345,445};¶	int INIT_HEAD_Y = 60;¶	int INIT_HEAD_X = 163;¶	int INIT_HEAD_HEIGHT = 90;¶	int INIT_HEAD_WIDTH = 80;¶	int PLATE_OFFSET_X = 30;¶	int PLATE_OFFSET_Y = 10;¶	int PAUSE = 5;¶	¶	//Booleans that help with the functionality of the below methods¶	boolean INIT_COOK = true;¶	boolean full = false;¶	int fullPlateOffset = -5;¶	¶	//Defining the chef and patron images¶	String[] chefImages = {"images/0.png","images/1.png","images/2.png","images/3.png"};¶	String[] patronImages = {"images/4.png", "images/5.png", "images/6.png", "images/7.png"};¶	¶	//Buffer arrays¶	int[] bufferXValues = {625, 680, 680, 620, 535, 460, 460, 535};¶	int[] bufferYValues = {200, 275, 365, 425, 425, 365, 275, 200};¶	boolean[] isFull = {false, false, false, false, false, false, false, false};¶	¶	//The properties of our class¶	List<APatron> patronList;¶	List<AChef> chefList;¶	BoundedBuffer buffer = new ABoundedBuffer();¶	List<APlate> plateList;¶	Queue<APlate> otherPlateList;¶	¶	OEShapeModel[] lineArray = {buffer.getLineTwo(), buffer.getLineThree(), buffer.getLineFour(), ¶								buffer.getLineFive(), buffer.getLineSix(), buffer.getLineSeven(), ¶								buffer.getLineEight(), buffer.getLineOne()};¶	¶	List<ABell> bellsList;¶	Queue<ABell> queueBellList;¶	int[] bellValues = {127, 212, 397, 497};¶	Queue<Integer> bellIntegerList;¶	¶	ACookingPlateCommand cookingCommand;¶	CookingPlateAnimator cookingAnimator;¶	¶	AServingPlateCommand servingCommand;¶	ServingPlateAnimator servingAnimator;¶	¶	//The constructor sets the scene with one chef, patron, a buffer, and a plate (not visible)¶	public AProducerConsumerScene() {¶		patronList = new ArrayList<APatron>();¶		chefList = new ArrayList<AChef>();¶		//buffer = new ABoundedBuffer();¶		plateList = new ArrayList<APlate>();¶		otherPlateList = new LinkedList<APlate>();¶		bellsList = new ArrayList<ABell>();¶		queueBellList = new LinkedList<ABell>();¶		bellIntegerList = new LinkedList<Integer>();¶		¶		patronList.add(0, new APatron());¶		OEShapeModel initPatronHead = new AnImageModel(patronImages[0]);¶		initPatronHead.setX(INIT_HEAD_X);¶		initPatronHead.setY(INIT_HEAD_Y);¶		initPatronHead.setHeight(INIT_HEAD_HEIGHT);¶		initPatronHead.setWidth(INIT_HEAD_WIDTH);¶		patronList.get(0).patron.setHead(initPatronHead);¶		patronList.get(0).move(patronXValues[0], patronYValues[0]);¶		¶		chefList.add(0, new AChef());¶		OEShapeModel initChefHead = new AnImageModel(chefImages[0]);¶		initChefHead.setX(INIT_HEAD_X);¶		initChefHead.setY(INIT_HEAD_Y);¶		initChefHead.setHeight(INIT_HEAD_HEIGHT);¶		initChefHead.setWidth(INIT_HEAD_WIDTH);¶		chefList.get(0).chef.setHead(initChefHead);¶		chefList.get(0).move(chefXValues[0], chefYValues[0]);¶		¶		plateList.add(new APlate());¶		plateList.get(0).getPlate().setHeight(0);¶		plateList.get(0).getPlate().setWidth(0);¶		¶		otherPlateList.add(new APlate());¶		otherPlateList.peek().getPlate().setHeight(0);¶		otherPlateList.peek().getPlate().setWidth(0);¶		¶		cookingAnimator = new ACookingPlateAnimator();¶		servingAnimator = new AServingPlateAnimator();¶		¶		bellsList.add(new ABell());¶		bellsList.get(0).getBell().setHeight(0);¶		bellsList.get(0).getBell().setWidth(0);¶		¶		queueBellList.add(new ABell());¶		queueBellList.peek().getBell().setHeight(0);¶		queueBellList.peek().getBell().setWidth(0);¶		¶		bellIntegerList.add(0);¶	}¶	¶	//Producer consumer methods¶	¶	//Init Scene sets the number of patrons and chefs in the scene¶	@Label("Init Scene")¶	public void initScene(int patronAmount, int chefAmount) {¶		bellsList.clear();¶		for (int i=0; i<patronAmount; i++) { ¶			APatron patron = new APatron();¶			patronList.add(i, patron);¶			OEShapeModel newHead = new AnImageModel(patronImages[i]);¶			patron.patron.setHead(newHead); ¶			newHead.setX(INIT_HEAD_X); ¶			newHead.setY(INIT_HEAD_Y);¶			newHead.setHeight(INIT_HEAD_HEIGHT);¶			newHead.setWidth(INIT_HEAD_WIDTH);¶			patron.move(patronXValues[i], patronYValues[i]);¶			¶			bellsList.add(new ABell());¶			bellsList.get(i).move(bellXValues[i], bellYValues[i]);¶		}¶		for (int i=0; i<chefAmount; i++) {¶			AChef chef = new AChef();¶			chefList.add(i, chef);¶			OEShapeModel newHead = new AnImageModel(chefImages[i]);¶			chef.chef.setHead(newHead);¶			newHead.setX(INIT_HEAD_X); ¶			newHead.setY(INIT_HEAD_Y);¶			newHead.setHeight(INIT_HEAD_HEIGHT);¶			newHead.setWidth(INIT_HEAD_WIDTH);¶			chef.move(chefXValues[i], chefYValues[i]);¶		}¶	}¶	¶	//Once the head of an avatar is chosen, it makes the plate that they "cook" appear¶	public void cook(OEShapeModel head) {¶		if (INIT_COOK) {¶			INIT_COOK=!INIT_COOK;¶			plateList.remove(0);¶			otherPlateList.remove();¶		}¶		¶		int headX = head.getCenterX();¶		int headY = head.getCenterY();¶		APlate newPlate = new APlate(plateList.size()+1);¶		newPlate.getPlate().setHeight(0);¶		newPlate.getPlate().setWidth(0);¶		plateList.add(newPlate);¶		otherPlateList.add(newPlate);¶		¶		if (full) {¶			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y+fullPlateOffset);¶			fullPlateOffset = fullPlateOffset - 5;¶		} else {¶			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y);¶		}¶		¶		cookingCommand = new ACookingPlateCommand(cookingAnimator, newPlate, 40, 15);¶		Thread thread = new Thread (cookingCommand);¶		thread.start();¶	}¶	¶	public void serve() {¶		//Checks to see if the buffer is full. If it is, then can't serve.¶		resetLineColors();¶		if(checkIfFull()) {¶			resetLineColors();¶			return;¶		}¶		¶		Plate workingPlate = otherPlateList.peek();¶		int workingPlatePlace = Integer.valueOf(workingPlate.getText().getText())-1;¶		changeLineColors(workingPlatePlace);¶		servingCommand = new AServingPlateCommand(servingAnimator,workingPlate,PAUSE, bufferXValues[workingPlatePlace], bufferYValues[workingPlatePlace]);¶		Thread thread = new Thread(servingCommand);¶		thread.start();¶		isFull[workingPlatePlace] = true;¶		otherPlateList.remove();¶	}¶	¶	public void order(OEShapeModel bell) {¶		if(checkIfFull()) {¶			resetLineColors();¶			resetBuffer();¶		}¶		bellIntegerList.add(0);¶		int bellPlace = findBell(bell.getCenterY());¶		bellsList.get(bellPlace).getText().setText(String.valueOf(bellIntegerList.size()-1));¶		¶		int platePlace = findFirstAvailablePlate();¶		servingCommand = new AServingPlateCommand(servingAnimator,plateList.get(platePlace),PAUSE, bell.getCenterX() , bell.getCenterY());¶		Thread thread = new Thread(servingCommand);¶		thread.start();¶		¶		cookingCommand = new ACookingPlateCommand(cookingAnimator, plateList.get(0), 0, 15);¶		Thread eatingThread = new Thread (cookingCommand);¶		eatingThread.start();¶		plateList.get(0).getText().setText("");¶	}¶	¶	public void eat() {¶		plateList.remove(0);¶	}¶	¶	@Override¶	@Visible(false)¶	public int findBell(int centerY) {¶		for(int i=0; i<bellsList.size();i++) {¶			if(bellsList.get(i).getBell().getCenterY() == centerY) {¶				return i;¶			}¶		}¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public int findFirstAvailablePlate() {¶		for (int i=0; i<isFull.length;i++) {¶			if(isFull[i] == true) {¶				return i;¶			}¶		}¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public void resetBuffer() {¶		¶		for (int i=0; i<isFull.length;i++) {¶			isFull[i] = false;¶		}¶	}¶	¶	@Override¶	@Visible(false)¶	public int findPatron(OEShapeModel patronHead) {¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public boolean checkIfFull() {¶		for (int i=0; i<isFull.length;i++) {¶			if (isFull[i] == false) {¶				full = false;¶				return full;¶			}¶		}¶		full = true;¶		return full;¶	}¶	¶	@Override¶	@Visible(false)¶	public void changeLineColors(int workingPlatePlace) {¶		if(workingPlatePlace == lineArray.length-1) {¶			lineArray[workingPlatePlace].setColor(Color.GREEN);¶			lineArray[0].setColor(Color.GREEN);¶		} else {¶			lineArray[workingPlatePlace].setColor(Color.GREEN);¶			lineArray[workingPlatePlace+1].setColor(Color.GREEN);¶		}¶	}¶	¶	¶	@Override¶	@Visible(false)¶	public void resetLineColors() {¶		for (int i=0; i<lineArray.length; i++) {¶			lineArray[i].setColor(Color.WHITE);¶		}¶	}¶	¶	//Getters for properties of the scene¶	@Override¶	public List<AChef> getChefList() {¶		return chefList;¶	}¶	¶	@Override¶	public List<APatron> getPatronList() {¶		return patronList;¶	}¶	¶	@Override¶	public BoundedBuffer getBuffer() {¶		return buffer;¶	}¶	¶	@Override¶	public List<APlate> getPlateList() {¶		return plateList;¶	}	¶	¶	@Override¶	@util.annotations.Visible(false)¶	public Queue<APlate> getOtherPlateList() {¶		return otherPlateList;¶	}¶	¶	@Override¶	public List<ABell> getBellsList() {¶		return bellsList;¶	}¶	¶	@Override¶	@Visible(false)¶	public Queue<ABell> getQueueBellList() {¶		return queueBellList;¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="980" _type="PauseCommand" date="Sat Feb 25 10:52:20 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="27586812">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[4725]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="981" _type="MoveCaretCommand" caretOffset="5971" date="Sat Feb 25 10:52:20 EST 2023" docOffset="6851" starttimestamp="1677312753280" timestamp="27587058" />
  <Command __id="983" _type="PauseCommand" date="Sat Feb 25 10:52:34 EST 2023" range="10s-20s" starttimestamp="1677312753280" timestamp="27600922">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[13864]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="982" _type="SelectTextCommand" caretOffset="6049" date="Sat Feb 25 10:52:34 EST 2023" end="6051" start="6049" starttimestamp="1677312753280" timestamp="27600922" />
  <Command __id="984" _type="MoveCaretCommand" caretOffset="6049" date="Sat Feb 25 10:52:34 EST 2023" docOffset="6929" starttimestamp="1677312753280" timestamp="27601300" />
  <Command __id="986" _type="PauseCommand" date="Sat Feb 25 10:52:37 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="27603871">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2571]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="985" _type="SelectTextCommand" caretOffset="6051" date="Sat Feb 25 10:52:37 EST 2023" end="6051" start="5999" starttimestamp="1677312753280" timestamp="27603871" />
  <Command __id="988" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:52:37 EST 2023" starttimestamp="1677312753280" timestamp="27604367" />
  <Command __id="990" _type="InsertStringCommand" date="Sat Feb 25 10:52:37 EST 2023" starttimestamp="1677312753280" timestamp="27604710" timestamp2="27604710">
    <data><![CDATA[q]]></data>
  </Command>
  <Command __id="992" _type="InsertStringCommand" date="Sat Feb 25 10:52:38 EST 2023" starttimestamp="1677312753280" timestamp="27604861" timestamp2="27604861">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="994" _type="InsertStringCommand" date="Sat Feb 25 10:52:38 EST 2023" starttimestamp="1677312753280" timestamp="27605395" timestamp2="27605395">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="996" _type="InsertStringCommand" date="Sat Feb 25 10:52:39 EST 2023" starttimestamp="1677312753280" timestamp="27605805" timestamp2="27605805">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="998" _type="InsertStringCommand" date="Sat Feb 25 10:52:39 EST 2023" starttimestamp="1677312753280" timestamp="27605975" timestamp2="27605975">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1000" _type="InsertStringCommand" date="Sat Feb 25 10:52:39 EST 2023" starttimestamp="1677312753280" timestamp="27606137" timestamp2="27606137">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="1002" _type="InsertStringCommand" date="Sat Feb 25 10:52:39 EST 2023" starttimestamp="1677312753280" timestamp="27606477" timestamp2="27606477">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="1004" _type="InsertStringCommand" date="Sat Feb 25 10:52:39 EST 2023" starttimestamp="1677312753280" timestamp="27606691" timestamp2="27606691">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1006" _type="InsertStringCommand" date="Sat Feb 25 10:52:40 EST 2023" starttimestamp="1677312753280" timestamp="27606782" timestamp2="27606782">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="1008" _type="InsertStringCommand" date="Sat Feb 25 10:52:40 EST 2023" starttimestamp="1677312753280" timestamp="27607449" timestamp2="27607449">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1010" _type="InsertStringCommand" date="Sat Feb 25 10:52:40 EST 2023" starttimestamp="1677312753280" timestamp="27607696" timestamp2="27607696">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="1011" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sat Feb 25 10:52:40 EST 2023" start_end="START" starttimestamp="1677312753280" timestamp="27607700" />
  <Command __id="1014" _type="PauseCommand" date="Sat Feb 25 10:52:42 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27608992">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[1292]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="1013" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sat Feb 25 10:52:42 EST 2023" start_end="END" starttimestamp="1677312753280" timestamp="27608992" />
  <Command __id="1016" _type="InsertStringCommand" date="Sat Feb 25 10:52:42 EST 2023" starttimestamp="1677312753280" timestamp="27609029" timestamp2="27609029">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1018" _type="InsertStringCommand" date="Sat Feb 25 10:52:42 EST 2023" starttimestamp="1677312753280" timestamp="27609508" timestamp2="27609508">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="1020" _type="PauseCommand" date="Sat Feb 25 10:52:44 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27611320">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1812]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1019" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sat Feb 25 10:52:44 EST 2023" starttimestamp="1677312753280" timestamp="27611320" />
  <Command __id="1021" _type="EclipseCommand" commandID="" date="Sat Feb 25 10:52:44 EST 2023" starttimestamp="1677312753280" timestamp="27611394" />
  <Command __id="1022" _type="EclipseCommand" commandID="" date="Sat Feb 25 10:52:44 EST 2023" starttimestamp="1677312753280" timestamp="27611499" />
  <Command __id="979" _type="DiffBasedFileOpenCommand" date="Sat Feb 25 10:52:20 EST 2023" docASTNodeCount="1608" docActiveCodeLength="9434" docExpressionCount="1110" docLength="10083" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="27586812">
    <filePath><![CDATA[C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\graphics\AProducerConsumerScene2.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package graphics;¶¶import java.util.ArrayList;¶import java.util.LinkedList;¶import java.util.List;¶import java.util.Queue;¶¶import animations.ACookingPlateAnimator;¶import animations.ACookingPlateCommand;¶import animations.AServingPlateAnimator;¶import animations.AServingPlateCommand;¶import animations.CookingPlateAnimator;¶import animations.ServingPlateAnimator;¶import bus.uigen.OEFrame;¶import bus.uigen.ObjectEditor;¶import bus.uigen.shapes.ALineModel;¶import bus.uigen.shapes.AStringModel;¶import bus.uigen.shapes.AnImageModel;¶import bus.uigen.shapes.OEShapeModel;¶import shapes.FlexibleTextShape;¶import util.annotations.EditablePropertyNames;¶import util.annotations.Label;¶import util.annotations.PropertyNames;¶import util.annotations.StructurePattern;¶import util.annotations.StructurePatternNames;¶import util.annotations.Visible;¶import util.misc.ThreadSupport;¶¶import java.awt.Color;¶¶@StructurePattern(StructurePatternNames.BEAN_PATTERN)¶@PropertyNames({¶	"patronList",¶	"chefList",¶	"buffer",¶	"plateList",¶	"otherPlateList",¶	"bellsList",¶	"queueBellList"¶})¶@EditablePropertyNames({¶})¶public class AProducerConsumerScene2 implements ProducerConsumerScene {¶	¶	//Avatar offsets inside scene¶	int[] chefXValues = {120,-50,-50,120};¶	int[] chefYValues = {-50,35,210,320};¶	int[] patronXValues = {650,850,850,650};¶	int[] patronYValues = {-50,35,220,320};¶	int[] bellXValues = {680,880,880,680};¶	int[] bellYValues = {75,160,345,445};¶	int INIT_HEAD_Y = 60;¶	int INIT_HEAD_X = 163;¶	int INIT_HEAD_HEIGHT = 90;¶	int INIT_HEAD_WIDTH = 80;¶	int PLATE_OFFSET_X = 30;¶	int PLATE_OFFSET_Y = 10;¶	int PAUSE = 5;¶	¶	//Booleans that help with the functionality of the below methods¶	boolean INIT_COOK = true;¶	boolean full = false;¶	int fullPlateOffset = -5;¶	¶	//Defining the chef and patron images¶	String[] chefImages = {"images/0.png","images/1.png","images/2.png","images/3.png"};¶	String[] patronImages = {"images/4.png", "images/5.png", "images/6.png", "images/7.png"};¶	¶	//Buffer arrays¶	int[] bufferXValues = {625, 680, 680, 620, 535, 460, 460, 535};¶	int[] bufferYValues = {200, 275, 365, 425, 425, 365, 275, 200};¶	boolean[] isFull = {false, false, false, false, false, false, false, false};¶	¶	//The properties of our class¶	List<APatron> patronList;¶	List<AChef> chefList;¶	BoundedBuffer buffer = new ABoundedBuffer();¶	¶	//This list will keep a track of the plates that enter the buffer so that FIFO¶	Queue<APlate> queuedList;¶	¶	OEShapeModel[] lineArray = {buffer.getLineTwo(), buffer.getLineThree(), buffer.getLineFour(), ¶								buffer.getLineFive(), buffer.getLineSix(), buffer.getLineSeven(), ¶								buffer.getLineEight(), buffer.getLineOne()};¶	¶	List<ABell> bellsList;¶	Queue<ABell> queueBellList;¶	int[] bellValues = {127, 212, 397, 497};¶	Queue<Integer> bellIntegerList;¶	¶	ACookingPlateCommand cookingCommand;¶	CookingPlateAnimator cookingAnimator;¶	¶	AServingPlateCommand servingCommand;¶	ServingPlateAnimator servingAnimator;¶	¶	//The constructor sets the scene with one chef, patron, a buffer, and a plate (not visible)¶	public AProducerConsumerScene2() {¶		patronList = new ArrayList<APatron>();¶		chefList = new ArrayList<AChef>();¶		//buffer = new ABoundedBuffer();¶		¶		queuedList = new LinkedList<APlate>();¶		bellsList = new ArrayList<ABell>();¶		queueBellList = new LinkedList<ABell>();¶		bellIntegerList = new LinkedList<Integer>();¶		¶		patronList.add(0, new APatron());¶		OEShapeModel initPatronHead = new AnImageModel(patronImages[0]);¶		initPatronHead.setX(INIT_HEAD_X);¶		initPatronHead.setY(INIT_HEAD_Y);¶		initPatronHead.setHeight(INIT_HEAD_HEIGHT);¶		initPatronHead.setWidth(INIT_HEAD_WIDTH);¶		patronList.get(0).patron.setHead(initPatronHead);¶		patronList.get(0).move(patronXValues[0], patronYValues[0]);¶		¶		chefList.add(0, new AChef());¶		OEShapeModel initChefHead = new AnImageModel(chefImages[0]);¶		initChefHead.setX(INIT_HEAD_X);¶		initChefHead.setY(INIT_HEAD_Y);¶		initChefHead.setHeight(INIT_HEAD_HEIGHT);¶		initChefHead.setWidth(INIT_HEAD_WIDTH);¶		chefList.get(0).chef.setHead(initChefHead);¶		chefList.get(0).move(chefXValues[0], chefYValues[0]);¶		¶		queuedList.add(new APlate());¶		queuedList.peek().getPlate().setHeight(0);¶		queuedList.peek().getPlate().setWidth(0);¶		¶		cookingAnimator = new ACookingPlateAnimator();¶		servingAnimator = new AServingPlateAnimator();¶		¶		bellsList.add(new ABell());¶		bellsList.get(0).getBell().setHeight(0);¶		bellsList.get(0).getBell().setWidth(0);¶		¶		queueBellList.add(new ABell());¶		queueBellList.peek().getBell().setHeight(0);¶		queueBellList.peek().getBell().setWidth(0);¶		¶		bellIntegerList.add(0);¶	}¶	¶	//Producer consumer methods¶	¶	//Init Scene sets the number of patrons and chefs in the scene¶	@Label("Init Scene")¶	public void initScene(int patronAmount, int chefAmount) {¶		bellsList.clear();¶		for (int i=0; i<patronAmount; i++) { ¶			APatron patron = new APatron();¶			patronList.add(i, patron);¶			OEShapeModel newHead = new AnImageModel(patronImages[i]);¶			patron.patron.setHead(newHead); ¶			newHead.setX(INIT_HEAD_X); ¶			newHead.setY(INIT_HEAD_Y);¶			newHead.setHeight(INIT_HEAD_HEIGHT);¶			newHead.setWidth(INIT_HEAD_WIDTH);¶			patron.move(patronXValues[i], patronYValues[i]);¶			¶			bellsList.add(new ABell());¶			bellsList.get(i).move(bellXValues[i], bellYValues[i]);¶		}¶		for (int i=0; i<chefAmount; i++) {¶			AChef chef = new AChef();¶			chefList.add(i, chef);¶			OEShapeModel newHead = new AnImageModel(chefImages[i]);¶			chef.chef.setHead(newHead);¶			newHead.setX(INIT_HEAD_X); ¶			newHead.setY(INIT_HEAD_Y);¶			newHead.setHeight(INIT_HEAD_HEIGHT);¶			newHead.setWidth(INIT_HEAD_WIDTH);¶			chef.move(chefXValues[i], chefYValues[i]);¶		}¶	}¶	¶	//Once the head of an avatar is chosen, it makes the plate that they "cook" appear¶	public void cook(OEShapeModel head) {¶		if (INIT_COOK) {¶			INIT_COOK=!INIT_COOK;¶			queuedList.remove();¶		}¶		¶		int headX = head.getCenterX();¶		int headY = head.getCenterY();¶		¶		APlate newPlate = new APlate();¶		newPlate.getPlate().setHeight(0);¶		newPlate.getPlate().setWidth(0);¶		¶		if (full) {¶			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y+fullPlateOffset);¶			fullPlateOffset = fullPlateOffset - 5;¶		} else {¶			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y);¶		}¶		¶		cookingCommand = new ACookingPlateCommand(cookingAnimator, newPlate, 40, 15);¶		Thread thread = new Thread (cookingCommand);¶		thread.start();¶	}¶	¶	public void serve(APlate plate) {¶		//Checks to see if the buffer is full. If it is, then can't serve.¶		resetLineColors();¶		if(checkIfFull()) {¶			resetLineColors();¶			return;¶		}¶		¶		queuedList.add(plate);¶		¶		int workingPlatePlace = Integer.valueOf(workingPlate.getText().getText())-1;¶		¶		changeLineColors(workingPlatePlace);¶		servingCommand = new AServingPlateCommand(servingAnimator,plate,PAUSE, bufferXValues[workingPlatePlace], bufferYValues[workingPlatePlace]);¶		Thread thread = new Thread(servingCommand);¶		thread.start();¶		isFull[workingPlatePlace] = true;¶	}¶	¶	public void order(OEShapeModel bell) {¶		if(checkIfFull()) {¶			resetLineColors();¶			resetBuffer();¶		}¶		bellIntegerList.add(0);¶		int bellPlace = findBell(bell.getCenterY());¶		bellsList.get(bellPlace).getText().setText(String.valueOf(bellIntegerList.size()-1));¶		¶		int platePlace = findFirstAvailablePlate();¶		servingCommand = new AServingPlateCommand(servingAnimator,plateList.get(platePlace),PAUSE, bell.getCenterX() , bell.getCenterY());¶		Thread thread = new Thread(servingCommand);¶		thread.start();¶		¶		cookingCommand = new ACookingPlateCommand(cookingAnimator, plateList.get(0), 0, 15);¶		Thread eatingThread = new Thread (cookingCommand);¶		eatingThread.start();¶		plateList.get(0).getText().setText("");¶	}¶	¶	public void eat() {¶		plateList.remove(0);¶	}¶	¶	@Override¶	@Visible(false)¶	public int findBell(int centerY) {¶		for(int i=0; i<bellsList.size();i++) {¶			if(bellsList.get(i).getBell().getCenterY() == centerY) {¶				return i;¶			}¶		}¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public int findFirstAvailablePlate() {¶		for (int i=0; i<isFull.length;i++) {¶			if(isFull[i] == true) {¶				return i;¶			}¶		}¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public void resetBuffer() {¶		¶		for (int i=0; i<isFull.length;i++) {¶			isFull[i] = false;¶		}¶	}¶	¶	@Override¶	@Visible(false)¶	public int findPatron(OEShapeModel patronHead) {¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public boolean checkIfFull() {¶		for (int i=0; i<isFull.length;i++) {¶			if (isFull[i] == false) {¶				full = false;¶				return full;¶			}¶		}¶		full = true;¶		return full;¶	}¶	¶	@Override¶	@Visible(false)¶	public void changeLineColors(int workingPlatePlace) {¶		if(workingPlatePlace == lineArray.length-1) {¶			lineArray[workingPlatePlace].setColor(Color.GREEN);¶			lineArray[0].setColor(Color.GREEN);¶		} else {¶			lineArray[workingPlatePlace].setColor(Color.GREEN);¶			lineArray[workingPlatePlace+1].setColor(Color.GREEN);¶		}¶	}¶	¶	¶	@Override¶	@Visible(false)¶	public void resetLineColors() {¶		for (int i=0; i<lineArray.length; i++) {¶			lineArray[i].setColor(Color.WHITE);¶		}¶	}¶	¶	//Getters for properties of the scene¶	@Override¶	public List<AChef> getChefList() {¶		return chefList;¶	}¶	¶	@Override¶	public List<APatron> getPatronList() {¶		return patronList;¶	}¶	¶	@Override¶	public BoundedBuffer getBuffer() {¶		return buffer;¶	}¶	¶	@Override¶	public List<APlate> getPlateList() {¶		return plateList;¶	}	¶	¶	@Override¶	@util.annotations.Visible(false)¶	public Queue<APlate> getOtherPlateList() {¶		return otherPlateList;¶	}¶	¶	@Override¶	public List<ABell> getBellsList() {¶		return bellsList;¶	}¶	¶	@Override¶	@Visible(false)¶	public Queue<ABell> getQueueBellList() {¶		return queueBellList;¶	}¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="987" _type="Delete" date="Sat Feb 25 10:52:37 EST 2023" docASTNodeCount="1597" docActiveCodeLength="9382" docExpressionCount="1100" docLength="10031" endLine="212" length="52" offset="6879" startLine="212" starttimestamp="1677312753280" timestamp="27604318">
    <text><![CDATA[Integer.valueOf(workingPlate.getText().getText())-1;]]></text>
  </DocumentChange>
  <DocumentChange __id="989" _type="Insert" date="Sat Feb 25 10:52:37 EST 2023" docASTNodeCount="1601" docActiveCodeLength="9394" docExpressionCount="1103" docLength="10043" length="12" offset="6879" repeat="12" starttimestamp="1677312753280" timestamp="27604664" timestamp2="27608348">
    <text><![CDATA[queuedList.s]]></text>
  </DocumentChange>
  <DocumentChange __id="1015" _type="Replace" date="Sat Feb 25 10:52:42 EST 2023" docASTNodeCount="1601" docActiveCodeLength="9399" docExpressionCount="1103" docLength="10048" endLine="212" insertionLength="6" int_docASTNodeCount="1598" int_docActiveCodeLength="9393" int_docExpressionCount="1101" int_docLength="10042" length="1" offset="6890" startLine="212" starttimestamp="1677312753280" timestamp="27609001">
    <deletedText><![CDATA[s]]></deletedText>
    <insertedText><![CDATA[size()]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1017" _type="Insert" date="Sat Feb 25 10:52:42 EST 2023" docASTNodeCount="1601" docActiveCodeLength="9400" docExpressionCount="1103" docLength="10049" length="1" offset="6896" starttimestamp="1677312753280" timestamp="27609460">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <Command __id="1024" _type="PauseCommand" date="Sat Feb 25 10:52:54 EST 2023" range="5s-10s" starttimestamp="1677312753280" timestamp="27620914">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[9415]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="1025" _type="InsertStringCommand" date="Sat Feb 25 10:52:54 EST 2023" starttimestamp="1677312753280" timestamp="27620946" timestamp2="27620946">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1028" _type="PauseCommand" date="Sat Feb 25 10:52:55 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27622035">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1089]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="1027" _type="InsertStringCommand" date="Sat Feb 25 10:52:55 EST 2023" starttimestamp="1677312753280" timestamp="27622035" timestamp2="27622035">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="1030" _type="InsertStringCommand" date="Sat Feb 25 10:52:55 EST 2023" starttimestamp="1677312753280" timestamp="27622202" timestamp2="27622202">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="1032" _type="InsertStringCommand" date="Sat Feb 25 10:52:55 EST 2023" starttimestamp="1677312753280" timestamp="27622287" timestamp2="27622287">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1034" _type="InsertStringCommand" date="Sat Feb 25 10:52:55 EST 2023" starttimestamp="1677312753280" timestamp="27622408" timestamp2="27622408">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1036" _type="InsertStringCommand" date="Sat Feb 25 10:52:55 EST 2023" starttimestamp="1677312753280" timestamp="27622514" timestamp2="27622514">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1038" _type="InsertStringCommand" date="Sat Feb 25 10:52:55 EST 2023" starttimestamp="1677312753280" timestamp="27622667" timestamp2="27622667">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="1039" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sat Feb 25 10:52:55 EST 2023" start_end="START" starttimestamp="1677312753280" timestamp="27622671" />
  <Command __id="1044" _type="PauseCommand" date="Sat Feb 25 10:53:02 EST 2023" range="5s-10s" starttimestamp="1677312753280" timestamp="27629363">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[6692]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <DocumentChange __id="1023" _type="Insert" date="Sat Feb 25 10:52:54 EST 2023" docASTNodeCount="1606" docActiveCodeLength="9413" docExpressionCount="1106" docLength="10062" length="13" offset="6897" repeat="10" starttimestamp="1677312753280" timestamp="27620914" timestamp2="27623242">
    <text><![CDATA[
		plate.set]]></text>
  </DocumentChange>
  <Command __id="1043" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sat Feb 25 10:53:02 EST 2023" start_end="END" starttimestamp="1677312753280" timestamp="27629363" />
  <Command __id="1045" _type="MoveCaretCommand" caretOffset="6017" date="Sat Feb 25 10:53:02 EST 2023" docOffset="6897" starttimestamp="1677312753280" timestamp="27629556" />
  <DocumentChange __id="1046" _type="Insert" date="Sat Feb 25 10:53:02 EST 2023" docASTNodeCount="1611" docActiveCodeLength="9437" docExpressionCount="1108" docLength="10086" length="24" offset="6897" repeat="21" starttimestamp="1677312753280" timestamp="27629659" timestamp2="27634989">
    <text><![CDATA[
		FlexibleTextShape pl]]></text>
  </DocumentChange>
  <Command __id="1047" _type="InsertStringCommand" date="Sat Feb 25 10:53:02 EST 2023" starttimestamp="1677312753280" timestamp="27629690" timestamp2="27629690">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1049" _type="InsertStringCommand" date="Sat Feb 25 10:53:03 EST 2023" starttimestamp="1677312753280" timestamp="27630010" timestamp2="27630010">
    <data><![CDATA[F]]></data>
  </Command>
  <Command __id="1051" _type="InsertStringCommand" date="Sat Feb 25 10:53:03 EST 2023" starttimestamp="1677312753280" timestamp="27630221" timestamp2="27630221">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="1053" _type="InsertStringCommand" date="Sat Feb 25 10:53:03 EST 2023" starttimestamp="1677312753280" timestamp="27630274" timestamp2="27630274">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1055" _type="InsertStringCommand" date="Sat Feb 25 10:53:03 EST 2023" starttimestamp="1677312753280" timestamp="27630472" timestamp2="27630472">
    <data><![CDATA[x]]></data>
  </Command>
  <Command __id="1057" _type="InsertStringCommand" date="Sat Feb 25 10:53:03 EST 2023" starttimestamp="1677312753280" timestamp="27630540" timestamp2="27630540">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1059" _type="InsertStringCommand" date="Sat Feb 25 10:53:03 EST 2023" starttimestamp="1677312753280" timestamp="27630672" timestamp2="27630672">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="1061" _type="InsertStringCommand" date="Sat Feb 25 10:53:04 EST 2023" starttimestamp="1677312753280" timestamp="27630883" timestamp2="27630883">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="1063" _type="InsertStringCommand" date="Sat Feb 25 10:53:04 EST 2023" starttimestamp="1677312753280" timestamp="27630945" timestamp2="27630945">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1065" _type="InsertStringCommand" date="Sat Feb 25 10:53:04 EST 2023" starttimestamp="1677312753280" timestamp="27631653" timestamp2="27631653">
    <data><![CDATA[T]]></data>
  </Command>
  <Command __id="1067" _type="InsertStringCommand" date="Sat Feb 25 10:53:05 EST 2023" starttimestamp="1677312753280" timestamp="27631871" timestamp2="27631871">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1069" _type="InsertStringCommand" date="Sat Feb 25 10:53:05 EST 2023" starttimestamp="1677312753280" timestamp="27632088" timestamp2="27632088">
    <data><![CDATA[x]]></data>
  </Command>
  <Command __id="1071" _type="InsertStringCommand" date="Sat Feb 25 10:53:05 EST 2023" starttimestamp="1677312753280" timestamp="27632339" timestamp2="27632339">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1073" _type="InsertStringCommand" date="Sat Feb 25 10:53:06 EST 2023" starttimestamp="1677312753280" timestamp="27632970" timestamp2="27632970">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="1075" _type="InsertStringCommand" date="Sat Feb 25 10:53:06 EST 2023" starttimestamp="1677312753280" timestamp="27633124" timestamp2="27633124">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="1077" _type="InsertStringCommand" date="Sat Feb 25 10:53:06 EST 2023" starttimestamp="1677312753280" timestamp="27633268" timestamp2="27633268">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1079" _type="InsertStringCommand" date="Sat Feb 25 10:53:06 EST 2023" starttimestamp="1677312753280" timestamp="27633339" timestamp2="27633339">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="1081" _type="InsertStringCommand" date="Sat Feb 25 10:53:06 EST 2023" starttimestamp="1677312753280" timestamp="27633454" timestamp2="27633454">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1083" _type="InsertStringCommand" date="Sat Feb 25 10:53:06 EST 2023" starttimestamp="1677312753280" timestamp="27633515" timestamp2="27633515">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1086" _type="PauseCommand" date="Sat Feb 25 10:53:08 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27634753">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1238]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="1085" _type="InsertStringCommand" date="Sat Feb 25 10:53:08 EST 2023" starttimestamp="1677312753280" timestamp="27634753" timestamp2="27634753">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="1088" _type="InsertStringCommand" date="Sat Feb 25 10:53:08 EST 2023" starttimestamp="1677312753280" timestamp="27635030" timestamp2="27635030">
    <data><![CDATA[l]]></data>
  </Command>
  <DocumentChange __id="1089" _type="Delete" date="Sat Feb 25 10:53:08 EST 2023" docASTNodeCount="1601" docActiveCodeLength="9435" docExpressionCount="1103" docLength="10084" endLine="213" length="2" offset="6919" repeat="2" startLine="213" starttimestamp="1677312753280" timestamp="27635333" timestamp2="27635474">
    <text><![CDATA[pl]]></text>
  </DocumentChange>
  <Command __id="1090" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:53:08 EST 2023" starttimestamp="1677312753280" timestamp="27635370" />
  <Command __id="1092" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:53:08 EST 2023" starttimestamp="1677312753280" timestamp="27635493" />
  <DocumentChange __id="1093" _type="Insert" date="Sat Feb 25 10:53:09 EST 2023" docASTNodeCount="1605" docActiveCodeLength="9452" docExpressionCount="1105" docLength="10101" length="17" offset="6919" repeat="17" starttimestamp="1677312753280" timestamp="27635831" timestamp2="27640503">
    <text><![CDATA[platePlace = wori]]></text>
  </DocumentChange>
  <Command __id="1094" _type="InsertStringCommand" date="Sat Feb 25 10:53:09 EST 2023" starttimestamp="1677312753280" timestamp="27635848" timestamp2="27635848">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="1096" _type="InsertStringCommand" date="Sat Feb 25 10:53:09 EST 2023" starttimestamp="1677312753280" timestamp="27636034" timestamp2="27636034">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="1098" _type="InsertStringCommand" date="Sat Feb 25 10:53:09 EST 2023" starttimestamp="1677312753280" timestamp="27636110" timestamp2="27636110">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1100" _type="InsertStringCommand" date="Sat Feb 25 10:53:09 EST 2023" starttimestamp="1677312753280" timestamp="27636317" timestamp2="27636317">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1102" _type="InsertStringCommand" date="Sat Feb 25 10:53:09 EST 2023" starttimestamp="1677312753280" timestamp="27636460" timestamp2="27636460">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1104" _type="InsertStringCommand" date="Sat Feb 25 10:53:10 EST 2023" starttimestamp="1677312753280" timestamp="27637371" timestamp2="27637371">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="1106" _type="InsertStringCommand" date="Sat Feb 25 10:53:10 EST 2023" starttimestamp="1677312753280" timestamp="27637608" timestamp2="27637608">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="1108" _type="InsertStringCommand" date="Sat Feb 25 10:53:11 EST 2023" starttimestamp="1677312753280" timestamp="27637734" timestamp2="27637734">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1110" _type="InsertStringCommand" date="Sat Feb 25 10:53:11 EST 2023" starttimestamp="1677312753280" timestamp="27637911" timestamp2="27637911">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="1112" _type="InsertStringCommand" date="Sat Feb 25 10:53:11 EST 2023" starttimestamp="1677312753280" timestamp="27638098" timestamp2="27638098">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1114" _type="InsertStringCommand" date="Sat Feb 25 10:53:11 EST 2023" starttimestamp="1677312753280" timestamp="27638356" timestamp2="27638356">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1116" _type="InsertStringCommand" date="Sat Feb 25 10:53:12 EST 2023" starttimestamp="1677312753280" timestamp="27638962" timestamp2="27638962">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="1118" _type="InsertStringCommand" date="Sat Feb 25 10:53:12 EST 2023" starttimestamp="1677312753280" timestamp="27639298" timestamp2="27639298">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1120" _type="InsertStringCommand" date="Sat Feb 25 10:53:13 EST 2023" starttimestamp="1677312753280" timestamp="27640151" timestamp2="27640151">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="1122" _type="InsertStringCommand" date="Sat Feb 25 10:53:13 EST 2023" starttimestamp="1677312753280" timestamp="27640217" timestamp2="27640217">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="1124" _type="InsertStringCommand" date="Sat Feb 25 10:53:13 EST 2023" starttimestamp="1677312753280" timestamp="27640298" timestamp2="27640298">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1126" _type="InsertStringCommand" date="Sat Feb 25 10:53:13 EST 2023" starttimestamp="1677312753280" timestamp="27640544" timestamp2="27640544">
    <data><![CDATA[i]]></data>
  </Command>
  <DocumentChange __id="1127" _type="Delete" date="Sat Feb 25 10:53:14 EST 2023" docASTNodeCount="1605" docActiveCodeLength="9451" docExpressionCount="1105" docLength="10100" endLine="213" length="1" offset="6935" startLine="213" starttimestamp="1677312753280" timestamp="27640827">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <Command __id="1128" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:53:14 EST 2023" starttimestamp="1677312753280" timestamp="27640864" />
  <DocumentChange __id="1129" _type="Insert" date="Sat Feb 25 10:53:14 EST 2023" docASTNodeCount="1605" docActiveCodeLength="9461" docExpressionCount="1105" docLength="10110" length="10" offset="6935" repeat="10" starttimestamp="1677312753280" timestamp="27640977" timestamp2="27642408">
    <text><![CDATA[kingPlateL]]></text>
  </DocumentChange>
  <Command __id="1130" _type="InsertStringCommand" date="Sat Feb 25 10:53:14 EST 2023" starttimestamp="1677312753280" timestamp="27640994" timestamp2="27640994">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="1132" _type="InsertStringCommand" date="Sat Feb 25 10:53:14 EST 2023" starttimestamp="1677312753280" timestamp="27641207" timestamp2="27641207">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1134" _type="InsertStringCommand" date="Sat Feb 25 10:53:14 EST 2023" starttimestamp="1677312753280" timestamp="27641340" timestamp2="27641340">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1136" _type="InsertStringCommand" date="Sat Feb 25 10:53:14 EST 2023" starttimestamp="1677312753280" timestamp="27641436" timestamp2="27641436">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="1138" _type="InsertStringCommand" date="Sat Feb 25 10:53:15 EST 2023" starttimestamp="1677312753280" timestamp="27641732" timestamp2="27641732">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="1140" _type="InsertStringCommand" date="Sat Feb 25 10:53:15 EST 2023" starttimestamp="1677312753280" timestamp="27641875" timestamp2="27641875">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="1142" _type="InsertStringCommand" date="Sat Feb 25 10:53:15 EST 2023" starttimestamp="1677312753280" timestamp="27641959" timestamp2="27641959">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1144" _type="InsertStringCommand" date="Sat Feb 25 10:53:15 EST 2023" starttimestamp="1677312753280" timestamp="27642098" timestamp2="27642098">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1146" _type="InsertStringCommand" date="Sat Feb 25 10:53:15 EST 2023" starttimestamp="1677312753280" timestamp="27642187" timestamp2="27642187">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1148" _type="InsertStringCommand" date="Sat Feb 25 10:53:15 EST 2023" starttimestamp="1677312753280" timestamp="27642446" timestamp2="27642446">
    <data><![CDATA[L]]></data>
  </Command>
  <DocumentChange __id="1149" _type="Delete" date="Sat Feb 25 10:53:16 EST 2023" docASTNodeCount="1605" docActiveCodeLength="9460" docExpressionCount="1105" docLength="10109" endLine="213" length="1" offset="6944" startLine="213" starttimestamp="1677312753280" timestamp="27642739">
    <text><![CDATA[L]]></text>
  </DocumentChange>
  <Command __id="1150" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:53:16 EST 2023" starttimestamp="1677312753280" timestamp="27642780" />
  <Command __id="1152" _type="InsertStringCommand" date="Sat Feb 25 10:53:16 EST 2023" starttimestamp="1677312753280" timestamp="27642977" timestamp2="27642977">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="1154" _type="InsertStringCommand" date="Sat Feb 25 10:53:16 EST 2023" starttimestamp="1677312753280" timestamp="27643164" timestamp2="27643164">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="1156" _type="InsertStringCommand" date="Sat Feb 25 10:53:16 EST 2023" starttimestamp="1677312753280" timestamp="27643242" timestamp2="27643242">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1158" _type="InsertStringCommand" date="Sat Feb 25 10:53:16 EST 2023" starttimestamp="1677312753280" timestamp="27643388" timestamp2="27643388">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="1160" _type="InsertStringCommand" date="Sat Feb 25 10:53:16 EST 2023" starttimestamp="1677312753280" timestamp="27643518" timestamp2="27643518">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1162" _type="InsertStringCommand" date="Sat Feb 25 10:53:16 EST 2023" starttimestamp="1677312753280" timestamp="27643605" timestamp2="27643605">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="1163" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sat Feb 25 10:53:16 EST 2023" start_end="START" starttimestamp="1677312753280" timestamp="27643607" />
  <Command __id="1164" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sat Feb 25 10:53:16 EST 2023" start_end="END" starttimestamp="1677312753280" timestamp="27643621" />
  <DocumentChange __id="1151" _type="Insert" date="Sat Feb 25 10:53:16 EST 2023" docASTNodeCount="1611" docActiveCodeLength="9466" docExpressionCount="1110" docLength="10115" length="6" offset="6944" repeat="6" starttimestamp="1677312753280" timestamp="27642934" timestamp2="27643587">
    <text><![CDATA[Place.]]></text>
  </DocumentChange>
  <Command __id="1166" _type="PauseCommand" date="Sat Feb 25 10:53:18 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27644744">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[1123]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="1167" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:53:18 EST 2023" starttimestamp="1677312753280" timestamp="27644783" />
  <Command __id="1169" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:53:18 EST 2023" starttimestamp="1677312753280" timestamp="27645245" />
  <Command __id="1171" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:53:18 EST 2023" starttimestamp="1677312753280" timestamp="27645288" />
  <Command __id="1173" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:53:18 EST 2023" starttimestamp="1677312753280" timestamp="27645333" />
  <Command __id="1175" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:53:18 EST 2023" starttimestamp="1677312753280" timestamp="27645377" />
  <Command __id="1177" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:53:18 EST 2023" starttimestamp="1677312753280" timestamp="27645422" />
  <Command __id="1179" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:53:18 EST 2023" starttimestamp="1677312753280" timestamp="27645465" />
  <Command __id="1181" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:53:18 EST 2023" starttimestamp="1677312753280" timestamp="27645510" />
  <Command __id="1183" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:53:19 EST 2023" starttimestamp="1677312753280" timestamp="27645997" />
  <Command __id="1185" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:53:19 EST 2023" starttimestamp="1677312753280" timestamp="27646175" />
  <Command __id="1187" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:53:19 EST 2023" starttimestamp="1677312753280" timestamp="27646328" />
  <Command __id="1189" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:53:19 EST 2023" starttimestamp="1677312753280" timestamp="27646504" />
  <Command __id="1191" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:53:19 EST 2023" starttimestamp="1677312753280" timestamp="27646634" />
  <Command __id="1193" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:53:20 EST 2023" starttimestamp="1677312753280" timestamp="27646760" />
  <Command __id="1195" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:53:20 EST 2023" starttimestamp="1677312753280" timestamp="27646915" />
  <Command __id="1197" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:53:20 EST 2023" starttimestamp="1677312753280" timestamp="27647051" />
  <Command __id="1199" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:53:20 EST 2023" starttimestamp="1677312753280" timestamp="27647208" />
  <Command __id="1201" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:53:20 EST 2023" starttimestamp="1677312753280" timestamp="27647436" />
  <DocumentChange __id="1165" _type="Delete" date="Sat Feb 25 10:53:18 EST 2023" docASTNodeCount="1609" docActiveCodeLength="9448" docExpressionCount="1108" docLength="10097" endLine="213" length="18" offset="6932" repeat="18" startLine="213" starttimestamp="1677312753280" timestamp="27644744" timestamp2="27647396">
    <text><![CDATA[workingPlatePlace.]]></text>
  </DocumentChange>
  <Command __id="1203" _type="PauseCommand" date="Sat Feb 25 10:53:51 EST 2023" range="30s-1m" starttimestamp="1677312753280" timestamp="27678028">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[30591]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1204" _type="MoveCaretCommand" caretOffset="844" date="Sat Feb 25 10:53:51 EST 2023" docOffset="1235" starttimestamp="1677312753280" timestamp="27678198" />
  <Command __id="1202" _type="DiffBasedFileOpenCommand" date="Sat Feb 25 10:53:51 EST 2023" docASTNodeCount="449" docActiveCodeLength="2603" docExpressionCount="301" docLength="2603" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="27678027">
    <filePath><![CDATA[C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\graphics\APlate.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package graphics;

import java.awt.Color;

import bus.uigen.OEFrame;
import bus.uigen.ObjectEditor;
import bus.uigen.shapes.AStringModel;
import bus.uigen.shapes.AnImageModel;
import bus.uigen.shapes.OEShapeModel;
import shapes.FlexibleTextShape;
import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;

@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({
	"plate",
	"text"
})
@EditablePropertyNames({
	"plate",
	"text"
})
public class APlate implements Plate {
	
	String INIT_PLATE_STRING = "images/12.png";
	int INIT_PLATE_X = 50;
	int INIT_PLATE_Y = 40;
	int INIT_PLATE_HEIGHT = 50;
	int INIT_PLATE_WIDTH = 40;
	
	String INIT_PLATE_TEXT = "";
	int INIT_TEXT_X = 95;
	int INIT_TEXT_Y = 70;
	
	int TEXT_X_OFFSET = 45;
	int TEXT_Y_OFFSET = 30;
	
	OEShapeModel plate;
	FlexibleTextShape text;
	
	
	public APlate() {
		plate = new AnImageModel(INIT_PLATE_STRING);
		text = new AStringModel(INIT_PLATE_TEXT);
		text.setX(INIT_TEXT_X);
		text.setY(INIT_TEXT_Y);
		text.setColor(Color.WHITE);
		
		plate.setX(INIT_PLATE_X);
		plate.setY(INIT_PLATE_Y);
		plate.setHeight(INIT_PLATE_HEIGHT);
		plate.setWidth(INIT_PLATE_WIDTH);
		
	}
	
	public APlate(int queue) {
		plate = new AnImageModel(INIT_PLATE_STRING);
		text = new AStringModel(String.valueOf(queue));
		text.setX(INIT_TEXT_X);
		text.setY(INIT_TEXT_Y);
		text.setColor(Color.WHITE);
		
		plate.setX(INIT_PLATE_X);
		plate.setY(INIT_PLATE_Y);
		plate.setHeight(INIT_PLATE_HEIGHT);
		plate.setWidth(INIT_PLATE_WIDTH);
	}
	
	@Override
	public OEShapeModel getPlate() {
		return plate;
	}
	
	@Override
	public FlexibleTextShape getText() {
		return text;
	}
	
	@Override
	public void setText(FlexibleTextShape newString) {
		text = newString;
	}
	
	@Override
	public void setPlate(OEShapeModel newPlate) {
		plate = newPlate;
	}
	
	@Override
	public void move(int newX, int newY) {
		plate.setX(plate.getX() + newX);
		plate.setY(plate.getY() + newY);
		text.setX(text.getX() + newX);
		text.setY(text.getY() + newY);
	}
	
	@Override
	public void moveTo(int newX, int newY) {
		plate.setX(newX);
		plate.setY(newY);
		text.setX(newX+TEXT_X_OFFSET);
		text.setY(newY+TEXT_Y_OFFSET);
	}
	
	public static void main(String[] args) {
		final Plate plate = new APlate();
		OEFrame editor = ObjectEditor.edit(plate);
		editor.getDrawComponent().setBackground(Color.DARK_GRAY);
		editor.showDrawPanel();
	}

}
]]></snapshot>
  </Command>
  <Command __id="1206" _type="PauseCommand" date="Sat Feb 25 10:54:05 EST 2023" range="10s-20s" starttimestamp="1677312753280" timestamp="27692050">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[13852]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1207" _type="MoveCaretCommand" caretOffset="6052" date="Sat Feb 25 10:54:05 EST 2023" docOffset="6932" starttimestamp="1677312753280" timestamp="27692193" />
  <Command __id="1205" _type="DiffBasedFileOpenCommand" date="Sat Feb 25 10:54:05 EST 2023" docASTNodeCount="1609" docActiveCodeLength="9448" docExpressionCount="1108" docLength="10097" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="27692050">
    <filePath><![CDATA[C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\graphics\AProducerConsumerScene2.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package graphics;¶¶import java.util.ArrayList;¶import java.util.LinkedList;¶import java.util.List;¶import java.util.Queue;¶¶import animations.ACookingPlateAnimator;¶import animations.ACookingPlateCommand;¶import animations.AServingPlateAnimator;¶import animations.AServingPlateCommand;¶import animations.CookingPlateAnimator;¶import animations.ServingPlateAnimator;¶import bus.uigen.OEFrame;¶import bus.uigen.ObjectEditor;¶import bus.uigen.shapes.ALineModel;¶import bus.uigen.shapes.AStringModel;¶import bus.uigen.shapes.AnImageModel;¶import bus.uigen.shapes.OEShapeModel;¶import shapes.FlexibleTextShape;¶import util.annotations.EditablePropertyNames;¶import util.annotations.Label;¶import util.annotations.PropertyNames;¶import util.annotations.StructurePattern;¶import util.annotations.StructurePatternNames;¶import util.annotations.Visible;¶import util.misc.ThreadSupport;¶¶import java.awt.Color;¶¶@StructurePattern(StructurePatternNames.BEAN_PATTERN)¶@PropertyNames({¶	"patronList",¶	"chefList",¶	"buffer",¶	"plateList",¶	"otherPlateList",¶	"bellsList",¶	"queueBellList"¶})¶@EditablePropertyNames({¶})¶public class AProducerConsumerScene2 implements ProducerConsumerScene {¶	¶	//Avatar offsets inside scene¶	int[] chefXValues = {120,-50,-50,120};¶	int[] chefYValues = {-50,35,210,320};¶	int[] patronXValues = {650,850,850,650};¶	int[] patronYValues = {-50,35,220,320};¶	int[] bellXValues = {680,880,880,680};¶	int[] bellYValues = {75,160,345,445};¶	int INIT_HEAD_Y = 60;¶	int INIT_HEAD_X = 163;¶	int INIT_HEAD_HEIGHT = 90;¶	int INIT_HEAD_WIDTH = 80;¶	int PLATE_OFFSET_X = 30;¶	int PLATE_OFFSET_Y = 10;¶	int PAUSE = 5;¶	¶	//Booleans that help with the functionality of the below methods¶	boolean INIT_COOK = true;¶	boolean full = false;¶	int fullPlateOffset = -5;¶	¶	//Defining the chef and patron images¶	String[] chefImages = {"images/0.png","images/1.png","images/2.png","images/3.png"};¶	String[] patronImages = {"images/4.png", "images/5.png", "images/6.png", "images/7.png"};¶	¶	//Buffer arrays¶	int[] bufferXValues = {625, 680, 680, 620, 535, 460, 460, 535};¶	int[] bufferYValues = {200, 275, 365, 425, 425, 365, 275, 200};¶	boolean[] isFull = {false, false, false, false, false, false, false, false};¶	¶	//The properties of our class¶	List<APatron> patronList;¶	List<AChef> chefList;¶	BoundedBuffer buffer = new ABoundedBuffer();¶	¶	//This list will keep a track of the plates that enter the buffer so that FIFO¶	Queue<APlate> queuedList;¶	¶	OEShapeModel[] lineArray = {buffer.getLineTwo(), buffer.getLineThree(), buffer.getLineFour(), ¶								buffer.getLineFive(), buffer.getLineSix(), buffer.getLineSeven(), ¶								buffer.getLineEight(), buffer.getLineOne()};¶	¶	List<ABell> bellsList;¶	Queue<ABell> queueBellList;¶	int[] bellValues = {127, 212, 397, 497};¶	Queue<Integer> bellIntegerList;¶	¶	ACookingPlateCommand cookingCommand;¶	CookingPlateAnimator cookingAnimator;¶	¶	AServingPlateCommand servingCommand;¶	ServingPlateAnimator servingAnimator;¶	¶	//The constructor sets the scene with one chef, patron, a buffer, and a plate (not visible)¶	public AProducerConsumerScene2() {¶		patronList = new ArrayList<APatron>();¶		chefList = new ArrayList<AChef>();¶		//buffer = new ABoundedBuffer();¶		¶		queuedList = new LinkedList<APlate>();¶		bellsList = new ArrayList<ABell>();¶		queueBellList = new LinkedList<ABell>();¶		bellIntegerList = new LinkedList<Integer>();¶		¶		patronList.add(0, new APatron());¶		OEShapeModel initPatronHead = new AnImageModel(patronImages[0]);¶		initPatronHead.setX(INIT_HEAD_X);¶		initPatronHead.setY(INIT_HEAD_Y);¶		initPatronHead.setHeight(INIT_HEAD_HEIGHT);¶		initPatronHead.setWidth(INIT_HEAD_WIDTH);¶		patronList.get(0).patron.setHead(initPatronHead);¶		patronList.get(0).move(patronXValues[0], patronYValues[0]);¶		¶		chefList.add(0, new AChef());¶		OEShapeModel initChefHead = new AnImageModel(chefImages[0]);¶		initChefHead.setX(INIT_HEAD_X);¶		initChefHead.setY(INIT_HEAD_Y);¶		initChefHead.setHeight(INIT_HEAD_HEIGHT);¶		initChefHead.setWidth(INIT_HEAD_WIDTH);¶		chefList.get(0).chef.setHead(initChefHead);¶		chefList.get(0).move(chefXValues[0], chefYValues[0]);¶		¶		queuedList.add(new APlate());¶		queuedList.peek().getPlate().setHeight(0);¶		queuedList.peek().getPlate().setWidth(0);¶		¶		cookingAnimator = new ACookingPlateAnimator();¶		servingAnimator = new AServingPlateAnimator();¶		¶		bellsList.add(new ABell());¶		bellsList.get(0).getBell().setHeight(0);¶		bellsList.get(0).getBell().setWidth(0);¶		¶		queueBellList.add(new ABell());¶		queueBellList.peek().getBell().setHeight(0);¶		queueBellList.peek().getBell().setWidth(0);¶		¶		bellIntegerList.add(0);¶	}¶	¶	//Producer consumer methods¶	¶	//Init Scene sets the number of patrons and chefs in the scene¶	@Label("Init Scene")¶	public void initScene(int patronAmount, int chefAmount) {¶		bellsList.clear();¶		for (int i=0; i<patronAmount; i++) { ¶			APatron patron = new APatron();¶			patronList.add(i, patron);¶			OEShapeModel newHead = new AnImageModel(patronImages[i]);¶			patron.patron.setHead(newHead); ¶			newHead.setX(INIT_HEAD_X); ¶			newHead.setY(INIT_HEAD_Y);¶			newHead.setHeight(INIT_HEAD_HEIGHT);¶			newHead.setWidth(INIT_HEAD_WIDTH);¶			patron.move(patronXValues[i], patronYValues[i]);¶			¶			bellsList.add(new ABell());¶			bellsList.get(i).move(bellXValues[i], bellYValues[i]);¶		}¶		for (int i=0; i<chefAmount; i++) {¶			AChef chef = new AChef();¶			chefList.add(i, chef);¶			OEShapeModel newHead = new AnImageModel(chefImages[i]);¶			chef.chef.setHead(newHead);¶			newHead.setX(INIT_HEAD_X); ¶			newHead.setY(INIT_HEAD_Y);¶			newHead.setHeight(INIT_HEAD_HEIGHT);¶			newHead.setWidth(INIT_HEAD_WIDTH);¶			chef.move(chefXValues[i], chefYValues[i]);¶		}¶	}¶	¶	//Once the head of an avatar is chosen, it makes the plate that they "cook" appear¶	public void cook(OEShapeModel head) {¶		if (INIT_COOK) {¶			INIT_COOK=!INIT_COOK;¶			queuedList.remove();¶		}¶		¶		int headX = head.getCenterX();¶		int headY = head.getCenterY();¶		¶		APlate newPlate = new APlate();¶		newPlate.getPlate().setHeight(0);¶		newPlate.getPlate().setWidth(0);¶		¶		if (full) {¶			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y+fullPlateOffset);¶			fullPlateOffset = fullPlateOffset - 5;¶		} else {¶			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y);¶		}¶		¶		cookingCommand = new ACookingPlateCommand(cookingAnimator, newPlate, 40, 15);¶		Thread thread = new Thread (cookingCommand);¶		thread.start();¶	}¶	¶	public void serve(APlate plate) {¶		//Checks to see if the buffer is full. If it is, then can't serve.¶		resetLineColors();¶		if(checkIfFull()) {¶			resetLineColors();¶			return;¶		}¶		¶		queuedList.add(plate);¶		¶		int workingPlatePlace = "), Diff(DELETE,"Integer.valueOf(workingPlate.getText().getText())-1;"), Diff(INSERT,"queuedList.size();¶		FlexibleTextShape platePlace = ¶		plate.set"), Diff(EQUAL,"¶		¶		changeLineColors(workingPlatePlace);¶		servingCommand = new AServingPlateCommand(servingAnimator,plate,PAUSE, bufferXValues[workingPlatePlace], bufferYValues[workingPlatePlace]);¶		Thread thread = new Thread(servingCommand);¶		thread.start();¶		isFull[workingPlatePlace] = true;¶	}¶	¶	public void order(OEShapeModel bell) {¶		if(checkIfFull()) {¶			resetLineColors();¶			resetBuffer();¶		}¶		bellIntegerList.add(0);¶		int bellPlace = findBell(bell.getCenterY());¶		bellsList.get(bellPlace).getText().setText(String.valueOf(bellIntegerList.size()-1));¶		¶		int platePlace = findFirstAvailablePlate();¶		servingCommand = new AServingPlateCommand(servingAnimator,plateList.get(platePlace),PAUSE, bell.getCenterX() , bell.getCenterY());¶		Thread thread = new Thread(servingCommand);¶		thread.start();¶		¶		cookingCommand = new ACookingPlateCommand(cookingAnimator, plateList.get(0), 0, 15);¶		Thread eatingThread = new Thread (cookingCommand);¶		eatingThread.start();¶		plateList.get(0).getText().setText("");¶	}¶	¶	public void eat() {¶		plateList.remove(0);¶	}¶	¶	@Override¶	@Visible(false)¶	public int findBell(int centerY) {¶		for(int i=0; i<bellsList.size();i++) {¶			if(bellsList.get(i).getBell().getCenterY() == centerY) {¶				return i;¶			}¶		}¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public int findFirstAvailablePlate() {¶		for (int i=0; i<isFull.length;i++) {¶			if(isFull[i] == true) {¶				return i;¶			}¶		}¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public void resetBuffer() {¶		¶		for (int i=0; i<isFull.length;i++) {¶			isFull[i] = false;¶		}¶	}¶	¶	@Override¶	@Visible(false)¶	public int findPatron(OEShapeModel patronHead) {¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public boolean checkIfFull() {¶		for (int i=0; i<isFull.length;i++) {¶			if (isFull[i] == false) {¶				full = false;¶				return full;¶			}¶		}¶		full = true;¶		return full;¶	}¶	¶	@Override¶	@Visible(false)¶	public void changeLineColors(int workingPlatePlace) {¶		if(workingPlatePlace == lineArray.length-1) {¶			lineArray[workingPlatePlace].setColor(Color.GREEN);¶			lineArray[0].setColor(Color.GREEN);¶		} else {¶			lineArray[workingPlatePlace].setColor(Color.GREEN);¶			lineArray[workingPlatePlace+1].setColor(Color.GREEN);¶		}¶	}¶	¶	¶	@Override¶	@Visible(false)¶	public void resetLineColors() {¶		for (int i=0; i<lineArray.length; i++) {¶			lineArray[i].setColor(Color.WHITE);¶		}¶	}¶	¶	//Getters for properties of the scene¶	@Override¶	public List<AChef> getChefList() {¶		return chefList;¶	}¶	¶	@Override¶	public List<APatron> getPatronList() {¶		return patronList;¶	}¶	¶	@Override¶	public BoundedBuffer getBuffer() {¶		return buffer;¶	}¶	¶	@Override¶	public List<APlate> getPlateList() {¶		return plateList;¶	}	¶	¶	@Override¶	@util.annotations.Visible(false)¶	public Queue<APlate> getOtherPlateList() {¶		return otherPlateList;¶	}¶	¶	@Override¶	public List<ABell> getBellsList() {¶		return bellsList;¶	}¶	¶	@Override¶	@Visible(false)¶	public Queue<ABell> getQueueBellList() {¶		return queueBellList;¶	}¶}¶")]]]></diff>
    <snapshot><![CDATA[package graphics;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

import animations.ACookingPlateAnimator;
import animations.ACookingPlateCommand;
import animations.AServingPlateAnimator;
import animations.AServingPlateCommand;
import animations.CookingPlateAnimator;
import animations.ServingPlateAnimator;
import bus.uigen.OEFrame;
import bus.uigen.ObjectEditor;
import bus.uigen.shapes.ALineModel;
import bus.uigen.shapes.AStringModel;
import bus.uigen.shapes.AnImageModel;
import bus.uigen.shapes.OEShapeModel;
import shapes.FlexibleTextShape;
import util.annotations.EditablePropertyNames;
import util.annotations.Label;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Visible;
import util.misc.ThreadSupport;

import java.awt.Color;

@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({
	"patronList",
	"chefList",
	"buffer",
	"plateList",
	"otherPlateList",
	"bellsList",
	"queueBellList"
})
@EditablePropertyNames({
})
public class AProducerConsumerScene2 implements ProducerConsumerScene {
	
	//Avatar offsets inside scene
	int[] chefXValues = {120,-50,-50,120};
	int[] chefYValues = {-50,35,210,320};
	int[] patronXValues = {650,850,850,650};
	int[] patronYValues = {-50,35,220,320};
	int[] bellXValues = {680,880,880,680};
	int[] bellYValues = {75,160,345,445};
	int INIT_HEAD_Y = 60;
	int INIT_HEAD_X = 163;
	int INIT_HEAD_HEIGHT = 90;
	int INIT_HEAD_WIDTH = 80;
	int PLATE_OFFSET_X = 30;
	int PLATE_OFFSET_Y = 10;
	int PAUSE = 5;
	
	//Booleans that help with the functionality of the below methods
	boolean INIT_COOK = true;
	boolean full = false;
	int fullPlateOffset = -5;
	
	//Defining the chef and patron images
	String[] chefImages = {"images/0.png","images/1.png","images/2.png","images/3.png"};
	String[] patronImages = {"images/4.png", "images/5.png", "images/6.png", "images/7.png"};
	
	//Buffer arrays
	int[] bufferXValues = {625, 680, 680, 620, 535, 460, 460, 535};
	int[] bufferYValues = {200, 275, 365, 425, 425, 365, 275, 200};
	boolean[] isFull = {false, false, false, false, false, false, false, false};
	
	//The properties of our class
	List<APatron> patronList;
	List<AChef> chefList;
	BoundedBuffer buffer = new ABoundedBuffer();
	
	//This list will keep a track of the plates that enter the buffer so that FIFO
	Queue<APlate> queuedList;
	
	OEShapeModel[] lineArray = {buffer.getLineTwo(), buffer.getLineThree(), buffer.getLineFour(), 
								buffer.getLineFive(), buffer.getLineSix(), buffer.getLineSeven(), 
								buffer.getLineEight(), buffer.getLineOne()};
	
	List<ABell> bellsList;
	Queue<ABell> queueBellList;
	int[] bellValues = {127, 212, 397, 497};
	Queue<Integer> bellIntegerList;
	
	ACookingPlateCommand cookingCommand;
	CookingPlateAnimator cookingAnimator;
	
	AServingPlateCommand servingCommand;
	ServingPlateAnimator servingAnimator;
	
	//The constructor sets the scene with one chef, patron, a buffer, and a plate (not visible)
	public AProducerConsumerScene2() {
		patronList = new ArrayList<APatron>();
		chefList = new ArrayList<AChef>();
		//buffer = new ABoundedBuffer();
		
		queuedList = new LinkedList<APlate>();
		bellsList = new ArrayList<ABell>();
		queueBellList = new LinkedList<ABell>();
		bellIntegerList = new LinkedList<Integer>();
		
		patronList.add(0, new APatron());
		OEShapeModel initPatronHead = new AnImageModel(patronImages[0]);
		initPatronHead.setX(INIT_HEAD_X);
		initPatronHead.setY(INIT_HEAD_Y);
		initPatronHead.setHeight(INIT_HEAD_HEIGHT);
		initPatronHead.setWidth(INIT_HEAD_WIDTH);
		patronList.get(0).patron.setHead(initPatronHead);
		patronList.get(0).move(patronXValues[0], patronYValues[0]);
		
		chefList.add(0, new AChef());
		OEShapeModel initChefHead = new AnImageModel(chefImages[0]);
		initChefHead.setX(INIT_HEAD_X);
		initChefHead.setY(INIT_HEAD_Y);
		initChefHead.setHeight(INIT_HEAD_HEIGHT);
		initChefHead.setWidth(INIT_HEAD_WIDTH);
		chefList.get(0).chef.setHead(initChefHead);
		chefList.get(0).move(chefXValues[0], chefYValues[0]);
		
		queuedList.add(new APlate());
		queuedList.peek().getPlate().setHeight(0);
		queuedList.peek().getPlate().setWidth(0);
		
		cookingAnimator = new ACookingPlateAnimator();
		servingAnimator = new AServingPlateAnimator();
		
		bellsList.add(new ABell());
		bellsList.get(0).getBell().setHeight(0);
		bellsList.get(0).getBell().setWidth(0);
		
		queueBellList.add(new ABell());
		queueBellList.peek().getBell().setHeight(0);
		queueBellList.peek().getBell().setWidth(0);
		
		bellIntegerList.add(0);
	}
	
	//Producer consumer methods
	
	//Init Scene sets the number of patrons and chefs in the scene
	@Label("Init Scene")
	public void initScene(int patronAmount, int chefAmount) {
		bellsList.clear();
		for (int i=0; i<patronAmount; i++) { 
			APatron patron = new APatron();
			patronList.add(i, patron);
			OEShapeModel newHead = new AnImageModel(patronImages[i]);
			patron.patron.setHead(newHead); 
			newHead.setX(INIT_HEAD_X); 
			newHead.setY(INIT_HEAD_Y);
			newHead.setHeight(INIT_HEAD_HEIGHT);
			newHead.setWidth(INIT_HEAD_WIDTH);
			patron.move(patronXValues[i], patronYValues[i]);
			
			bellsList.add(new ABell());
			bellsList.get(i).move(bellXValues[i], bellYValues[i]);
		}
		for (int i=0; i<chefAmount; i++) {
			AChef chef = new AChef();
			chefList.add(i, chef);
			OEShapeModel newHead = new AnImageModel(chefImages[i]);
			chef.chef.setHead(newHead);
			newHead.setX(INIT_HEAD_X); 
			newHead.setY(INIT_HEAD_Y);
			newHead.setHeight(INIT_HEAD_HEIGHT);
			newHead.setWidth(INIT_HEAD_WIDTH);
			chef.move(chefXValues[i], chefYValues[i]);
		}
	}
	
	//Once the head of an avatar is chosen, it makes the plate that they "cook" appear
	public void cook(OEShapeModel head) {
		if (INIT_COOK) {
			INIT_COOK=!INIT_COOK;
			queuedList.remove();
		}
		
		int headX = head.getCenterX();
		int headY = head.getCenterY();
		
		APlate newPlate = new APlate();
		newPlate.getPlate().setHeight(0);
		newPlate.getPlate().setWidth(0);
		
		if (full) {
			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y+fullPlateOffset);
			fullPlateOffset = fullPlateOffset - 5;
		} else {
			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y);
		}
		
		cookingCommand = new ACookingPlateCommand(cookingAnimator, newPlate, 40, 15);
		Thread thread = new Thread (cookingCommand);
		thread.start();
	}
	
	public void serve(APlate plate) {
		//Checks to see if the buffer is full. If it is, then can't serve.
		resetLineColors();
		if(checkIfFull()) {
			resetLineColors();
			return;
		}
		
		queuedList.add(plate);
		
		int workingPlatePlace = queuedList.size();
		FlexibleTextShape platePlace = 
		plate.set
		
		changeLineColors(workingPlatePlace);
		servingCommand = new AServingPlateCommand(servingAnimator,plate,PAUSE, bufferXValues[workingPlatePlace], bufferYValues[workingPlatePlace]);
		Thread thread = new Thread(servingCommand);
		thread.start();
		isFull[workingPlatePlace] = true;
	}
	
	public void order(OEShapeModel bell) {
		if(checkIfFull()) {
			resetLineColors();
			resetBuffer();
		}
		bellIntegerList.add(0);
		int bellPlace = findBell(bell.getCenterY());
		bellsList.get(bellPlace).getText().setText(String.valueOf(bellIntegerList.size()-1));
		
		int platePlace = findFirstAvailablePlate();
		servingCommand = new AServingPlateCommand(servingAnimator,plateList.get(platePlace),PAUSE, bell.getCenterX() , bell.getCenterY());
		Thread thread = new Thread(servingCommand);
		thread.start();
		
		cookingCommand = new ACookingPlateCommand(cookingAnimator, plateList.get(0), 0, 15);
		Thread eatingThread = new Thread (cookingCommand);
		eatingThread.start();
		plateList.get(0).getText().setText("");
	}
	
	public void eat() {
		plateList.remove(0);
	}
	
	@Override
	@Visible(false)
	public int findBell(int centerY) {
		for(int i=0; i<bellsList.size();i++) {
			if(bellsList.get(i).getBell().getCenterY() == centerY) {
				return i;
			}
		}
		return 0;
	}
	
	@Override
	@Visible(false)
	public int findFirstAvailablePlate() {
		for (int i=0; i<isFull.length;i++) {
			if(isFull[i] == true) {
				return i;
			}
		}
		return 0;
	}
	
	@Override
	@Visible(false)
	public void resetBuffer() {
		
		for (int i=0; i<isFull.length;i++) {
			isFull[i] = false;
		}
	}
	
	@Override
	@Visible(false)
	public int findPatron(OEShapeModel patronHead) {
		return 0;
	}
	
	@Override
	@Visible(false)
	public boolean checkIfFull() {
		for (int i=0; i<isFull.length;i++) {
			if (isFull[i] == false) {
				full = false;
				return full;
			}
		}
		full = true;
		return full;
	}
	
	@Override
	@Visible(false)
	public void changeLineColors(int workingPlatePlace) {
		if(workingPlatePlace == lineArray.length-1) {
			lineArray[workingPlatePlace].setColor(Color.GREEN);
			lineArray[0].setColor(Color.GREEN);
		} else {
			lineArray[workingPlatePlace].setColor(Color.GREEN);
			lineArray[workingPlatePlace+1].setColor(Color.GREEN);
		}
	}
	
	
	@Override
	@Visible(false)
	public void resetLineColors() {
		for (int i=0; i<lineArray.length; i++) {
			lineArray[i].setColor(Color.WHITE);
		}
	}
	
	//Getters for properties of the scene
	@Override
	public List<AChef> getChefList() {
		return chefList;
	}
	
	@Override
	public List<APatron> getPatronList() {
		return patronList;
	}
	
	@Override
	public BoundedBuffer getBuffer() {
		return buffer;
	}
	
	@Override
	public List<APlate> getPlateList() {
		return plateList;
	}	
	
	@Override
	@util.annotations.Visible(false)
	public Queue<APlate> getOtherPlateList() {
		return otherPlateList;
	}
	
	@Override
	public List<ABell> getBellsList() {
		return bellsList;
	}
	
	@Override
	@Visible(false)
	public Queue<ABell> getQueueBellList() {
		return queueBellList;
	}
}
]]></snapshot>
  </Command>
  <Command __id="1209" _type="PauseCommand" date="Sat Feb 25 10:54:06 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27693469">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1276]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="1210" _type="InsertStringCommand" date="Sat Feb 25 10:54:06 EST 2023" starttimestamp="1677312753280" timestamp="27693519" timestamp2="27693519">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1212" _type="InsertStringCommand" date="Sat Feb 25 10:54:06 EST 2023" starttimestamp="1677312753280" timestamp="27693583" timestamp2="27693583">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1214" _type="InsertStringCommand" date="Sat Feb 25 10:54:06 EST 2023" starttimestamp="1677312753280" timestamp="27693691" timestamp2="27693691">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="1216" _type="InsertStringCommand" date="Sat Feb 25 10:54:07 EST 2023" starttimestamp="1677312753280" timestamp="27694229" timestamp2="27694229">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1218" _type="InsertStringCommand" date="Sat Feb 25 10:54:07 EST 2023" starttimestamp="1677312753280" timestamp="27694490" timestamp2="27694490">
    <data><![CDATA[A]]></data>
  </Command>
  <Command __id="1220" _type="InsertStringCommand" date="Sat Feb 25 10:54:08 EST 2023" starttimestamp="1677312753280" timestamp="27694834" timestamp2="27694834">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="1222" _type="InsertStringCommand" date="Sat Feb 25 10:54:08 EST 2023" starttimestamp="1677312753280" timestamp="27695064" timestamp2="27695064">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1224" _type="InsertStringCommand" date="Sat Feb 25 10:54:08 EST 2023" starttimestamp="1677312753280" timestamp="27695245" timestamp2="27695245">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1226" _type="InsertStringCommand" date="Sat Feb 25 10:54:08 EST 2023" starttimestamp="1677312753280" timestamp="27695331" timestamp2="27695331">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1228" _type="InsertStringCommand" date="Sat Feb 25 10:54:08 EST 2023" starttimestamp="1677312753280" timestamp="27695435" timestamp2="27695435">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1230" _type="InsertStringCommand" date="Sat Feb 25 10:54:08 EST 2023" starttimestamp="1677312753280" timestamp="27695518" timestamp2="27695518">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="1232" _type="InsertStringCommand" date="Sat Feb 25 10:54:09 EST 2023" starttimestamp="1677312753280" timestamp="27695743" timestamp2="27695743">
    <data><![CDATA[M]]></data>
  </Command>
  <Command __id="1234" _type="InsertStringCommand" date="Sat Feb 25 10:54:09 EST 2023" starttimestamp="1677312753280" timestamp="27695928" timestamp2="27695928">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="1236" _type="InsertStringCommand" date="Sat Feb 25 10:54:09 EST 2023" starttimestamp="1677312753280" timestamp="27695960" timestamp2="27695960">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="1238" _type="InsertStringCommand" date="Sat Feb 25 10:54:09 EST 2023" starttimestamp="1677312753280" timestamp="27696103" timestamp2="27696103">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1240" _type="InsertStringCommand" date="Sat Feb 25 10:54:09 EST 2023" starttimestamp="1677312753280" timestamp="27696212" timestamp2="27696212">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="1242" _type="InsertStringCommand" date="Sat Feb 25 10:54:10 EST 2023" starttimestamp="1677312753280" timestamp="27696895" timestamp2="27696895">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="1244" _type="PauseCommand" date="Sat Feb 25 10:54:13 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="27700369">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[3473]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1243" _type="ShellCommand" date="Sat Feb 25 10:54:13 EST 2023" starttimestamp="1677312753280" timestamp="27700368" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1246" _type="PauseCommand" date="Sat Feb 25 10:54:29 EST 2023" range="10s-20s" starttimestamp="1677312753280" timestamp="27715973">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[15605]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1245" _type="ShellCommand" date="Sat Feb 25 10:54:29 EST 2023" starttimestamp="1677312753280" timestamp="27715973" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1248" _type="InsertStringCommand" date="Sat Feb 25 10:54:30 EST 2023" starttimestamp="1677312753280" timestamp="27717013" timestamp2="27717013">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="1250" _type="InsertStringCommand" date="Sat Feb 25 10:54:30 EST 2023" starttimestamp="1677312753280" timestamp="27717109" timestamp2="27717109">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1252" _type="InsertStringCommand" date="Sat Feb 25 10:54:30 EST 2023" starttimestamp="1677312753280" timestamp="27717258" timestamp2="27717258">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1254" _type="InsertStringCommand" date="Sat Feb 25 10:54:30 EST 2023" starttimestamp="1677312753280" timestamp="27717361" timestamp2="27717361">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1256" _type="InsertStringCommand" date="Sat Feb 25 10:54:30 EST 2023" starttimestamp="1677312753280" timestamp="27717553" timestamp2="27717553">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="1258" _type="InsertStringCommand" date="Sat Feb 25 10:54:30 EST 2023" starttimestamp="1677312753280" timestamp="27717698" timestamp2="27717698">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1260" _type="InsertStringCommand" date="Sat Feb 25 10:54:31 EST 2023" starttimestamp="1677312753280" timestamp="27717771" timestamp2="27717771">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1262" _type="InsertStringCommand" date="Sat Feb 25 10:54:31 EST 2023" starttimestamp="1677312753280" timestamp="27717921" timestamp2="27717921">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="1263" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sat Feb 25 10:54:31 EST 2023" start_end="START" starttimestamp="1677312753280" timestamp="27717925" />
  <Command __id="1270" _type="PauseCommand" date="Sat Feb 25 10:54:33 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="27719958">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[2033]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="1269" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sat Feb 25 10:54:33 EST 2023" start_end="END" starttimestamp="1677312753280" timestamp="27719958" />
  <Command __id="1272" _type="InsertStringCommand" date="Sat Feb 25 10:54:33 EST 2023" starttimestamp="1677312753280" timestamp="27720268" timestamp2="27720268">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="1208" _type="Insert" date="Sat Feb 25 10:54:06 EST 2023" docASTNodeCount="1608" docActiveCodeLength="9466" docExpressionCount="1107" docLength="10115" length="18" offset="6932" repeat="17" starttimestamp="1677312753280" timestamp="27693469" timestamp2="27696835">
    <text><![CDATA[new AStringModel()]]></text>
  </DocumentChange>
  <DocumentChange __id="1247" _type="Insert" date="Sat Feb 25 10:54:30 EST 2023" docASTNodeCount="1608" docActiveCodeLength="9479" docExpressionCount="1107" docLength="10128" length="13" offset="6949" repeat="13" starttimestamp="1677312753280" timestamp="27716956" timestamp2="27719316">
    <text><![CDATA[Integer.toStr]]></text>
  </DocumentChange>
  <DocumentChange __id="1271" _type="Replace" date="Sat Feb 25 10:54:33 EST 2023" docASTNodeCount="1609" docActiveCodeLength="9501" docExpressionCount="1108" docLength="10150" endLine="213" insertionLength="27" int_docASTNodeCount="1609" int_docActiveCodeLength="9474" int_docExpressionCount="1108" int_docLength="10123" length="5" offset="6957" startLine="213" starttimestamp="1677312753280" timestamp="27719980">
    <deletedText><![CDATA[toStr]]></deletedText>
    <insertedText><![CDATA[toString(workingPlatePlace)]]></insertedText>
  </DocumentChange>
  <Command __id="1274" _type="PauseCommand" date="Sat Feb 25 10:54:35 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="27722337">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2069]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Replace]]></next>
  </Command>
  <DocumentChange __id="1273" _type="Replace" date="Sat Feb 25 10:54:35 EST 2023" docASTNodeCount="1609" docActiveCodeLength="9485" docExpressionCount="1108" docLength="10134" endLine="213" insertionLength="1" int_docASTNodeCount="1608" int_docActiveCodeLength="9484" int_docExpressionCount="1107" int_docLength="10133" length="17" offset="6966" startLine="213" starttimestamp="1677312753280" timestamp="27722337">
    <deletedText><![CDATA[workingPlatePlace]]></deletedText>
    <insertedText><![CDATA[w]]></insertedText>
  </DocumentChange>
  <Command __id="1275" _type="InsertStringCommand" date="Sat Feb 25 10:54:35 EST 2023" starttimestamp="1677312753280" timestamp="27722401" timestamp2="27722401">
    <data><![CDATA[w]]></data>
  </Command>
  <DocumentChange __id="1276" _type="Insert" date="Sat Feb 25 10:54:35 EST 2023" docASTNodeCount="1609" docActiveCodeLength="9488" docExpressionCount="1108" docLength="10137" length="3" offset="6967" repeat="3" starttimestamp="1677312753280" timestamp="27722433" timestamp2="27722590">
    <text><![CDATA[ork]]></text>
  </DocumentChange>
  <Command __id="1277" _type="InsertStringCommand" date="Sat Feb 25 10:54:35 EST 2023" starttimestamp="1677312753280" timestamp="27722461" timestamp2="27722461">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="1279" _type="InsertStringCommand" date="Sat Feb 25 10:54:35 EST 2023" starttimestamp="1677312753280" timestamp="27722547" timestamp2="27722547">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1281" _type="InsertStringCommand" date="Sat Feb 25 10:54:35 EST 2023" starttimestamp="1677312753280" timestamp="27722604" timestamp2="27722604">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="1283" _type="InsertStringCommand" date="Sat Feb 25 10:54:36 EST 2023" starttimestamp="1677312753280" timestamp="27723140" timestamp2="27723140">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1285" _type="PauseCommand" date="Sat Feb 25 10:54:38 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27725076">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1936]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1284" _type="MoveCaretCommand" caretOffset="6118" date="Sat Feb 25 10:54:38 EST 2023" docOffset="6998" starttimestamp="1677312753280" timestamp="27725076" />
  <Command __id="1286" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sat Feb 25 10:54:39 EST 2023" starttimestamp="1677312753280" timestamp="27725944" />
  <Command __id="1287" _type="EclipseCommand" commandID="" date="Sat Feb 25 10:54:39 EST 2023" starttimestamp="1677312753280" timestamp="27726019" />
  <Command __id="1288" _type="EclipseCommand" commandID="" date="Sat Feb 25 10:54:39 EST 2023" starttimestamp="1677312753280" timestamp="27726099" />
  <Command __id="1290" _type="PauseCommand" date="Sat Feb 25 10:54:41 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27727920">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1821]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <DocumentChange __id="1282" _type="Replace" date="Sat Feb 25 10:54:36 EST 2023" docASTNodeCount="1609" docActiveCodeLength="9501" docExpressionCount="1108" docLength="10150" endLine="213" insertionLength="17" int_docASTNodeCount="1608" int_docActiveCodeLength="9484" int_docExpressionCount="1107" int_docLength="10133" length="4" offset="6966" startLine="213" starttimestamp="1677312753280" timestamp="27723103">
    <deletedText><![CDATA[work]]></deletedText>
    <insertedText><![CDATA[workingPlatePlace]]></insertedText>
  </DocumentChange>
  <Command __id="1289" _type="SelectTextCommand" caretOffset="6109" date="Sat Feb 25 10:54:41 EST 2023" end="6118" start="6109" starttimestamp="1677312753280" timestamp="27727920" />
  <Command __id="1292" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:54:41 EST 2023" starttimestamp="1677312753280" timestamp="27728275" />
  <Command __id="1295" _type="PauseCommand" date="Sat Feb 25 10:54:42 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27729297">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1022]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1294" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:54:42 EST 2023" starttimestamp="1677312753280" timestamp="27729297" />
  <Command __id="1297" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:54:42 EST 2023" starttimestamp="1677312753280" timestamp="27729318" />
  <Command __id="1299" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:54:43 EST 2023" starttimestamp="1677312753280" timestamp="27730085" />
  <Command __id="1301" _type="PauseCommand" date="Sat Feb 25 10:54:44 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27731334">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1249]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1300" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sat Feb 25 10:54:44 EST 2023" starttimestamp="1677312753280" timestamp="27731334" />
  <Command __id="1302" _type="EclipseCommand" commandID="" date="Sat Feb 25 10:54:44 EST 2023" starttimestamp="1677312753280" timestamp="27731407" />
  <Command __id="1303" _type="EclipseCommand" commandID="" date="Sat Feb 25 10:54:44 EST 2023" starttimestamp="1677312753280" timestamp="27731511" />
  <Command __id="1305" _type="InsertStringCommand" date="Sat Feb 25 10:54:45 EST 2023" starttimestamp="1677312753280" timestamp="27732155" timestamp2="27732155">
    <data><![CDATA[;]]></data>
  </Command>
  <DocumentChange __id="1291" _type="Delete" date="Sat Feb 25 10:54:41 EST 2023" docASTNodeCount="1613" docActiveCodeLength="9488" docExpressionCount="1111" docLength="10137" endLine="214" length="13" offset="6985" repeat="4" startLine="213" starttimestamp="1677312753280" timestamp="27728223" timestamp2="27730040">
    <text><![CDATA[
		plate.set]]></text>
  </DocumentChange>
  <DocumentChange __id="1304" _type="Insert" date="Sat Feb 25 10:54:45 EST 2023" docASTNodeCount="1613" docActiveCodeLength="9489" docExpressionCount="1111" docLength="10138" length="1" offset="6985" starttimestamp="1677312753280" timestamp="27732102">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <Command __id="1307" _type="PauseCommand" date="Sat Feb 25 10:54:47 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27734112">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1957]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="1308" _type="InsertStringCommand" date="Sat Feb 25 10:54:47 EST 2023" starttimestamp="1677312753280" timestamp="27734140" timestamp2="27734140">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1310" _type="PauseCommand" date="Sat Feb 25 10:54:52 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="27738732">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[4592]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1309" _type="MoveCaretCommand" caretOffset="6105" date="Sat Feb 25 10:54:52 EST 2023" docOffset="6985" starttimestamp="1677312753280" timestamp="27738732" />
  <Command __id="1311" _type="MoveCaretCommand" caretOffset="6104" date="Sat Feb 25 10:54:52 EST 2023" docOffset="6984" starttimestamp="1677312753280" timestamp="27739578" />
  <Command __id="1313" _type="PauseCommand" date="Sat Feb 25 10:54:54 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="27741651">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2072]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1312" _type="MoveCaretCommand" caretOffset="6110" date="Sat Feb 25 10:54:54 EST 2023" docOffset="6990" starttimestamp="1677312753280" timestamp="27741650" />
  <DocumentChange __id="1306" _type="Insert" date="Sat Feb 25 10:54:47 EST 2023" docASTNodeCount="1613" docActiveCodeLength="9493" docExpressionCount="1111" docLength="10142" length="4" offset="6986" starttimestamp="1677312753280" timestamp="27734112">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <Command __id="1315" _type="PauseCommand" date="Sat Feb 25 10:54:57 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="27743942">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2292]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <DocumentChange __id="1314" _type="Insert" date="Sat Feb 25 10:54:57 EST 2023" docASTNodeCount="1616" docActiveCodeLength="9496" docExpressionCount="1112" docLength="10145" length="3" offset="6990" repeat="3" starttimestamp="1677312753280" timestamp="27743942" timestamp2="27744254">
    <text><![CDATA[wor]]></text>
  </DocumentChange>
  <Command __id="1316" _type="InsertStringCommand" date="Sat Feb 25 10:54:57 EST 2023" starttimestamp="1677312753280" timestamp="27743988" timestamp2="27743988">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="1318" _type="InsertStringCommand" date="Sat Feb 25 10:54:57 EST 2023" starttimestamp="1677312753280" timestamp="27744108" timestamp2="27744108">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="1320" _type="InsertStringCommand" date="Sat Feb 25 10:54:57 EST 2023" starttimestamp="1677312753280" timestamp="27744282" timestamp2="27744282">
    <data><![CDATA[r]]></data>
  </Command>
  <DocumentChange __id="1321" _type="Delete" date="Sat Feb 25 10:54:57 EST 2023" docASTNodeCount="1613" docActiveCodeLength="9493" docExpressionCount="1111" docLength="10142" endLine="214" length="3" offset="6990" repeat="3" startLine="214" starttimestamp="1677312753280" timestamp="27744571" timestamp2="27744872">
    <text><![CDATA[wor]]></text>
  </DocumentChange>
  <Command __id="1322" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:54:57 EST 2023" starttimestamp="1677312753280" timestamp="27744585" />
  <Command __id="1324" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:54:58 EST 2023" starttimestamp="1677312753280" timestamp="27744745" />
  <Command __id="1326" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:54:58 EST 2023" starttimestamp="1677312753280" timestamp="27744898" />
  <Command __id="1328" _type="InsertStringCommand" date="Sat Feb 25 10:54:58 EST 2023" starttimestamp="1677312753280" timestamp="27745428" timestamp2="27745428">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="1330" _type="InsertStringCommand" date="Sat Feb 25 10:54:58 EST 2023" starttimestamp="1677312753280" timestamp="27745558" timestamp2="27745558">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="1332" _type="InsertStringCommand" date="Sat Feb 25 10:54:58 EST 2023" starttimestamp="1677312753280" timestamp="27745657" timestamp2="27745657">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1334" _type="InsertStringCommand" date="Sat Feb 25 10:54:59 EST 2023" starttimestamp="1677312753280" timestamp="27745808" timestamp2="27745808">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1336" _type="InsertStringCommand" date="Sat Feb 25 10:54:59 EST 2023" starttimestamp="1677312753280" timestamp="27745903" timestamp2="27745903">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1338" _type="InsertStringCommand" date="Sat Feb 25 10:54:59 EST 2023" starttimestamp="1677312753280" timestamp="27746061" timestamp2="27746061">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="1339" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sat Feb 25 10:54:59 EST 2023" start_end="START" starttimestamp="1677312753280" timestamp="27746065" />
  <Command __id="1344" _type="PauseCommand" date="Sat Feb 25 10:55:01 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27748060">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[1995]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="1343" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sat Feb 25 10:55:01 EST 2023" start_end="END" starttimestamp="1677312753280" timestamp="27748060" />
  <Command __id="1346" _type="InsertStringCommand" date="Sat Feb 25 10:55:01 EST 2023" starttimestamp="1677312753280" timestamp="27748177" timestamp2="27748177">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1348" _type="InsertStringCommand" date="Sat Feb 25 10:55:02 EST 2023" starttimestamp="1677312753280" timestamp="27748758" timestamp2="27748758">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1350" _type="PauseCommand" date="Sat Feb 25 10:55:04 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="27750923">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2165]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1349" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sat Feb 25 10:55:04 EST 2023" starttimestamp="1677312753280" timestamp="27750923" />
  <Command __id="1351" _type="EclipseCommand" commandID="" date="Sat Feb 25 10:55:04 EST 2023" starttimestamp="1677312753280" timestamp="27751049" />
  <Command __id="1352" _type="EclipseCommand" commandID="" date="Sat Feb 25 10:55:04 EST 2023" starttimestamp="1677312753280" timestamp="27751119" />
  <Command __id="1354" _type="PauseCommand" date="Sat Feb 25 10:55:13 EST 2023" range="5s-10s" starttimestamp="1677312753280" timestamp="27760459">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[9340]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1353" _type="MoveCaretCommand" caretOffset="6763" date="Sat Feb 25 10:55:13 EST 2023" docOffset="7643" starttimestamp="1677312753280" timestamp="27760459" />
  <Command __id="1356" _type="InsertStringCommand" date="Sat Feb 25 10:55:14 EST 2023" starttimestamp="1677312753280" timestamp="27761136" timestamp2="27761136">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="1358" _type="InsertStringCommand" date="Sat Feb 25 10:55:14 EST 2023" starttimestamp="1677312753280" timestamp="27761305" timestamp2="27761305">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="1360" _type="PauseCommand" date="Sat Feb 25 10:55:17 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="27763809">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2504]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1359" _type="MoveCaretCommand" caretOffset="6969" date="Sat Feb 25 10:55:17 EST 2023" docOffset="7849" starttimestamp="1677312753280" timestamp="27763809" />
  <Command __id="1362" _type="InsertStringCommand" date="Sat Feb 25 10:55:17 EST 2023" starttimestamp="1677312753280" timestamp="27764299" timestamp2="27764299">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="1364" _type="InsertStringCommand" date="Sat Feb 25 10:55:17 EST 2023" starttimestamp="1677312753280" timestamp="27764487" timestamp2="27764487">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="1366" _type="PauseCommand" date="Sat Feb 25 10:55:18 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27765698">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1211]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1365" _type="MoveCaretCommand" caretOffset="7138" date="Sat Feb 25 10:55:18 EST 2023" docOffset="8018" starttimestamp="1677312753280" timestamp="27765698" />
  <Command __id="1368" _type="InsertStringCommand" date="Sat Feb 25 10:55:19 EST 2023" starttimestamp="1677312753280" timestamp="27766170" timestamp2="27766170">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="1370" _type="InsertStringCommand" date="Sat Feb 25 10:55:19 EST 2023" starttimestamp="1677312753280" timestamp="27766314" timestamp2="27766314">
    <data><![CDATA[/]]></data>
  </Command>
  <DocumentChange __id="1327" _type="Insert" date="Sat Feb 25 10:54:58 EST 2023" docASTNodeCount="1618" docActiveCodeLength="9502" docExpressionCount="1114" docLength="10151" length="9" offset="6990" repeat="9" starttimestamp="1677312753280" timestamp="27745389" timestamp2="27746966">
    <text><![CDATA[plate.set]]></text>
  </DocumentChange>
  <DocumentChange __id="1345" _type="Replace" date="Sat Feb 25 10:55:01 EST 2023" docASTNodeCount="1618" docActiveCodeLength="9519" docExpressionCount="1115" docLength="10168" endLine="214" insertionLength="20" int_docASTNodeCount="1614" int_docActiveCodeLength="9499" int_docExpressionCount="1112" int_docLength="10148" length="3" offset="6996" startLine="214" starttimestamp="1677312753280" timestamp="27748070">
    <deletedText><![CDATA[set]]></deletedText>
    <insertedText><![CDATA[setText(platePlace);]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1347" _type="Replace" date="Sat Feb 25 10:55:02 EST 2023" docASTNodeCount="1618" docActiveCodeLength="9519" docExpressionCount="1115" docLength="10168" endLine="214" insertionLength="10" int_docASTNodeCount="1617" int_docActiveCodeLength="9509" int_docExpressionCount="1114" int_docLength="10158" length="10" offset="7004" startLine="214" starttimestamp="1677312753280" timestamp="27748727">
    <deletedText><![CDATA[platePlace]]></deletedText>
    <insertedText><![CDATA[platePlace]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1355" _type="Insert" date="Sat Feb 25 10:55:14 EST 2023" docASTNodeCount="1600" docActiveCodeLength="9389" docExpressionCount="1099" docLength="10170" length="2" offset="7643" repeat="2" starttimestamp="1677312753280" timestamp="27761091" timestamp2="27761252">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1361" _type="Insert" date="Sat Feb 25 10:55:17 EST 2023" docASTNodeCount="1587" docActiveCodeLength="9305" docExpressionCount="1088" docLength="10172" length="2" offset="7849" repeat="2" starttimestamp="1677312753280" timestamp="27764255" timestamp2="27764439">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1367" _type="Insert" date="Sat Feb 25 10:55:19 EST 2023" docASTNodeCount="1577" docActiveCodeLength="9266" docExpressionCount="1079" docLength="10174" length="2" offset="8018" repeat="2" starttimestamp="1677312753280" timestamp="27766128" timestamp2="27766271">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="1372" _type="PauseCommand" date="Sat Feb 25 10:55:21 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27768089">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1774]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="1373" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:55:21 EST 2023" starttimestamp="1677312753280" timestamp="27768127" />
  <Command __id="1375" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:55:21 EST 2023" starttimestamp="1677312753280" timestamp="27768316" />
  <DocumentChange __id="1371" _type="Delete" date="Sat Feb 25 10:55:21 EST 2023" docASTNodeCount="1587" docActiveCodeLength="9305" docExpressionCount="1088" docLength="10172" endLine="240" length="2" offset="8018" repeat="2" startLine="240" starttimestamp="1677312753280" timestamp="27768088" timestamp2="27768279">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="1377" _type="PauseCommand" date="Sat Feb 25 10:55:23 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27770002">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1686]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="1378" _type="InsertStringCommand" date="Sat Feb 25 10:55:23 EST 2023" starttimestamp="1677312753280" timestamp="27770046" timestamp2="27770046">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="1380" _type="InsertStringCommand" date="Sat Feb 25 10:55:23 EST 2023" starttimestamp="1677312753280" timestamp="27770481" timestamp2="27770481">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="1382" _type="PauseCommand" date="Sat Feb 25 10:55:25 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27771940">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1459]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1381" _type="MoveCaretCommand" caretOffset="6906" date="Sat Feb 25 10:55:25 EST 2023" docOffset="7786" starttimestamp="1677312753280" timestamp="27771940" />
  <Command __id="1384" _type="PauseCommand" date="Sat Feb 25 10:55:26 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27773672">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1732]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1383" _type="MoveCaretCommand" caretOffset="7213" date="Sat Feb 25 10:55:26 EST 2023" docOffset="8093" starttimestamp="1677312753280" timestamp="27773672" />
  <Command __id="1385" _type="MoveCaretCommand" caretOffset="7212" date="Sat Feb 25 10:55:27 EST 2023" docOffset="8092" starttimestamp="1677312753280" timestamp="27774515" />
  <Command __id="1387" _type="InsertStringCommand" date="Sat Feb 25 10:55:28 EST 2023" starttimestamp="1677312753280" timestamp="27775510" timestamp2="27775510">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="1389" _type="InsertStringCommand" date="Sat Feb 25 10:55:28 EST 2023" starttimestamp="1677312753280" timestamp="27775547" timestamp2="27775547">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="1391" _type="InsertStringCommand" date="Sat Feb 25 10:55:29 EST 2023" starttimestamp="1677312753280" timestamp="27775940" timestamp2="27775940">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="1393" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:55:29 EST 2023" starttimestamp="1677312753280" timestamp="27776314" />
  <Command __id="1395" _type="PauseCommand" date="Sat Feb 25 10:55:30 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27777422">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1108]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1394" _type="MoveCaretCommand" caretOffset="7238" date="Sat Feb 25 10:55:30 EST 2023" docOffset="8118" starttimestamp="1677312753280" timestamp="27777422" />
  <Command __id="1397" _type="PauseCommand" date="Sat Feb 25 10:55:36 EST 2023" range="5s-10s" starttimestamp="1677312753280" timestamp="27783175">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[5752]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1396" _type="SelectTextCommand" caretOffset="8920" date="Sat Feb 25 10:55:36 EST 2023" end="9108" start="8920" starttimestamp="1677312753280" timestamp="27783174" />
  <Command __id="1398" _type="MoveCaretCommand" caretOffset="9054" date="Sat Feb 25 10:55:37 EST 2023" docOffset="9934" starttimestamp="1677312753280" timestamp="27784010" />
  <Command __id="1399" _type="MoveCaretCommand" caretOffset="9094" date="Sat Feb 25 10:55:38 EST 2023" docOffset="9974" starttimestamp="1677312753280" timestamp="27784750" />
  <Command __id="1400" _type="SelectTextCommand" caretOffset="9103" date="Sat Feb 25 10:55:38 EST 2023" end="9103" start="9089" starttimestamp="1677312753280" timestamp="27784903" />
  <Command __id="1402" _type="InsertStringCommand" date="Sat Feb 25 10:55:38 EST 2023" starttimestamp="1677312753280" timestamp="27785300" timestamp2="27785300">
    <data><![CDATA[q]]></data>
  </Command>
  <Command __id="1404" _type="InsertStringCommand" date="Sat Feb 25 10:55:38 EST 2023" starttimestamp="1677312753280" timestamp="27785498" timestamp2="27785498">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="1406" _type="InsertStringCommand" date="Sat Feb 25 10:55:38 EST 2023" starttimestamp="1677312753280" timestamp="27785599" timestamp2="27785599">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1408" _type="InsertStringCommand" date="Sat Feb 25 10:55:39 EST 2023" starttimestamp="1677312753280" timestamp="27785746" timestamp2="27785746">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="1410" _type="InsertStringCommand" date="Sat Feb 25 10:55:39 EST 2023" starttimestamp="1677312753280" timestamp="27785851" timestamp2="27785851">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1412" _type="InsertStringCommand" date="Sat Feb 25 10:55:39 EST 2023" starttimestamp="1677312753280" timestamp="27786016" timestamp2="27786016">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="1414" _type="InsertStringCommand" date="Sat Feb 25 10:55:39 EST 2023" starttimestamp="1677312753280" timestamp="27786285" timestamp2="27786285">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="1416" _type="InsertStringCommand" date="Sat Feb 25 10:55:39 EST 2023" starttimestamp="1677312753280" timestamp="27786554" timestamp2="27786554">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1418" _type="InsertStringCommand" date="Sat Feb 25 10:55:40 EST 2023" starttimestamp="1677312753280" timestamp="27786754" timestamp2="27786754">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="1420" _type="InsertStringCommand" date="Sat Feb 25 10:55:40 EST 2023" starttimestamp="1677312753280" timestamp="27786823" timestamp2="27786823">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1422" _type="PauseCommand" date="Sat Feb 25 10:55:46 EST 2023" range="5s-10s" starttimestamp="1677312753280" timestamp="27793409">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[6586]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1421" _type="SelectTextCommand" caretOffset="9070" date="Sat Feb 25 10:55:46 EST 2023" end="9070" start="9060" starttimestamp="1677312753280" timestamp="27793409" />
  <Command __id="1424" _type="InsertStringCommand" date="Sat Feb 25 10:55:47 EST 2023" starttimestamp="1677312753280" timestamp="27794028" timestamp2="27794028">
    <data><![CDATA[Q]]></data>
  </Command>
  <Command __id="1426" _type="InsertStringCommand" date="Sat Feb 25 10:55:47 EST 2023" starttimestamp="1677312753280" timestamp="27794228" timestamp2="27794228">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="1428" _type="InsertStringCommand" date="Sat Feb 25 10:55:47 EST 2023" starttimestamp="1677312753280" timestamp="27794314" timestamp2="27794314">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1430" _type="InsertStringCommand" date="Sat Feb 25 10:55:47 EST 2023" starttimestamp="1677312753280" timestamp="27794466" timestamp2="27794466">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="1432" _type="InsertStringCommand" date="Sat Feb 25 10:55:47 EST 2023" starttimestamp="1677312753280" timestamp="27794551" timestamp2="27794551">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1434" _type="InsertStringCommand" date="Sat Feb 25 10:55:47 EST 2023" starttimestamp="1677312753280" timestamp="27794719" timestamp2="27794719">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="1436" _type="InsertStringCommand" date="Sat Feb 25 10:55:48 EST 2023" starttimestamp="1677312753280" timestamp="27795384" timestamp2="27795384">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="1438" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:55:49 EST 2023" starttimestamp="1677312753280" timestamp="27795937" />
  <Command __id="1440" _type="PauseCommand" date="Sat Feb 25 10:55:50 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27797113">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1176]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1439" _type="MoveCaretCommand" caretOffset="9096" date="Sat Feb 25 10:55:50 EST 2023" docOffset="9976" starttimestamp="1677312753280" timestamp="27797113" />
  <Command __id="1442" _type="PauseCommand" date="Sat Feb 25 10:55:53 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="27800027">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2914]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1441" _type="ShellCommand" date="Sat Feb 25 10:55:53 EST 2023" starttimestamp="1677312753280" timestamp="27800027" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1443" _type="ShellCommand" date="Sat Feb 25 10:55:53 EST 2023" starttimestamp="1677312753280" timestamp="27800213" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1447" _type="SelectTextCommand" caretOffset="796" date="Sat Feb 25 10:55:53 EST 2023" end="829" start="796" starttimestamp="1677312753280" timestamp="27800689" />
  <Command __id="1449" _type="PauseCommand" date="Sat Feb 25 10:55:55 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27802588">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1899]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1448" _type="MoveCaretCommand" caretOffset="799" date="Sat Feb 25 10:55:55 EST 2023" docOffset="904" starttimestamp="1677312753280" timestamp="27802588" />
  <Command __id="1451" _type="PauseCommand" date="Sat Feb 25 10:56:05 EST 2023" range="5s-10s" starttimestamp="1677312753280" timestamp="27812073">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[9485]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1450" _type="SelectTextCommand" caretOffset="165" date="Sat Feb 25 10:56:05 EST 2023" end="245" start="165" starttimestamp="1677312753280" timestamp="27812073" />
  <DocumentChange __id="1376" _type="Insert" date="Sat Feb 25 10:55:23 EST 2023" docASTNodeCount="1577" docActiveCodeLength="9266" docExpressionCount="1079" docLength="10174" length="2" offset="8018" repeat="2" starttimestamp="1677312753280" timestamp="27770002" timestamp2="27770437">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="1386" _type="Insert" date="Sat Feb 25 10:55:28 EST 2023" docASTNodeCount="1572" docActiveCodeLength="9246" docExpressionCount="1075" docLength="10177" length="3" offset="8092" repeat="3" starttimestamp="1677312753280" timestamp="27775479" timestamp2="27775892">
    <text><![CDATA[///]]></text>
  </DocumentChange>
  <DocumentChange __id="1392" _type="Delete" date="Sat Feb 25 10:55:29 EST 2023" docASTNodeCount="1572" docActiveCodeLength="9246" docExpressionCount="1075" docLength="10176" endLine="244" length="1" offset="8094" startLine="244" starttimestamp="1677312753280" timestamp="27776280">
    <text><![CDATA[/]]></text>
  </DocumentChange>
  <DocumentChange __id="1401" _type="Replace" date="Sat Feb 25 10:55:38 EST 2023" docASTNodeCount="1572" docActiveCodeLength="9233" docExpressionCount="1075" docLength="10163" endLine="342" insertionLength="1" int_docASTNodeCount="1571" int_docActiveCodeLength="9232" int_docExpressionCount="1074" int_docLength="10162" length="14" offset="9969" startLine="342" starttimestamp="1677312753280" timestamp="27785256">
    <deletedText><![CDATA[otherPlateList]]></deletedText>
    <insertedText><![CDATA[q]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1403" _type="Insert" date="Sat Feb 25 10:55:38 EST 2023" docASTNodeCount="1572" docActiveCodeLength="9242" docExpressionCount="1075" docLength="10172" length="9" offset="9970" repeat="9" starttimestamp="1677312753280" timestamp="27785464" timestamp2="27786787">
    <text><![CDATA[ueuedList]]></text>
  </DocumentChange>
  <DocumentChange __id="1423" _type="Replace" date="Sat Feb 25 10:55:47 EST 2023" docASTNodeCount="1572" docActiveCodeLength="9233" docExpressionCount="1075" docLength="10163" endLine="341" insertionLength="1" int_docASTNodeCount="1572" int_docActiveCodeLength="9232" int_docExpressionCount="1075" int_docLength="10162" length="10" offset="9940" startLine="341" starttimestamp="1677312753280" timestamp="27793980">
    <deletedText><![CDATA[OtherPlate]]></deletedText>
    <insertedText><![CDATA[Q]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1425" _type="Insert" date="Sat Feb 25 10:55:47 EST 2023" docASTNodeCount="1572" docActiveCodeLength="9239" docExpressionCount="1075" docLength="10169" length="6" offset="9941" repeat="6" starttimestamp="1677312753280" timestamp="27794190" timestamp2="27795344">
    <text><![CDATA[ueuedL]]></text>
  </DocumentChange>
  <DocumentChange __id="1437" _type="Delete" date="Sat Feb 25 10:55:49 EST 2023" docASTNodeCount="1572" docActiveCodeLength="9238" docExpressionCount="1075" docLength="10168" endLine="341" length="1" offset="9946" startLine="341" starttimestamp="1677312753280" timestamp="27795903">
    <text><![CDATA[L]]></text>
  </DocumentChange>
  <Command __id="1444" _type="DiffBasedFileOpenCommand" date="Sat Feb 25 10:55:53 EST 2023" docASTNodeCount="155" docActiveCodeLength="906" docExpressionCount="67" docLength="906" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="27800455">
    <filePath><![CDATA[C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\graphics\ProducerConsumerScene.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package graphics;

import java.util.List;
import java.util.Queue;

import bus.uigen.shapes.AnImageModel;
import bus.uigen.shapes.OEShapeModel;

public interface ProducerConsumerScene {
	public List<AChef> getChefList();
	public List<APatron> getPatronList();
	public List<APlate> getPlateList();
	public Queue<APlate> getOtherPlateList();
	public BoundedBuffer getBuffer();
	public Queue<ABell> getQueueBellList();
	public void initScene(int patronAmount, int chefAmount);
	public void cook(OEShapeModel head);
	public void serve();
	public boolean checkIfFull();
	public void changeLineColors(int workingPlatePlace);
	public void resetLineColors();
	public int findPatron(OEShapeModel patronHead);
	public List<ABell> getBellsList();
	public int findBell(int centerY);
	public void order(OEShapeModel bell);
	public int findFirstAvailablePlate();
	public void resetBuffer();
}
]]></snapshot>
  </Command>
  <DocumentChange __id="1445" _type="Insert" date="Sat Feb 25 10:55:53 EST 2023" docASTNodeCount="162" docActiveCodeLength="939" docExpressionCount="70" docLength="939" length="33" offset="901" repeat="2" starttimestamp="1677312753280" timestamp="27800562" timestamp2="27800563">
    <text><![CDATA[
	Queue<APlate> getQueuedList();]]></text>
  </DocumentChange>
  <Command __id="1453" _type="PauseCommand" date="Sat Feb 25 10:56:08 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="27815227">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[3154]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="1454" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:56:08 EST 2023" starttimestamp="1677312753280" timestamp="27815252" />
  <Command __id="1456" _type="PauseCommand" date="Sat Feb 25 10:56:10 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="27817394">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2142]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1455" _type="SelectTextCommand" caretOffset="749" date="Sat Feb 25 10:56:10 EST 2023" end="749" start="719" starttimestamp="1677312753280" timestamp="27817394" />
  <Command __id="1458" _type="CutCommand" date="Sat Feb 25 10:56:11 EST 2023" starttimestamp="1677312753280" timestamp="27818294" />
  <Command __id="1459" _type="MoveCaretCommand" caretOffset="165" date="Sat Feb 25 10:56:12 EST 2023" docOffset="270" starttimestamp="1677312753280" timestamp="27819226" />
  <Command __id="1461" _type="InsertStringCommand" date="Sat Feb 25 10:56:13 EST 2023" starttimestamp="1677312753280" timestamp="27819928" timestamp2="27819928">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="1463" _type="InsertStringCommand" date="Sat Feb 25 10:56:13 EST 2023" starttimestamp="1677312753280" timestamp="27820075" timestamp2="27820075">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="1465" _type="InsertStringCommand" date="Sat Feb 25 10:56:13 EST 2023" starttimestamp="1677312753280" timestamp="27820208" timestamp2="27820208">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="1467" _type="InsertStringCommand" date="Sat Feb 25 10:56:13 EST 2023" starttimestamp="1677312753280" timestamp="27820402" timestamp2="27820402">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="1469" _type="InsertStringCommand" date="Sat Feb 25 10:56:13 EST 2023" starttimestamp="1677312753280" timestamp="27820618" timestamp2="27820618">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="1471" _type="InsertStringCommand" date="Sat Feb 25 10:56:14 EST 2023" starttimestamp="1677312753280" timestamp="27820736" timestamp2="27820736">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1473" _type="InsertStringCommand" date="Sat Feb 25 10:56:14 EST 2023" starttimestamp="1677312753280" timestamp="27820810" timestamp2="27820810">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="1475" _type="InsertStringCommand" date="Sat Feb 25 10:56:14 EST 2023" starttimestamp="1677312753280" timestamp="27821061" timestamp2="27821061">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1477" _type="PasteCommand" date="Sat Feb 25 10:56:14 EST 2023" starttimestamp="1677312753280" timestamp="27821522" />
  <Command __id="1479" _type="PauseCommand" date="Sat Feb 25 10:56:16 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27823378">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[1856]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1478" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sat Feb 25 10:56:16 EST 2023" starttimestamp="1677312753280" timestamp="27823378" />
  <Command __id="1480" _type="EclipseCommand" commandID="" date="Sat Feb 25 10:56:16 EST 2023" starttimestamp="1677312753280" timestamp="27823448" />
  <Command __id="1481" _type="EclipseCommand" commandID="" date="Sat Feb 25 10:56:16 EST 2023" starttimestamp="1677312753280" timestamp="27823599" />
  <DocumentChange __id="1452" _type="Delete" date="Sat Feb 25 10:56:08 EST 2023" docASTNodeCount="146" docActiveCodeLength="859" docExpressionCount="64" docLength="859" endLine="12" length="80" offset="270" startLine="11" starttimestamp="1677312753280" timestamp="27815227">
    <text><![CDATA[	public List<APlate> getPlateList();
	public Queue<APlate> getOtherPlateList();]]></text>
  </DocumentChange>
  <DocumentChange __id="1457" _type="Delete" date="Sat Feb 25 10:56:11 EST 2023" docASTNodeCount="139" docActiveCodeLength="829" docExpressionCount="61" docLength="829" endLine="26" length="30" offset="824" startLine="26" starttimestamp="1677312753280" timestamp="27818255">
    <text><![CDATA[Queue<APlate> getQueuedList();]]></text>
  </DocumentChange>
  <DocumentChange __id="1460" _type="Insert" date="Sat Feb 25 10:56:13 EST 2023" docASTNodeCount="147" docActiveCodeLength="867" docExpressionCount="64" docLength="867" length="38" offset="270" repeat="9" starttimestamp="1677312753280" timestamp="27819915" timestamp2="27821495">
    <text><![CDATA[	public Queue<APlate> getQueuedList();]]></text>
  </DocumentChange>
  <Command __id="1483" _type="PauseCommand" date="Sat Feb 25 10:56:18 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="27825618">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2019]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1484" _type="MoveCaretCommand" caretOffset="9096" date="Sat Feb 25 10:56:19 EST 2023" docOffset="9976" starttimestamp="1677312753280" timestamp="27825813" />
  <Command __id="1482" _type="DiffBasedFileOpenCommand" date="Sat Feb 25 10:56:18 EST 2023" docASTNodeCount="1572" docActiveCodeLength="9238" docExpressionCount="1075" docLength="10168" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="27825618">
    <filePath><![CDATA[C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\graphics\AProducerConsumerScene2.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package graphics;¶¶import java.util.ArrayList;¶import java.util.LinkedList;¶import java.util.List;¶import java.util.Queue;¶¶import animations.ACookingPlateAnimator;¶import animations.ACookingPlateCommand;¶import animations.AServingPlateAnimator;¶import animations.AServingPlateCommand;¶import animations.CookingPlateAnimator;¶import animations.ServingPlateAnimator;¶import bus.uigen.OEFrame;¶import bus.uigen.ObjectEditor;¶import bus.uigen.shapes.ALineModel;¶import bus.uigen.shapes.AStringModel;¶import bus.uigen.shapes.AnImageModel;¶import bus.uigen.shapes.OEShapeModel;¶import shapes.FlexibleTextShape;¶import util.annotations.EditablePropertyNames;¶import util.annotations.Label;¶import util.annotations.PropertyNames;¶import util.annotations.StructurePattern;¶import util.annotations.StructurePatternNames;¶import util.annotations.Visible;¶import util.misc.ThreadSupport;¶¶import java.awt.Color;¶¶@StructurePattern(StructurePatternNames.BEAN_PATTERN)¶@PropertyNames({¶	"patronList",¶	"chefList",¶	"buffer",¶	"plateList",¶	"otherPlateList",¶	"bellsList",¶	"queueBellList"¶})¶@EditablePropertyNames({¶})¶public class AProducerConsumerScene2 implements ProducerConsumerScene {¶	¶	//Avatar offsets inside scene¶	int[] chefXValues = {120,-50,-50,120};¶	int[] chefYValues = {-50,35,210,320};¶	int[] patronXValues = {650,850,850,650};¶	int[] patronYValues = {-50,35,220,320};¶	int[] bellXValues = {680,880,880,680};¶	int[] bellYValues = {75,160,345,445};¶	int INIT_HEAD_Y = 60;¶	int INIT_HEAD_X = 163;¶	int INIT_HEAD_HEIGHT = 90;¶	int INIT_HEAD_WIDTH = 80;¶	int PLATE_OFFSET_X = 30;¶	int PLATE_OFFSET_Y = 10;¶	int PAUSE = 5;¶	¶	//Booleans that help with the functionality of the below methods¶	boolean INIT_COOK = true;¶	boolean full = false;¶	int fullPlateOffset = -5;¶	¶	//Defining the chef and patron images¶	String[] chefImages = {"images/0.png","images/1.png","images/2.png","images/3.png"};¶	String[] patronImages = {"images/4.png", "images/5.png", "images/6.png", "images/7.png"};¶	¶	//Buffer arrays¶	int[] bufferXValues = {625, 680, 680, 620, 535, 460, 460, 535};¶	int[] bufferYValues = {200, 275, 365, 425, 425, 365, 275, 200};¶	boolean[] isFull = {false, false, false, false, false, false, false, false};¶	¶	//The properties of our class¶	List<APatron> patronList;¶	List<AChef> chefList;¶	BoundedBuffer buffer = new ABoundedBuffer();¶	¶	//This list will keep a track of the plates that enter the buffer so that FIFO¶	Queue<APlate> queuedList;¶	¶	OEShapeModel[] lineArray = {buffer.getLineTwo(), buffer.getLineThree(), buffer.getLineFour(), ¶								buffer.getLineFive(), buffer.getLineSix(), buffer.getLineSeven(), ¶								buffer.getLineEight(), buffer.getLineOne()};¶	¶	List<ABell> bellsList;¶	Queue<ABell> queueBellList;¶	int[] bellValues = {127, 212, 397, 497};¶	Queue<Integer> bellIntegerList;¶	¶	ACookingPlateCommand cookingCommand;¶	CookingPlateAnimator cookingAnimator;¶	¶	AServingPlateCommand servingCommand;¶	ServingPlateAnimator servingAnimator;¶	¶	//The constructor sets the scene with one chef, patron, a buffer, and a plate (not visible)¶	public AProducerConsumerScene2() {¶		patronList = new ArrayList<APatron>();¶		chefList = new ArrayList<AChef>();¶		//buffer = new ABoundedBuffer();¶		¶		queuedList = new LinkedList<APlate>();¶		bellsList = new ArrayList<ABell>();¶		queueBellList = new LinkedList<ABell>();¶		bellIntegerList = new LinkedList<Integer>();¶		¶		patronList.add(0, new APatron());¶		OEShapeModel initPatronHead = new AnImageModel(patronImages[0]);¶		initPatronHead.setX(INIT_HEAD_X);¶		initPatronHead.setY(INIT_HEAD_Y);¶		initPatronHead.setHeight(INIT_HEAD_HEIGHT);¶		initPatronHead.setWidth(INIT_HEAD_WIDTH);¶		patronList.get(0).patron.setHead(initPatronHead);¶		patronList.get(0).move(patronXValues[0], patronYValues[0]);¶		¶		chefList.add(0, new AChef());¶		OEShapeModel initChefHead = new AnImageModel(chefImages[0]);¶		initChefHead.setX(INIT_HEAD_X);¶		initChefHead.setY(INIT_HEAD_Y);¶		initChefHead.setHeight(INIT_HEAD_HEIGHT);¶		initChefHead.setWidth(INIT_HEAD_WIDTH);¶		chefList.get(0).chef.setHead(initChefHead);¶		chefList.get(0).move(chefXValues[0], chefYValues[0]);¶		¶		queuedList.add(new APlate());¶		queuedList.peek().getPlate().setHeight(0);¶		queuedList.peek().getPlate().setWidth(0);¶		¶		cookingAnimator = new ACookingPlateAnimator();¶		servingAnimator = new AServingPlateAnimator();¶		¶		bellsList.add(new ABell());¶		bellsList.get(0).getBell().setHeight(0);¶		bellsList.get(0).getBell().setWidth(0);¶		¶		queueBellList.add(new ABell());¶		queueBellList.peek().getBell().setHeight(0);¶		queueBellList.peek().getBell().setWidth(0);¶		¶		bellIntegerList.add(0);¶	}¶	¶	//Producer consumer methods¶	¶	//Init Scene sets the number of patrons and chefs in the scene¶	@Label("Init Scene")¶	public void initScene(int patronAmount, int chefAmount) {¶		bellsList.clear();¶		for (int i=0; i<patronAmount; i++) { ¶			APatron patron = new APatron();¶			patronList.add(i, patron);¶			OEShapeModel newHead = new AnImageModel(patronImages[i]);¶			patron.patron.setHead(newHead); ¶			newHead.setX(INIT_HEAD_X); ¶			newHead.setY(INIT_HEAD_Y);¶			newHead.setHeight(INIT_HEAD_HEIGHT);¶			newHead.setWidth(INIT_HEAD_WIDTH);¶			patron.move(patronXValues[i], patronYValues[i]);¶			¶			bellsList.add(new ABell());¶			bellsList.get(i).move(bellXValues[i], bellYValues[i]);¶		}¶		for (int i=0; i<chefAmount; i++) {¶			AChef chef = new AChef();¶			chefList.add(i, chef);¶			OEShapeModel newHead = new AnImageModel(chefImages[i]);¶			chef.chef.setHead(newHead);¶			newHead.setX(INIT_HEAD_X); ¶			newHead.setY(INIT_HEAD_Y);¶			newHead.setHeight(INIT_HEAD_HEIGHT);¶			newHead.setWidth(INIT_HEAD_WIDTH);¶			chef.move(chefXValues[i], chefYValues[i]);¶		}¶	}¶	¶	//Once the head of an avatar is chosen, it makes the plate that they "cook" appear¶	public void cook(OEShapeModel head) {¶		if (INIT_COOK) {¶			INIT_COOK=!INIT_COOK;¶			queuedList.remove();¶		}¶		¶		int headX = head.getCenterX();¶		int headY = head.getCenterY();¶		¶		APlate newPlate = new APlate();¶		newPlate.getPlate().setHeight(0);¶		newPlate.getPlate().setWidth(0);¶		¶		if (full) {¶			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y+fullPlateOffset);¶			fullPlateOffset = fullPlateOffset - 5;¶		} else {¶			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y);¶		}¶		¶		cookingCommand = new ACookingPlateCommand(cookingAnimator, newPlate, 40, 15);¶		Thread thread = new Thread (cookingCommand);¶		thread.start();¶	}¶	¶	public void serve(APlate plate) {¶		//Checks to see if the buffer is full. If it is, then can't serve.¶		resetLineColors();¶		if(checkIfFull()) {¶			resetLineColors();¶			return;¶		}¶		¶		queuedList.add(plate);¶		¶		int workingPlatePlace = queuedList.size();¶		FlexibleTextShape platePlace = "), Diff(DELETE,"¶		plate.set"), Diff(INSERT,"new AStringModel(Integer.toString(workingPlatePlace));¶		plate.setText(platePlace);"), Diff(EQUAL,"¶		¶		changeLineColors(workingPlatePlace);¶		servingCommand = new AServingPlateCommand(servingAnimator,plate,PAUSE, bufferXValues[workingPlatePlace], bufferYValues[workingPlatePlace]);¶		Thread thread = new Thread(servingCommand);¶		thread.start();¶		isFull[workingPlatePlace] = true;¶	}¶	¶	public void order(OEShapeModel bell) {¶		if(checkIfFull()) {¶			resetLineColors();¶			resetBuffer();¶		}¶		bellIntegerList.add(0);¶		int bellPlace = findBell(bell.getCenterY());¶		bellsList.get(bellPlace).getText().setText(String.valueOf(bellIntegerList.size()-1));¶		¶		int platePlace = findFirstAvailablePlate();¶		"), Diff(INSERT,"//"), Diff(EQUAL,"servingCommand = new AServingPlateCommand(servingAnimator,plateList.get(platePlace),PAUSE, bell.getCenterX() , bell.getCenterY());¶		Thread thread = new Thread(servingCommand);¶		thread.start();¶		¶		"), Diff(INSERT,"//"), Diff(EQUAL,"cookingCommand = new ACookingPlateCommand(cookingAnimator, plateList.get(0), 0, 15);¶		Thread eatingThread = new Thread (cookingCommand);¶		eatingThread.start();¶		"), Diff(INSERT,"//"), Diff(EQUAL,"plateList.get(0).getText().setText("");¶	}¶	¶	public void eat() {¶		"), Diff(INSERT,"//"), Diff(EQUAL,"plateList.remove(0);¶	}¶	¶	@Override¶	@Visible(false)¶	public int findBell(int centerY) {¶		for(int i=0; i<bellsList.size();i++) {¶			if(bellsList.get(i).getBell().getCenterY() == centerY) {¶				return i;¶			}¶		}¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public int findFirstAvailablePlate() {¶		for (int i=0; i<isFull.length;i++) {¶			if(isFull[i] == true) {¶				return i;¶			}¶		}¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public void resetBuffer() {¶		¶		for (int i=0; i<isFull.length;i++) {¶			isFull[i] = false;¶		}¶	}¶	¶	@Override¶	@Visible(false)¶	public int findPatron(OEShapeModel patronHead) {¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public boolean checkIfFull() {¶		for (int i=0; i<isFull.length;i++) {¶			if (isFull[i] == false) {¶				full = false;¶				return full;¶			}¶		}¶		full = true;¶		return full;¶	}¶	¶	@Override¶	@Visible(false)¶	public void changeLineColors(int workingPlatePlace) {¶		if(workingPlatePlace == lineArray.length-1) {¶			lineArray[workingPlatePlace].setColor(Color.GREEN);¶			lineArray[0].setColor(Color.GREEN);¶		} else {¶			lineArray[workingPlatePlace].setColor(Color.GREEN);¶			lineArray[workingPlatePlace+1].setColor(Color.GREEN);¶		}¶	}¶	¶	¶	@Override¶	@Visible(false)¶	public void resetLineColors() {¶		for (int i=0; i<lineArray.length; i++) {¶			lineArray[i].setColor(Color.WHITE);¶		}¶	}¶	¶	//Getters for properties of the scene¶	@Override¶	public List<AChef> getChefList() {¶		return chefList;¶	}¶	¶	@Override¶	public List<APatron> getPatronList() {¶		return patronList;¶	}¶	¶	@Override¶	public BoundedBuffer getBuffer() {¶		return buffer;¶	}¶	¶	@Override¶	public List<APlate> getPlateList() {¶		return plateList;¶	}	¶	¶	@Override¶	@util.annotations.Visible(false)¶	public Queue<APlate> get"), Diff(DELETE,"OtherPlate"), Diff(INSERT,"Queued"), Diff(EQUAL,"List() {¶		return "), Diff(DELETE,"otherPlate"), Diff(INSERT,"queued"), Diff(EQUAL,"List;¶	}¶	¶	@Override¶	public List<ABell> getBellsList() {¶		return bellsList;¶	}¶	¶	@Override¶	@Visible(false)¶	public Queue<ABell> getQueueBellList() {¶		return queueBellList;¶	}¶}¶")]]]></diff>
    <snapshot><![CDATA[package graphics;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

import animations.ACookingPlateAnimator;
import animations.ACookingPlateCommand;
import animations.AServingPlateAnimator;
import animations.AServingPlateCommand;
import animations.CookingPlateAnimator;
import animations.ServingPlateAnimator;
import bus.uigen.OEFrame;
import bus.uigen.ObjectEditor;
import bus.uigen.shapes.ALineModel;
import bus.uigen.shapes.AStringModel;
import bus.uigen.shapes.AnImageModel;
import bus.uigen.shapes.OEShapeModel;
import shapes.FlexibleTextShape;
import util.annotations.EditablePropertyNames;
import util.annotations.Label;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Visible;
import util.misc.ThreadSupport;

import java.awt.Color;

@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({
	"patronList",
	"chefList",
	"buffer",
	"plateList",
	"otherPlateList",
	"bellsList",
	"queueBellList"
})
@EditablePropertyNames({
})
public class AProducerConsumerScene2 implements ProducerConsumerScene {
	
	//Avatar offsets inside scene
	int[] chefXValues = {120,-50,-50,120};
	int[] chefYValues = {-50,35,210,320};
	int[] patronXValues = {650,850,850,650};
	int[] patronYValues = {-50,35,220,320};
	int[] bellXValues = {680,880,880,680};
	int[] bellYValues = {75,160,345,445};
	int INIT_HEAD_Y = 60;
	int INIT_HEAD_X = 163;
	int INIT_HEAD_HEIGHT = 90;
	int INIT_HEAD_WIDTH = 80;
	int PLATE_OFFSET_X = 30;
	int PLATE_OFFSET_Y = 10;
	int PAUSE = 5;
	
	//Booleans that help with the functionality of the below methods
	boolean INIT_COOK = true;
	boolean full = false;
	int fullPlateOffset = -5;
	
	//Defining the chef and patron images
	String[] chefImages = {"images/0.png","images/1.png","images/2.png","images/3.png"};
	String[] patronImages = {"images/4.png", "images/5.png", "images/6.png", "images/7.png"};
	
	//Buffer arrays
	int[] bufferXValues = {625, 680, 680, 620, 535, 460, 460, 535};
	int[] bufferYValues = {200, 275, 365, 425, 425, 365, 275, 200};
	boolean[] isFull = {false, false, false, false, false, false, false, false};
	
	//The properties of our class
	List<APatron> patronList;
	List<AChef> chefList;
	BoundedBuffer buffer = new ABoundedBuffer();
	
	//This list will keep a track of the plates that enter the buffer so that FIFO
	Queue<APlate> queuedList;
	
	OEShapeModel[] lineArray = {buffer.getLineTwo(), buffer.getLineThree(), buffer.getLineFour(), 
								buffer.getLineFive(), buffer.getLineSix(), buffer.getLineSeven(), 
								buffer.getLineEight(), buffer.getLineOne()};
	
	List<ABell> bellsList;
	Queue<ABell> queueBellList;
	int[] bellValues = {127, 212, 397, 497};
	Queue<Integer> bellIntegerList;
	
	ACookingPlateCommand cookingCommand;
	CookingPlateAnimator cookingAnimator;
	
	AServingPlateCommand servingCommand;
	ServingPlateAnimator servingAnimator;
	
	//The constructor sets the scene with one chef, patron, a buffer, and a plate (not visible)
	public AProducerConsumerScene2() {
		patronList = new ArrayList<APatron>();
		chefList = new ArrayList<AChef>();
		//buffer = new ABoundedBuffer();
		
		queuedList = new LinkedList<APlate>();
		bellsList = new ArrayList<ABell>();
		queueBellList = new LinkedList<ABell>();
		bellIntegerList = new LinkedList<Integer>();
		
		patronList.add(0, new APatron());
		OEShapeModel initPatronHead = new AnImageModel(patronImages[0]);
		initPatronHead.setX(INIT_HEAD_X);
		initPatronHead.setY(INIT_HEAD_Y);
		initPatronHead.setHeight(INIT_HEAD_HEIGHT);
		initPatronHead.setWidth(INIT_HEAD_WIDTH);
		patronList.get(0).patron.setHead(initPatronHead);
		patronList.get(0).move(patronXValues[0], patronYValues[0]);
		
		chefList.add(0, new AChef());
		OEShapeModel initChefHead = new AnImageModel(chefImages[0]);
		initChefHead.setX(INIT_HEAD_X);
		initChefHead.setY(INIT_HEAD_Y);
		initChefHead.setHeight(INIT_HEAD_HEIGHT);
		initChefHead.setWidth(INIT_HEAD_WIDTH);
		chefList.get(0).chef.setHead(initChefHead);
		chefList.get(0).move(chefXValues[0], chefYValues[0]);
		
		queuedList.add(new APlate());
		queuedList.peek().getPlate().setHeight(0);
		queuedList.peek().getPlate().setWidth(0);
		
		cookingAnimator = new ACookingPlateAnimator();
		servingAnimator = new AServingPlateAnimator();
		
		bellsList.add(new ABell());
		bellsList.get(0).getBell().setHeight(0);
		bellsList.get(0).getBell().setWidth(0);
		
		queueBellList.add(new ABell());
		queueBellList.peek().getBell().setHeight(0);
		queueBellList.peek().getBell().setWidth(0);
		
		bellIntegerList.add(0);
	}
	
	//Producer consumer methods
	
	//Init Scene sets the number of patrons and chefs in the scene
	@Label("Init Scene")
	public void initScene(int patronAmount, int chefAmount) {
		bellsList.clear();
		for (int i=0; i<patronAmount; i++) { 
			APatron patron = new APatron();
			patronList.add(i, patron);
			OEShapeModel newHead = new AnImageModel(patronImages[i]);
			patron.patron.setHead(newHead); 
			newHead.setX(INIT_HEAD_X); 
			newHead.setY(INIT_HEAD_Y);
			newHead.setHeight(INIT_HEAD_HEIGHT);
			newHead.setWidth(INIT_HEAD_WIDTH);
			patron.move(patronXValues[i], patronYValues[i]);
			
			bellsList.add(new ABell());
			bellsList.get(i).move(bellXValues[i], bellYValues[i]);
		}
		for (int i=0; i<chefAmount; i++) {
			AChef chef = new AChef();
			chefList.add(i, chef);
			OEShapeModel newHead = new AnImageModel(chefImages[i]);
			chef.chef.setHead(newHead);
			newHead.setX(INIT_HEAD_X); 
			newHead.setY(INIT_HEAD_Y);
			newHead.setHeight(INIT_HEAD_HEIGHT);
			newHead.setWidth(INIT_HEAD_WIDTH);
			chef.move(chefXValues[i], chefYValues[i]);
		}
	}
	
	//Once the head of an avatar is chosen, it makes the plate that they "cook" appear
	public void cook(OEShapeModel head) {
		if (INIT_COOK) {
			INIT_COOK=!INIT_COOK;
			queuedList.remove();
		}
		
		int headX = head.getCenterX();
		int headY = head.getCenterY();
		
		APlate newPlate = new APlate();
		newPlate.getPlate().setHeight(0);
		newPlate.getPlate().setWidth(0);
		
		if (full) {
			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y+fullPlateOffset);
			fullPlateOffset = fullPlateOffset - 5;
		} else {
			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y);
		}
		
		cookingCommand = new ACookingPlateCommand(cookingAnimator, newPlate, 40, 15);
		Thread thread = new Thread (cookingCommand);
		thread.start();
	}
	
	public void serve(APlate plate) {
		//Checks to see if the buffer is full. If it is, then can't serve.
		resetLineColors();
		if(checkIfFull()) {
			resetLineColors();
			return;
		}
		
		queuedList.add(plate);
		
		int workingPlatePlace = queuedList.size();
		FlexibleTextShape platePlace = new AStringModel(Integer.toString(workingPlatePlace));
		plate.setText(platePlace);
		
		changeLineColors(workingPlatePlace);
		servingCommand = new AServingPlateCommand(servingAnimator,plate,PAUSE, bufferXValues[workingPlatePlace], bufferYValues[workingPlatePlace]);
		Thread thread = new Thread(servingCommand);
		thread.start();
		isFull[workingPlatePlace] = true;
	}
	
	public void order(OEShapeModel bell) {
		if(checkIfFull()) {
			resetLineColors();
			resetBuffer();
		}
		bellIntegerList.add(0);
		int bellPlace = findBell(bell.getCenterY());
		bellsList.get(bellPlace).getText().setText(String.valueOf(bellIntegerList.size()-1));
		
		int platePlace = findFirstAvailablePlate();
		//servingCommand = new AServingPlateCommand(servingAnimator,plateList.get(platePlace),PAUSE, bell.getCenterX() , bell.getCenterY());
		Thread thread = new Thread(servingCommand);
		thread.start();
		
		//cookingCommand = new ACookingPlateCommand(cookingAnimator, plateList.get(0), 0, 15);
		Thread eatingThread = new Thread (cookingCommand);
		eatingThread.start();
		//plateList.get(0).getText().setText("");
	}
	
	public void eat() {
		//plateList.remove(0);
	}
	
	@Override
	@Visible(false)
	public int findBell(int centerY) {
		for(int i=0; i<bellsList.size();i++) {
			if(bellsList.get(i).getBell().getCenterY() == centerY) {
				return i;
			}
		}
		return 0;
	}
	
	@Override
	@Visible(false)
	public int findFirstAvailablePlate() {
		for (int i=0; i<isFull.length;i++) {
			if(isFull[i] == true) {
				return i;
			}
		}
		return 0;
	}
	
	@Override
	@Visible(false)
	public void resetBuffer() {
		
		for (int i=0; i<isFull.length;i++) {
			isFull[i] = false;
		}
	}
	
	@Override
	@Visible(false)
	public int findPatron(OEShapeModel patronHead) {
		return 0;
	}
	
	@Override
	@Visible(false)
	public boolean checkIfFull() {
		for (int i=0; i<isFull.length;i++) {
			if (isFull[i] == false) {
				full = false;
				return full;
			}
		}
		full = true;
		return full;
	}
	
	@Override
	@Visible(false)
	public void changeLineColors(int workingPlatePlace) {
		if(workingPlatePlace == lineArray.length-1) {
			lineArray[workingPlatePlace].setColor(Color.GREEN);
			lineArray[0].setColor(Color.GREEN);
		} else {
			lineArray[workingPlatePlace].setColor(Color.GREEN);
			lineArray[workingPlatePlace+1].setColor(Color.GREEN);
		}
	}
	
	
	@Override
	@Visible(false)
	public void resetLineColors() {
		for (int i=0; i<lineArray.length; i++) {
			lineArray[i].setColor(Color.WHITE);
		}
	}
	
	//Getters for properties of the scene
	@Override
	public List<AChef> getChefList() {
		return chefList;
	}
	
	@Override
	public List<APatron> getPatronList() {
		return patronList;
	}
	
	@Override
	public BoundedBuffer getBuffer() {
		return buffer;
	}
	
	@Override
	public List<APlate> getPlateList() {
		return plateList;
	}	
	
	@Override
	@util.annotations.Visible(false)
	public Queue<APlate> getQueuedList() {
		return queuedList;
	}
	
	@Override
	public List<ABell> getBellsList() {
		return bellsList;
	}
	
	@Override
	@Visible(false)
	public Queue<ABell> getQueueBellList() {
		return queueBellList;
	}
}
]]></snapshot>
  </Command>
  <Command __id="1486" _type="PauseCommand" date="Sat Feb 25 10:56:20 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27826933">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1120]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1485" _type="DiffBasedFileOpenCommand" date="Sat Feb 25 10:56:20 EST 2023" docASTNodeCount="147" docActiveCodeLength="867" docExpressionCount="64" docLength="867" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="27826933">
    <filePath><![CDATA[C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\graphics\ProducerConsumerScene.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package graphics;¶¶import java.util.List;¶import java.util.Queue;¶¶import bus.uigen.shapes.AnImageModel;¶import bus.uigen.shapes.OEShapeModel;¶¶public interface ProducerConsumerScene {¶	public List<AChef> getChefList();¶	public List<APatron> getPatronList();¶	"), Diff(DELETE,"public List<APlate> getPlateList();¶	"), Diff(EQUAL,"public Queue<APlate> get"), Diff(DELETE,"OtherPlate"), Diff(INSERT,"Queued"), Diff(EQUAL,"List();¶	public BoundedBuffer getBuffer();¶	public Queue<ABell> getQueueBellList();¶	public void initScene(int patronAmount, int chefAmount);¶	public void cook(OEShapeModel head);¶	public void serve();¶	public boolean checkIfFull();¶	public void changeLineColors(int workingPlatePlace);¶	public void resetLineColors();¶	public int findPatron(OEShapeModel patronHead);¶	public List<ABell> getBellsList();¶	public int findBell(int centerY);¶	public void order(OEShapeModel bell);¶	public int findFirstAvailablePlate();¶	public void resetBuffer();¶"), Diff(INSERT,"	¶"), Diff(EQUAL,"}¶")]]]></diff>
    <snapshot><![CDATA[package graphics;

import java.util.List;
import java.util.Queue;

import bus.uigen.shapes.AnImageModel;
import bus.uigen.shapes.OEShapeModel;

public interface ProducerConsumerScene {
	public List<AChef> getChefList();
	public List<APatron> getPatronList();
	public Queue<APlate> getQueuedList();
	public BoundedBuffer getBuffer();
	public Queue<ABell> getQueueBellList();
	public void initScene(int patronAmount, int chefAmount);
	public void cook(OEShapeModel head);
	public void serve();
	public boolean checkIfFull();
	public void changeLineColors(int workingPlatePlace);
	public void resetLineColors();
	public int findPatron(OEShapeModel patronHead);
	public List<ABell> getBellsList();
	public int findBell(int centerY);
	public void order(OEShapeModel bell);
	public int findFirstAvailablePlate();
	public void resetBuffer();
	
}
]]></snapshot>
  </Command>
  <Command __id="1487" _type="MoveCaretCommand" caretOffset="203" date="Sat Feb 25 10:56:20 EST 2023" docOffset="308" starttimestamp="1677312753280" timestamp="27827183" />
  <Command __id="1488" _type="MoveCaretCommand" caretOffset="281" date="Sat Feb 25 10:56:20 EST 2023" docOffset="386" starttimestamp="1677312753280" timestamp="27827364" />
  <DocumentChange __id="1489" _type="Delete" date="Sat Feb 25 10:56:21 EST 2023" docASTNodeCount="139" docActiveCodeLength="829" docExpressionCount="61" docLength="829" endLine="11" length="38" offset="270" repeat="3" startLine="11" starttimestamp="1677312753280" timestamp="27828265" timestamp2="27828966">
    <text><![CDATA[	public Queue<APlate> getQueuedList();]]></text>
  </DocumentChange>
  <Command __id="1490" _type="UndoCommand" date="Sat Feb 25 10:56:21 EST 2023" starttimestamp="1677312753280" timestamp="27828313" />
  <Command __id="1492" _type="UndoCommand" date="Sat Feb 25 10:56:21 EST 2023" starttimestamp="1677312753280" timestamp="27828652" />
  <Command __id="1494" _type="UndoCommand" date="Sat Feb 25 10:56:22 EST 2023" starttimestamp="1677312753280" timestamp="27828989" />
  <DocumentChange __id="1495" _type="Insert" date="Sat Feb 25 10:56:22 EST 2023" docASTNodeCount="146" docActiveCodeLength="859" docExpressionCount="64" docLength="859" length="30" offset="824" starttimestamp="1677312753280" timestamp="27829322">
    <text><![CDATA[Queue<APlate> getQueuedList();]]></text>
  </DocumentChange>
  <Command __id="1496" _type="UndoCommand" date="Sat Feb 25 10:56:22 EST 2023" starttimestamp="1677312753280" timestamp="27829340" />
  <Command __id="1498" _type="UndoCommand" date="Sat Feb 25 10:56:23 EST 2023" starttimestamp="1677312753280" timestamp="27829774" />
  <DocumentChange __id="1497" _type="Insert" date="Sat Feb 25 10:56:23 EST 2023" docASTNodeCount="162" docActiveCodeLength="939" docExpressionCount="70" docLength="939" length="80" offset="270" starttimestamp="1677312753280" timestamp="27829764">
    <text><![CDATA[	public List<APlate> getPlateList();
	public Queue<APlate> getOtherPlateList();]]></text>
  </DocumentChange>
  <Command __id="1500" _type="PauseCommand" date="Sat Feb 25 10:56:25 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="27832430">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[UndoCommand]]></prev>
    <pause><![CDATA[2656]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="1502" _type="UndoCommand" date="Sat Feb 25 10:56:25 EST 2023" starttimestamp="1677312753280" timestamp="27832475" />
  <Command __id="1504" _type="PauseCommand" date="Sat Feb 25 10:56:28 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="27834842">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[UndoCommand]]></prev>
    <pause><![CDATA[2367]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1503" _type="MoveCaretCommand" caretOffset="281" date="Sat Feb 25 10:56:28 EST 2023" docOffset="386" starttimestamp="1677312753280" timestamp="27834842" />
  <Command __id="1505" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sat Feb 25 10:56:28 EST 2023" starttimestamp="1677312753280" timestamp="27835603" />
  <Command __id="1506" _type="EclipseCommand" commandID="" date="Sat Feb 25 10:56:28 EST 2023" starttimestamp="1677312753280" timestamp="27835673" />
  <Command __id="1507" _type="EclipseCommand" commandID="" date="Sat Feb 25 10:56:29 EST 2023" starttimestamp="1677312753280" timestamp="27835813" />
  <Command __id="1509" _type="PauseCommand" date="Sat Feb 25 10:56:30 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27836894">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1081]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1508" _type="MoveCaretCommand" caretOffset="43" date="Sat Feb 25 10:56:30 EST 2023" docOffset="43" starttimestamp="1677312753280" timestamp="27836894" />
  <Command __id="1510" _type="MoveCaretCommand" caretOffset="87" date="Sat Feb 25 10:56:30 EST 2023" docOffset="192" starttimestamp="1677312753280" timestamp="27837692" />
  <Command __id="1512" _type="PauseCommand" date="Sat Feb 25 10:56:37 EST 2023" range="5s-10s" starttimestamp="1677312753280" timestamp="27844519">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[6827]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[CopyCommand]]></next>
  </Command>
  <Command __id="1511" _type="CopyCommand" date="Sat Feb 25 10:56:37 EST 2023" starttimestamp="1677312753280" timestamp="27844519" />
  <Command __id="1514" _type="PauseCommand" date="Sat Feb 25 10:56:40 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="27847396">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[2877]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1513" _type="ShellCommand" date="Sat Feb 25 10:56:40 EST 2023" starttimestamp="1677312753280" timestamp="27847396" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1516" _type="PauseCommand" date="Sat Feb 25 10:56:44 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="27850942">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3546]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1515" _type="ShellCommand" date="Sat Feb 25 10:56:44 EST 2023" starttimestamp="1677312753280" timestamp="27850942" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1517" _type="PasteCommand" date="Sat Feb 25 10:56:44 EST 2023" starttimestamp="1677312753280" timestamp="27851013" />
  <Command __id="1519" _type="MoveCaretCommand" caretOffset="9096" date="Sat Feb 25 10:56:45 EST 2023" docOffset="9976" starttimestamp="1677312753280" timestamp="27852055" />
  <Command __id="1520" _type="MoveCaretCommand" caretOffset="8998" date="Sat Feb 25 10:56:45 EST 2023" docOffset="9878" starttimestamp="1677312753280" timestamp="27852473" />
  <Command __id="1522" _type="PauseCommand" date="Sat Feb 25 10:56:46 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27853529">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1056]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1521" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sat Feb 25 10:56:46 EST 2023" starttimestamp="1677312753280" timestamp="27853529" />
  <Command __id="1523" _type="EclipseCommand" commandID="" date="Sat Feb 25 10:56:46 EST 2023" starttimestamp="1677312753280" timestamp="27853605" />
  <Command __id="1524" _type="EclipseCommand" commandID="" date="Sat Feb 25 10:56:46 EST 2023" starttimestamp="1677312753280" timestamp="27853695" />
  <Command __id="1526" _type="PauseCommand" date="Sat Feb 25 10:56:50 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="27857437">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3742]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1525" _type="ShellCommand" date="Sat Feb 25 10:56:50 EST 2023" starttimestamp="1677312753280" timestamp="27857437" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1528" _type="PauseCommand" date="Sat Feb 25 10:56:52 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27859250">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1813]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1527" _type="ShellCommand" date="Sat Feb 25 10:56:52 EST 2023" starttimestamp="1677312753280" timestamp="27859250" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1529" _type="PasteCommand" date="Sat Feb 25 10:56:52 EST 2023" starttimestamp="1677312753280" timestamp="27859389" />
  <Command __id="1530" _type="EclipseCommand" commandID="" date="Sat Feb 25 10:56:52 EST 2023" starttimestamp="1677312753280" timestamp="27859519" />
  <Command __id="1531" _type="EclipseCommand" commandID="" date="Sat Feb 25 10:56:52 EST 2023" starttimestamp="1677312753280" timestamp="27859572" />
  <Command __id="1533" _type="PauseCommand" date="Sat Feb 25 10:57:00 EST 2023" range="5s-10s" starttimestamp="1677312753280" timestamp="27866863">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[7291]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1532" _type="MoveCaretCommand" caretOffset="337" date="Sat Feb 25 10:57:00 EST 2023" docOffset="1217" starttimestamp="1677312753280" timestamp="27866863" />
  <Command __id="1534" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sat Feb 25 10:57:00 EST 2023" starttimestamp="1677312753280" timestamp="27867575" />
  <Command __id="1536" _type="InsertStringCommand" date="Sat Feb 25 10:57:01 EST 2023" starttimestamp="1677312753280" timestamp="27868206" timestamp2="27868206">
    <data><![CDATA[2]]></data>
  </Command>
  <Command __id="1537" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sat Feb 25 10:57:02 EST 2023" starttimestamp="1677312753280" timestamp="27868949" />
  <Command __id="1538" _type="EclipseCommand" commandID="" date="Sat Feb 25 10:57:02 EST 2023" starttimestamp="1677312753280" timestamp="27869033" />
  <Command __id="1539" _type="EclipseCommand" commandID="" date="Sat Feb 25 10:57:02 EST 2023" starttimestamp="1677312753280" timestamp="27869106" />
  <DocumentChange __id="1499" _type="Delete" date="Sat Feb 25 10:56:25 EST 2023" docASTNodeCount="155" docActiveCodeLength="906" docExpressionCount="67" docLength="906" endLine="27" length="33" offset="901" repeat="2" startLine="26" starttimestamp="1677312753280" timestamp="27832430" timestamp2="27832442">
    <text><![CDATA[
	Queue<APlate> getQueuedList();]]></text>
  </DocumentChange>
  <Command __id="1518" _type="DiffBasedFileOpenCommand" date="Sat Feb 25 10:56:45 EST 2023" docASTNodeCount="1572" docActiveCodeLength="9238" docExpressionCount="1075" docLength="10168" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="27851840">
    <filePath><![CDATA[C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\graphics\AProducerConsumerScene2.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package graphics;¶¶import java.util.ArrayList;¶import java.util.LinkedList;¶import java.util.List;¶import java.util.Queue;¶¶import animations.ACookingPlateAnimator;¶import animations.ACookingPlateCommand;¶import animations.AServingPlateAnimator;¶import animations.AServingPlateCommand;¶import animations.CookingPlateAnimator;¶import animations.ServingPlateAnimator;¶import bus.uigen.OEFrame;¶import bus.uigen.ObjectEditor;¶import bus.uigen.shapes.ALineModel;¶import bus.uigen.shapes.AStringModel;¶import bus.uigen.shapes.AnImageModel;¶import bus.uigen.shapes.OEShapeModel;¶import shapes.FlexibleTextShape;¶import util.annotations.EditablePropertyNames;¶import util.annotations.Label;¶import util.annotations.PropertyNames;¶import util.annotations.StructurePattern;¶import util.annotations.StructurePatternNames;¶import util.annotations.Visible;¶import util.misc.ThreadSupport;¶¶import java.awt.Color;¶¶@StructurePattern(StructurePatternNames.BEAN_PATTERN)¶@PropertyNames({¶	"patronList",¶	"chefList",¶	"buffer",¶	"plateList",¶	"otherPlateList",¶	"bellsList",¶	"queueBellList"¶})¶@EditablePropertyNames({¶})¶public class AProducerConsumerScene2 implements ProducerConsumerScene {¶	¶	//Avatar offsets inside scene¶	int[] chefXValues = {120,-50,-50,120};¶	int[] chefYValues = {-50,35,210,320};¶	int[] patronXValues = {650,850,850,650};¶	int[] patronYValues = {-50,35,220,320};¶	int[] bellXValues = {680,880,880,680};¶	int[] bellYValues = {75,160,345,445};¶	int INIT_HEAD_Y = 60;¶	int INIT_HEAD_X = 163;¶	int INIT_HEAD_HEIGHT = 90;¶	int INIT_HEAD_WIDTH = 80;¶	int PLATE_OFFSET_X = 30;¶	int PLATE_OFFSET_Y = 10;¶	int PAUSE = 5;¶	¶	//Booleans that help with the functionality of the below methods¶	boolean INIT_COOK = true;¶	boolean full = false;¶	int fullPlateOffset = -5;¶	¶	//Defining the chef and patron images¶	String[] chefImages = {"images/0.png","images/1.png","images/2.png","images/3.png"};¶	String[] patronImages = {"images/4.png", "images/5.png", "images/6.png", "images/7.png"};¶	¶	//Buffer arrays¶	int[] bufferXValues = {625, 680, 680, 620, 535, 460, 460, 535};¶	int[] bufferYValues = {200, 275, 365, 425, 425, 365, 275, 200};¶	boolean[] isFull = {false, false, false, false, false, false, false, false};¶	¶	//The properties of our class¶	List<APatron> patronList;¶	List<AChef> chefList;¶	BoundedBuffer buffer = new ABoundedBuffer();¶	¶	//This list will keep a track of the plates that enter the buffer so that FIFO¶	Queue<APlate> queuedList;¶	¶	OEShapeModel[] lineArray = {buffer.getLineTwo(), buffer.getLineThree(), buffer.getLineFour(), ¶								buffer.getLineFive(), buffer.getLineSix(), buffer.getLineSeven(), ¶								buffer.getLineEight(), buffer.getLineOne()};¶	¶	List<ABell> bellsList;¶	Queue<ABell> queueBellList;¶	int[] bellValues = {127, 212, 397, 497};¶	Queue<Integer> bellIntegerList;¶	¶	ACookingPlateCommand cookingCommand;¶	CookingPlateAnimator cookingAnimator;¶	¶	AServingPlateCommand servingCommand;¶	ServingPlateAnimator servingAnimator;¶	¶	//The constructor sets the scene with one chef, patron, a buffer, and a plate (not visible)¶	public AProducerConsumerScene2() {¶		patronList = new ArrayList<APatron>();¶		chefList = new ArrayList<AChef>();¶		//buffer = new ABoundedBuffer();¶		¶		queuedList = new LinkedList<APlate>();¶		bellsList = new ArrayList<ABell>();¶		queueBellList = new LinkedList<ABell>();¶		bellIntegerList = new LinkedList<Integer>();¶		¶		patronList.add(0, new APatron());¶		OEShapeModel initPatronHead = new AnImageModel(patronImages[0]);¶		initPatronHead.setX(INIT_HEAD_X);¶		initPatronHead.setY(INIT_HEAD_Y);¶		initPatronHead.setHeight(INIT_HEAD_HEIGHT);¶		initPatronHead.setWidth(INIT_HEAD_WIDTH);¶		patronList.get(0).patron.setHead(initPatronHead);¶		patronList.get(0).move(patronXValues[0], patronYValues[0]);¶		¶		chefList.add(0, new AChef());¶		OEShapeModel initChefHead = new AnImageModel(chefImages[0]);¶		initChefHead.setX(INIT_HEAD_X);¶		initChefHead.setY(INIT_HEAD_Y);¶		initChefHead.setHeight(INIT_HEAD_HEIGHT);¶		initChefHead.setWidth(INIT_HEAD_WIDTH);¶		chefList.get(0).chef.setHead(initChefHead);¶		chefList.get(0).move(chefXValues[0], chefYValues[0]);¶		¶		queuedList.add(new APlate());¶		queuedList.peek().getPlate().setHeight(0);¶		queuedList.peek().getPlate().setWidth(0);¶		¶		cookingAnimator = new ACookingPlateAnimator();¶		servingAnimator = new AServingPlateAnimator();¶		¶		bellsList.add(new ABell());¶		bellsList.get(0).getBell().setHeight(0);¶		bellsList.get(0).getBell().setWidth(0);¶		¶		queueBellList.add(new ABell());¶		queueBellList.peek().getBell().setHeight(0);¶		queueBellList.peek().getBell().setWidth(0);¶		¶		bellIntegerList.add(0);¶	}¶	¶	//Producer consumer methods¶	¶	//Init Scene sets the number of patrons and chefs in the scene¶	@Label("Init Scene")¶	public void initScene(int patronAmount, int chefAmount) {¶		bellsList.clear();¶		for (int i=0; i<patronAmount; i++) { ¶			APatron patron = new APatron();¶			patronList.add(i, patron);¶			OEShapeModel newHead = new AnImageModel(patronImages[i]);¶			patron.patron.setHead(newHead); ¶			newHead.setX(INIT_HEAD_X); ¶			newHead.setY(INIT_HEAD_Y);¶			newHead.setHeight(INIT_HEAD_HEIGHT);¶			newHead.setWidth(INIT_HEAD_WIDTH);¶			patron.move(patronXValues[i], patronYValues[i]);¶			¶			bellsList.add(new ABell());¶			bellsList.get(i).move(bellXValues[i], bellYValues[i]);¶		}¶		for (int i=0; i<chefAmount; i++) {¶			AChef chef = new AChef();¶			chefList.add(i, chef);¶			OEShapeModel newHead = new AnImageModel(chefImages[i]);¶			chef.chef.setHead(newHead);¶			newHead.setX(INIT_HEAD_X); ¶			newHead.setY(INIT_HEAD_Y);¶			newHead.setHeight(INIT_HEAD_HEIGHT);¶			newHead.setWidth(INIT_HEAD_WIDTH);¶			chef.move(chefXValues[i], chefYValues[i]);¶		}¶	}¶	¶	//Once the head of an avatar is chosen, it makes the plate that they "cook" appear¶	public void cook(OEShapeModel head) {¶		if (INIT_COOK) {¶			INIT_COOK=!INIT_COOK;¶			queuedList.remove();¶		}¶		¶		int headX = head.getCenterX();¶		int headY = head.getCenterY();¶		¶		APlate newPlate = new APlate();¶		newPlate.getPlate().setHeight(0);¶		newPlate.getPlate().setWidth(0);¶		¶		if (full) {¶			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y+fullPlateOffset);¶			fullPlateOffset = fullPlateOffset - 5;¶		} else {¶			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y);¶		}¶		¶		cookingCommand = new ACookingPlateCommand(cookingAnimator, newPlate, 40, 15);¶		Thread thread = new Thread (cookingCommand);¶		thread.start();¶	}¶	¶	public void serve(APlate plate) {¶		//Checks to see if the buffer is full. If it is, then can't serve.¶		resetLineColors();¶		if(checkIfFull()) {¶			resetLineColors();¶			return;¶		}¶		¶		queuedList.add(plate);¶		¶		int workingPlatePlace = queuedList.size();¶		FlexibleTextShape platePlace = new AStringModel(Integer.toString(workingPlatePlace));¶		plate.setText(platePlace);¶		¶		changeLineColors(workingPlatePlace);¶		servingCommand = new AServingPlateCommand(servingAnimator,plate,PAUSE, bufferXValues[workingPlatePlace], bufferYValues[workingPlatePlace]);¶		Thread thread = new Thread(servingCommand);¶		thread.start();¶		isFull[workingPlatePlace] = true;¶	}¶	¶	public void order(OEShapeModel bell) {¶		if(checkIfFull()) {¶			resetLineColors();¶			resetBuffer();¶		}¶		bellIntegerList.add(0);¶		int bellPlace = findBell(bell.getCenterY());¶		bellsList.get(bellPlace).getText().setText(String.valueOf(bellIntegerList.size()-1));¶		¶		int platePlace = findFirstAvailablePlate();¶		//servingCommand = new AServingPlateCommand(servingAnimator,plateList.get(platePlace),PAUSE, bell.getCenterX() , bell.getCenterY());¶		Thread thread = new Thread(servingCommand);¶		thread.start();¶		¶		//cookingCommand = new ACookingPlateCommand(cookingAnimator, plateList.get(0), 0, 15);¶		Thread eatingThread = new Thread (cookingCommand);¶		eatingThread.start();¶		//plateList.get(0).getText().setText("");¶	}¶	¶	public void eat() {¶		//plateList.remove(0);¶	}¶	¶	@Override¶	@Visible(false)¶	public int findBell(int centerY) {¶		for(int i=0; i<bellsList.size();i++) {¶			if(bellsList.get(i).getBell().getCenterY() == centerY) {¶				return i;¶			}¶		}¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public int findFirstAvailablePlate() {¶		for (int i=0; i<isFull.length;i++) {¶			if(isFull[i] == true) {¶				return i;¶			}¶		}¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public void resetBuffer() {¶		¶		for (int i=0; i<isFull.length;i++) {¶			isFull[i] = false;¶		}¶	}¶	¶	@Override¶	@Visible(false)¶	public int findPatron(OEShapeModel patronHead) {¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public boolean checkIfFull() {¶		for (int i=0; i<isFull.length;i++) {¶			if (isFull[i] == false) {¶				full = false;¶				return full;¶			}¶		}¶		full = true;¶		return full;¶	}¶	¶	@Override¶	@Visible(false)¶	public void changeLineColors(int workingPlatePlace) {¶		if(workingPlatePlace == lineArray.length-1) {¶			lineArray[workingPlatePlace].setColor(Color.GREEN);¶			lineArray[0].setColor(Color.GREEN);¶		} else {¶			lineArray[workingPlatePlace].setColor(Color.GREEN);¶			lineArray[workingPlatePlace+1].setColor(Color.GREEN);¶		}¶	}¶	¶	¶	@Override¶	@Visible(false)¶	public void resetLineColors() {¶		for (int i=0; i<lineArray.length; i++) {¶			lineArray[i].setColor(Color.WHITE);¶		}¶	}¶	¶	//Getters for properties of the scene¶	@Override¶	public List<AChef> getChefList() {¶		return chefList;¶	}¶	¶	@Override¶	public List<APatron> getPatronList() {¶		return patronList;¶	}¶	¶	@Override¶	public BoundedBuffer getBuffer() {¶		return buffer;¶	}¶	¶	@Override¶	public List<APlate> getPlateList() {¶		return plateList;¶	}	¶	¶	@Override¶	@util.annotations.Visible(false)¶	public Queue<APlate> getQueuedList() {¶		return queuedList;¶	}¶	¶	@Override¶	public List<ABell> getBellsList() {¶		return bellsList;¶	}¶	¶	@Override¶	@Visible(false)¶	public Queue<ABell> getQueueBellList() {¶		return queueBellList;¶	}¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="1535" _type="Insert" date="Sat Feb 25 10:57:01 EST 2023" docASTNodeCount="1572" docActiveCodeLength="9239" docExpressionCount="1075" docLength="10169" length="1" offset="1218" starttimestamp="1677312753280" timestamp="27868159">
    <text><![CDATA[2]]></text>
  </DocumentChange>
  <Command __id="1541" _type="PauseCommand" date="Sat Feb 25 10:57:08 EST 2023" range="5s-10s" starttimestamp="1677312753280" timestamp="27874880">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[5774]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1542" _type="MoveCaretCommand" caretOffset="0" date="Sat Feb 25 10:57:08 EST 2023" docOffset="0" starttimestamp="1677312753280" timestamp="27875102" />
  <Command __id="1544" _type="PauseCommand" date="Sat Feb 25 10:57:13 EST 2023" range="5s-10s" starttimestamp="1677312753280" timestamp="27880130">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[5028]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1543" _type="SelectTextCommand" caretOffset="195" date="Sat Feb 25 10:57:13 EST 2023" end="195" start="190" starttimestamp="1677312753280" timestamp="27880130" />
  <Command __id="1546" _type="PauseCommand" date="Sat Feb 25 10:57:19 EST 2023" range="5s-10s" starttimestamp="1677312753280" timestamp="27886654">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[6524]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1545" _type="SelectTextCommand" caretOffset="239" date="Sat Feb 25 10:57:19 EST 2023" end="239" start="229" starttimestamp="1677312753280" timestamp="27886654" />
  <Command __id="1540" _type="DiffBasedFileOpenCommand" date="Sat Feb 25 10:57:08 EST 2023" docASTNodeCount="155" docActiveCodeLength="907" docExpressionCount="67" docLength="907" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="27874880">
    <filePath><![CDATA[C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\graphics\ProducerConsumerScene2.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package graphics;

import java.util.List;
import java.util.Queue;

import bus.uigen.shapes.AnImageModel;
import bus.uigen.shapes.OEShapeModel;

public interface ProducerConsumerScene2 {
	public List<AChef> getChefList();
	public List<APatron> getPatronList();
	public List<APlate> getPlateList();
	public Queue<APlate> getOtherPlateList();
	public BoundedBuffer getBuffer();
	public Queue<ABell> getQueueBellList();
	public void initScene(int patronAmount, int chefAmount);
	public void cook(OEShapeModel head);
	public void serve();
	public boolean checkIfFull();
	public void changeLineColors(int workingPlatePlace);
	public void resetLineColors();
	public int findPatron(OEShapeModel patronHead);
	public List<ABell> getBellsList();
	public int findBell(int centerY);
	public void order(OEShapeModel bell);
	public int findFirstAvailablePlate();
	public void resetBuffer();
}
]]></snapshot>
  </Command>
  <Command __id="1548" _type="PauseCommand" date="Sat Feb 25 10:57:21 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27887929">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1274]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Replace]]></next>
  </Command>
  <DocumentChange __id="1547" _type="Replace" date="Sat Feb 25 10:57:21 EST 2023" docASTNodeCount="155" docActiveCodeLength="898" docExpressionCount="67" docLength="898" endLine="12" insertionLength="1" int_docASTNodeCount="155" int_docActiveCodeLength="897" int_docExpressionCount="67" int_docLength="897" length="10" offset="334" startLine="12" starttimestamp="1677312753280" timestamp="27887928">
    <deletedText><![CDATA[OtherPlate]]></deletedText>
    <insertedText><![CDATA[Q]]></insertedText>
  </DocumentChange>
  <Command __id="1549" _type="InsertStringCommand" date="Sat Feb 25 10:57:21 EST 2023" starttimestamp="1677312753280" timestamp="27887980" timestamp2="27887980">
    <data><![CDATA[Q]]></data>
  </Command>
  <Command __id="1551" _type="InsertStringCommand" date="Sat Feb 25 10:57:21 EST 2023" starttimestamp="1677312753280" timestamp="27888248" timestamp2="27888248">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="1553" _type="InsertStringCommand" date="Sat Feb 25 10:57:21 EST 2023" starttimestamp="1677312753280" timestamp="27888448" timestamp2="27888448">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1555" _type="InsertStringCommand" date="Sat Feb 25 10:57:21 EST 2023" starttimestamp="1677312753280" timestamp="27888682" timestamp2="27888682">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="1557" _type="InsertStringCommand" date="Sat Feb 25 10:57:22 EST 2023" starttimestamp="1677312753280" timestamp="27888931" timestamp2="27888931">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1559" _type="InsertStringCommand" date="Sat Feb 25 10:57:22 EST 2023" starttimestamp="1677312753280" timestamp="27889125" timestamp2="27889125">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="1561" _type="PauseCommand" date="Sat Feb 25 10:57:25 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="27891925">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2800]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1560" _type="SelectTextCommand" caretOffset="167" date="Sat Feb 25 10:57:25 EST 2023" end="202" start="167" starttimestamp="1677312753280" timestamp="27891925" />
  <Command __id="1563" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:57:25 EST 2023" starttimestamp="1677312753280" timestamp="27892368" />
  <Command __id="1565" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:57:25 EST 2023" starttimestamp="1677312753280" timestamp="27892646" />
  <Command __id="1567" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:57:26 EST 2023" starttimestamp="1677312753280" timestamp="27893199" />
  <Command __id="1569" _type="PauseCommand" date="Sat Feb 25 10:57:27 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27894275">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1076]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1568" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sat Feb 25 10:57:27 EST 2023" starttimestamp="1677312753280" timestamp="27894275" />
  <Command __id="1570" _type="EclipseCommand" commandID="" date="Sat Feb 25 10:57:27 EST 2023" starttimestamp="1677312753280" timestamp="27894348" />
  <Command __id="1571" _type="EclipseCommand" commandID="" date="Sat Feb 25 10:57:27 EST 2023" starttimestamp="1677312753280" timestamp="27894458" />
  <DocumentChange __id="1550" _type="Insert" date="Sat Feb 25 10:57:21 EST 2023" docASTNodeCount="155" docActiveCodeLength="903" docExpressionCount="67" docLength="903" length="5" offset="335" repeat="5" starttimestamp="1677312753280" timestamp="27888236" timestamp2="27889097">
    <text><![CDATA[ueued]]></text>
  </DocumentChange>
  <DocumentChange __id="1562" _type="Delete" date="Sat Feb 25 10:57:25 EST 2023" docASTNodeCount="147" docActiveCodeLength="865" docExpressionCount="64" docLength="865" endLine="11" length="38" offset="269" repeat="3" startLine="10" starttimestamp="1677312753280" timestamp="27892340" timestamp2="27893173">
    <text><![CDATA[
	public List<APlate> getPlateList();]]></text>
  </DocumentChange>
  <Command __id="1573" _type="PauseCommand" date="Sat Feb 25 10:57:29 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27895903">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1445]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1574" _type="MoveCaretCommand" caretOffset="339" date="Sat Feb 25 10:57:29 EST 2023" docOffset="1219" starttimestamp="1677312753280" timestamp="27896137" />
  <Command __id="1575" _type="MoveCaretCommand" caretOffset="200" date="Sat Feb 25 10:57:29 EST 2023" docOffset="1080" starttimestamp="1677312753280" timestamp="27896485" />
  <Command __id="1577" _type="PauseCommand" date="Sat Feb 25 10:57:35 EST 2023" range="5s-10s" starttimestamp="1677312753280" timestamp="27901943">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[5458]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1576" _type="ShellCommand" date="Sat Feb 25 10:57:35 EST 2023" starttimestamp="1677312753280" timestamp="27901943" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1578" _type="ShellCommand" date="Sat Feb 25 10:57:35 EST 2023" starttimestamp="1677312753280" timestamp="27902111" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1584" _type="PauseCommand" date="Sat Feb 25 10:57:46 EST 2023" range="10s-20s" starttimestamp="1677312753280" timestamp="27913481">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[11238]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1583" _type="SelectTextCommand" caretOffset="9288" date="Sat Feb 25 10:57:46 EST 2023" end="9368" start="9288" starttimestamp="1677312753280" timestamp="27913481" />
  <Command __id="1572" _type="DiffBasedFileOpenCommand" date="Sat Feb 25 10:57:29 EST 2023" docASTNodeCount="1572" docActiveCodeLength="9239" docExpressionCount="1075" docLength="10169" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="27895903">
    <filePath><![CDATA[C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\graphics\AProducerConsumerScene2.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package graphics;¶¶import java.util.ArrayList;¶import java.util.LinkedList;¶import java.util.List;¶import java.util.Queue;¶¶import animations.ACookingPlateAnimator;¶import animations.ACookingPlateCommand;¶import animations.AServingPlateAnimator;¶import animations.AServingPlateCommand;¶import animations.CookingPlateAnimator;¶import animations.ServingPlateAnimator;¶import bus.uigen.OEFrame;¶import bus.uigen.ObjectEditor;¶import bus.uigen.shapes.ALineModel;¶import bus.uigen.shapes.AStringModel;¶import bus.uigen.shapes.AnImageModel;¶import bus.uigen.shapes.OEShapeModel;¶import shapes.FlexibleTextShape;¶import util.annotations.EditablePropertyNames;¶import util.annotations.Label;¶import util.annotations.PropertyNames;¶import util.annotations.StructurePattern;¶import util.annotations.StructurePatternNames;¶import util.annotations.Visible;¶import util.misc.ThreadSupport;¶¶import java.awt.Color;¶¶@StructurePattern(StructurePatternNames.BEAN_PATTERN)¶@PropertyNames({¶	"patronList",¶	"chefList",¶	"buffer",¶	"plateList",¶	"otherPlateList",¶	"bellsList",¶	"queueBellList"¶})¶@EditablePropertyNames({¶})¶public class AProducerConsumerScene2 implements ProducerConsumerScene"), Diff(INSERT,"2"), Diff(EQUAL," {¶	¶	//Avatar offsets inside scene¶	int[] chefXValues = {120,-50,-50,120};¶	int[] chefYValues = {-50,35,210,320};¶	int[] patronXValues = {650,850,850,650};¶	int[] patronYValues = {-50,35,220,320};¶	int[] bellXValues = {680,880,880,680};¶	int[] bellYValues = {75,160,345,445};¶	int INIT_HEAD_Y = 60;¶	int INIT_HEAD_X = 163;¶	int INIT_HEAD_HEIGHT = 90;¶	int INIT_HEAD_WIDTH = 80;¶	int PLATE_OFFSET_X = 30;¶	int PLATE_OFFSET_Y = 10;¶	int PAUSE = 5;¶	¶	//Booleans that help with the functionality of the below methods¶	boolean INIT_COOK = true;¶	boolean full = false;¶	int fullPlateOffset = -5;¶	¶	//Defining the chef and patron images¶	String[] chefImages = {"images/0.png","images/1.png","images/2.png","images/3.png"};¶	String[] patronImages = {"images/4.png", "images/5.png", "images/6.png", "images/7.png"};¶	¶	//Buffer arrays¶	int[] bufferXValues = {625, 680, 680, 620, 535, 460, 460, 535};¶	int[] bufferYValues = {200, 275, 365, 425, 425, 365, 275, 200};¶	boolean[] isFull = {false, false, false, false, false, false, false, false};¶	¶	//The properties of our class¶	List<APatron> patronList;¶	List<AChef> chefList;¶	BoundedBuffer buffer = new ABoundedBuffer();¶	¶	//This list will keep a track of the plates that enter the buffer so that FIFO¶	Queue<APlate> queuedList;¶	¶	OEShapeModel[] lineArray = {buffer.getLineTwo(), buffer.getLineThree(), buffer.getLineFour(), ¶								buffer.getLineFive(), buffer.getLineSix(), buffer.getLineSeven(), ¶								buffer.getLineEight(), buffer.getLineOne()};¶	¶	List<ABell> bellsList;¶	Queue<ABell> queueBellList;¶	int[] bellValues = {127, 212, 397, 497};¶	Queue<Integer> bellIntegerList;¶	¶	ACookingPlateCommand cookingCommand;¶	CookingPlateAnimator cookingAnimator;¶	¶	AServingPlateCommand servingCommand;¶	ServingPlateAnimator servingAnimator;¶	¶	//The constructor sets the scene with one chef, patron, a buffer, and a plate (not visible)¶	public AProducerConsumerScene2() {¶		patronList = new ArrayList<APatron>();¶		chefList = new ArrayList<AChef>();¶		//buffer = new ABoundedBuffer();¶		¶		queuedList = new LinkedList<APlate>();¶		bellsList = new ArrayList<ABell>();¶		queueBellList = new LinkedList<ABell>();¶		bellIntegerList = new LinkedList<Integer>();¶		¶		patronList.add(0, new APatron());¶		OEShapeModel initPatronHead = new AnImageModel(patronImages[0]);¶		initPatronHead.setX(INIT_HEAD_X);¶		initPatronHead.setY(INIT_HEAD_Y);¶		initPatronHead.setHeight(INIT_HEAD_HEIGHT);¶		initPatronHead.setWidth(INIT_HEAD_WIDTH);¶		patronList.get(0).patron.setHead(initPatronHead);¶		patronList.get(0).move(patronXValues[0], patronYValues[0]);¶		¶		chefList.add(0, new AChef());¶		OEShapeModel initChefHead = new AnImageModel(chefImages[0]);¶		initChefHead.setX(INIT_HEAD_X);¶		initChefHead.setY(INIT_HEAD_Y);¶		initChefHead.setHeight(INIT_HEAD_HEIGHT);¶		initChefHead.setWidth(INIT_HEAD_WIDTH);¶		chefList.get(0).chef.setHead(initChefHead);¶		chefList.get(0).move(chefXValues[0], chefYValues[0]);¶		¶		queuedList.add(new APlate());¶		queuedList.peek().getPlate().setHeight(0);¶		queuedList.peek().getPlate().setWidth(0);¶		¶		cookingAnimator = new ACookingPlateAnimator();¶		servingAnimator = new AServingPlateAnimator();¶		¶		bellsList.add(new ABell());¶		bellsList.get(0).getBell().setHeight(0);¶		bellsList.get(0).getBell().setWidth(0);¶		¶		queueBellList.add(new ABell());¶		queueBellList.peek().getBell().setHeight(0);¶		queueBellList.peek().getBell().setWidth(0);¶		¶		bellIntegerList.add(0);¶	}¶	¶	//Producer consumer methods¶	¶	//Init Scene sets the number of patrons and chefs in the scene¶	@Label("Init Scene")¶	public void initScene(int patronAmount, int chefAmount) {¶		bellsList.clear();¶		for (int i=0; i<patronAmount; i++) { ¶			APatron patron = new APatron();¶			patronList.add(i, patron);¶			OEShapeModel newHead = new AnImageModel(patronImages[i]);¶			patron.patron.setHead(newHead); ¶			newHead.setX(INIT_HEAD_X); ¶			newHead.setY(INIT_HEAD_Y);¶			newHead.setHeight(INIT_HEAD_HEIGHT);¶			newHead.setWidth(INIT_HEAD_WIDTH);¶			patron.move(patronXValues[i], patronYValues[i]);¶			¶			bellsList.add(new ABell());¶			bellsList.get(i).move(bellXValues[i], bellYValues[i]);¶		}¶		for (int i=0; i<chefAmount; i++) {¶			AChef chef = new AChef();¶			chefList.add(i, chef);¶			OEShapeModel newHead = new AnImageModel(chefImages[i]);¶			chef.chef.setHead(newHead);¶			newHead.setX(INIT_HEAD_X); ¶			newHead.setY(INIT_HEAD_Y);¶			newHead.setHeight(INIT_HEAD_HEIGHT);¶			newHead.setWidth(INIT_HEAD_WIDTH);¶			chef.move(chefXValues[i], chefYValues[i]);¶		}¶	}¶	¶	//Once the head of an avatar is chosen, it makes the plate that they "cook" appear¶	public void cook(OEShapeModel head) {¶		if (INIT_COOK) {¶			INIT_COOK=!INIT_COOK;¶			queuedList.remove();¶		}¶		¶		int headX = head.getCenterX();¶		int headY = head.getCenterY();¶		¶		APlate newPlate = new APlate();¶		newPlate.getPlate().setHeight(0);¶		newPlate.getPlate().setWidth(0);¶		¶		if (full) {¶			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y+fullPlateOffset);¶			fullPlateOffset = fullPlateOffset - 5;¶		} else {¶			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y);¶		}¶		¶		cookingCommand = new ACookingPlateCommand(cookingAnimator, newPlate, 40, 15);¶		Thread thread = new Thread (cookingCommand);¶		thread.start();¶	}¶	¶	public void serve(APlate plate) {¶		//Checks to see if the buffer is full. If it is, then can't serve.¶		resetLineColors();¶		if(checkIfFull()) {¶			resetLineColors();¶			return;¶		}¶		¶		queuedList.add(plate);¶		¶		int workingPlatePlace = queuedList.size();¶		FlexibleTextShape platePlace = new AStringModel(Integer.toString(workingPlatePlace));¶		plate.setText(platePlace);¶		¶		changeLineColors(workingPlatePlace);¶		servingCommand = new AServingPlateCommand(servingAnimator,plate,PAUSE, bufferXValues[workingPlatePlace], bufferYValues[workingPlatePlace]);¶		Thread thread = new Thread(servingCommand);¶		thread.start();¶		isFull[workingPlatePlace] = true;¶	}¶	¶	public void order(OEShapeModel bell) {¶		if(checkIfFull()) {¶			resetLineColors();¶			resetBuffer();¶		}¶		bellIntegerList.add(0);¶		int bellPlace = findBell(bell.getCenterY());¶		bellsList.get(bellPlace).getText().setText(String.valueOf(bellIntegerList.size()-1));¶		¶		int platePlace = findFirstAvailablePlate();¶		//servingCommand = new AServingPlateCommand(servingAnimator,plateList.get(platePlace),PAUSE, bell.getCenterX() , bell.getCenterY());¶		Thread thread = new Thread(servingCommand);¶		thread.start();¶		¶		//cookingCommand = new ACookingPlateCommand(cookingAnimator, plateList.get(0), 0, 15);¶		Thread eatingThread = new Thread (cookingCommand);¶		eatingThread.start();¶		//plateList.get(0).getText().setText("");¶	}¶	¶	public void eat() {¶		//plateList.remove(0);¶	}¶	¶	@Override¶	@Visible(false)¶	public int findBell(int centerY) {¶		for(int i=0; i<bellsList.size();i++) {¶			if(bellsList.get(i).getBell().getCenterY() == centerY) {¶				return i;¶			}¶		}¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public int findFirstAvailablePlate() {¶		for (int i=0; i<isFull.length;i++) {¶			if(isFull[i] == true) {¶				return i;¶			}¶		}¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public void resetBuffer() {¶		¶		for (int i=0; i<isFull.length;i++) {¶			isFull[i] = false;¶		}¶	}¶	¶	@Override¶	@Visible(false)¶	public int findPatron(OEShapeModel patronHead) {¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public boolean checkIfFull() {¶		for (int i=0; i<isFull.length;i++) {¶			if (isFull[i] == false) {¶				full = false;¶				return full;¶			}¶		}¶		full = true;¶		return full;¶	}¶	¶	@Override¶	@Visible(false)¶	public void changeLineColors(int workingPlatePlace) {¶		if(workingPlatePlace == lineArray.length-1) {¶			lineArray[workingPlatePlace].setColor(Color.GREEN);¶			lineArray[0].setColor(Color.GREEN);¶		} else {¶			lineArray[workingPlatePlace].setColor(Color.GREEN);¶			lineArray[workingPlatePlace+1].setColor(Color.GREEN);¶		}¶	}¶	¶	¶	@Override¶	@Visible(false)¶	public void resetLineColors() {¶		for (int i=0; i<lineArray.length; i++) {¶			lineArray[i].setColor(Color.WHITE);¶		}¶	}¶	¶	//Getters for properties of the scene¶	@Override¶	public List<AChef> getChefList() {¶		return chefList;¶	}¶	¶	@Override¶	public List<APatron> getPatronList() {¶		return patronList;¶	}¶	¶	@Override¶	public BoundedBuffer getBuffer() {¶		return buffer;¶	}¶	¶	@Override¶	public List<APlate> getPlateList() {¶		return plateList;¶	}	¶	¶	@Override¶	@util.annotations.Visible(false)¶	public Queue<APlate> getQueuedList() {¶		return queuedList;¶	}¶	¶	@Override¶	public List<ABell> getBellsList() {¶		return bellsList;¶	}¶	¶	@Override¶	@Visible(false)¶	public Queue<ABell> getQueueBellList() {¶		return queueBellList;¶	}¶}¶")]]]></diff>
    <snapshot><![CDATA[package graphics;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

import animations.ACookingPlateAnimator;
import animations.ACookingPlateCommand;
import animations.AServingPlateAnimator;
import animations.AServingPlateCommand;
import animations.CookingPlateAnimator;
import animations.ServingPlateAnimator;
import bus.uigen.OEFrame;
import bus.uigen.ObjectEditor;
import bus.uigen.shapes.ALineModel;
import bus.uigen.shapes.AStringModel;
import bus.uigen.shapes.AnImageModel;
import bus.uigen.shapes.OEShapeModel;
import shapes.FlexibleTextShape;
import util.annotations.EditablePropertyNames;
import util.annotations.Label;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Visible;
import util.misc.ThreadSupport;

import java.awt.Color;

@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({
	"patronList",
	"chefList",
	"buffer",
	"plateList",
	"otherPlateList",
	"bellsList",
	"queueBellList"
})
@EditablePropertyNames({
})
public class AProducerConsumerScene2 implements ProducerConsumerScene2 {
	
	//Avatar offsets inside scene
	int[] chefXValues = {120,-50,-50,120};
	int[] chefYValues = {-50,35,210,320};
	int[] patronXValues = {650,850,850,650};
	int[] patronYValues = {-50,35,220,320};
	int[] bellXValues = {680,880,880,680};
	int[] bellYValues = {75,160,345,445};
	int INIT_HEAD_Y = 60;
	int INIT_HEAD_X = 163;
	int INIT_HEAD_HEIGHT = 90;
	int INIT_HEAD_WIDTH = 80;
	int PLATE_OFFSET_X = 30;
	int PLATE_OFFSET_Y = 10;
	int PAUSE = 5;
	
	//Booleans that help with the functionality of the below methods
	boolean INIT_COOK = true;
	boolean full = false;
	int fullPlateOffset = -5;
	
	//Defining the chef and patron images
	String[] chefImages = {"images/0.png","images/1.png","images/2.png","images/3.png"};
	String[] patronImages = {"images/4.png", "images/5.png", "images/6.png", "images/7.png"};
	
	//Buffer arrays
	int[] bufferXValues = {625, 680, 680, 620, 535, 460, 460, 535};
	int[] bufferYValues = {200, 275, 365, 425, 425, 365, 275, 200};
	boolean[] isFull = {false, false, false, false, false, false, false, false};
	
	//The properties of our class
	List<APatron> patronList;
	List<AChef> chefList;
	BoundedBuffer buffer = new ABoundedBuffer();
	
	//This list will keep a track of the plates that enter the buffer so that FIFO
	Queue<APlate> queuedList;
	
	OEShapeModel[] lineArray = {buffer.getLineTwo(), buffer.getLineThree(), buffer.getLineFour(), 
								buffer.getLineFive(), buffer.getLineSix(), buffer.getLineSeven(), 
								buffer.getLineEight(), buffer.getLineOne()};
	
	List<ABell> bellsList;
	Queue<ABell> queueBellList;
	int[] bellValues = {127, 212, 397, 497};
	Queue<Integer> bellIntegerList;
	
	ACookingPlateCommand cookingCommand;
	CookingPlateAnimator cookingAnimator;
	
	AServingPlateCommand servingCommand;
	ServingPlateAnimator servingAnimator;
	
	//The constructor sets the scene with one chef, patron, a buffer, and a plate (not visible)
	public AProducerConsumerScene2() {
		patronList = new ArrayList<APatron>();
		chefList = new ArrayList<AChef>();
		//buffer = new ABoundedBuffer();
		
		queuedList = new LinkedList<APlate>();
		bellsList = new ArrayList<ABell>();
		queueBellList = new LinkedList<ABell>();
		bellIntegerList = new LinkedList<Integer>();
		
		patronList.add(0, new APatron());
		OEShapeModel initPatronHead = new AnImageModel(patronImages[0]);
		initPatronHead.setX(INIT_HEAD_X);
		initPatronHead.setY(INIT_HEAD_Y);
		initPatronHead.setHeight(INIT_HEAD_HEIGHT);
		initPatronHead.setWidth(INIT_HEAD_WIDTH);
		patronList.get(0).patron.setHead(initPatronHead);
		patronList.get(0).move(patronXValues[0], patronYValues[0]);
		
		chefList.add(0, new AChef());
		OEShapeModel initChefHead = new AnImageModel(chefImages[0]);
		initChefHead.setX(INIT_HEAD_X);
		initChefHead.setY(INIT_HEAD_Y);
		initChefHead.setHeight(INIT_HEAD_HEIGHT);
		initChefHead.setWidth(INIT_HEAD_WIDTH);
		chefList.get(0).chef.setHead(initChefHead);
		chefList.get(0).move(chefXValues[0], chefYValues[0]);
		
		queuedList.add(new APlate());
		queuedList.peek().getPlate().setHeight(0);
		queuedList.peek().getPlate().setWidth(0);
		
		cookingAnimator = new ACookingPlateAnimator();
		servingAnimator = new AServingPlateAnimator();
		
		bellsList.add(new ABell());
		bellsList.get(0).getBell().setHeight(0);
		bellsList.get(0).getBell().setWidth(0);
		
		queueBellList.add(new ABell());
		queueBellList.peek().getBell().setHeight(0);
		queueBellList.peek().getBell().setWidth(0);
		
		bellIntegerList.add(0);
	}
	
	//Producer consumer methods
	
	//Init Scene sets the number of patrons and chefs in the scene
	@Label("Init Scene")
	public void initScene(int patronAmount, int chefAmount) {
		bellsList.clear();
		for (int i=0; i<patronAmount; i++) { 
			APatron patron = new APatron();
			patronList.add(i, patron);
			OEShapeModel newHead = new AnImageModel(patronImages[i]);
			patron.patron.setHead(newHead); 
			newHead.setX(INIT_HEAD_X); 
			newHead.setY(INIT_HEAD_Y);
			newHead.setHeight(INIT_HEAD_HEIGHT);
			newHead.setWidth(INIT_HEAD_WIDTH);
			patron.move(patronXValues[i], patronYValues[i]);
			
			bellsList.add(new ABell());
			bellsList.get(i).move(bellXValues[i], bellYValues[i]);
		}
		for (int i=0; i<chefAmount; i++) {
			AChef chef = new AChef();
			chefList.add(i, chef);
			OEShapeModel newHead = new AnImageModel(chefImages[i]);
			chef.chef.setHead(newHead);
			newHead.setX(INIT_HEAD_X); 
			newHead.setY(INIT_HEAD_Y);
			newHead.setHeight(INIT_HEAD_HEIGHT);
			newHead.setWidth(INIT_HEAD_WIDTH);
			chef.move(chefXValues[i], chefYValues[i]);
		}
	}
	
	//Once the head of an avatar is chosen, it makes the plate that they "cook" appear
	public void cook(OEShapeModel head) {
		if (INIT_COOK) {
			INIT_COOK=!INIT_COOK;
			queuedList.remove();
		}
		
		int headX = head.getCenterX();
		int headY = head.getCenterY();
		
		APlate newPlate = new APlate();
		newPlate.getPlate().setHeight(0);
		newPlate.getPlate().setWidth(0);
		
		if (full) {
			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y+fullPlateOffset);
			fullPlateOffset = fullPlateOffset - 5;
		} else {
			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y);
		}
		
		cookingCommand = new ACookingPlateCommand(cookingAnimator, newPlate, 40, 15);
		Thread thread = new Thread (cookingCommand);
		thread.start();
	}
	
	public void serve(APlate plate) {
		//Checks to see if the buffer is full. If it is, then can't serve.
		resetLineColors();
		if(checkIfFull()) {
			resetLineColors();
			return;
		}
		
		queuedList.add(plate);
		
		int workingPlatePlace = queuedList.size();
		FlexibleTextShape platePlace = new AStringModel(Integer.toString(workingPlatePlace));
		plate.setText(platePlace);
		
		changeLineColors(workingPlatePlace);
		servingCommand = new AServingPlateCommand(servingAnimator,plate,PAUSE, bufferXValues[workingPlatePlace], bufferYValues[workingPlatePlace]);
		Thread thread = new Thread(servingCommand);
		thread.start();
		isFull[workingPlatePlace] = true;
	}
	
	public void order(OEShapeModel bell) {
		if(checkIfFull()) {
			resetLineColors();
			resetBuffer();
		}
		bellIntegerList.add(0);
		int bellPlace = findBell(bell.getCenterY());
		bellsList.get(bellPlace).getText().setText(String.valueOf(bellIntegerList.size()-1));
		
		int platePlace = findFirstAvailablePlate();
		//servingCommand = new AServingPlateCommand(servingAnimator,plateList.get(platePlace),PAUSE, bell.getCenterX() , bell.getCenterY());
		Thread thread = new Thread(servingCommand);
		thread.start();
		
		//cookingCommand = new ACookingPlateCommand(cookingAnimator, plateList.get(0), 0, 15);
		Thread eatingThread = new Thread (cookingCommand);
		eatingThread.start();
		//plateList.get(0).getText().setText("");
	}
	
	public void eat() {
		//plateList.remove(0);
	}
	
	@Override
	@Visible(false)
	public int findBell(int centerY) {
		for(int i=0; i<bellsList.size();i++) {
			if(bellsList.get(i).getBell().getCenterY() == centerY) {
				return i;
			}
		}
		return 0;
	}
	
	@Override
	@Visible(false)
	public int findFirstAvailablePlate() {
		for (int i=0; i<isFull.length;i++) {
			if(isFull[i] == true) {
				return i;
			}
		}
		return 0;
	}
	
	@Override
	@Visible(false)
	public void resetBuffer() {
		
		for (int i=0; i<isFull.length;i++) {
			isFull[i] = false;
		}
	}
	
	@Override
	@Visible(false)
	public int findPatron(OEShapeModel patronHead) {
		return 0;
	}
	
	@Override
	@Visible(false)
	public boolean checkIfFull() {
		for (int i=0; i<isFull.length;i++) {
			if (isFull[i] == false) {
				full = false;
				return full;
			}
		}
		full = true;
		return full;
	}
	
	@Override
	@Visible(false)
	public void changeLineColors(int workingPlatePlace) {
		if(workingPlatePlace == lineArray.length-1) {
			lineArray[workingPlatePlace].setColor(Color.GREEN);
			lineArray[0].setColor(Color.GREEN);
		} else {
			lineArray[workingPlatePlace].setColor(Color.GREEN);
			lineArray[workingPlatePlace+1].setColor(Color.GREEN);
		}
	}
	
	
	@Override
	@Visible(false)
	public void resetLineColors() {
		for (int i=0; i<lineArray.length; i++) {
			lineArray[i].setColor(Color.WHITE);
		}
	}
	
	//Getters for properties of the scene
	@Override
	public List<AChef> getChefList() {
		return chefList;
	}
	
	@Override
	public List<APatron> getPatronList() {
		return patronList;
	}
	
	@Override
	public BoundedBuffer getBuffer() {
		return buffer;
	}
	
	@Override
	public List<APlate> getPlateList() {
		return plateList;
	}	
	
	@Override
	@util.annotations.Visible(false)
	public Queue<APlate> getQueuedList() {
		return queuedList;
	}
	
	@Override
	public List<ABell> getBellsList() {
		return bellsList;
	}
	
	@Override
	@Visible(false)
	public Queue<ABell> getQueueBellList() {
		return queueBellList;
	}
}
]]></snapshot>
  </Command>
  <DocumentChange __id="1579" _type="Insert" date="Sat Feb 25 10:57:35 EST 2023" docASTNodeCount="1579" docActiveCodeLength="9289" docExpressionCount="1078" docLength="10253" length="84" offset="10164" repeat="4" starttimestamp="1677312753280" timestamp="27902243" timestamp2="27902262">
    <text><![CDATA[

	@Override
	public void serve() {
		// TODO Auto-generated method stub
		
	}]]></text>
  </DocumentChange>
  <Command __id="1586" _type="PauseCommand" date="Sat Feb 25 10:57:48 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="27915496">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[2015]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1587" _type="MoveCaretCommand" caretOffset="164" date="Sat Feb 25 10:57:49 EST 2023" docOffset="269" starttimestamp="1677312753280" timestamp="27915742" />
  <Command __id="1589" _type="PauseCommand" date="Sat Feb 25 10:57:51 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="27917758">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2016]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1588" _type="MoveCaretCommand" caretOffset="401" date="Sat Feb 25 10:57:51 EST 2023" docOffset="506" starttimestamp="1677312753280" timestamp="27917758" />
  <Command __id="1585" _type="DiffBasedFileOpenCommand" date="Sat Feb 25 10:57:48 EST 2023" docASTNodeCount="147" docActiveCodeLength="865" docExpressionCount="64" docLength="865" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="27915496">
    <filePath><![CDATA[C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\graphics\ProducerConsumerScene2.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package graphics;¶¶import java.util.List;¶import java.util.Queue;¶¶import bus.uigen.shapes.AnImageModel;¶import bus.uigen.shapes.OEShapeModel;¶¶public interface ProducerConsumerScene2 {¶	public List<AChef> getChefList();¶	public List<APatron> getPatronList();¶	"), Diff(DELETE,"public List<APlate> getPlateList();¶	"), Diff(EQUAL,"public Queue<APlate> get"), Diff(DELETE,"OtherPlate"), Diff(INSERT,"Queued"), Diff(EQUAL,"List();¶	public BoundedBuffer getBuffer();¶	public Queue<ABell> getQueueBellList();¶	public void initScene(int patronAmount, int chefAmount);¶	public void cook(OEShapeModel head);¶	public void serve();¶	public boolean checkIfFull();¶	public void changeLineColors(int workingPlatePlace);¶	public void resetLineColors();¶	public int findPatron(OEShapeModel patronHead);¶	public List<ABell> getBellsList();¶	public int findBell(int centerY);¶	public void order(OEShapeModel bell);¶	public int findFirstAvailablePlate();¶	public void resetBuffer();¶}¶")]]]></diff>
    <snapshot><![CDATA[package graphics;

import java.util.List;
import java.util.Queue;

import bus.uigen.shapes.AnImageModel;
import bus.uigen.shapes.OEShapeModel;

public interface ProducerConsumerScene2 {
	public List<AChef> getChefList();
	public List<APatron> getPatronList();
	public Queue<APlate> getQueuedList();
	public BoundedBuffer getBuffer();
	public Queue<ABell> getQueueBellList();
	public void initScene(int patronAmount, int chefAmount);
	public void cook(OEShapeModel head);
	public void serve();
	public boolean checkIfFull();
	public void changeLineColors(int workingPlatePlace);
	public void resetLineColors();
	public int findPatron(OEShapeModel patronHead);
	public List<ABell> getBellsList();
	public int findBell(int centerY);
	public void order(OEShapeModel bell);
	public int findFirstAvailablePlate();
	public void resetBuffer();
}
]]></snapshot>
  </Command>
  <Command __id="1591" _type="PauseCommand" date="Sat Feb 25 10:57:52 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27918842">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1084]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <DocumentChange __id="1590" _type="Insert" date="Sat Feb 25 10:57:52 EST 2023" docASTNodeCount="148" docActiveCodeLength="868" docExpressionCount="64" docLength="868" length="3" offset="506" repeat="3" starttimestamp="1677312753280" timestamp="27918842" timestamp2="27919403">
    <text><![CDATA[APL]]></text>
  </DocumentChange>
  <Command __id="1592" _type="InsertStringCommand" date="Sat Feb 25 10:57:52 EST 2023" starttimestamp="1677312753280" timestamp="27918875" timestamp2="27918875">
    <data><![CDATA[A]]></data>
  </Command>
  <Command __id="1594" _type="InsertStringCommand" date="Sat Feb 25 10:57:52 EST 2023" starttimestamp="1677312753280" timestamp="27919189" timestamp2="27919189">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="1596" _type="InsertStringCommand" date="Sat Feb 25 10:57:52 EST 2023" starttimestamp="1677312753280" timestamp="27919433" timestamp2="27919433">
    <data><![CDATA[L]]></data>
  </Command>
  <DocumentChange __id="1597" _type="Delete" date="Sat Feb 25 10:57:53 EST 2023" docASTNodeCount="148" docActiveCodeLength="867" docExpressionCount="64" docLength="867" endLine="16" length="1" offset="508" startLine="16" starttimestamp="1677312753280" timestamp="27919849">
    <text><![CDATA[L]]></text>
  </DocumentChange>
  <Command __id="1598" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:57:53 EST 2023" starttimestamp="1677312753280" timestamp="27919875" />
  <DocumentChange __id="1599" _type="Insert" date="Sat Feb 25 10:57:53 EST 2023" docASTNodeCount="148" docActiveCodeLength="872" docExpressionCount="64" docLength="872" length="5" offset="508" repeat="5" starttimestamp="1677312753280" timestamp="27920029" timestamp2="27920596">
    <text><![CDATA[latep]]></text>
  </DocumentChange>
  <Command __id="1600" _type="InsertStringCommand" date="Sat Feb 25 10:57:53 EST 2023" starttimestamp="1677312753280" timestamp="27920059" timestamp2="27920059">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="1602" _type="InsertStringCommand" date="Sat Feb 25 10:57:53 EST 2023" starttimestamp="1677312753280" timestamp="27920138" timestamp2="27920138">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1604" _type="InsertStringCommand" date="Sat Feb 25 10:57:53 EST 2023" starttimestamp="1677312753280" timestamp="27920249" timestamp2="27920249">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1606" _type="InsertStringCommand" date="Sat Feb 25 10:57:53 EST 2023" starttimestamp="1677312753280" timestamp="27920347" timestamp2="27920347">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1608" _type="InsertStringCommand" date="Sat Feb 25 10:57:53 EST 2023" starttimestamp="1677312753280" timestamp="27920622" timestamp2="27920622">
    <data><![CDATA[p]]></data>
  </Command>
  <DocumentChange __id="1609" _type="Delete" date="Sat Feb 25 10:57:54 EST 2023" docASTNodeCount="148" docActiveCodeLength="871" docExpressionCount="64" docLength="871" endLine="16" length="1" offset="512" startLine="16" starttimestamp="1677312753280" timestamp="27920944">
    <text><![CDATA[p]]></text>
  </DocumentChange>
  <Command __id="1610" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:57:54 EST 2023" starttimestamp="1677312753280" timestamp="27920968" />
  <Command __id="1612" _type="InsertStringCommand" date="Sat Feb 25 10:57:54 EST 2023" starttimestamp="1677312753280" timestamp="27921064" timestamp2="27921064">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1614" _type="InsertStringCommand" date="Sat Feb 25 10:57:54 EST 2023" starttimestamp="1677312753280" timestamp="27921166" timestamp2="27921166">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="1616" _type="InsertStringCommand" date="Sat Feb 25 10:57:54 EST 2023" starttimestamp="1677312753280" timestamp="27921348" timestamp2="27921348">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="1618" _type="InsertStringCommand" date="Sat Feb 25 10:57:54 EST 2023" starttimestamp="1677312753280" timestamp="27921438" timestamp2="27921438">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1620" _type="InsertStringCommand" date="Sat Feb 25 10:57:54 EST 2023" starttimestamp="1677312753280" timestamp="27921571" timestamp2="27921571">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1622" _type="InsertStringCommand" date="Sat Feb 25 10:57:54 EST 2023" starttimestamp="1677312753280" timestamp="27921659" timestamp2="27921659">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1624" _type="PauseCommand" date="Sat Feb 25 10:57:56 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27923102">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1443]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1623" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sat Feb 25 10:57:56 EST 2023" starttimestamp="1677312753280" timestamp="27923102" />
  <Command __id="1625" _type="EclipseCommand" commandID="" date="Sat Feb 25 10:57:56 EST 2023" starttimestamp="1677312753280" timestamp="27923222" />
  <Command __id="1626" _type="EclipseCommand" commandID="" date="Sat Feb 25 10:57:56 EST 2023" starttimestamp="1677312753280" timestamp="27923334" />
  <DocumentChange __id="1611" _type="Insert" date="Sat Feb 25 10:57:54 EST 2023" docASTNodeCount="151" docActiveCodeLength="877" docExpressionCount="66" docLength="877" length="6" offset="512" repeat="6" starttimestamp="1677312753280" timestamp="27921035" timestamp2="27921620">
    <text><![CDATA[ plate]]></text>
  </DocumentChange>
  <Command __id="1628" _type="PauseCommand" date="Sat Feb 25 10:57:58 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27924927">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1593]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1627" _type="DiffBasedFileOpenCommand" date="Sat Feb 25 10:57:58 EST 2023" docASTNodeCount="1579" docActiveCodeLength="9289" docExpressionCount="1078" docLength="10253" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="27924927">
    <filePath><![CDATA[C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\graphics\AProducerConsumerScene2.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package graphics;¶¶import java.util.ArrayList;¶import java.util.LinkedList;¶import java.util.List;¶import java.util.Queue;¶¶import animations.ACookingPlateAnimator;¶import animations.ACookingPlateCommand;¶import animations.AServingPlateAnimator;¶import animations.AServingPlateCommand;¶import animations.CookingPlateAnimator;¶import animations.ServingPlateAnimator;¶import bus.uigen.OEFrame;¶import bus.uigen.ObjectEditor;¶import bus.uigen.shapes.ALineModel;¶import bus.uigen.shapes.AStringModel;¶import bus.uigen.shapes.AnImageModel;¶import bus.uigen.shapes.OEShapeModel;¶import shapes.FlexibleTextShape;¶import util.annotations.EditablePropertyNames;¶import util.annotations.Label;¶import util.annotations.PropertyNames;¶import util.annotations.StructurePattern;¶import util.annotations.StructurePatternNames;¶import util.annotations.Visible;¶import util.misc.ThreadSupport;¶¶import java.awt.Color;¶¶@StructurePattern(StructurePatternNames.BEAN_PATTERN)¶@PropertyNames({¶	"patronList",¶	"chefList",¶	"buffer",¶	"plateList",¶	"otherPlateList",¶	"bellsList",¶	"queueBellList"¶})¶@EditablePropertyNames({¶})¶public class AProducerConsumerScene2 implements ProducerConsumerScene2 {¶	¶	//Avatar offsets inside scene¶	int[] chefXValues = {120,-50,-50,120};¶	int[] chefYValues = {-50,35,210,320};¶	int[] patronXValues = {650,850,850,650};¶	int[] patronYValues = {-50,35,220,320};¶	int[] bellXValues = {680,880,880,680};¶	int[] bellYValues = {75,160,345,445};¶	int INIT_HEAD_Y = 60;¶	int INIT_HEAD_X = 163;¶	int INIT_HEAD_HEIGHT = 90;¶	int INIT_HEAD_WIDTH = 80;¶	int PLATE_OFFSET_X = 30;¶	int PLATE_OFFSET_Y = 10;¶	int PAUSE = 5;¶	¶	//Booleans that help with the functionality of the below methods¶	boolean INIT_COOK = true;¶	boolean full = false;¶	int fullPlateOffset = -5;¶	¶	//Defining the chef and patron images¶	String[] chefImages = {"images/0.png","images/1.png","images/2.png","images/3.png"};¶	String[] patronImages = {"images/4.png", "images/5.png", "images/6.png", "images/7.png"};¶	¶	//Buffer arrays¶	int[] bufferXValues = {625, 680, 680, 620, 535, 460, 460, 535};¶	int[] bufferYValues = {200, 275, 365, 425, 425, 365, 275, 200};¶	boolean[] isFull = {false, false, false, false, false, false, false, false};¶	¶	//The properties of our class¶	List<APatron> patronList;¶	List<AChef> chefList;¶	BoundedBuffer buffer = new ABoundedBuffer();¶	¶	//This list will keep a track of the plates that enter the buffer so that FIFO¶	Queue<APlate> queuedList;¶	¶	OEShapeModel[] lineArray = {buffer.getLineTwo(), buffer.getLineThree(), buffer.getLineFour(), ¶								buffer.getLineFive(), buffer.getLineSix(), buffer.getLineSeven(), ¶								buffer.getLineEight(), buffer.getLineOne()};¶	¶	List<ABell> bellsList;¶	Queue<ABell> queueBellList;¶	int[] bellValues = {127, 212, 397, 497};¶	Queue<Integer> bellIntegerList;¶	¶	ACookingPlateCommand cookingCommand;¶	CookingPlateAnimator cookingAnimator;¶	¶	AServingPlateCommand servingCommand;¶	ServingPlateAnimator servingAnimator;¶	¶	//The constructor sets the scene with one chef, patron, a buffer, and a plate (not visible)¶	public AProducerConsumerScene2() {¶		patronList = new ArrayList<APatron>();¶		chefList = new ArrayList<AChef>();¶		//buffer = new ABoundedBuffer();¶		¶		queuedList = new LinkedList<APlate>();¶		bellsList = new ArrayList<ABell>();¶		queueBellList = new LinkedList<ABell>();¶		bellIntegerList = new LinkedList<Integer>();¶		¶		patronList.add(0, new APatron());¶		OEShapeModel initPatronHead = new AnImageModel(patronImages[0]);¶		initPatronHead.setX(INIT_HEAD_X);¶		initPatronHead.setY(INIT_HEAD_Y);¶		initPatronHead.setHeight(INIT_HEAD_HEIGHT);¶		initPatronHead.setWidth(INIT_HEAD_WIDTH);¶		patronList.get(0).patron.setHead(initPatronHead);¶		patronList.get(0).move(patronXValues[0], patronYValues[0]);¶		¶		chefList.add(0, new AChef());¶		OEShapeModel initChefHead = new AnImageModel(chefImages[0]);¶		initChefHead.setX(INIT_HEAD_X);¶		initChefHead.setY(INIT_HEAD_Y);¶		initChefHead.setHeight(INIT_HEAD_HEIGHT);¶		initChefHead.setWidth(INIT_HEAD_WIDTH);¶		chefList.get(0).chef.setHead(initChefHead);¶		chefList.get(0).move(chefXValues[0], chefYValues[0]);¶		¶		queuedList.add(new APlate());¶		queuedList.peek().getPlate().setHeight(0);¶		queuedList.peek().getPlate().setWidth(0);¶		¶		cookingAnimator = new ACookingPlateAnimator();¶		servingAnimator = new AServingPlateAnimator();¶		¶		bellsList.add(new ABell());¶		bellsList.get(0).getBell().setHeight(0);¶		bellsList.get(0).getBell().setWidth(0);¶		¶		queueBellList.add(new ABell());¶		queueBellList.peek().getBell().setHeight(0);¶		queueBellList.peek().getBell().setWidth(0);¶		¶		bellIntegerList.add(0);¶	}¶	¶	//Producer consumer methods¶	¶	//Init Scene sets the number of patrons and chefs in the scene¶	@Label("Init Scene")¶	public void initScene(int patronAmount, int chefAmount) {¶		bellsList.clear();¶		for (int i=0; i<patronAmount; i++) { ¶			APatron patron = new APatron();¶			patronList.add(i, patron);¶			OEShapeModel newHead = new AnImageModel(patronImages[i]);¶			patron.patron.setHead(newHead); ¶			newHead.setX(INIT_HEAD_X); ¶			newHead.setY(INIT_HEAD_Y);¶			newHead.setHeight(INIT_HEAD_HEIGHT);¶			newHead.setWidth(INIT_HEAD_WIDTH);¶			patron.move(patronXValues[i], patronYValues[i]);¶			¶			bellsList.add(new ABell());¶			bellsList.get(i).move(bellXValues[i], bellYValues[i]);¶		}¶		for (int i=0; i<chefAmount; i++) {¶			AChef chef = new AChef();¶			chefList.add(i, chef);¶			OEShapeModel newHead = new AnImageModel(chefImages[i]);¶			chef.chef.setHead(newHead);¶			newHead.setX(INIT_HEAD_X); ¶			newHead.setY(INIT_HEAD_Y);¶			newHead.setHeight(INIT_HEAD_HEIGHT);¶			newHead.setWidth(INIT_HEAD_WIDTH);¶			chef.move(chefXValues[i], chefYValues[i]);¶		}¶	}¶	¶	//Once the head of an avatar is chosen, it makes the plate that they "cook" appear¶	public void cook(OEShapeModel head) {¶		if (INIT_COOK) {¶			INIT_COOK=!INIT_COOK;¶			queuedList.remove();¶		}¶		¶		int headX = head.getCenterX();¶		int headY = head.getCenterY();¶		¶		APlate newPlate = new APlate();¶		newPlate.getPlate().setHeight(0);¶		newPlate.getPlate().setWidth(0);¶		¶		if (full) {¶			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y+fullPlateOffset);¶			fullPlateOffset = fullPlateOffset - 5;¶		} else {¶			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y);¶		}¶		¶		cookingCommand = new ACookingPlateCommand(cookingAnimator, newPlate, 40, 15);¶		Thread thread = new Thread (cookingCommand);¶		thread.start();¶	}¶	¶	public void serve(APlate plate) {¶		//Checks to see if the buffer is full. If it is, then can't serve.¶		resetLineColors();¶		if(checkIfFull()) {¶			resetLineColors();¶			return;¶		}¶		¶		queuedList.add(plate);¶		¶		int workingPlatePlace = queuedList.size();¶		FlexibleTextShape platePlace = new AStringModel(Integer.toString(workingPlatePlace));¶		plate.setText(platePlace);¶		¶		changeLineColors(workingPlatePlace);¶		servingCommand = new AServingPlateCommand(servingAnimator,plate,PAUSE, bufferXValues[workingPlatePlace], bufferYValues[workingPlatePlace]);¶		Thread thread = new Thread(servingCommand);¶		thread.start();¶		isFull[workingPlatePlace] = true;¶	}¶	¶	public void order(OEShapeModel bell) {¶		if(checkIfFull()) {¶			resetLineColors();¶			resetBuffer();¶		}¶		bellIntegerList.add(0);¶		int bellPlace = findBell(bell.getCenterY());¶		bellsList.get(bellPlace).getText().setText(String.valueOf(bellIntegerList.size()-1));¶		¶		int platePlace = findFirstAvailablePlate();¶		//servingCommand = new AServingPlateCommand(servingAnimator,plateList.get(platePlace),PAUSE, bell.getCenterX() , bell.getCenterY());¶		Thread thread = new Thread(servingCommand);¶		thread.start();¶		¶		//cookingCommand = new ACookingPlateCommand(cookingAnimator, plateList.get(0), 0, 15);¶		Thread eatingThread = new Thread (cookingCommand);¶		eatingThread.start();¶		//plateList.get(0).getText().setText("");¶	}¶	¶	public void eat() {¶		//plateList.remove(0);¶	}¶	¶	@Override¶	@Visible(false)¶	public int findBell(int centerY) {¶		for(int i=0; i<bellsList.size();i++) {¶			if(bellsList.get(i).getBell().getCenterY() == centerY) {¶				return i;¶			}¶		}¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public int findFirstAvailablePlate() {¶		for (int i=0; i<isFull.length;i++) {¶			if(isFull[i] == true) {¶				return i;¶			}¶		}¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public void resetBuffer() {¶		¶		for (int i=0; i<isFull.length;i++) {¶			isFull[i] = false;¶		}¶	}¶	¶	@Override¶	@Visible(false)¶	public int findPatron(OEShapeModel patronHead) {¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public boolean checkIfFull() {¶		for (int i=0; i<isFull.length;i++) {¶			if (isFull[i] == false) {¶				full = false;¶				return full;¶			}¶		}¶		full = true;¶		return full;¶	}¶	¶	@Override¶	@Visible(false)¶	public void changeLineColors(int workingPlatePlace) {¶		if(workingPlatePlace == lineArray.length-1) {¶			lineArray[workingPlatePlace].setColor(Color.GREEN);¶			lineArray[0].setColor(Color.GREEN);¶		} else {¶			lineArray[workingPlatePlace].setColor(Color.GREEN);¶			lineArray[workingPlatePlace+1].setColor(Color.GREEN);¶		}¶	}¶	¶	¶	@Override¶	@Visible(false)¶	public void resetLineColors() {¶		for (int i=0; i<lineArray.length; i++) {¶			lineArray[i].setColor(Color.WHITE);¶		}¶	}¶	¶	//Getters for properties of the scene¶	@Override¶	public List<AChef> getChefList() {¶		return chefList;¶	}¶	¶	@Override¶	public List<APatron> getPatronList() {¶		return patronList;¶	}¶	¶	@Override¶	public BoundedBuffer getBuffer() {¶		return buffer;¶	}¶	¶	@Override¶	public List<APlate> getPlateList() {¶		return plateList;¶	}	¶	¶	@Override¶	@util.annotations.Visible(false)¶	public Queue<APlate> getQueuedList() {¶		return queuedList;¶	}¶	¶	@Override¶	public List<ABell> getBellsList() {¶		return bellsList;¶	}¶	¶	@Override¶	@Visible(false)¶	public Queue<ABell> getQueueBellList() {¶		return queueBellList;¶	}"), Diff(INSERT,"¶¶	@Override¶	public void serve() {¶		// TODO Auto-generated method stub¶		¶	}"), Diff(EQUAL,"¶}¶")]]]></diff>
    <snapshot><![CDATA[package graphics;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

import animations.ACookingPlateAnimator;
import animations.ACookingPlateCommand;
import animations.AServingPlateAnimator;
import animations.AServingPlateCommand;
import animations.CookingPlateAnimator;
import animations.ServingPlateAnimator;
import bus.uigen.OEFrame;
import bus.uigen.ObjectEditor;
import bus.uigen.shapes.ALineModel;
import bus.uigen.shapes.AStringModel;
import bus.uigen.shapes.AnImageModel;
import bus.uigen.shapes.OEShapeModel;
import shapes.FlexibleTextShape;
import util.annotations.EditablePropertyNames;
import util.annotations.Label;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Visible;
import util.misc.ThreadSupport;

import java.awt.Color;

@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({
	"patronList",
	"chefList",
	"buffer",
	"plateList",
	"otherPlateList",
	"bellsList",
	"queueBellList"
})
@EditablePropertyNames({
})
public class AProducerConsumerScene2 implements ProducerConsumerScene2 {
	
	//Avatar offsets inside scene
	int[] chefXValues = {120,-50,-50,120};
	int[] chefYValues = {-50,35,210,320};
	int[] patronXValues = {650,850,850,650};
	int[] patronYValues = {-50,35,220,320};
	int[] bellXValues = {680,880,880,680};
	int[] bellYValues = {75,160,345,445};
	int INIT_HEAD_Y = 60;
	int INIT_HEAD_X = 163;
	int INIT_HEAD_HEIGHT = 90;
	int INIT_HEAD_WIDTH = 80;
	int PLATE_OFFSET_X = 30;
	int PLATE_OFFSET_Y = 10;
	int PAUSE = 5;
	
	//Booleans that help with the functionality of the below methods
	boolean INIT_COOK = true;
	boolean full = false;
	int fullPlateOffset = -5;
	
	//Defining the chef and patron images
	String[] chefImages = {"images/0.png","images/1.png","images/2.png","images/3.png"};
	String[] patronImages = {"images/4.png", "images/5.png", "images/6.png", "images/7.png"};
	
	//Buffer arrays
	int[] bufferXValues = {625, 680, 680, 620, 535, 460, 460, 535};
	int[] bufferYValues = {200, 275, 365, 425, 425, 365, 275, 200};
	boolean[] isFull = {false, false, false, false, false, false, false, false};
	
	//The properties of our class
	List<APatron> patronList;
	List<AChef> chefList;
	BoundedBuffer buffer = new ABoundedBuffer();
	
	//This list will keep a track of the plates that enter the buffer so that FIFO
	Queue<APlate> queuedList;
	
	OEShapeModel[] lineArray = {buffer.getLineTwo(), buffer.getLineThree(), buffer.getLineFour(), 
								buffer.getLineFive(), buffer.getLineSix(), buffer.getLineSeven(), 
								buffer.getLineEight(), buffer.getLineOne()};
	
	List<ABell> bellsList;
	Queue<ABell> queueBellList;
	int[] bellValues = {127, 212, 397, 497};
	Queue<Integer> bellIntegerList;
	
	ACookingPlateCommand cookingCommand;
	CookingPlateAnimator cookingAnimator;
	
	AServingPlateCommand servingCommand;
	ServingPlateAnimator servingAnimator;
	
	//The constructor sets the scene with one chef, patron, a buffer, and a plate (not visible)
	public AProducerConsumerScene2() {
		patronList = new ArrayList<APatron>();
		chefList = new ArrayList<AChef>();
		//buffer = new ABoundedBuffer();
		
		queuedList = new LinkedList<APlate>();
		bellsList = new ArrayList<ABell>();
		queueBellList = new LinkedList<ABell>();
		bellIntegerList = new LinkedList<Integer>();
		
		patronList.add(0, new APatron());
		OEShapeModel initPatronHead = new AnImageModel(patronImages[0]);
		initPatronHead.setX(INIT_HEAD_X);
		initPatronHead.setY(INIT_HEAD_Y);
		initPatronHead.setHeight(INIT_HEAD_HEIGHT);
		initPatronHead.setWidth(INIT_HEAD_WIDTH);
		patronList.get(0).patron.setHead(initPatronHead);
		patronList.get(0).move(patronXValues[0], patronYValues[0]);
		
		chefList.add(0, new AChef());
		OEShapeModel initChefHead = new AnImageModel(chefImages[0]);
		initChefHead.setX(INIT_HEAD_X);
		initChefHead.setY(INIT_HEAD_Y);
		initChefHead.setHeight(INIT_HEAD_HEIGHT);
		initChefHead.setWidth(INIT_HEAD_WIDTH);
		chefList.get(0).chef.setHead(initChefHead);
		chefList.get(0).move(chefXValues[0], chefYValues[0]);
		
		queuedList.add(new APlate());
		queuedList.peek().getPlate().setHeight(0);
		queuedList.peek().getPlate().setWidth(0);
		
		cookingAnimator = new ACookingPlateAnimator();
		servingAnimator = new AServingPlateAnimator();
		
		bellsList.add(new ABell());
		bellsList.get(0).getBell().setHeight(0);
		bellsList.get(0).getBell().setWidth(0);
		
		queueBellList.add(new ABell());
		queueBellList.peek().getBell().setHeight(0);
		queueBellList.peek().getBell().setWidth(0);
		
		bellIntegerList.add(0);
	}
	
	//Producer consumer methods
	
	//Init Scene sets the number of patrons and chefs in the scene
	@Label("Init Scene")
	public void initScene(int patronAmount, int chefAmount) {
		bellsList.clear();
		for (int i=0; i<patronAmount; i++) { 
			APatron patron = new APatron();
			patronList.add(i, patron);
			OEShapeModel newHead = new AnImageModel(patronImages[i]);
			patron.patron.setHead(newHead); 
			newHead.setX(INIT_HEAD_X); 
			newHead.setY(INIT_HEAD_Y);
			newHead.setHeight(INIT_HEAD_HEIGHT);
			newHead.setWidth(INIT_HEAD_WIDTH);
			patron.move(patronXValues[i], patronYValues[i]);
			
			bellsList.add(new ABell());
			bellsList.get(i).move(bellXValues[i], bellYValues[i]);
		}
		for (int i=0; i<chefAmount; i++) {
			AChef chef = new AChef();
			chefList.add(i, chef);
			OEShapeModel newHead = new AnImageModel(chefImages[i]);
			chef.chef.setHead(newHead);
			newHead.setX(INIT_HEAD_X); 
			newHead.setY(INIT_HEAD_Y);
			newHead.setHeight(INIT_HEAD_HEIGHT);
			newHead.setWidth(INIT_HEAD_WIDTH);
			chef.move(chefXValues[i], chefYValues[i]);
		}
	}
	
	//Once the head of an avatar is chosen, it makes the plate that they "cook" appear
	public void cook(OEShapeModel head) {
		if (INIT_COOK) {
			INIT_COOK=!INIT_COOK;
			queuedList.remove();
		}
		
		int headX = head.getCenterX();
		int headY = head.getCenterY();
		
		APlate newPlate = new APlate();
		newPlate.getPlate().setHeight(0);
		newPlate.getPlate().setWidth(0);
		
		if (full) {
			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y+fullPlateOffset);
			fullPlateOffset = fullPlateOffset - 5;
		} else {
			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y);
		}
		
		cookingCommand = new ACookingPlateCommand(cookingAnimator, newPlate, 40, 15);
		Thread thread = new Thread (cookingCommand);
		thread.start();
	}
	
	public void serve(APlate plate) {
		//Checks to see if the buffer is full. If it is, then can't serve.
		resetLineColors();
		if(checkIfFull()) {
			resetLineColors();
			return;
		}
		
		queuedList.add(plate);
		
		int workingPlatePlace = queuedList.size();
		FlexibleTextShape platePlace = new AStringModel(Integer.toString(workingPlatePlace));
		plate.setText(platePlace);
		
		changeLineColors(workingPlatePlace);
		servingCommand = new AServingPlateCommand(servingAnimator,plate,PAUSE, bufferXValues[workingPlatePlace], bufferYValues[workingPlatePlace]);
		Thread thread = new Thread(servingCommand);
		thread.start();
		isFull[workingPlatePlace] = true;
	}
	
	public void order(OEShapeModel bell) {
		if(checkIfFull()) {
			resetLineColors();
			resetBuffer();
		}
		bellIntegerList.add(0);
		int bellPlace = findBell(bell.getCenterY());
		bellsList.get(bellPlace).getText().setText(String.valueOf(bellIntegerList.size()-1));
		
		int platePlace = findFirstAvailablePlate();
		//servingCommand = new AServingPlateCommand(servingAnimator,plateList.get(platePlace),PAUSE, bell.getCenterX() , bell.getCenterY());
		Thread thread = new Thread(servingCommand);
		thread.start();
		
		//cookingCommand = new ACookingPlateCommand(cookingAnimator, plateList.get(0), 0, 15);
		Thread eatingThread = new Thread (cookingCommand);
		eatingThread.start();
		//plateList.get(0).getText().setText("");
	}
	
	public void eat() {
		//plateList.remove(0);
	}
	
	@Override
	@Visible(false)
	public int findBell(int centerY) {
		for(int i=0; i<bellsList.size();i++) {
			if(bellsList.get(i).getBell().getCenterY() == centerY) {
				return i;
			}
		}
		return 0;
	}
	
	@Override
	@Visible(false)
	public int findFirstAvailablePlate() {
		for (int i=0; i<isFull.length;i++) {
			if(isFull[i] == true) {
				return i;
			}
		}
		return 0;
	}
	
	@Override
	@Visible(false)
	public void resetBuffer() {
		
		for (int i=0; i<isFull.length;i++) {
			isFull[i] = false;
		}
	}
	
	@Override
	@Visible(false)
	public int findPatron(OEShapeModel patronHead) {
		return 0;
	}
	
	@Override
	@Visible(false)
	public boolean checkIfFull() {
		for (int i=0; i<isFull.length;i++) {
			if (isFull[i] == false) {
				full = false;
				return full;
			}
		}
		full = true;
		return full;
	}
	
	@Override
	@Visible(false)
	public void changeLineColors(int workingPlatePlace) {
		if(workingPlatePlace == lineArray.length-1) {
			lineArray[workingPlatePlace].setColor(Color.GREEN);
			lineArray[0].setColor(Color.GREEN);
		} else {
			lineArray[workingPlatePlace].setColor(Color.GREEN);
			lineArray[workingPlatePlace+1].setColor(Color.GREEN);
		}
	}
	
	
	@Override
	@Visible(false)
	public void resetLineColors() {
		for (int i=0; i<lineArray.length; i++) {
			lineArray[i].setColor(Color.WHITE);
		}
	}
	
	//Getters for properties of the scene
	@Override
	public List<AChef> getChefList() {
		return chefList;
	}
	
	@Override
	public List<APatron> getPatronList() {
		return patronList;
	}
	
	@Override
	public BoundedBuffer getBuffer() {
		return buffer;
	}
	
	@Override
	public List<APlate> getPlateList() {
		return plateList;
	}	
	
	@Override
	@util.annotations.Visible(false)
	public Queue<APlate> getQueuedList() {
		return queuedList;
	}
	
	@Override
	public List<ABell> getBellsList() {
		return bellsList;
	}
	
	@Override
	@Visible(false)
	public Queue<ABell> getQueueBellList() {
		return queueBellList;
	}

	@Override
	public void serve() {
		// TODO Auto-generated method stub
		
	}
}
]]></snapshot>
  </Command>
  <Command __id="1629" _type="SelectTextCommand" caretOffset="9288" date="Sat Feb 25 10:57:58 EST 2023" end="9368" start="9288" starttimestamp="1677312753280" timestamp="27925091" />
  <Command __id="1631" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:57:59 EST 2023" starttimestamp="1677312753280" timestamp="27925930" />
  <Command __id="1633" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:57:59 EST 2023" starttimestamp="1677312753280" timestamp="27926270" />
  <Command __id="1635" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:58:00 EST 2023" starttimestamp="1677312753280" timestamp="27926825" />
  <Command __id="1636" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sat Feb 25 10:58:01 EST 2023" starttimestamp="1677312753280" timestamp="27927787" />
  <Command __id="1637" _type="EclipseCommand" commandID="" date="Sat Feb 25 10:58:01 EST 2023" starttimestamp="1677312753280" timestamp="27927868" />
  <Command __id="1638" _type="EclipseCommand" commandID="" date="Sat Feb 25 10:58:01 EST 2023" starttimestamp="1677312753280" timestamp="27927930" />
  <Command __id="1640" _type="PauseCommand" date="Sat Feb 25 10:58:04 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="27931235">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3305]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1639" _type="SelectTextCommand" caretOffset="8909" date="Sat Feb 25 10:58:04 EST 2023" end="8984" start="8909" starttimestamp="1677312753280" timestamp="27931235" />
  <Command __id="1642" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:58:04 EST 2023" starttimestamp="1677312753280" timestamp="27931620" />
  <Command __id="1644" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:58:05 EST 2023" starttimestamp="1677312753280" timestamp="27931983" />
  <Command __id="1646" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:58:05 EST 2023" starttimestamp="1677312753280" timestamp="27932626" />
  <Command __id="1648" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:58:06 EST 2023" starttimestamp="1677312753280" timestamp="27933031" />
  <Command __id="1650" _type="PauseCommand" date="Sat Feb 25 10:58:07 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27934651">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1620]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1649" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sat Feb 25 10:58:07 EST 2023" starttimestamp="1677312753280" timestamp="27934651" />
  <Command __id="1651" _type="EclipseCommand" commandID="" date="Sat Feb 25 10:58:08 EST 2023" starttimestamp="1677312753280" timestamp="27934720" />
  <Command __id="1652" _type="EclipseCommand" commandID="" date="Sat Feb 25 10:58:08 EST 2023" starttimestamp="1677312753280" timestamp="27934824" />
  <Command __id="1654" _type="PauseCommand" date="Sat Feb 25 10:58:25 EST 2023" range="10s-20s" starttimestamp="1677312753280" timestamp="27951893">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[17069]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1653" _type="MoveCaretCommand" caretOffset="175" date="Sat Feb 25 10:58:25 EST 2023" docOffset="1055" starttimestamp="1677312753280" timestamp="27951893" />
  <Command __id="1655" _type="SelectTextCommand" caretOffset="178" date="Sat Feb 25 10:58:25 EST 2023" end="178" start="169" starttimestamp="1677312753280" timestamp="27952030" />
  <Command __id="1656" _type="SelectTextCommand" caretOffset="182" date="Sat Feb 25 10:58:25 EST 2023" end="182" start="167" starttimestamp="1677312753280" timestamp="27952249" />
  <DocumentChange __id="1630" _type="Delete" date="Sat Feb 25 10:57:59 EST 2023" docASTNodeCount="1572" docActiveCodeLength="9239" docExpressionCount="1075" docLength="10169" endLine="360" length="84" offset="10164" repeat="3" startLine="354" starttimestamp="1677312753280" timestamp="27925885" timestamp2="27926799">
    <text><![CDATA[

	@Override
	public void serve() {
		// TODO Auto-generated method stub
		
	}]]></text>
  </DocumentChange>
  <DocumentChange __id="1641" _type="Delete" date="Sat Feb 25 10:58:04 EST 2023" docASTNodeCount="1559" docActiveCodeLength="9159" docExpressionCount="1069" docLength="10089" endLine="337" length="80" offset="9784" repeat="4" startLine="332" starttimestamp="1677312753280" timestamp="27931581" timestamp2="27932978">
    <text><![CDATA[
	
	@Override
	public List<APlate> getPlateList() {
		return plateList;
	}	]]></text>
  </DocumentChange>
  <Command __id="1658" _type="PauseCommand" date="Sat Feb 25 10:58:26 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27953312">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1063]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <DocumentChange __id="1657" _type="Delete" date="Sat Feb 25 10:58:26 EST 2023" docASTNodeCount="1558" docActiveCodeLength="9144" docExpressionCount="1068" docLength="10074" endLine="36" length="15" offset="1047" startLine="35" starttimestamp="1677312753280" timestamp="27953312">
    <text><![CDATA[	"plateList",
]]></text>
  </DocumentChange>
  <Command __id="1659" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 10:58:26 EST 2023" starttimestamp="1677312753280" timestamp="27953380" />
  <Command __id="1660" _type="MoveCaretCommand" caretOffset="175" date="Sat Feb 25 10:58:27 EST 2023" docOffset="1055" starttimestamp="1677312753280" timestamp="27954141" />
  <Command __id="1661" _type="SelectTextCommand" caretOffset="183" date="Sat Feb 25 10:58:27 EST 2023" end="183" start="169" starttimestamp="1677312753280" timestamp="27954317" />
  <DocumentChange __id="1662" _type="Replace" date="Sat Feb 25 10:58:28 EST 2023" docASTNodeCount="1558" docActiveCodeLength="9131" docExpressionCount="1068" docLength="10061" endLine="35" insertionLength="1" int_docASTNodeCount="1558" int_docActiveCodeLength="9130" int_docExpressionCount="1068" int_docLength="10060" length="14" offset="1049" startLine="35" starttimestamp="1677312753280" timestamp="27955091">
    <deletedText><![CDATA[otherPlateList]]></deletedText>
    <insertedText><![CDATA[q]]></insertedText>
  </DocumentChange>
  <Command __id="1663" _type="InsertStringCommand" date="Sat Feb 25 10:58:28 EST 2023" starttimestamp="1677312753280" timestamp="27955156" timestamp2="27955156">
    <data><![CDATA[q]]></data>
  </Command>
  <Command __id="1665" _type="InsertStringCommand" date="Sat Feb 25 10:58:28 EST 2023" starttimestamp="1677312753280" timestamp="27955326" timestamp2="27955326">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="1667" _type="InsertStringCommand" date="Sat Feb 25 10:58:29 EST 2023" starttimestamp="1677312753280" timestamp="27956245" timestamp2="27956245">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1669" _type="InsertStringCommand" date="Sat Feb 25 10:58:29 EST 2023" starttimestamp="1677312753280" timestamp="27956522" timestamp2="27956522">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="1671" _type="InsertStringCommand" date="Sat Feb 25 10:58:30 EST 2023" starttimestamp="1677312753280" timestamp="27956757" timestamp2="27956757">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1673" _type="InsertStringCommand" date="Sat Feb 25 10:58:30 EST 2023" starttimestamp="1677312753280" timestamp="27956924" timestamp2="27956924">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="1675" _type="InsertStringCommand" date="Sat Feb 25 10:58:30 EST 2023" starttimestamp="1677312753280" timestamp="27957194" timestamp2="27957194">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="1677" _type="InsertStringCommand" date="Sat Feb 25 10:58:30 EST 2023" starttimestamp="1677312753280" timestamp="27957430" timestamp2="27957430">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1679" _type="InsertStringCommand" date="Sat Feb 25 10:58:30 EST 2023" starttimestamp="1677312753280" timestamp="27957494" timestamp2="27957494">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="1681" _type="InsertStringCommand" date="Sat Feb 25 10:58:30 EST 2023" starttimestamp="1677312753280" timestamp="27957690" timestamp2="27957690">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1683" _type="PauseCommand" date="Sat Feb 25 10:58:32 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27959537">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1847]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1682" _type="MoveCaretCommand" caretOffset="214" date="Sat Feb 25 10:58:32 EST 2023" docOffset="1094" starttimestamp="1677312753280" timestamp="27959537" />
  <Command __id="1685" _type="PauseCommand" date="Sat Feb 25 10:58:33 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27960640">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1103]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1684" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sat Feb 25 10:58:33 EST 2023" starttimestamp="1677312753280" timestamp="27960640" />
  <Command __id="1686" _type="EclipseCommand" commandID="" date="Sat Feb 25 10:58:34 EST 2023" starttimestamp="1677312753280" timestamp="27960765" />
  <Command __id="1687" _type="EclipseCommand" commandID="" date="Sat Feb 25 10:58:34 EST 2023" starttimestamp="1677312753280" timestamp="27960891" />
  <DocumentChange __id="1664" _type="Insert" date="Sat Feb 25 10:58:28 EST 2023" docASTNodeCount="1558" docActiveCodeLength="9140" docExpressionCount="1068" docLength="10070" length="9" offset="1050" repeat="9" starttimestamp="1677312753280" timestamp="27955308" timestamp2="27957644">
    <text><![CDATA[ueuedList]]></text>
  </DocumentChange>
  <Command __id="1689" _type="PauseCommand" date="Sat Feb 25 10:58:40 EST 2023" range="5s-10s" starttimestamp="1677312753280" timestamp="27967482">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[6591]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1690" _type="MoveCaretCommand" caretOffset="730" date="Sat Feb 25 10:58:41 EST 2023" docOffset="951" starttimestamp="1677312753280" timestamp="27967872" />
  <Command __id="1692" _type="PauseCommand" date="Sat Feb 25 10:59:02 EST 2023" range="20s-30s" starttimestamp="1677312753280" timestamp="27989588">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[21716]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1691" _type="SelectTextCommand" caretOffset="99" date="Sat Feb 25 10:59:02 EST 2023" end="99" start="94" starttimestamp="1677312753280" timestamp="27989588" />
  <Command __id="1694" _type="PauseCommand" date="Sat Feb 25 10:59:05 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="27992432">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[2844]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1693" _type="MoveCaretCommand" caretOffset="93" date="Sat Feb 25 10:59:05 EST 2023" docOffset="314" starttimestamp="1677312753280" timestamp="27992432" />
  <Command __id="1688" _type="DiffBasedFileOpenCommand" date="Sat Feb 25 10:58:40 EST 2023" docASTNodeCount="213" docActiveCodeLength="1551" docExpressionCount="142" docLength="1653" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="27967482">
    <filePath><![CDATA[C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\main\Main.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package main;

import java.awt.Color;
import java.lang.reflect.Method;

import bus.uigen.OEFrame;
import bus.uigen.ObjectEditor;
import bus.uigen.attributes.AttributeNames;
import graphics.AProducerConsumerScene;
import graphics.ProducerConsumerScene;

public class Main {
	static ProducerConsumerScene scene = new AProducerConsumerScene();
	
	public static void main(String[] args) {
		animateScene();
	}
	
	public static void animateScene() {
		
		//Adding labels and buttons inside object editor screen
		ObjectEditor.confirmSelectedMethodParameters(false);
		ObjectEditor.setMethodAttribute(AProducerConsumerScene.class, "initScene", AttributeNames.TOOLBAR_METHOD, true);
		ObjectEditor.setMethodAttribute(AProducerConsumerScene.class, "initScene", AttributeNames.LABEL, "Init Scene");
		
		//Setting up init scene method in object editor
		try {
			Class[] initSceneArgTypes = {Integer.TYPE, Integer.TYPE};
			Object[] initSceneDefaultArgs = {4, 4};
			String[] initSceneArgNames = {"Number of Patrons", "Number of Chefs"};
			Method initSceneMethod = AProducerConsumerScene.class.getMethod("initScene", initSceneArgTypes);
			ObjectEditor.registerDefaultParameterValues(initSceneMethod, initSceneDefaultArgs);
			ObjectEditor.registerParameterNames(initSceneMethod, initSceneArgNames);
		} catch (NoSuchMethodException e) {
			e.printStackTrace();
		} catch (SecurityException e) {
			e.printStackTrace();
		}
		
		
		OEFrame editor = ObjectEditor.edit(scene);
		editor.getDrawComponent().setBackground(Color.DARK_GRAY);
		editor.getDrawPanel().setSize(450, 450);
		editor.showDrawPanel();
		
	}

}
]]></snapshot>
  </Command>
  <Command __id="1696" _type="PauseCommand" date="Sat Feb 25 10:59:07 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="27994663">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2231]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <DocumentChange __id="1695" _type="Insert" date="Sat Feb 25 10:59:07 EST 2023" docASTNodeCount="213" docActiveCodeLength="1552" docExpressionCount="142" docLength="1654" length="1" offset="314" starttimestamp="1677312753280" timestamp="27994663">
    <text><![CDATA[2]]></text>
  </DocumentChange>
  <Command __id="1697" _type="InsertStringCommand" date="Sat Feb 25 10:59:08 EST 2023" starttimestamp="1677312753280" timestamp="27994746" timestamp2="27994746">
    <data><![CDATA[2]]></data>
  </Command>
  <Command __id="1698" _type="MoveCaretCommand" caretOffset="128" date="Sat Feb 25 10:59:08 EST 2023" docOffset="349" starttimestamp="1677312753280" timestamp="27995117" />
  <Command __id="1699" _type="MoveCaretCommand" caretOffset="129" date="Sat Feb 25 10:59:09 EST 2023" docOffset="350" starttimestamp="1677312753280" timestamp="27995851" />
  <Command __id="1701" _type="InsertStringCommand" date="Sat Feb 25 10:59:09 EST 2023" starttimestamp="1677312753280" timestamp="27996157" timestamp2="27996157">
    <data><![CDATA[2]]></data>
  </Command>
  <Command __id="1703" _type="PauseCommand" date="Sat Feb 25 10:59:11 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="27998038">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1881]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1702" _type="MoveCaretCommand" caretOffset="179" date="Sat Feb 25 10:59:11 EST 2023" docOffset="400" starttimestamp="1677312753280" timestamp="27998038" />
  <Command __id="1705" _type="PauseCommand" date="Sat Feb 25 10:59:14 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="28000890">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2852]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1704" _type="ShellCommand" date="Sat Feb 25 10:59:14 EST 2023" starttimestamp="1677312753280" timestamp="28000890" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1706" _type="ShellCommand" date="Sat Feb 25 10:59:14 EST 2023" starttimestamp="1677312753280" timestamp="28001053" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1710" _type="PauseCommand" date="Sat Feb 25 10:59:17 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="28004066">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[2963]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1709" _type="ShellCommand" date="Sat Feb 25 10:59:17 EST 2023" starttimestamp="1677312753280" timestamp="28004066" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1711" _type="ShellCommand" date="Sat Feb 25 10:59:17 EST 2023" starttimestamp="1677312753280" timestamp="28004249" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1715" _type="PauseCommand" date="Sat Feb 25 10:59:19 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="28006281">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[1981]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1714" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sat Feb 25 10:59:19 EST 2023" starttimestamp="1677312753280" timestamp="28006281" />
  <Command __id="1716" _type="EclipseCommand" commandID="" date="Sat Feb 25 10:59:19 EST 2023" starttimestamp="1677312753280" timestamp="28006351" />
  <Command __id="1717" _type="EclipseCommand" commandID="" date="Sat Feb 25 10:59:19 EST 2023" starttimestamp="1677312753280" timestamp="28006443" />
  <Command __id="1719" _type="PauseCommand" date="Sat Feb 25 10:59:23 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="28009838">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3395]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1720" _type="ProgramExecutionEvent" className="/ProducersConsumersV3/src/main/Main.java" date="Sat Feb 25 10:59:26 EST 2023" kind="HitBreakPoint" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="28012988" type="Run" />
  <Command __id="1722" _type="RunCommand" className="/ProducersConsumersV3/src/main/Main.java" date="Sat Feb 25 10:59:26 EST 2023" kind="HitBreakPoint" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="28012988" type="Run" />
  <Command __id="1724" _type="PauseCommand" date="Sat Feb 25 10:59:28 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="28015377">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[2389]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1723" _type="ShellCommand" date="Sat Feb 25 10:59:28 EST 2023" starttimestamp="1677312753280" timestamp="28015377" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1726" _type="PauseCommand" date="Sat Feb 25 10:59:31 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="28018551">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3174]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1725" _type="ConsoleOutput" date="Sat Feb 25 10:59:31 EST 2023" overflow="false" starttimestamp="1677312753280" timestamp="28018551" type="ConsoleOutput">
    <outputString><![CDATA[E*** Object:graphics.ABell@2ccca26f displayed multiple times with following references:
 [AProducerConsumerScene2.queueBellList.first, AProducerConsumerScene2.queueBellList.last]
 Remove one of these references in the displayed logical structure by, for instance, renaming the getter for the property storing the shared object or adding the @util.annotations.Visible(false) annotation before the getter.
If you think it is safe to tareverse  all of these  references then add the annotattion @util.annotattions.AllowMultipleEqualReferences(false) nefore the getter.
E*** Object:graphics.ABell@2ccca26f displayed multiple times with following references:
 [AProducerConsumerScene2.queueBellList.first, AProducerConsumerScene2.queueBellList.0, AProducerConsumerScene2.queueBellList.last]
 Remove one of these references in the displayed logical structure by, for instance, renaming the getter for the property storing the shared object or adding the @util.annotations.Visible(false) annotation before the getter.
If you think it is safe to tareverse  all of these  references then add the annotattion @util.annotattions.AllowMultipleEqualReferences(false) nefore the getter.
E*** Object:graphics.APlate@51972dc7 displayed multiple times with following references:
 [AProducerConsumerScene2.queuedList.first, AProducerConsumerScene2.queuedList.last]
 Remove one of these references in the displayed logical structure by, for instance, renaming the getter for the property storing the shared object or adding the @util.annotations.Visible(false) annotation before the getter.
If you think it is safe to tareverse  all of these  references then add the annotattion @util.annotattions.AllowMultipleEqualReferences(false) nefore the getter.
E*** Object:graphics.APlate@51972dc7 displayed multiple times with following references:
 [AProducerConsumerScene2.queuedList.0, AProducerConsumerScene2.queuedList.first, AProducerConsumerScene2.queuedList.last]
 Remove one of these references in the displayed logical structure by, for instance, renaming the getter for the property storing the shared object or adding the @util.annotations.Visible(false) annotation before the getter.
If you think it is safe to tareverse  all of these  references then add the annotattion @util.annotattions.AllowMultipleEqualReferences(false) nefore the getter.
]]></outputString>
    <diff><![CDATA[null]]></diff>
  </Command>
  <Command __id="1728" _type="PauseCommand" date="Sat Feb 25 10:59:58 EST 2023" range="20s-30s" starttimestamp="1677312753280" timestamp="28045718">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[27167]]></pause>
    <nextType><![CDATA[Exception]]></nextType>
    <next><![CDATA[ExceptionCommand]]></next>
  </Command>
  <Command __id="1727" _type="ExceptionCommand" date="Sat Feb 25 10:59:58 EST 2023" starttimestamp="1677312753280" timestamp="28045718" type="Exception">
    <exceptionString><![CDATA[class java.util.NoSuchElementException
java.util.NoSuchElementException
	at java.base/java.util.LinkedList.getFirst(LinkedList.java:248)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1415)
	at bus.uigen.sadapters.BeanToRecord.get(BeanToRecord.java:204)
	at bus.uigen.sadapters.BeanToRecord.get(BeanToRecord.java:189)
	at bus.uigen.oadapters.ClassAdapter.refreshChild(ClassAdapter.java:481)
	at bus.uigen.oadapters.ClassAdapter.refreshChildren(ClassAdapter.java:457)
	at bus.uigen.oadapters.ClassAdapter.refreshValueButNotAtomic(ClassAdapter.java:371)
	at bus.uigen.oadapters.VectorAdapter.refreshValue(VectorAdapter.java:1882)
	at bus.uigen.oadapters.ClassAdapter.refresh(ClassAdapter.java:672)
	at bus.uigen.oadapters.ClassAdapter.refreshChild(ClassAdapter.java:487)
	at bus.uigen.oadapters.ClassAdapter.refreshChildren(ClassAdapter.java:457)
	at bus.uigen.oadapters.ClassAdapter.refreshValueButNotAtomic(ClassAdapter.java:371)
	at bus.uigen.oadapters.ClassAdapter.refreshValue(ClassAdapter.java:357)
	at bus.uigen.oadapters.ObjectAdapter.implicitRefresh(ObjectAdapter.java:5406)
	at bus.uigen.uiFrame.doMyImplicitRefresh(uiFrame.java:4601)
	at bus.uigen.uiFrame.subDoImplicitRefresh(uiFrame.java:4702)
	at bus.uigen.uiFrame.doImplicitRefresh(uiFrame.java:4682)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1920)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:2002)
	at bus.uigen.controller.MethodInvocationManager.checkIfArgumentsAvailable(MethodInvocationManager.java:685)
	at bus.uigen.controller.MethodInvocationManager.init(MethodInvocationManager.java:453)
	at bus.uigen.controller.MethodInvocationManager.<init>(MethodInvocationManager.java:406)
	at bus.uigen.uiFrame.processMethod(uiFrame.java:3986)
	at bus.uigen.controller.menus.VirtualMethodMenuItem.processMethodMenuItem(VirtualMethodMenuItem.java:129)
	at bus.uigen.controller.menus.VirtualMethodMenuItem.actionPerformed(VirtualMethodMenuItem.java:111)
	at bus.uigen.widgets.swing.SwingMenuItemEventForwarder.actionPerformed(SwingMenuItemEventForwarder.java:30)
	at java.desktop/javax.swing.AbstractButton.fireActionPerformed(AbstractButton.java:1967)
	at java.desktop/javax.swing.AbstractButton$Handler.actionPerformed(AbstractButton.java:2308)
	at java.desktop/javax.swing.DefaultButtonModel.fireActionPerformed(DefaultButtonModel.java:405)
	at java.desktop/javax.swing.DefaultButtonModel.setPressed(DefaultButtonModel.java:262)
	at java.desktop/javax.swing.AbstractButton.doClick(AbstractButton.java:369)
	at java.desktop/javax.swing.plaf.basic.BasicMenuItemUI.doClick(BasicMenuItemUI.java:1020)
	at java.desktop/javax.swing.plaf.basic.BasicMenuItemUI$Handler.mouseReleased(BasicMenuItemUI.java:1064)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6636)
	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)
	at java.desktop/java.awt.Component.processEvent(Component.java:6401)
	at java.desktop/java.awt.Container.processEvent(Container.java:2263)
	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5012)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4844)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="1730" _type="PauseCommand" date="Sat Feb 25 11:00:04 EST 2023" range="5s-10s" starttimestamp="1677312753280" timestamp="28051577">
    <prevType><![CDATA[Exception]]></prevType>
    <prev><![CDATA[ExceptionCommand]]></prev>
    <pause><![CDATA[5859]]></pause>
    <nextType><![CDATA[Exception]]></nextType>
    <next><![CDATA[ExceptionCommand]]></next>
  </Command>
  <Command __id="1729" _type="ExceptionCommand" date="Sat Feb 25 11:00:04 EST 2023" starttimestamp="1677312753280" timestamp="28051577" type="Exception">
    <exceptionString><![CDATA[java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1415)
	at bus.uigen.sadapters.BeanToRecord.get(BeanToRecord.java:204)
	at bus.uigen.sadapters.BeanToRecord.get(BeanToRecord.java:189)
	at bus.uigen.oadapters.ClassAdapter.refreshChild(ClassAdapter.java:481)
	at bus.uigen.oadapters.ClassAdapter.refreshChildren(ClassAdapter.java:457)
	at bus.uigen.oadapters.ClassAdapter.refreshValueButNotAtomic(ClassAdapter.java:371)
	at bus.uigen.oadapters.VectorAdapter.refreshValue(VectorAdapter.java:1882)
	at bus.uigen.oadapters.ClassAdapter.refresh(ClassAdapter.java:672)
	at bus.uigen.oadapters.ClassAdapter.refreshChild(ClassAdapter.java:487)
	at bus.uigen.oadapters.ClassAdapter.refreshChildren(ClassAdapter.java:457)
	at bus.uigen.oadapters.ClassAdapter.refreshValueButNotAtomic(ClassAdapter.java:371)
	at bus.uigen.oadapters.ClassAdapter.refreshValue(ClassAdapter.java:357)
	at bus.uigen.oadapters.ObjectAdapter.implicitRefresh(ObjectAdapter.java:5406)
	at bus.uigen.uiFrame.doMyImplicitRefresh(uiFrame.java:4601)
	at bus.uigen.uiFrame.subDoImplicitRefresh(uiFrame.java:4702)
	at bus.uigen.uiFrame.doImplicitRefresh(uiFrame.java:4682)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1920)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:2002)
	at bus.uigen.controller.MethodInvocationManager.checkIfArgumentsAvailable(MethodInvocationManager.java:685)
	at bus.uigen.controller.MethodInvocationManager.init(MethodInvocationManager.java:453)
	at bus.uigen.controller.MethodInvocationManager.<init>(MethodInvocationManager.java:406)
	at bus.uigen.uiFrame.processMethod(uiFrame.java:3986)
	at bus.uigen.controller.menus.VirtualMethodMenuItem.processMethodMenuItem(VirtualMethodMenuItem.java:129)
	at bus.uigen.controller.menus.VirtualMethodMenuItem.actionPerformed(VirtualMethodMenuItem.java:111)
	at bus.uigen.widgets.swing.SwingMenuItemEventForwarder.actionPerformed(SwingMenuItemEventForwarder.java:30)
	at java.desktop/javax.swing.AbstractButton.fireActionPerformed(AbstractButton.java:1967)
	at java.desktop/javax.swing.AbstractButton$Handler.actionPerformed(AbstractButton.java:2308)
	at java.desktop/javax.swing.DefaultButtonModel.fireActionPerformed(DefaultButtonModel.java:405)
	at java.desktop/javax.swing.DefaultButtonModel.setPressed(DefaultButtonModel.java:262)
	at java.desktop/javax.swing.AbstractButton.doClick(AbstractButton.java:369)
	at java.desktop/javax.swing.plaf.basic.BasicMenuItemUI.doClick(BasicMenuItemUI.java:1020)
	at java.desktop/javax.swing.plaf.basic.BasicMenuItemUI$Handler.mouseReleased(BasicMenuItemUI.java:1064)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6636)
	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)
	at java.desktop/java.awt.Component.processEvent(Component.java:6401)
	at java.desktop/java.awt.Container.processEvent(Container.java:2263)
	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5012)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4844)
	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4919)
	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4548)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="1732" _type="PauseCommand" date="Sat Feb 25 11:00:06 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="28053258">
    <prevType><![CDATA[Exception]]></prevType>
    <prev><![CDATA[ExceptionCommand]]></prev>
    <pause><![CDATA[1681]]></pause>
    <nextType><![CDATA[Exception]]></nextType>
    <next><![CDATA[ExceptionCommand]]></next>
  </Command>
  <Command __id="1731" _type="ExceptionCommand" date="Sat Feb 25 11:00:06 EST 2023" starttimestamp="1677312753280" timestamp="28053258" type="Exception">
    <exceptionString><![CDATA[java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1415)
	at bus.uigen.sadapters.BeanToRecord.get(BeanToRecord.java:204)
	at bus.uigen.sadapters.BeanToRecord.get(BeanToRecord.java:189)
	at bus.uigen.oadapters.ClassAdapter.refreshChild(ClassAdapter.java:481)
	at bus.uigen.oadapters.ClassAdapter.refreshChildren(ClassAdapter.java:457)
	at bus.uigen.oadapters.ClassAdapter.refreshValueButNotAtomic(ClassAdapter.java:371)
	at bus.uigen.oadapters.VectorAdapter.refreshValue(VectorAdapter.java:1882)
	at bus.uigen.oadapters.ClassAdapter.refresh(ClassAdapter.java:672)
	at bus.uigen.oadapters.ClassAdapter.refreshChild(ClassAdapter.java:487)
	at bus.uigen.oadapters.ClassAdapter.refreshChildren(ClassAdapter.java:457)
	at bus.uigen.oadapters.ClassAdapter.refreshValueButNotAtomic(ClassAdapter.java:371)
	at bus.uigen.oadapters.ClassAdapter.refreshValue(ClassAdapter.java:357)
	at bus.uigen.oadapters.ObjectAdapter.implicitRefresh(ObjectAdapter.java:5406)
	at bus.uigen.uiFrame.doMyImplicitRefresh(uiFrame.java:4601)
	at bus.uigen.uiFrame.subDoImplicitRefresh(uiFrame.java:4702)
	at bus.uigen.uiFrame.doImplicitRefresh(uiFrame.java:4682)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1920)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:2002)
	at bus.uigen.controller.MethodInvocationManager.checkIfArgumentsAvailable(MethodInvocationManager.java:685)
	at bus.uigen.controller.MethodInvocationManager.init(MethodInvocationManager.java:453)
	at bus.uigen.controller.MethodInvocationManager.<init>(MethodInvocationManager.java:406)
	at bus.uigen.uiFrame.processMethod(uiFrame.java:3986)
	at bus.uigen.controller.menus.VirtualMethodMenuItem.processMethodMenuItem(VirtualMethodMenuItem.java:129)
	at bus.uigen.controller.menus.VirtualMethodMenuItem.actionPerformed(VirtualMethodMenuItem.java:111)
	at bus.uigen.widgets.swing.SwingMenuItemEventForwarder.actionPerformed(SwingMenuItemEventForwarder.java:30)
	at java.desktop/javax.swing.AbstractButton.fireActionPerformed(AbstractButton.java:1967)
	at java.desktop/javax.swing.AbstractButton$Handler.actionPerformed(AbstractButton.java:2308)
	at java.desktop/javax.swing.DefaultButtonModel.fireActionPerformed(DefaultButtonModel.java:405)
	at java.desktop/javax.swing.DefaultButtonModel.setPressed(DefaultButtonModel.java:262)
	at java.desktop/javax.swing.AbstractButton.doClick(AbstractButton.java:369)
	at java.desktop/javax.swing.plaf.basic.BasicMenuItemUI.doClick(BasicMenuItemUI.java:1020)
	at java.desktop/javax.swing.plaf.basic.BasicMenuItemUI$Handler.mouseReleased(BasicMenuItemUI.java:1064)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6636)
	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)
	at java.desktop/java.awt.Component.processEvent(Component.java:6401)
	at java.desktop/java.awt.Container.processEvent(Container.java:2263)
	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5012)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4844)
	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4919)
	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4548)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="1734" _type="PauseCommand" date="Sat Feb 25 11:00:07 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="28054559">
    <prevType><![CDATA[Exception]]></prevType>
    <prev><![CDATA[ExceptionCommand]]></prev>
    <pause><![CDATA[1301]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1737" _type="SelectTextCommand" caretOffset="6613" date="Sat Feb 25 11:00:52 EST 2023" end="6613" start="6566" starttimestamp="1677312753280" timestamp="28099001" />
  <Command __id="1735" _type="DiffBasedFileOpenCommand" date="Sat Feb 25 11:00:51 EST 2023" projectName="null" starttimestamp="1677312753280" timestamp="28098699">
    <filePath><![CDATA[null]]></filePath>
    <diff><![CDATA[null]]></diff>
  </Command>
  <Command __id="1739" _type="PauseCommand" date="Sat Feb 25 11:00:54 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="28101298">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[2297]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1740" _type="MoveCaretCommand" caretOffset="1423" date="Sat Feb 25 11:00:54 EST 2023" docOffset="1727" starttimestamp="1677312753280" timestamp="28101516" />
  <Command __id="1738" _type="DiffBasedFileOpenCommand" date="Sat Feb 25 11:00:54 EST 2023" docASTNodeCount="221" docActiveCodeLength="1636" docExpressionCount="148" docLength="1738" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="28101298">
    <filePath><![CDATA[C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\main\Main.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package main;¶¶import java.awt.Color;¶import java.lang.reflect.Method;¶¶import bus.uigen.OEFrame;¶import bus.uigen.ObjectEditor;¶import bus.uigen.attributes.AttributeNames;¶import graphics.AProducerConsumerScene;¶import graphics."), Diff(INSERT,"A"), Diff(EQUAL,"ProducerConsumerScene"), Diff(INSERT,"2;¶import graphics.ProducerConsumerScene;¶import graphics.ProducerConsumerScene2"), Diff(EQUAL,";¶¶public class Main {¶	static ProducerConsumerScene"), Diff(INSERT,"2"), Diff(EQUAL," scene = new AProducerConsumerScene"), Diff(INSERT,"2"), Diff(EQUAL,"();¶	¶	public static void main(String[] args) {¶		animateScene();¶	}¶	¶	public static void animateScene() {¶		¶		//Adding labels and buttons inside object editor screen¶		ObjectEditor.confirmSelectedMethodParameters(false);¶		ObjectEditor.setMethodAttribute(AProducerConsumerScene.class, "initScene", AttributeNames.TOOLBAR_METHOD, true);¶		ObjectEditor.setMethodAttribute(AProducerConsumerScene.class, "initScene", AttributeNames.LABEL, "Init Scene");¶		¶		//Setting up init scene method in object editor¶		try {¶			Class[] initSceneArgTypes = {Integer.TYPE, Integer.TYPE};¶			Object[] initSceneDefaultArgs = {4, 4};¶			String[] initSceneArgNames = {"Number of Patrons", "Number of Chefs"};¶			Method initSceneMethod = AProducerConsumerScene.class.getMethod("initScene", initSceneArgTypes);¶			ObjectEditor.registerDefaultParameterValues(initSceneMethod, initSceneDefaultArgs);¶			ObjectEditor.registerParameterNames(initSceneMethod, initSceneArgNames);¶		} catch (NoSuchMethodException e) {¶			e.printStackTrace();¶		} catch (SecurityException e) {¶			e.printStackTrace();¶		}¶		¶		¶		OEFrame editor = ObjectEditor.edit(scene);¶		editor.getDrawComponent().setBackground(Color.DARK_GRAY);¶		editor.getDrawPanel().setSize(450, 450);¶		editor.showDrawPanel();¶		¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package main;

import java.awt.Color;
import java.lang.reflect.Method;

import bus.uigen.OEFrame;
import bus.uigen.ObjectEditor;
import bus.uigen.attributes.AttributeNames;
import graphics.AProducerConsumerScene;
import graphics.AProducerConsumerScene2;
import graphics.ProducerConsumerScene;
import graphics.ProducerConsumerScene2;

public class Main {
	static ProducerConsumerScene2 scene = new AProducerConsumerScene2();
	
	public static void main(String[] args) {
		animateScene();
	}
	
	public static void animateScene() {
		
		//Adding labels and buttons inside object editor screen
		ObjectEditor.confirmSelectedMethodParameters(false);
		ObjectEditor.setMethodAttribute(AProducerConsumerScene.class, "initScene", AttributeNames.TOOLBAR_METHOD, true);
		ObjectEditor.setMethodAttribute(AProducerConsumerScene.class, "initScene", AttributeNames.LABEL, "Init Scene");
		
		//Setting up init scene method in object editor
		try {
			Class[] initSceneArgTypes = {Integer.TYPE, Integer.TYPE};
			Object[] initSceneDefaultArgs = {4, 4};
			String[] initSceneArgNames = {"Number of Patrons", "Number of Chefs"};
			Method initSceneMethod = AProducerConsumerScene.class.getMethod("initScene", initSceneArgTypes);
			ObjectEditor.registerDefaultParameterValues(initSceneMethod, initSceneDefaultArgs);
			ObjectEditor.registerParameterNames(initSceneMethod, initSceneArgNames);
		} catch (NoSuchMethodException e) {
			e.printStackTrace();
		} catch (SecurityException e) {
			e.printStackTrace();
		}
		
		
		OEFrame editor = ObjectEditor.edit(scene);
		editor.getDrawComponent().setBackground(Color.DARK_GRAY);
		editor.getDrawPanel().setSize(450, 450);
		editor.showDrawPanel();
		
	}

}
]]></snapshot>
  </Command>
  <Command __id="1742" _type="PauseCommand" date="Sat Feb 25 11:01:03 EST 2023" range="5s-10s" starttimestamp="1677312753280" timestamp="28110111">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[8595]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1743" _type="MoveCaretCommand" caretOffset="413" date="Sat Feb 25 11:01:03 EST 2023" docOffset="518" starttimestamp="1677312753280" timestamp="28110244" />
  <Command __id="1741" _type="DiffBasedFileOpenCommand" date="Sat Feb 25 11:01:03 EST 2023" docASTNodeCount="151" docActiveCodeLength="877" docExpressionCount="66" docLength="877" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="28110111">
    <filePath><![CDATA[C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\graphics\ProducerConsumerScene2.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package graphics;¶¶import java.util.List;¶import java.util.Queue;¶¶import bus.uigen.shapes.AnImageModel;¶import bus.uigen.shapes.OEShapeModel;¶¶public interface ProducerConsumerScene2 {¶	public List<AChef> getChefList();¶	public List<APatron> getPatronList();¶	public Queue<APlate> getQueuedList();¶	public BoundedBuffer getBuffer();¶	public Queue<ABell> getQueueBellList();¶	public void initScene(int patronAmount, int chefAmount);¶	public void cook(OEShapeModel head);¶	public void serve("), Diff(INSERT,"APlate plate"), Diff(EQUAL,");¶	public boolean checkIfFull();¶	public void changeLineColors(int workingPlatePlace);¶	public void resetLineColors();¶	public int findPatron(OEShapeModel patronHead);¶	public List<ABell> getBellsList();¶	public int findBell(int centerY);¶	public void order(OEShapeModel bell);¶	public int findFirstAvailablePlate();¶	public void resetBuffer();¶}¶")]]]></diff>
    <snapshot><![CDATA[package graphics;

import java.util.List;
import java.util.Queue;

import bus.uigen.shapes.AnImageModel;
import bus.uigen.shapes.OEShapeModel;

public interface ProducerConsumerScene2 {
	public List<AChef> getChefList();
	public List<APatron> getPatronList();
	public Queue<APlate> getQueuedList();
	public BoundedBuffer getBuffer();
	public Queue<ABell> getQueueBellList();
	public void initScene(int patronAmount, int chefAmount);
	public void cook(OEShapeModel head);
	public void serve(APlate plate);
	public boolean checkIfFull();
	public void changeLineColors(int workingPlatePlace);
	public void resetLineColors();
	public int findPatron(OEShapeModel patronHead);
	public List<ABell> getBellsList();
	public int findBell(int centerY);
	public void order(OEShapeModel bell);
	public int findFirstAvailablePlate();
	public void resetBuffer();
}
]]></snapshot>
  </Command>
  <Command __id="1745" _type="PauseCommand" date="Sat Feb 25 11:01:04 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="28111256">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1012]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1746" _type="MoveCaretCommand" caretOffset="214" date="Sat Feb 25 11:01:04 EST 2023" docOffset="1094" starttimestamp="1677312753280" timestamp="28111513" />
  <Command __id="1747" _type="MoveCaretCommand" caretOffset="6553" date="Sat Feb 25 11:01:05 EST 2023" docOffset="7433" starttimestamp="1677312753280" timestamp="28111895" />
  <Command __id="1749" _type="PauseCommand" date="Sat Feb 25 11:01:06 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="28112909">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1014]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1748" _type="ShellCommand" date="Sat Feb 25 11:01:06 EST 2023" starttimestamp="1677312753280" timestamp="28112909" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1751" _type="PauseCommand" date="Sat Feb 25 11:01:17 EST 2023" range="10s-20s" starttimestamp="1677312753280" timestamp="28124340">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[11431]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1750" _type="ShellCommand" date="Sat Feb 25 11:01:17 EST 2023" starttimestamp="1677312753280" timestamp="28124340" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1752" _type="MoveCaretCommand" caretOffset="138" date="Sat Feb 25 11:01:18 EST 2023" docOffset="1018" starttimestamp="1677312753280" timestamp="28125168" />
  <Command __id="1753" _type="ShellCommand" date="Sat Feb 25 11:01:18 EST 2023" starttimestamp="1677312753280" timestamp="28125509" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1755" _type="PauseCommand" date="Sat Feb 25 11:01:22 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="28129448">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3939]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1754" _type="ShellCommand" date="Sat Feb 25 11:01:22 EST 2023" starttimestamp="1677312753280" timestamp="28129448" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1757" _type="PauseCommand" date="Sat Feb 25 11:01:39 EST 2023" range="10s-20s" starttimestamp="1677312753280" timestamp="28146320">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[16872]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1756" _type="SelectTextCommand" caretOffset="7294" date="Sat Feb 25 11:01:39 EST 2023" end="7432" start="7294" starttimestamp="1677312753280" timestamp="28146320" />
  <Command __id="1759" _type="PauseCommand" date="Sat Feb 25 11:01:41 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="28147848">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1528]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1758" _type="MoveCaretCommand" caretOffset="7617" date="Sat Feb 25 11:01:41 EST 2023" docOffset="8497" starttimestamp="1677312753280" timestamp="28147848" />
  <Command __id="1761" _type="PauseCommand" date="Sat Feb 25 11:01:54 EST 2023" range="10s-20s" starttimestamp="1677312753280" timestamp="28161027">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[13179]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1760" _type="SelectTextCommand" caretOffset="7514" date="Sat Feb 25 11:01:54 EST 2023" end="7617" start="7514" starttimestamp="1677312753280" timestamp="28161027" />
  <Command __id="1762" _type="MoveCaretCommand" caretOffset="7514" date="Sat Feb 25 11:01:54 EST 2023" docOffset="8394" starttimestamp="1677312753280" timestamp="28161491" />
  <Command __id="1764" _type="PauseCommand" date="Sat Feb 25 11:02:17 EST 2023" range="20s-30s" starttimestamp="1677312753280" timestamp="28184692">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[23201]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1763" _type="MoveCaretCommand" caretOffset="5721" date="Sat Feb 25 11:02:17 EST 2023" docOffset="6601" starttimestamp="1677312753280" timestamp="28184692" />
  <Command __id="1766" _type="PauseCommand" date="Sat Feb 25 11:02:19 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="28186353">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1661]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1765" _type="ShellCommand" date="Sat Feb 25 11:02:19 EST 2023" starttimestamp="1677312753280" timestamp="28186353" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1768" _type="PauseCommand" date="Sat Feb 25 11:02:23 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="28190297">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3944]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1767" _type="ShellCommand" date="Sat Feb 25 11:02:23 EST 2023" starttimestamp="1677312753280" timestamp="28190297" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1769" _type="MoveCaretCommand" caretOffset="5384" date="Sat Feb 25 11:02:23 EST 2023" docOffset="6264" starttimestamp="1677312753280" timestamp="28190392" />
  <Command __id="1771" _type="PauseCommand" date="Sat Feb 25 11:02:27 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="28193957">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3565]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1770" _type="ShellCommand" date="Sat Feb 25 11:02:27 EST 2023" starttimestamp="1677312753280" timestamp="28193957" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1773" _type="PauseCommand" date="Sat Feb 25 11:02:34 EST 2023" range="5s-10s" starttimestamp="1677312753280" timestamp="28200721">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[6764]]></pause>
    <nextType><![CDATA[Exception]]></nextType>
    <next><![CDATA[ExceptionCommand]]></next>
  </Command>
  <Command __id="1772" _type="ExceptionCommand" date="Sat Feb 25 11:02:34 EST 2023" starttimestamp="1677312753280" timestamp="28200721" type="Exception">
    <exceptionString><![CDATA[class java.util.NoSuchElementException
java.util.NoSuchElementException
	at java.base/java.util.LinkedList.getFirst(LinkedList.java:248)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1415)
	at bus.uigen.sadapters.BeanToRecord.get(BeanToRecord.java:204)
	at bus.uigen.sadapters.BeanToRecord.get(BeanToRecord.java:189)
	at bus.uigen.oadapters.ClassAdapter.refreshChild(ClassAdapter.java:481)
	at bus.uigen.oadapters.ClassAdapter.refreshChildren(ClassAdapter.java:457)
	at bus.uigen.oadapters.ClassAdapter.refreshValueButNotAtomic(ClassAdapter.java:371)
	at bus.uigen.oadapters.VectorAdapter.refreshValue(VectorAdapter.java:1882)
	at bus.uigen.oadapters.ClassAdapter.refresh(ClassAdapter.java:672)
	at bus.uigen.oadapters.ClassAdapter.refreshChild(ClassAdapter.java:487)
	at bus.uigen.oadapters.ClassAdapter.refreshChildren(ClassAdapter.java:457)
	at bus.uigen.oadapters.ClassAdapter.refreshValueButNotAtomic(ClassAdapter.java:371)
	at bus.uigen.oadapters.ClassAdapter.refreshValue(ClassAdapter.java:357)
	at bus.uigen.oadapters.ObjectAdapter.implicitRefresh(ObjectAdapter.java:5406)
	at bus.uigen.uiFrame.doMyImplicitRefresh(uiFrame.java:4601)
	at bus.uigen.uiFrame.subDoImplicitRefresh(uiFrame.java:4702)
	at bus.uigen.uiFrame.doImplicitRefresh(uiFrame.java:4682)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1920)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:2002)
	at bus.uigen.controller.MethodInvocationManager.checkIfArgumentsAvailable(MethodInvocationManager.java:685)
	at bus.uigen.controller.MethodInvocationManager.init(MethodInvocationManager.java:453)
	at bus.uigen.controller.MethodInvocationManager.<init>(MethodInvocationManager.java:406)
	at bus.uigen.uiFrame.processMethod(uiFrame.java:3986)
	at bus.uigen.controller.menus.VirtualMethodMenuItem.processMethodMenuItem(VirtualMethodMenuItem.java:129)
	at bus.uigen.controller.menus.VirtualMethodMenuItem.actionPerformed(VirtualMethodMenuItem.java:111)
	at bus.uigen.widgets.swing.SwingMenuItemEventForwarder.actionPerformed(SwingMenuItemEventForwarder.java:30)
	at java.desktop/javax.swing.AbstractButton.fireActionPerformed(AbstractButton.java:1967)
	at java.desktop/javax.swing.AbstractButton$Handler.actionPerformed(AbstractButton.java:2308)
	at java.desktop/javax.swing.DefaultButtonModel.fireActionPerformed(DefaultButtonModel.java:405)
	at java.desktop/javax.swing.DefaultButtonModel.setPressed(DefaultButtonModel.java:262)
	at java.desktop/javax.swing.AbstractButton.doClick(AbstractButton.java:369)
	at java.desktop/javax.swing.plaf.basic.BasicMenuItemUI.doClick(BasicMenuItemUI.java:1020)
	at java.desktop/javax.swing.plaf.basic.BasicMenuItemUI$Handler.mouseReleased(BasicMenuItemUI.java:1064)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6636)
	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)
	at java.desktop/java.awt.Component.processEvent(Component.java:6401)
	at java.desktop/java.awt.Container.processEvent(Container.java:2263)
	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5012)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4844)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="1775" _type="PauseCommand" date="Sat Feb 25 11:02:41 EST 2023" range="5s-10s" starttimestamp="1677312753280" timestamp="28208367">
    <prevType><![CDATA[Exception]]></prevType>
    <prev><![CDATA[ExceptionCommand]]></prev>
    <pause><![CDATA[7646]]></pause>
    <nextType><![CDATA[Exception]]></nextType>
    <next><![CDATA[ExceptionCommand]]></next>
  </Command>
  <Command __id="1774" _type="ExceptionCommand" date="Sat Feb 25 11:02:41 EST 2023" starttimestamp="1677312753280" timestamp="28208367" type="Exception">
    <exceptionString><![CDATA[java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1415)
	at bus.uigen.sadapters.BeanToRecord.get(BeanToRecord.java:204)
	at bus.uigen.sadapters.BeanToRecord.get(BeanToRecord.java:189)
	at bus.uigen.oadapters.ClassAdapter.refreshChild(ClassAdapter.java:481)
	at bus.uigen.oadapters.ClassAdapter.refreshChildren(ClassAdapter.java:457)
	at bus.uigen.oadapters.ClassAdapter.refreshValueButNotAtomic(ClassAdapter.java:371)
	at bus.uigen.oadapters.VectorAdapter.refreshValue(VectorAdapter.java:1882)
	at bus.uigen.oadapters.ClassAdapter.refresh(ClassAdapter.java:672)
	at bus.uigen.oadapters.ClassAdapter.refreshChild(ClassAdapter.java:487)
	at bus.uigen.oadapters.ClassAdapter.refreshChildren(ClassAdapter.java:457)
	at bus.uigen.oadapters.ClassAdapter.refreshValueButNotAtomic(ClassAdapter.java:371)
	at bus.uigen.oadapters.ClassAdapter.refreshValue(ClassAdapter.java:357)
	at bus.uigen.oadapters.ObjectAdapter.implicitRefresh(ObjectAdapter.java:5406)
	at bus.uigen.uiFrame.doMyImplicitRefresh(uiFrame.java:4601)
	at bus.uigen.uiFrame.subDoImplicitRefresh(uiFrame.java:4702)
	at bus.uigen.uiFrame.doImplicitRefresh(uiFrame.java:4682)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1920)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:2002)
	at bus.uigen.controller.MethodInvocationManager.checkIfArgumentsAvailable(MethodInvocationManager.java:685)
	at bus.uigen.controller.MethodInvocationManager.init(MethodInvocationManager.java:453)
	at bus.uigen.controller.MethodInvocationManager.<init>(MethodInvocationManager.java:406)
	at bus.uigen.uiFrame.processMethod(uiFrame.java:3986)
	at bus.uigen.controller.menus.VirtualMethodMenuItem.processMethodMenuItem(VirtualMethodMenuItem.java:129)
	at bus.uigen.controller.menus.VirtualMethodMenuItem.actionPerformed(VirtualMethodMenuItem.java:111)
	at bus.uigen.widgets.swing.SwingMenuItemEventForwarder.actionPerformed(SwingMenuItemEventForwarder.java:30)
	at java.desktop/javax.swing.AbstractButton.fireActionPerformed(AbstractButton.java:1967)
	at java.desktop/javax.swing.AbstractButton$Handler.actionPerformed(AbstractButton.java:2308)
	at java.desktop/javax.swing.DefaultButtonModel.fireActionPerformed(DefaultButtonModel.java:405)
	at java.desktop/javax.swing.DefaultButtonModel.setPressed(DefaultButtonModel.java:262)
	at java.desktop/javax.swing.AbstractButton.doClick(AbstractButton.java:369)
	at java.desktop/javax.swing.plaf.basic.BasicMenuItemUI.doClick(BasicMenuItemUI.java:1020)
	at java.desktop/javax.swing.plaf.basic.BasicMenuItemUI$Handler.mouseReleased(BasicMenuItemUI.java:1064)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6636)
	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)
	at java.desktop/java.awt.Component.processEvent(Component.java:6401)
	at java.desktop/java.awt.Container.processEvent(Container.java:2263)
	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5012)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4844)
	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4919)
	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4548)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="1777" _type="PauseCommand" date="Sat Feb 25 11:02:43 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="28209971">
    <prevType><![CDATA[Exception]]></prevType>
    <prev><![CDATA[ExceptionCommand]]></prev>
    <pause><![CDATA[1604]]></pause>
    <nextType><![CDATA[Exception]]></nextType>
    <next><![CDATA[ExceptionCommand]]></next>
  </Command>
  <Command __id="1776" _type="ExceptionCommand" date="Sat Feb 25 11:02:43 EST 2023" starttimestamp="1677312753280" timestamp="28209971" type="Exception">
    <exceptionString><![CDATA[java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1415)
	at bus.uigen.sadapters.BeanToRecord.get(BeanToRecord.java:204)
	at bus.uigen.sadapters.BeanToRecord.get(BeanToRecord.java:189)
	at bus.uigen.oadapters.ClassAdapter.refreshChild(ClassAdapter.java:481)
	at bus.uigen.oadapters.ClassAdapter.refreshChildren(ClassAdapter.java:457)
	at bus.uigen.oadapters.ClassAdapter.refreshValueButNotAtomic(ClassAdapter.java:371)
	at bus.uigen.oadapters.VectorAdapter.refreshValue(VectorAdapter.java:1882)
	at bus.uigen.oadapters.ClassAdapter.refresh(ClassAdapter.java:672)
	at bus.uigen.oadapters.ClassAdapter.refreshChild(ClassAdapter.java:487)
	at bus.uigen.oadapters.ClassAdapter.refreshChildren(ClassAdapter.java:457)
	at bus.uigen.oadapters.ClassAdapter.refreshValueButNotAtomic(ClassAdapter.java:371)
	at bus.uigen.oadapters.ClassAdapter.refreshValue(ClassAdapter.java:357)
	at bus.uigen.oadapters.ObjectAdapter.implicitRefresh(ObjectAdapter.java:5406)
	at bus.uigen.uiFrame.doMyImplicitRefresh(uiFrame.java:4601)
	at bus.uigen.uiFrame.subDoImplicitRefresh(uiFrame.java:4702)
	at bus.uigen.uiFrame.doImplicitRefresh(uiFrame.java:4682)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1920)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:2002)
	at bus.uigen.controller.MethodInvocationManager.checkIfArgumentsAvailable(MethodInvocationManager.java:685)
	at bus.uigen.controller.MethodInvocationManager.init(MethodInvocationManager.java:453)
	at bus.uigen.controller.MethodInvocationManager.<init>(MethodInvocationManager.java:406)
	at bus.uigen.uiFrame.processMethod(uiFrame.java:3986)
	at bus.uigen.controller.menus.VirtualMethodMenuItem.processMethodMenuItem(VirtualMethodMenuItem.java:129)
	at bus.uigen.controller.menus.VirtualMethodMenuItem.actionPerformed(VirtualMethodMenuItem.java:111)
	at bus.uigen.widgets.swing.SwingMenuItemEventForwarder.actionPerformed(SwingMenuItemEventForwarder.java:30)
	at java.desktop/javax.swing.AbstractButton.fireActionPerformed(AbstractButton.java:1967)
	at java.desktop/javax.swing.AbstractButton$Handler.actionPerformed(AbstractButton.java:2308)
	at java.desktop/javax.swing.DefaultButtonModel.fireActionPerformed(DefaultButtonModel.java:405)
	at java.desktop/javax.swing.DefaultButtonModel.setPressed(DefaultButtonModel.java:262)
	at java.desktop/javax.swing.AbstractButton.doClick(AbstractButton.java:369)
	at java.desktop/javax.swing.plaf.basic.BasicMenuItemUI.doClick(BasicMenuItemUI.java:1020)
	at java.desktop/javax.swing.plaf.basic.BasicMenuItemUI$Handler.mouseReleased(BasicMenuItemUI.java:1064)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6636)
	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)
	at java.desktop/java.awt.Component.processEvent(Component.java:6401)
	at java.desktop/java.awt.Container.processEvent(Container.java:2263)
	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5012)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4844)
	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4919)
	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4548)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="1779" _type="PauseCommand" date="Sat Feb 25 11:02:45 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="28211780">
    <prevType><![CDATA[Exception]]></prevType>
    <prev><![CDATA[ExceptionCommand]]></prev>
    <pause><![CDATA[1809]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1778" _type="ShellCommand" date="Sat Feb 25 11:02:45 EST 2023" starttimestamp="1677312753280" timestamp="28211780" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1780" _type="MoveCaretCommand" caretOffset="5168" date="Sat Feb 25 11:02:45 EST 2023" docOffset="6048" starttimestamp="1677312753280" timestamp="28211870" />
  <Command __id="1782" _type="PauseCommand" date="Sat Feb 25 11:02:47 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="28213774">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1904]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1781" _type="ShellCommand" date="Sat Feb 25 11:02:47 EST 2023" starttimestamp="1677312753280" timestamp="28213774" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1784" _type="PauseCommand" date="Sat Feb 25 11:02:51 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="28217996">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[4222]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1783" _type="ShellCommand" date="Sat Feb 25 11:02:51 EST 2023" starttimestamp="1677312753280" timestamp="28217996" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1786" _type="PauseCommand" date="Sat Feb 25 11:03:07 EST 2023" range="10s-20s" starttimestamp="1677312753280" timestamp="28234257">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[16261]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1785" _type="MoveCaretCommand" caretOffset="5164" date="Sat Feb 25 11:03:07 EST 2023" docOffset="6044" starttimestamp="1677312753280" timestamp="28234257" />
  <Command __id="1788" _type="PauseCommand" date="Sat Feb 25 11:03:09 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="28235754">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1497]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1787" _type="MoveCaretCommand" caretOffset="5147" date="Sat Feb 25 11:03:09 EST 2023" docOffset="6027" starttimestamp="1677312753280" timestamp="28235754" />
  <Command __id="1789" _type="SelectTextCommand" caretOffset="5149" date="Sat Feb 25 11:03:09 EST 2023" end="5149" start="5139" starttimestamp="1677312753280" timestamp="28235948" />
  <Command __id="1791" _type="PauseCommand" date="Sat Feb 25 11:03:21 EST 2023" range="10s-20s" starttimestamp="1677312753280" timestamp="28248375">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[12427]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1790" _type="MoveCaretCommand" caretOffset="5120" date="Sat Feb 25 11:03:21 EST 2023" docOffset="6000" starttimestamp="1677312753280" timestamp="28248375" />
  <Command __id="1792" _type="SelectTextCommand" caretOffset="5122" date="Sat Feb 25 11:03:21 EST 2023" end="5122" start="5113" starttimestamp="1677312753280" timestamp="28248598" />
  <Command __id="1793" _type="SelectTextCommand" caretOffset="5136" date="Sat Feb 25 11:03:22 EST 2023" end="5136" start="5110" starttimestamp="1677312753280" timestamp="28249083" />
  <Command __id="1795" _type="PauseCommand" date="Sat Feb 25 11:03:28 EST 2023" range="5s-10s" starttimestamp="1677312753280" timestamp="28254864">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[5781]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1796" _type="ProgramExecutionEvent" className="/ProducersConsumersV3/src/main/Main.java" date="Sat Feb 25 11:04:01 EST 2023" kind="HitBreakPoint" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="28288389" type="Run" />
  <Command __id="1798" _type="ProgramExecutionEvent" className="/ProducersConsumersV3/src/main/Main.java" date="Sat Feb 25 11:04:01 EST 2023" kind="HitBreakPoint" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="28288390" type="Run" />
  <Command __id="1744" _type="DiffBasedFileOpenCommand" date="Sat Feb 25 11:01:04 EST 2023" docASTNodeCount="1558" docActiveCodeLength="9140" docExpressionCount="1068" docLength="10070" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="28111256">
    <filePath><![CDATA[C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\graphics\AProducerConsumerScene2.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package graphics;¶¶import java.util.ArrayList;¶import java.util.LinkedList;¶import java.util.List;¶import java.util.Queue;¶¶import animations.ACookingPlateAnimator;¶import animations.ACookingPlateCommand;¶import animations.AServingPlateAnimator;¶import animations.AServingPlateCommand;¶import animations.CookingPlateAnimator;¶import animations.ServingPlateAnimator;¶import bus.uigen.OEFrame;¶import bus.uigen.ObjectEditor;¶import bus.uigen.shapes.ALineModel;¶import bus.uigen.shapes.AStringModel;¶import bus.uigen.shapes.AnImageModel;¶import bus.uigen.shapes.OEShapeModel;¶import shapes.FlexibleTextShape;¶import util.annotations.EditablePropertyNames;¶import util.annotations.Label;¶import util.annotations.PropertyNames;¶import util.annotations.StructurePattern;¶import util.annotations.StructurePatternNames;¶import util.annotations.Visible;¶import util.misc.ThreadSupport;¶¶import java.awt.Color;¶¶@StructurePattern(StructurePatternNames.BEAN_PATTERN)¶@PropertyNames({¶	"patronList",¶	"chefList",¶	"buffer",¶	""), Diff(DELETE,"plateList",¶	"otherPlate"), Diff(INSERT,"queued"), Diff(EQUAL,"List",¶	"bellsList",¶	"queueBellList"¶})¶@EditablePropertyNames({¶})¶public class AProducerConsumerScene2 implements ProducerConsumerScene2 {¶	¶	//Avatar offsets inside scene¶	int[] chefXValues = {120,-50,-50,120};¶	int[] chefYValues = {-50,35,210,320};¶	int[] patronXValues = {650,850,850,650};¶	int[] patronYValues = {-50,35,220,320};¶	int[] bellXValues = {680,880,880,680};¶	int[] bellYValues = {75,160,345,445};¶	int INIT_HEAD_Y = 60;¶	int INIT_HEAD_X = 163;¶	int INIT_HEAD_HEIGHT = 90;¶	int INIT_HEAD_WIDTH = 80;¶	int PLATE_OFFSET_X = 30;¶	int PLATE_OFFSET_Y = 10;¶	int PAUSE = 5;¶	¶	//Booleans that help with the functionality of the below methods¶	boolean INIT_COOK = true;¶	boolean full = false;¶	int fullPlateOffset = -5;¶	¶	//Defining the chef and patron images¶	String[] chefImages = {"images/0.png","images/1.png","images/2.png","images/3.png"};¶	String[] patronImages = {"images/4.png", "images/5.png", "images/6.png", "images/7.png"};¶	¶	//Buffer arrays¶	int[] bufferXValues = {625, 680, 680, 620, 535, 460, 460, 535};¶	int[] bufferYValues = {200, 275, 365, 425, 425, 365, 275, 200};¶	boolean[] isFull = {false, false, false, false, false, false, false, false};¶	¶	//The properties of our class¶	List<APatron> patronList;¶	List<AChef> chefList;¶	BoundedBuffer buffer = new ABoundedBuffer();¶	¶	//This list will keep a track of the plates that enter the buffer so that FIFO¶	Queue<APlate> queuedList;¶	¶	OEShapeModel[] lineArray = {buffer.getLineTwo(), buffer.getLineThree(), buffer.getLineFour(), ¶								buffer.getLineFive(), buffer.getLineSix(), buffer.getLineSeven(), ¶								buffer.getLineEight(), buffer.getLineOne()};¶	¶	List<ABell> bellsList;¶	Queue<ABell> queueBellList;¶	int[] bellValues = {127, 212, 397, 497};¶	Queue<Integer> bellIntegerList;¶	¶	ACookingPlateCommand cookingCommand;¶	CookingPlateAnimator cookingAnimator;¶	¶	AServingPlateCommand servingCommand;¶	ServingPlateAnimator servingAnimator;¶	¶	//The constructor sets the scene with one chef, patron, a buffer, and a plate (not visible)¶	public AProducerConsumerScene2() {¶		patronList = new ArrayList<APatron>();¶		chefList = new ArrayList<AChef>();¶		//buffer = new ABoundedBuffer();¶		¶		queuedList = new LinkedList<APlate>();¶		bellsList = new ArrayList<ABell>();¶		queueBellList = new LinkedList<ABell>();¶		bellIntegerList = new LinkedList<Integer>();¶		¶		patronList.add(0, new APatron());¶		OEShapeModel initPatronHead = new AnImageModel(patronImages[0]);¶		initPatronHead.setX(INIT_HEAD_X);¶		initPatronHead.setY(INIT_HEAD_Y);¶		initPatronHead.setHeight(INIT_HEAD_HEIGHT);¶		initPatronHead.setWidth(INIT_HEAD_WIDTH);¶		patronList.get(0).patron.setHead(initPatronHead);¶		patronList.get(0).move(patronXValues[0], patronYValues[0]);¶		¶		chefList.add(0, new AChef());¶		OEShapeModel initChefHead = new AnImageModel(chefImages[0]);¶		initChefHead.setX(INIT_HEAD_X);¶		initChefHead.setY(INIT_HEAD_Y);¶		initChefHead.setHeight(INIT_HEAD_HEIGHT);¶		initChefHead.setWidth(INIT_HEAD_WIDTH);¶		chefList.get(0).chef.setHead(initChefHead);¶		chefList.get(0).move(chefXValues[0], chefYValues[0]);¶		¶		queuedList.add(new APlate());¶		queuedList.peek().getPlate().setHeight(0);¶		queuedList.peek().getPlate().setWidth(0);¶		¶		cookingAnimator = new ACookingPlateAnimator();¶		servingAnimator = new AServingPlateAnimator();¶		¶		bellsList.add(new ABell());¶		bellsList.get(0).getBell().setHeight(0);¶		bellsList.get(0).getBell().setWidth(0);¶		¶		queueBellList.add(new ABell());¶		queueBellList.peek().getBell().setHeight(0);¶		queueBellList.peek().getBell().setWidth(0);¶		¶		bellIntegerList.add(0);¶	}¶	¶	//Producer consumer methods¶	¶	//Init Scene sets the number of patrons and chefs in the scene¶	@Label("Init Scene")¶	public void initScene(int patronAmount, int chefAmount) {¶		bellsList.clear();¶		for (int i=0; i<patronAmount; i++) { ¶			APatron patron = new APatron();¶			patronList.add(i, patron);¶			OEShapeModel newHead = new AnImageModel(patronImages[i]);¶			patron.patron.setHead(newHead); ¶			newHead.setX(INIT_HEAD_X); ¶			newHead.setY(INIT_HEAD_Y);¶			newHead.setHeight(INIT_HEAD_HEIGHT);¶			newHead.setWidth(INIT_HEAD_WIDTH);¶			patron.move(patronXValues[i], patronYValues[i]);¶			¶			bellsList.add(new ABell());¶			bellsList.get(i).move(bellXValues[i], bellYValues[i]);¶		}¶		for (int i=0; i<chefAmount; i++) {¶			AChef chef = new AChef();¶			chefList.add(i, chef);¶			OEShapeModel newHead = new AnImageModel(chefImages[i]);¶			chef.chef.setHead(newHead);¶			newHead.setX(INIT_HEAD_X); ¶			newHead.setY(INIT_HEAD_Y);¶			newHead.setHeight(INIT_HEAD_HEIGHT);¶			newHead.setWidth(INIT_HEAD_WIDTH);¶			chef.move(chefXValues[i], chefYValues[i]);¶		}¶	}¶	¶	//Once the head of an avatar is chosen, it makes the plate that they "cook" appear¶	public void cook(OEShapeModel head) {¶		if (INIT_COOK) {¶			INIT_COOK=!INIT_COOK;¶			queuedList.remove();¶		}¶		¶		int headX = head.getCenterX();¶		int headY = head.getCenterY();¶		¶		APlate newPlate = new APlate();¶		newPlate.getPlate().setHeight(0);¶		newPlate.getPlate().setWidth(0);¶		¶		if (full) {¶			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y+fullPlateOffset);¶			fullPlateOffset = fullPlateOffset - 5;¶		} else {¶			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y);¶		}¶		¶		cookingCommand = new ACookingPlateCommand(cookingAnimator, newPlate, 40, 15);¶		Thread thread = new Thread (cookingCommand);¶		thread.start();¶	}¶	¶	public void serve(APlate plate) {¶		//Checks to see if the buffer is full. If it is, then can't serve.¶		resetLineColors();¶		if(checkIfFull()) {¶			resetLineColors();¶			return;¶		}¶		¶		queuedList.add(plate);¶		¶		int workingPlatePlace = queuedList.size();¶		FlexibleTextShape platePlace = new AStringModel(Integer.toString(workingPlatePlace));¶		plate.setText(platePlace);¶		¶		changeLineColors(workingPlatePlace);¶		servingCommand = new AServingPlateCommand(servingAnimator,plate,PAUSE, bufferXValues[workingPlatePlace], bufferYValues[workingPlatePlace]);¶		Thread thread = new Thread(servingCommand);¶		thread.start();¶		isFull[workingPlatePlace] = true;¶	}¶	¶	public void order(OEShapeModel bell) {¶		if(checkIfFull()) {¶			resetLineColors();¶			resetBuffer();¶		}¶		bellIntegerList.add(0);¶		int bellPlace = findBell(bell.getCenterY());¶		bellsList.get(bellPlace).getText().setText(String.valueOf(bellIntegerList.size()-1));¶		¶		int platePlace = findFirstAvailablePlate();¶		//servingCommand = new AServingPlateCommand(servingAnimator,plateList.get(platePlace),PAUSE, bell.getCenterX() , bell.getCenterY());¶		Thread thread = new Thread(servingCommand);¶		thread.start();¶		¶		//cookingCommand = new ACookingPlateCommand(cookingAnimator, plateList.get(0), 0, 15);¶		Thread eatingThread = new Thread (cookingCommand);¶		eatingThread.start();¶		//plateList.get(0).getText().setText("");¶	}¶	¶	public void eat() {¶		//plateList.remove(0);¶	}¶	¶	@Override¶	@Visible(false)¶	public int findBell(int centerY) {¶		for(int i=0; i<bellsList.size();i++) {¶			if(bellsList.get(i).getBell().getCenterY() == centerY) {¶				return i;¶			}¶		}¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public int findFirstAvailablePlate() {¶		for (int i=0; i<isFull.length;i++) {¶			if(isFull[i] == true) {¶				return i;¶			}¶		}¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public void resetBuffer() {¶		¶		for (int i=0; i<isFull.length;i++) {¶			isFull[i] = false;¶		}¶	}¶	¶	@Override¶	@Visible(false)¶	public int findPatron(OEShapeModel patronHead) {¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public boolean checkIfFull() {¶		for (int i=0; i<isFull.length;i++) {¶			if (isFull[i] == false) {¶				full = false;¶				return full;¶			}¶		}¶		full = true;¶		return full;¶	}¶	¶	@Override¶	@Visible(false)¶	public void changeLineColors(int workingPlatePlace) {¶		if(workingPlatePlace == lineArray.length-1) {¶			lineArray[workingPlatePlace].setColor(Color.GREEN);¶			lineArray[0].setColor(Color.GREEN);¶		} else {¶			lineArray[workingPlatePlace].setColor(Color.GREEN);¶			lineArray[workingPlatePlace+1].setColor(Color.GREEN);¶		}¶	}¶	¶	¶	@Override¶	@Visible(false)¶	public void resetLineColors() {¶		for (int i=0; i<lineArray.length; i++) {¶			lineArray[i].setColor(Color.WHITE);¶		}¶	}¶	¶	//Getters for properties of the scene¶	@Override¶	public List<AChef> getChefList() {¶		return chefList;¶	}¶	¶	@Override¶	public List<APatron> getPatronList() {¶		return patronList;¶	}¶	¶	@Override¶	public BoundedBuffer getBuffer() {¶		return buffer;¶	}¶	¶	@Override¶	"), Diff(DELETE,"public List<APlate> getPlateList() {¶		return plateList;¶	}	¶	¶	@Override¶	"), Diff(EQUAL,"@util.annotations.Visible(false)¶	public Queue<APlate> getQueuedList() {¶		return queuedList;¶	}¶	¶	@Override¶	public List<ABell> getBellsList() {¶		return bellsList;¶	}¶	¶	@Override¶	@Visible(false)¶	public Queue<ABell> getQueueBellList() {¶		return queueBellList;¶	}"), Diff(DELETE,"¶¶	@Override¶	public void serve() {¶		// TODO Auto-generated method stub¶		¶	}"), Diff(EQUAL,"¶}¶")]]]></diff>
    <snapshot><![CDATA[package graphics;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

import animations.ACookingPlateAnimator;
import animations.ACookingPlateCommand;
import animations.AServingPlateAnimator;
import animations.AServingPlateCommand;
import animations.CookingPlateAnimator;
import animations.ServingPlateAnimator;
import bus.uigen.OEFrame;
import bus.uigen.ObjectEditor;
import bus.uigen.shapes.ALineModel;
import bus.uigen.shapes.AStringModel;
import bus.uigen.shapes.AnImageModel;
import bus.uigen.shapes.OEShapeModel;
import shapes.FlexibleTextShape;
import util.annotations.EditablePropertyNames;
import util.annotations.Label;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Visible;
import util.misc.ThreadSupport;

import java.awt.Color;

@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({
	"patronList",
	"chefList",
	"buffer",
	"queuedList",
	"bellsList",
	"queueBellList"
})
@EditablePropertyNames({
})
public class AProducerConsumerScene2 implements ProducerConsumerScene2 {
	
	//Avatar offsets inside scene
	int[] chefXValues = {120,-50,-50,120};
	int[] chefYValues = {-50,35,210,320};
	int[] patronXValues = {650,850,850,650};
	int[] patronYValues = {-50,35,220,320};
	int[] bellXValues = {680,880,880,680};
	int[] bellYValues = {75,160,345,445};
	int INIT_HEAD_Y = 60;
	int INIT_HEAD_X = 163;
	int INIT_HEAD_HEIGHT = 90;
	int INIT_HEAD_WIDTH = 80;
	int PLATE_OFFSET_X = 30;
	int PLATE_OFFSET_Y = 10;
	int PAUSE = 5;
	
	//Booleans that help with the functionality of the below methods
	boolean INIT_COOK = true;
	boolean full = false;
	int fullPlateOffset = -5;
	
	//Defining the chef and patron images
	String[] chefImages = {"images/0.png","images/1.png","images/2.png","images/3.png"};
	String[] patronImages = {"images/4.png", "images/5.png", "images/6.png", "images/7.png"};
	
	//Buffer arrays
	int[] bufferXValues = {625, 680, 680, 620, 535, 460, 460, 535};
	int[] bufferYValues = {200, 275, 365, 425, 425, 365, 275, 200};
	boolean[] isFull = {false, false, false, false, false, false, false, false};
	
	//The properties of our class
	List<APatron> patronList;
	List<AChef> chefList;
	BoundedBuffer buffer = new ABoundedBuffer();
	
	//This list will keep a track of the plates that enter the buffer so that FIFO
	Queue<APlate> queuedList;
	
	OEShapeModel[] lineArray = {buffer.getLineTwo(), buffer.getLineThree(), buffer.getLineFour(), 
								buffer.getLineFive(), buffer.getLineSix(), buffer.getLineSeven(), 
								buffer.getLineEight(), buffer.getLineOne()};
	
	List<ABell> bellsList;
	Queue<ABell> queueBellList;
	int[] bellValues = {127, 212, 397, 497};
	Queue<Integer> bellIntegerList;
	
	ACookingPlateCommand cookingCommand;
	CookingPlateAnimator cookingAnimator;
	
	AServingPlateCommand servingCommand;
	ServingPlateAnimator servingAnimator;
	
	//The constructor sets the scene with one chef, patron, a buffer, and a plate (not visible)
	public AProducerConsumerScene2() {
		patronList = new ArrayList<APatron>();
		chefList = new ArrayList<AChef>();
		//buffer = new ABoundedBuffer();
		
		queuedList = new LinkedList<APlate>();
		bellsList = new ArrayList<ABell>();
		queueBellList = new LinkedList<ABell>();
		bellIntegerList = new LinkedList<Integer>();
		
		patronList.add(0, new APatron());
		OEShapeModel initPatronHead = new AnImageModel(patronImages[0]);
		initPatronHead.setX(INIT_HEAD_X);
		initPatronHead.setY(INIT_HEAD_Y);
		initPatronHead.setHeight(INIT_HEAD_HEIGHT);
		initPatronHead.setWidth(INIT_HEAD_WIDTH);
		patronList.get(0).patron.setHead(initPatronHead);
		patronList.get(0).move(patronXValues[0], patronYValues[0]);
		
		chefList.add(0, new AChef());
		OEShapeModel initChefHead = new AnImageModel(chefImages[0]);
		initChefHead.setX(INIT_HEAD_X);
		initChefHead.setY(INIT_HEAD_Y);
		initChefHead.setHeight(INIT_HEAD_HEIGHT);
		initChefHead.setWidth(INIT_HEAD_WIDTH);
		chefList.get(0).chef.setHead(initChefHead);
		chefList.get(0).move(chefXValues[0], chefYValues[0]);
		
		queuedList.add(new APlate());
		queuedList.peek().getPlate().setHeight(0);
		queuedList.peek().getPlate().setWidth(0);
		
		cookingAnimator = new ACookingPlateAnimator();
		servingAnimator = new AServingPlateAnimator();
		
		bellsList.add(new ABell());
		bellsList.get(0).getBell().setHeight(0);
		bellsList.get(0).getBell().setWidth(0);
		
		queueBellList.add(new ABell());
		queueBellList.peek().getBell().setHeight(0);
		queueBellList.peek().getBell().setWidth(0);
		
		bellIntegerList.add(0);
	}
	
	//Producer consumer methods
	
	//Init Scene sets the number of patrons and chefs in the scene
	@Label("Init Scene")
	public void initScene(int patronAmount, int chefAmount) {
		bellsList.clear();
		for (int i=0; i<patronAmount; i++) { 
			APatron patron = new APatron();
			patronList.add(i, patron);
			OEShapeModel newHead = new AnImageModel(patronImages[i]);
			patron.patron.setHead(newHead); 
			newHead.setX(INIT_HEAD_X); 
			newHead.setY(INIT_HEAD_Y);
			newHead.setHeight(INIT_HEAD_HEIGHT);
			newHead.setWidth(INIT_HEAD_WIDTH);
			patron.move(patronXValues[i], patronYValues[i]);
			
			bellsList.add(new ABell());
			bellsList.get(i).move(bellXValues[i], bellYValues[i]);
		}
		for (int i=0; i<chefAmount; i++) {
			AChef chef = new AChef();
			chefList.add(i, chef);
			OEShapeModel newHead = new AnImageModel(chefImages[i]);
			chef.chef.setHead(newHead);
			newHead.setX(INIT_HEAD_X); 
			newHead.setY(INIT_HEAD_Y);
			newHead.setHeight(INIT_HEAD_HEIGHT);
			newHead.setWidth(INIT_HEAD_WIDTH);
			chef.move(chefXValues[i], chefYValues[i]);
		}
	}
	
	//Once the head of an avatar is chosen, it makes the plate that they "cook" appear
	public void cook(OEShapeModel head) {
		if (INIT_COOK) {
			INIT_COOK=!INIT_COOK;
			queuedList.remove();
		}
		
		int headX = head.getCenterX();
		int headY = head.getCenterY();
		
		APlate newPlate = new APlate();
		newPlate.getPlate().setHeight(0);
		newPlate.getPlate().setWidth(0);
		
		if (full) {
			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y+fullPlateOffset);
			fullPlateOffset = fullPlateOffset - 5;
		} else {
			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y);
		}
		
		cookingCommand = new ACookingPlateCommand(cookingAnimator, newPlate, 40, 15);
		Thread thread = new Thread (cookingCommand);
		thread.start();
	}
	
	public void serve(APlate plate) {
		//Checks to see if the buffer is full. If it is, then can't serve.
		resetLineColors();
		if(checkIfFull()) {
			resetLineColors();
			return;
		}
		
		queuedList.add(plate);
		
		int workingPlatePlace = queuedList.size();
		FlexibleTextShape platePlace = new AStringModel(Integer.toString(workingPlatePlace));
		plate.setText(platePlace);
		
		changeLineColors(workingPlatePlace);
		servingCommand = new AServingPlateCommand(servingAnimator,plate,PAUSE, bufferXValues[workingPlatePlace], bufferYValues[workingPlatePlace]);
		Thread thread = new Thread(servingCommand);
		thread.start();
		isFull[workingPlatePlace] = true;
	}
	
	public void order(OEShapeModel bell) {
		if(checkIfFull()) {
			resetLineColors();
			resetBuffer();
		}
		bellIntegerList.add(0);
		int bellPlace = findBell(bell.getCenterY());
		bellsList.get(bellPlace).getText().setText(String.valueOf(bellIntegerList.size()-1));
		
		int platePlace = findFirstAvailablePlate();
		//servingCommand = new AServingPlateCommand(servingAnimator,plateList.get(platePlace),PAUSE, bell.getCenterX() , bell.getCenterY());
		Thread thread = new Thread(servingCommand);
		thread.start();
		
		//cookingCommand = new ACookingPlateCommand(cookingAnimator, plateList.get(0), 0, 15);
		Thread eatingThread = new Thread (cookingCommand);
		eatingThread.start();
		//plateList.get(0).getText().setText("");
	}
	
	public void eat() {
		//plateList.remove(0);
	}
	
	@Override
	@Visible(false)
	public int findBell(int centerY) {
		for(int i=0; i<bellsList.size();i++) {
			if(bellsList.get(i).getBell().getCenterY() == centerY) {
				return i;
			}
		}
		return 0;
	}
	
	@Override
	@Visible(false)
	public int findFirstAvailablePlate() {
		for (int i=0; i<isFull.length;i++) {
			if(isFull[i] == true) {
				return i;
			}
		}
		return 0;
	}
	
	@Override
	@Visible(false)
	public void resetBuffer() {
		
		for (int i=0; i<isFull.length;i++) {
			isFull[i] = false;
		}
	}
	
	@Override
	@Visible(false)
	public int findPatron(OEShapeModel patronHead) {
		return 0;
	}
	
	@Override
	@Visible(false)
	public boolean checkIfFull() {
		for (int i=0; i<isFull.length;i++) {
			if (isFull[i] == false) {
				full = false;
				return full;
			}
		}
		full = true;
		return full;
	}
	
	@Override
	@Visible(false)
	public void changeLineColors(int workingPlatePlace) {
		if(workingPlatePlace == lineArray.length-1) {
			lineArray[workingPlatePlace].setColor(Color.GREEN);
			lineArray[0].setColor(Color.GREEN);
		} else {
			lineArray[workingPlatePlace].setColor(Color.GREEN);
			lineArray[workingPlatePlace+1].setColor(Color.GREEN);
		}
	}
	
	
	@Override
	@Visible(false)
	public void resetLineColors() {
		for (int i=0; i<lineArray.length; i++) {
			lineArray[i].setColor(Color.WHITE);
		}
	}
	
	//Getters for properties of the scene
	@Override
	public List<AChef> getChefList() {
		return chefList;
	}
	
	@Override
	public List<APatron> getPatronList() {
		return patronList;
	}
	
	@Override
	public BoundedBuffer getBuffer() {
		return buffer;
	}
	
	@Override
	@util.annotations.Visible(false)
	public Queue<APlate> getQueuedList() {
		return queuedList;
	}
	
	@Override
	public List<ABell> getBellsList() {
		return bellsList;
	}
	
	@Override
	@Visible(false)
	public Queue<ABell> getQueueBellList() {
		return queueBellList;
	}
}
]]></snapshot>
  </Command>
  <Command __id="1800" _type="PauseCommand" date="Sat Feb 25 11:04:06 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="28293120">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[4730]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1802" _type="ProgramExecutionEvent" className="/ProducersConsumersV3/src/main/Main.java" date="Sat Feb 25 11:04:18 EST 2023" kind="HitBreakPoint" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="28304986" type="Run" />
  <Command __id="1804" _type="RunCommand" className="/ProducersConsumersV3/src/main/Main.java" date="Sat Feb 25 11:04:18 EST 2023" kind="HitBreakPoint" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="28304986" type="Run" />
  <Command __id="1805" _type="ProgramExecutionEvent" className="(Unknown)" date="Sat Feb 25 11:04:18 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1677312753280" timestamp="28305371" type="Run" />
  <Command __id="1806" _type="ProgramExecutionEvent" className="(Unknown)" date="Sat Feb 25 11:04:18 EST 2023" kind="StepInto" projectName="(Unknown)" starttimestamp="1677312753280" timestamp="28305408" type="Run" />
  <Command __id="1807" _type="ProgramExecutionEvent" className="(Unknown)" date="Sat Feb 25 11:04:18 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1677312753280" timestamp="28305630" type="Run" />
  <Command __id="1808" _type="ShellCommand" date="Sat Feb 25 11:04:19 EST 2023" starttimestamp="1677312753280" timestamp="28305791" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1810" _type="PauseCommand" date="Sat Feb 25 11:04:21 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="28307981">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2190]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1835" _type="PauseCommand" date="Sat Feb 25 11:05:05 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="28352481">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[2216]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1837" _type="MoveCaretCommand" caretOffset="82252" date="Sat Feb 25 11:05:06 EST 2023" docOffset="82963" starttimestamp="1677312753280" timestamp="28352894" />
  <Command __id="1838" _type="MoveCaretCommand" caretOffset="413" date="Sat Feb 25 11:05:06 EST 2023" docOffset="518" starttimestamp="1677312753280" timestamp="28352898" />
  <Command __id="1834" _type="DiffBasedFileOpenCommand" date="Sat Feb 25 11:05:05 EST 2023" projectName="null" starttimestamp="1677312753280" timestamp="28352481">
    <filePath><![CDATA[null]]></filePath>
    <diff><![CDATA[null]]></diff>
  </Command>
  <Command __id="1836" _type="DiffBasedFileOpenCommand" date="Sat Feb 25 11:05:05 EST 2023" docASTNodeCount="151" docActiveCodeLength="877" docExpressionCount="66" docLength="877" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="28352614">
    <filePath><![CDATA[C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\graphics\ProducerConsumerScene2.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package graphics;¶¶import java.util.List;¶import java.util.Queue;¶¶import bus.uigen.shapes.AnImageModel;¶import bus.uigen.shapes.OEShapeModel;¶¶public interface ProducerConsumerScene2 {¶	public List<AChef> getChefList();¶	public List<APatron> getPatronList();¶	public Queue<APlate> getQueuedList();¶	public BoundedBuffer getBuffer();¶	public Queue<ABell> getQueueBellList();¶	public void initScene(int patronAmount, int chefAmount);¶	public void cook(OEShapeModel head);¶	public void serve(APlate plate);¶	public boolean checkIfFull();¶	public void changeLineColors(int workingPlatePlace);¶	public void resetLineColors();¶	public int findPatron(OEShapeModel patronHead);¶	public List<ABell> getBellsList();¶	public int findBell(int centerY);¶	public void order(OEShapeModel bell);¶	public int findFirstAvailablePlate();¶	public void resetBuffer();¶}¶")]]]></diff>
  </Command>
  <Command __id="1840" _type="PauseCommand" date="Sat Feb 25 11:05:07 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="28354277">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1379]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1841" _type="MoveCaretCommand" caretOffset="5164" date="Sat Feb 25 11:05:07 EST 2023" docOffset="6044" starttimestamp="1677312753280" timestamp="28354351" />
  <Command __id="1843" _type="PauseCommand" date="Sat Feb 25 11:05:10 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="28356943">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2592]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1899" _type="PauseCommand" date="Sat Feb 25 11:06:04 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="28411300">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[1217]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1902" _type="ProgramExecutionEvent" className="(Unknown)" date="Sat Feb 25 11:06:10 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1677312753280" timestamp="28417309" type="Debug" />
  <Command __id="1904" _type="ProgramExecutionEvent" className="/ProducersConsumersV3/src/main/Main.java" date="Sat Feb 25 11:06:10 EST 2023" kind="HitBreakPoint" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="28417309" type="Run" />
  <Command __id="1905" _type="ProgramExecutionEvent" className="(Unknown)" date="Sat Feb 25 11:06:10 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1677312753280" timestamp="28417309" type="Debug" />
  <Command __id="1906" _type="ProgramExecutionEvent" className="/ProducersConsumersV3/src/main/Main.java" date="Sat Feb 25 11:06:10 EST 2023" kind="HitBreakPoint" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="28417309" type="Run" />
  <Command __id="1908" _type="PauseCommand" date="Sat Feb 25 11:06:17 EST 2023" range="5s-10s" starttimestamp="1677312753280" timestamp="28423986">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[6677]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1907" _type="MoveCaretCommand" caretOffset="4904" date="Sat Feb 25 11:06:17 EST 2023" docOffset="5784" starttimestamp="1677312753280" timestamp="28423986" />
  <Command __id="1910" _type="PauseCommand" date="Sat Feb 25 11:06:21 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="28427833">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3847]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1909" _type="MoveCaretCommand" caretOffset="4899" date="Sat Feb 25 11:06:21 EST 2023" docOffset="5779" starttimestamp="1677312753280" timestamp="28427833" />
  <Command __id="1912" _type="PauseCommand" date="Sat Feb 25 11:06:28 EST 2023" range="5s-10s" starttimestamp="1677312753280" timestamp="28435659">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[7826]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2123" _type="ProgramExecutionEvent" className="(Unknown)" date="Sat Feb 25 11:09:28 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1677312753280" timestamp="28614754" type="Debug" />
  <Command __id="2125" _type="ProgramExecutionEvent" className="/ProducersConsumersV3/src/main/Main.java" date="Sat Feb 25 11:09:28 EST 2023" kind="HitBreakPoint" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="28614755" type="Run" />
  <Command __id="2126" _type="ProgramExecutionEvent" className="(Unknown)" date="Sat Feb 25 11:09:28 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1677312753280" timestamp="28614755" type="Debug" />
  <Command __id="2127" _type="ProgramExecutionEvent" className="/ProducersConsumersV3/src/main/Main.java" date="Sat Feb 25 11:09:28 EST 2023" kind="HitBreakPoint" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="28614755" type="Run" />
  <Command __id="1919" _type="DiffBasedFileOpenCommand" date="Sat Feb 25 11:06:34 EST 2023" projectName="null" starttimestamp="1677312753280" timestamp="28441606">
    <filePath><![CDATA[null]]></filePath>
    <diff><![CDATA[null]]></diff>
  </Command>
  <Command __id="2129" _type="PauseCommand" date="Sat Feb 25 11:09:51 EST 2023" range="20s-30s" starttimestamp="1677312753280" timestamp="28638587">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[23832]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2128" _type="DiffBasedFileOpenCommand" date="Sat Feb 25 11:09:51 EST 2023" docASTNodeCount="1558" docActiveCodeLength="9140" docExpressionCount="1068" docLength="10070" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="28638587">
    <filePath><![CDATA[C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\graphics\AProducerConsumerScene2.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package graphics;¶¶import java.util.ArrayList;¶import java.util.LinkedList;¶import java.util.List;¶import java.util.Queue;¶¶import animations.ACookingPlateAnimator;¶import animations.ACookingPlateCommand;¶import animations.AServingPlateAnimator;¶import animations.AServingPlateCommand;¶import animations.CookingPlateAnimator;¶import animations.ServingPlateAnimator;¶import bus.uigen.OEFrame;¶import bus.uigen.ObjectEditor;¶import bus.uigen.shapes.ALineModel;¶import bus.uigen.shapes.AStringModel;¶import bus.uigen.shapes.AnImageModel;¶import bus.uigen.shapes.OEShapeModel;¶import shapes.FlexibleTextShape;¶import util.annotations.EditablePropertyNames;¶import util.annotations.Label;¶import util.annotations.PropertyNames;¶import util.annotations.StructurePattern;¶import util.annotations.StructurePatternNames;¶import util.annotations.Visible;¶import util.misc.ThreadSupport;¶¶import java.awt.Color;¶¶@StructurePattern(StructurePatternNames.BEAN_PATTERN)¶@PropertyNames({¶	"patronList",¶	"chefList",¶	"buffer",¶	"queuedList",¶	"bellsList",¶	"queueBellList"¶})¶@EditablePropertyNames({¶})¶public class AProducerConsumerScene2 implements ProducerConsumerScene2 {¶	¶	//Avatar offsets inside scene¶	int[] chefXValues = {120,-50,-50,120};¶	int[] chefYValues = {-50,35,210,320};¶	int[] patronXValues = {650,850,850,650};¶	int[] patronYValues = {-50,35,220,320};¶	int[] bellXValues = {680,880,880,680};¶	int[] bellYValues = {75,160,345,445};¶	int INIT_HEAD_Y = 60;¶	int INIT_HEAD_X = 163;¶	int INIT_HEAD_HEIGHT = 90;¶	int INIT_HEAD_WIDTH = 80;¶	int PLATE_OFFSET_X = 30;¶	int PLATE_OFFSET_Y = 10;¶	int PAUSE = 5;¶	¶	//Booleans that help with the functionality of the below methods¶	boolean INIT_COOK = true;¶	boolean full = false;¶	int fullPlateOffset = -5;¶	¶	//Defining the chef and patron images¶	String[] chefImages = {"images/0.png","images/1.png","images/2.png","images/3.png"};¶	String[] patronImages = {"images/4.png", "images/5.png", "images/6.png", "images/7.png"};¶	¶	//Buffer arrays¶	int[] bufferXValues = {625, 680, 680, 620, 535, 460, 460, 535};¶	int[] bufferYValues = {200, 275, 365, 425, 425, 365, 275, 200};¶	boolean[] isFull = {false, false, false, false, false, false, false, false};¶	¶	//The properties of our class¶	List<APatron> patronList;¶	List<AChef> chefList;¶	BoundedBuffer buffer = new ABoundedBuffer();¶	¶	//This list will keep a track of the plates that enter the buffer so that FIFO¶	Queue<APlate> queuedList;¶	¶	OEShapeModel[] lineArray = {buffer.getLineTwo(), buffer.getLineThree(), buffer.getLineFour(), ¶								buffer.getLineFive(), buffer.getLineSix(), buffer.getLineSeven(), ¶								buffer.getLineEight(), buffer.getLineOne()};¶	¶	List<ABell> bellsList;¶	Queue<ABell> queueBellList;¶	int[] bellValues = {127, 212, 397, 497};¶	Queue<Integer> bellIntegerList;¶	¶	ACookingPlateCommand cookingCommand;¶	CookingPlateAnimator cookingAnimator;¶	¶	AServingPlateCommand servingCommand;¶	ServingPlateAnimator servingAnimator;¶	¶	//The constructor sets the scene with one chef, patron, a buffer, and a plate (not visible)¶	public AProducerConsumerScene2() {¶		patronList = new ArrayList<APatron>();¶		chefList = new ArrayList<AChef>();¶		//buffer = new ABoundedBuffer();¶		¶		queuedList = new LinkedList<APlate>();¶		bellsList = new ArrayList<ABell>();¶		queueBellList = new LinkedList<ABell>();¶		bellIntegerList = new LinkedList<Integer>();¶		¶		patronList.add(0, new APatron());¶		OEShapeModel initPatronHead = new AnImageModel(patronImages[0]);¶		initPatronHead.setX(INIT_HEAD_X);¶		initPatronHead.setY(INIT_HEAD_Y);¶		initPatronHead.setHeight(INIT_HEAD_HEIGHT);¶		initPatronHead.setWidth(INIT_HEAD_WIDTH);¶		patronList.get(0).patron.setHead(initPatronHead);¶		patronList.get(0).move(patronXValues[0], patronYValues[0]);¶		¶		chefList.add(0, new AChef());¶		OEShapeModel initChefHead = new AnImageModel(chefImages[0]);¶		initChefHead.setX(INIT_HEAD_X);¶		initChefHead.setY(INIT_HEAD_Y);¶		initChefHead.setHeight(INIT_HEAD_HEIGHT);¶		initChefHead.setWidth(INIT_HEAD_WIDTH);¶		chefList.get(0).chef.setHead(initChefHead);¶		chefList.get(0).move(chefXValues[0], chefYValues[0]);¶		¶		queuedList.add(new APlate());¶		queuedList.peek().getPlate().setHeight(0);¶		queuedList.peek().getPlate().setWidth(0);¶		¶		cookingAnimator = new ACookingPlateAnimator();¶		servingAnimator = new AServingPlateAnimator();¶		¶		bellsList.add(new ABell());¶		bellsList.get(0).getBell().setHeight(0);¶		bellsList.get(0).getBell().setWidth(0);¶		¶		queueBellList.add(new ABell());¶		queueBellList.peek().getBell().setHeight(0);¶		queueBellList.peek().getBell().setWidth(0);¶		¶		bellIntegerList.add(0);¶	}¶	¶	//Producer consumer methods¶	¶	//Init Scene sets the number of patrons and chefs in the scene¶	@Label("Init Scene")¶	public void initScene(int patronAmount, int chefAmount) {¶		bellsList.clear();¶		for (int i=0; i<patronAmount; i++) { ¶			APatron patron = new APatron();¶			patronList.add(i, patron);¶			OEShapeModel newHead = new AnImageModel(patronImages[i]);¶			patron.patron.setHead(newHead); ¶			newHead.setX(INIT_HEAD_X); ¶			newHead.setY(INIT_HEAD_Y);¶			newHead.setHeight(INIT_HEAD_HEIGHT);¶			newHead.setWidth(INIT_HEAD_WIDTH);¶			patron.move(patronXValues[i], patronYValues[i]);¶			¶			bellsList.add(new ABell());¶			bellsList.get(i).move(bellXValues[i], bellYValues[i]);¶		}¶		for (int i=0; i<chefAmount; i++) {¶			AChef chef = new AChef();¶			chefList.add(i, chef);¶			OEShapeModel newHead = new AnImageModel(chefImages[i]);¶			chef.chef.setHead(newHead);¶			newHead.setX(INIT_HEAD_X); ¶			newHead.setY(INIT_HEAD_Y);¶			newHead.setHeight(INIT_HEAD_HEIGHT);¶			newHead.setWidth(INIT_HEAD_WIDTH);¶			chef.move(chefXValues[i], chefYValues[i]);¶		}¶	}¶	¶	//Once the head of an avatar is chosen, it makes the plate that they "cook" appear¶	public void cook(OEShapeModel head) {¶		if (INIT_COOK) {¶			INIT_COOK=!INIT_COOK;¶			queuedList.remove();¶		}¶		¶		int headX = head.getCenterX();¶		int headY = head.getCenterY();¶		¶		APlate newPlate = new APlate();¶		newPlate.getPlate().setHeight(0);¶		newPlate.getPlate().setWidth(0);¶		¶		if (full) {¶			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y+fullPlateOffset);¶			fullPlateOffset = fullPlateOffset - 5;¶		} else {¶			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y);¶		}¶		¶		cookingCommand = new ACookingPlateCommand(cookingAnimator, newPlate, 40, 15);¶		Thread thread = new Thread (cookingCommand);¶		thread.start();¶	}¶	¶	public void serve(APlate plate) {¶		//Checks to see if the buffer is full. If it is, then can't serve.¶		resetLineColors();¶		if(checkIfFull()) {¶			resetLineColors();¶			return;¶		}¶		¶		queuedList.add(plate);¶		¶		int workingPlatePlace = queuedList.size();¶		FlexibleTextShape platePlace = new AStringModel(Integer.toString(workingPlatePlace));¶		plate.setText(platePlace);¶		¶		changeLineColors(workingPlatePlace);¶		servingCommand = new AServingPlateCommand(servingAnimator,plate,PAUSE, bufferXValues[workingPlatePlace], bufferYValues[workingPlatePlace]);¶		Thread thread = new Thread(servingCommand);¶		thread.start();¶		isFull[workingPlatePlace] = true;¶	}¶	¶	public void order(OEShapeModel bell) {¶		if(checkIfFull()) {¶			resetLineColors();¶			resetBuffer();¶		}¶		bellIntegerList.add(0);¶		int bellPlace = findBell(bell.getCenterY());¶		bellsList.get(bellPlace).getText().setText(String.valueOf(bellIntegerList.size()-1));¶		¶		int platePlace = findFirstAvailablePlate();¶		//servingCommand = new AServingPlateCommand(servingAnimator,plateList.get(platePlace),PAUSE, bell.getCenterX() , bell.getCenterY());¶		Thread thread = new Thread(servingCommand);¶		thread.start();¶		¶		//cookingCommand = new ACookingPlateCommand(cookingAnimator, plateList.get(0), 0, 15);¶		Thread eatingThread = new Thread (cookingCommand);¶		eatingThread.start();¶		//plateList.get(0).getText().setText("");¶	}¶	¶	public void eat() {¶		//plateList.remove(0);¶	}¶	¶	@Override¶	@Visible(false)¶	public int findBell(int centerY) {¶		for(int i=0; i<bellsList.size();i++) {¶			if(bellsList.get(i).getBell().getCenterY() == centerY) {¶				return i;¶			}¶		}¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public int findFirstAvailablePlate() {¶		for (int i=0; i<isFull.length;i++) {¶			if(isFull[i] == true) {¶				return i;¶			}¶		}¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public void resetBuffer() {¶		¶		for (int i=0; i<isFull.length;i++) {¶			isFull[i] = false;¶		}¶	}¶	¶	@Override¶	@Visible(false)¶	public int findPatron(OEShapeModel patronHead) {¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public boolean checkIfFull() {¶		for (int i=0; i<isFull.length;i++) {¶			if (isFull[i] == false) {¶				full = false;¶				return full;¶			}¶		}¶		full = true;¶		return full;¶	}¶	¶	@Override¶	@Visible(false)¶	public void changeLineColors(int workingPlatePlace) {¶		if(workingPlatePlace == lineArray.length-1) {¶			lineArray[workingPlatePlace].setColor(Color.GREEN);¶			lineArray[0].setColor(Color.GREEN);¶		} else {¶			lineArray[workingPlatePlace].setColor(Color.GREEN);¶			lineArray[workingPlatePlace+1].setColor(Color.GREEN);¶		}¶	}¶	¶	¶	@Override¶	@Visible(false)¶	public void resetLineColors() {¶		for (int i=0; i<lineArray.length; i++) {¶			lineArray[i].setColor(Color.WHITE);¶		}¶	}¶	¶	//Getters for properties of the scene¶	@Override¶	public List<AChef> getChefList() {¶		return chefList;¶	}¶	¶	@Override¶	public List<APatron> getPatronList() {¶		return patronList;¶	}¶	¶	@Override¶	public BoundedBuffer getBuffer() {¶		return buffer;¶	}¶	¶	@Override¶	@util.annotations.Visible(false)¶	public Queue<APlate> getQueuedList() {¶		return queuedList;¶	}¶	¶	@Override¶	public List<ABell> getBellsList() {¶		return bellsList;¶	}¶	¶	@Override¶	@Visible(false)¶	public Queue<ABell> getQueueBellList() {¶		return queueBellList;¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="2130" _type="MoveCaretCommand" caretOffset="2593" date="Sat Feb 25 11:09:52 EST 2023" docOffset="3473" starttimestamp="1677312753280" timestamp="28638767" />
  <Command __id="2131" _type="DiffBasedFileOpenCommand" date="Sat Feb 25 11:09:52 EST 2023" docASTNodeCount="151" docActiveCodeLength="877" docExpressionCount="66" docLength="877" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="28639188">
    <filePath><![CDATA[C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\graphics\ProducerConsumerScene2.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package graphics;¶¶import java.util.List;¶import java.util.Queue;¶¶import bus.uigen.shapes.AnImageModel;¶import bus.uigen.shapes.OEShapeModel;¶¶public interface ProducerConsumerScene2 {¶	public List<AChef> getChefList();¶	public List<APatron> getPatronList();¶	public Queue<APlate> getQueuedList();¶	public BoundedBuffer getBuffer();¶	public Queue<ABell> getQueueBellList();¶	public void initScene(int patronAmount, int chefAmount);¶	public void cook(OEShapeModel head);¶	public void serve(APlate plate);¶	public boolean checkIfFull();¶	public void changeLineColors(int workingPlatePlace);¶	public void resetLineColors();¶	public int findPatron(OEShapeModel patronHead);¶	public List<ABell> getBellsList();¶	public int findBell(int centerY);¶	public void order(OEShapeModel bell);¶	public int findFirstAvailablePlate();¶	public void resetBuffer();¶}¶")]]]></diff>
  </Command>
  <Command __id="2132" _type="MoveCaretCommand" caretOffset="413" date="Sat Feb 25 11:09:52 EST 2023" docOffset="518" starttimestamp="1677312753280" timestamp="28639393" />
  <Command __id="2134" _type="MoveCaretCommand" caretOffset="2593" date="Sat Feb 25 11:09:53 EST 2023" docOffset="3473" starttimestamp="1677312753280" timestamp="28640373" />
  <Command __id="2136" _type="PauseCommand" date="Sat Feb 25 11:09:57 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="28644507">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[4134]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2135" _type="MoveCaretCommand" caretOffset="5088" date="Sat Feb 25 11:09:57 EST 2023" docOffset="5968" starttimestamp="1677312753280" timestamp="28644507" />
  <Command __id="2137" _type="MoveCaretCommand" caretOffset="5088" date="Sat Feb 25 11:09:57 EST 2023" docOffset="5968" starttimestamp="1677312753280" timestamp="28644508" />
  <Command __id="2139" _type="InsertStringCommand" date="Sat Feb 25 11:09:58 EST 2023" starttimestamp="1677312753280" timestamp="28644884" timestamp2="28644884">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2140" _type="InsertStringCommand" date="Sat Feb 25 11:09:58 EST 2023" starttimestamp="1677312753280" timestamp="28644884" timestamp2="28644884">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2142" _type="InsertStringCommand" date="Sat Feb 25 11:09:59 EST 2023" starttimestamp="1677312753280" timestamp="28645781" timestamp2="28645781">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="2143" _type="InsertStringCommand" date="Sat Feb 25 11:09:59 EST 2023" starttimestamp="1677312753280" timestamp="28645781" timestamp2="28645781">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="2145" _type="InsertStringCommand" date="Sat Feb 25 11:09:59 EST 2023" starttimestamp="1677312753280" timestamp="28646041" timestamp2="28646041">
    <data><![CDATA[y]]></data>
  </Command>
  <Command __id="2146" _type="InsertStringCommand" date="Sat Feb 25 11:09:59 EST 2023" starttimestamp="1677312753280" timestamp="28646041" timestamp2="28646041">
    <data><![CDATA[y]]></data>
  </Command>
  <Command __id="2148" _type="InsertStringCommand" date="Sat Feb 25 11:09:59 EST 2023" starttimestamp="1677312753280" timestamp="28646132" timestamp2="28646132">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2149" _type="InsertStringCommand" date="Sat Feb 25 11:09:59 EST 2023" starttimestamp="1677312753280" timestamp="28646132" timestamp2="28646132">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2151" _type="InsertStringCommand" date="Sat Feb 25 11:09:59 EST 2023" starttimestamp="1677312753280" timestamp="28646325" timestamp2="28646325">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2152" _type="InsertStringCommand" date="Sat Feb 25 11:09:59 EST 2023" starttimestamp="1677312753280" timestamp="28646325" timestamp2="28646325">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2154" _type="InsertStringCommand" date="Sat Feb 25 11:09:59 EST 2023" starttimestamp="1677312753280" timestamp="28646385" timestamp2="28646385">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2155" _type="InsertStringCommand" date="Sat Feb 25 11:09:59 EST 2023" starttimestamp="1677312753280" timestamp="28646385" timestamp2="28646385">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2157" _type="InsertStringCommand" date="Sat Feb 25 11:10:00 EST 2023" starttimestamp="1677312753280" timestamp="28646879" timestamp2="28646879">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="2158" _type="InsertStringCommand" date="Sat Feb 25 11:10:00 EST 2023" starttimestamp="1677312753280" timestamp="28646879" timestamp2="28646879">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="2160" _type="InsertStringCommand" date="Sat Feb 25 11:10:00 EST 2023" starttimestamp="1677312753280" timestamp="28647175" timestamp2="28647175">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="2161" _type="InsertStringCommand" date="Sat Feb 25 11:10:00 EST 2023" starttimestamp="1677312753280" timestamp="28647175" timestamp2="28647175">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="2162" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sat Feb 25 11:10:00 EST 2023" start_end="START" starttimestamp="1677312753280" timestamp="28647181" />
  <Command __id="2164" _type="PauseCommand" date="Sat Feb 25 11:10:02 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="28648765">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[1584]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[BreakPointCommand]]></next>
  </Command>
  <Command __id="2163" _type="BreakPointCommand" date="Sat Feb 25 11:10:02 EST 2023" lineNumber="178" starttimestamp="1677312753280" timestamp="28648765" type="BreakPointRemoved" />
  <Command __id="2165" _type="EclipseCommand" commandID="AUTOGEN:::org.eclipse.jdt.debug.CompilationUnitEditor.BreakpointRulerActions/org.eclipse.jdt.debug.ui.actions.ManageBreakpointRulerAction" date="Sat Feb 25 11:10:02 EST 2023" starttimestamp="1677312753280" timestamp="28648860" />
  <Command __id="2166" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sat Feb 25 11:10:02 EST 2023" start_end="END" starttimestamp="1677312753280" timestamp="28649617" />
  <Command __id="2167" _type="MoveCaretCommand" caretOffset="5067" date="Sat Feb 25 11:10:02 EST 2023" docOffset="5947" starttimestamp="1677312753280" timestamp="28649665" />
  <Command __id="2168" _type="MoveCaretCommand" caretOffset="5067" date="Sat Feb 25 11:10:02 EST 2023" docOffset="5947" starttimestamp="1677312753280" timestamp="28649665" />
  <Command __id="2170" _type="PauseCommand" date="Sat Feb 25 11:10:04 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="28650731">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1066]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2133" _type="DiffBasedFileOpenCommand" date="Sat Feb 25 11:09:53 EST 2023" docASTNodeCount="1558" docActiveCodeLength="9140" docExpressionCount="1068" docLength="10070" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="28640167">
    <filePath><![CDATA[C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\graphics\AProducerConsumerScene2.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package graphics;¶¶import java.util.ArrayList;¶import java.util.LinkedList;¶import java.util.List;¶import java.util.Queue;¶¶import animations.ACookingPlateAnimator;¶import animations.ACookingPlateCommand;¶import animations.AServingPlateAnimator;¶import animations.AServingPlateCommand;¶import animations.CookingPlateAnimator;¶import animations.ServingPlateAnimator;¶import bus.uigen.OEFrame;¶import bus.uigen.ObjectEditor;¶import bus.uigen.shapes.ALineModel;¶import bus.uigen.shapes.AStringModel;¶import bus.uigen.shapes.AnImageModel;¶import bus.uigen.shapes.OEShapeModel;¶import shapes.FlexibleTextShape;¶import util.annotations.EditablePropertyNames;¶import util.annotations.Label;¶import util.annotations.PropertyNames;¶import util.annotations.StructurePattern;¶import util.annotations.StructurePatternNames;¶import util.annotations.Visible;¶import util.misc.ThreadSupport;¶¶import java.awt.Color;¶¶@StructurePattern(StructurePatternNames.BEAN_PATTERN)¶@PropertyNames({¶	"patronList",¶	"chefList",¶	"buffer",¶	"queuedList",¶	"bellsList",¶	"queueBellList"¶})¶@EditablePropertyNames({¶})¶public class AProducerConsumerScene2 implements ProducerConsumerScene2 {¶	¶	//Avatar offsets inside scene¶	int[] chefXValues = {120,-50,-50,120};¶	int[] chefYValues = {-50,35,210,320};¶	int[] patronXValues = {650,850,850,650};¶	int[] patronYValues = {-50,35,220,320};¶	int[] bellXValues = {680,880,880,680};¶	int[] bellYValues = {75,160,345,445};¶	int INIT_HEAD_Y = 60;¶	int INIT_HEAD_X = 163;¶	int INIT_HEAD_HEIGHT = 90;¶	int INIT_HEAD_WIDTH = 80;¶	int PLATE_OFFSET_X = 30;¶	int PLATE_OFFSET_Y = 10;¶	int PAUSE = 5;¶	¶	//Booleans that help with the functionality of the below methods¶	boolean INIT_COOK = true;¶	boolean full = false;¶	int fullPlateOffset = -5;¶	¶	//Defining the chef and patron images¶	String[] chefImages = {"images/0.png","images/1.png","images/2.png","images/3.png"};¶	String[] patronImages = {"images/4.png", "images/5.png", "images/6.png", "images/7.png"};¶	¶	//Buffer arrays¶	int[] bufferXValues = {625, 680, 680, 620, 535, 460, 460, 535};¶	int[] bufferYValues = {200, 275, 365, 425, 425, 365, 275, 200};¶	boolean[] isFull = {false, false, false, false, false, false, false, false};¶	¶	//The properties of our class¶	List<APatron> patronList;¶	List<AChef> chefList;¶	BoundedBuffer buffer = new ABoundedBuffer();¶	¶	//This list will keep a track of the plates that enter the buffer so that FIFO¶	Queue<APlate> queuedList;¶	¶	OEShapeModel[] lineArray = {buffer.getLineTwo(), buffer.getLineThree(), buffer.getLineFour(), ¶								buffer.getLineFive(), buffer.getLineSix(), buffer.getLineSeven(), ¶								buffer.getLineEight(), buffer.getLineOne()};¶	¶	List<ABell> bellsList;¶	Queue<ABell> queueBellList;¶	int[] bellValues = {127, 212, 397, 497};¶	Queue<Integer> bellIntegerList;¶	¶	ACookingPlateCommand cookingCommand;¶	CookingPlateAnimator cookingAnimator;¶	¶	AServingPlateCommand servingCommand;¶	ServingPlateAnimator servingAnimator;¶	¶	//The constructor sets the scene with one chef, patron, a buffer, and a plate (not visible)¶	public AProducerConsumerScene2() {¶		patronList = new ArrayList<APatron>();¶		chefList = new ArrayList<AChef>();¶		//buffer = new ABoundedBuffer();¶		¶		queuedList = new LinkedList<APlate>();¶		bellsList = new ArrayList<ABell>();¶		queueBellList = new LinkedList<ABell>();¶		bellIntegerList = new LinkedList<Integer>();¶		¶		patronList.add(0, new APatron());¶		OEShapeModel initPatronHead = new AnImageModel(patronImages[0]);¶		initPatronHead.setX(INIT_HEAD_X);¶		initPatronHead.setY(INIT_HEAD_Y);¶		initPatronHead.setHeight(INIT_HEAD_HEIGHT);¶		initPatronHead.setWidth(INIT_HEAD_WIDTH);¶		patronList.get(0).patron.setHead(initPatronHead);¶		patronList.get(0).move(patronXValues[0], patronYValues[0]);¶		¶		chefList.add(0, new AChef());¶		OEShapeModel initChefHead = new AnImageModel(chefImages[0]);¶		initChefHead.setX(INIT_HEAD_X);¶		initChefHead.setY(INIT_HEAD_Y);¶		initChefHead.setHeight(INIT_HEAD_HEIGHT);¶		initChefHead.setWidth(INIT_HEAD_WIDTH);¶		chefList.get(0).chef.setHead(initChefHead);¶		chefList.get(0).move(chefXValues[0], chefYValues[0]);¶		¶		queuedList.add(new APlate());¶		queuedList.peek().getPlate().setHeight(0);¶		queuedList.peek().getPlate().setWidth(0);¶		¶		cookingAnimator = new ACookingPlateAnimator();¶		servingAnimator = new AServingPlateAnimator();¶		¶		bellsList.add(new ABell());¶		bellsList.get(0).getBell().setHeight(0);¶		bellsList.get(0).getBell().setWidth(0);¶		¶		queueBellList.add(new ABell());¶		queueBellList.peek().getBell().setHeight(0);¶		queueBellList.peek().getBell().setWidth(0);¶		¶		bellIntegerList.add(0);¶	}¶	¶	//Producer consumer methods¶	¶	//Init Scene sets the number of patrons and chefs in the scene¶	@Label("Init Scene")¶	public void initScene(int patronAmount, int chefAmount) {¶		bellsList.clear();¶		for (int i=0; i<patronAmount; i++) { ¶			APatron patron = new APatron();¶			patronList.add(i, patron);¶			OEShapeModel newHead = new AnImageModel(patronImages[i]);¶			patron.patron.setHead(newHead); ¶			newHead.setX(INIT_HEAD_X); ¶			newHead.setY(INIT_HEAD_Y);¶			newHead.setHeight(INIT_HEAD_HEIGHT);¶			newHead.setWidth(INIT_HEAD_WIDTH);¶			patron.move(patronXValues[i], patronYValues[i]);¶			¶			bellsList.add(new ABell());¶			bellsList.get(i).move(bellXValues[i], bellYValues[i]);¶		}¶		for (int i=0; i<chefAmount; i++) {¶			AChef chef = new AChef();¶			chefList.add(i, chef);¶			OEShapeModel newHead = new AnImageModel(chefImages[i]);¶			chef.chef.setHead(newHead);¶			newHead.setX(INIT_HEAD_X); ¶			newHead.setY(INIT_HEAD_Y);¶			newHead.setHeight(INIT_HEAD_HEIGHT);¶			newHead.setWidth(INIT_HEAD_WIDTH);¶			chef.move(chefXValues[i], chefYValues[i]);¶		}¶	}¶	¶	//Once the head of an avatar is chosen, it makes the plate that they "cook" appear¶	public void cook(OEShapeModel head) {¶		if (INIT_COOK) {¶			INIT_COOK=!INIT_COOK;¶			queuedList.remove();¶		}¶		¶		int headX = head.getCenterX();¶		int headY = head.getCenterY();¶		¶		APlate newPlate = new APlate();¶		newPlate.getPlate().setHeight(0);¶		newPlate.getPlate().setWidth(0);¶		¶		if (full) {¶			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y+fullPlateOffset);¶			fullPlateOffset = fullPlateOffset - 5;¶		} else {¶			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y);¶		}¶		¶		cookingCommand = new ACookingPlateCommand(cookingAnimator, newPlate, 40, 15);¶		Thread thread = new Thread (cookingCommand);¶		thread.start();¶	}¶	¶	public void serve(APlate plate) {¶		//Checks to see if the buffer is full. If it is, then can't serve.¶		resetLineColors();¶		if(checkIfFull()) {¶			resetLineColors();¶			return;¶		}¶		¶		queuedList.add(plate);¶		¶		int workingPlatePlace = queuedList.size();¶		FlexibleTextShape platePlace = new AStringModel(Integer.toString(workingPlatePlace));¶		plate.setText(platePlace);¶		¶		changeLineColors(workingPlatePlace);¶		servingCommand = new AServingPlateCommand(servingAnimator,plate,PAUSE, bufferXValues[workingPlatePlace], bufferYValues[workingPlatePlace]);¶		Thread thread = new Thread(servingCommand);¶		thread.start();¶		isFull[workingPlatePlace] = true;¶	}¶	¶	public void order(OEShapeModel bell) {¶		if(checkIfFull()) {¶			resetLineColors();¶			resetBuffer();¶		}¶		bellIntegerList.add(0);¶		int bellPlace = findBell(bell.getCenterY());¶		bellsList.get(bellPlace).getText().setText(String.valueOf(bellIntegerList.size()-1));¶		¶		int platePlace = findFirstAvailablePlate();¶		//servingCommand = new AServingPlateCommand(servingAnimator,plateList.get(platePlace),PAUSE, bell.getCenterX() , bell.getCenterY());¶		Thread thread = new Thread(servingCommand);¶		thread.start();¶		¶		//cookingCommand = new ACookingPlateCommand(cookingAnimator, plateList.get(0), 0, 15);¶		Thread eatingThread = new Thread (cookingCommand);¶		eatingThread.start();¶		//plateList.get(0).getText().setText("");¶	}¶	¶	public void eat() {¶		//plateList.remove(0);¶	}¶	¶	@Override¶	@Visible(false)¶	public int findBell(int centerY) {¶		for(int i=0; i<bellsList.size();i++) {¶			if(bellsList.get(i).getBell().getCenterY() == centerY) {¶				return i;¶			}¶		}¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public int findFirstAvailablePlate() {¶		for (int i=0; i<isFull.length;i++) {¶			if(isFull[i] == true) {¶				return i;¶			}¶		}¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public void resetBuffer() {¶		¶		for (int i=0; i<isFull.length;i++) {¶			isFull[i] = false;¶		}¶	}¶	¶	@Override¶	@Visible(false)¶	public int findPatron(OEShapeModel patronHead) {¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public boolean checkIfFull() {¶		for (int i=0; i<isFull.length;i++) {¶			if (isFull[i] == false) {¶				full = false;¶				return full;¶			}¶		}¶		full = true;¶		return full;¶	}¶	¶	@Override¶	@Visible(false)¶	public void changeLineColors(int workingPlatePlace) {¶		if(workingPlatePlace == lineArray.length-1) {¶			lineArray[workingPlatePlace].setColor(Color.GREEN);¶			lineArray[0].setColor(Color.GREEN);¶		} else {¶			lineArray[workingPlatePlace].setColor(Color.GREEN);¶			lineArray[workingPlatePlace+1].setColor(Color.GREEN);¶		}¶	}¶	¶	¶	@Override¶	@Visible(false)¶	public void resetLineColors() {¶		for (int i=0; i<lineArray.length; i++) {¶			lineArray[i].setColor(Color.WHITE);¶		}¶	}¶	¶	//Getters for properties of the scene¶	@Override¶	public List<AChef> getChefList() {¶		return chefList;¶	}¶	¶	@Override¶	public List<APatron> getPatronList() {¶		return patronList;¶	}¶	¶	@Override¶	public BoundedBuffer getBuffer() {¶		return buffer;¶	}¶	¶	@Override¶	@util.annotations.Visible(false)¶	public Queue<APlate> getQueuedList() {¶		return queuedList;¶	}¶	¶	@Override¶	public List<ABell> getBellsList() {¶		return bellsList;¶	}¶	¶	@Override¶	@Visible(false)¶	public Queue<ABell> getQueueBellList() {¶		return queueBellList;¶	}¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="2138" _type="Insert" date="Sat Feb 25 11:09:58 EST 2023" docASTNodeCount="1560" docActiveCodeLength="9151" docExpressionCount="1069" docLength="10081" length="11" offset="5968" repeat="8" starttimestamp="1677312753280" timestamp="28644853" timestamp2="28647128">
    <text><![CDATA[
		System.]]></text>
  </DocumentChange>
  <Command __id="2169" _type="MoveCaretCommand" caretOffset="5099" date="Sat Feb 25 11:10:04 EST 2023" docOffset="5979" starttimestamp="1677312753280" timestamp="28650731" />
  <Command __id="2171" _type="MoveCaretCommand" caretOffset="5099" date="Sat Feb 25 11:10:04 EST 2023" docOffset="5979" starttimestamp="1677312753280" timestamp="28650731" />
  <DocumentChange __id="2172" _type="Insert" date="Sat Feb 25 11:10:04 EST 2023" docASTNodeCount="1565" docActiveCodeLength="9165" docExpressionCount="1074" docLength="10095" length="14" offset="5979" repeat="13" starttimestamp="1677312753280" timestamp="28651264" timestamp2="28654785">
    <text><![CDATA[out.println(M)]]></text>
  </DocumentChange>
  <Command __id="2173" _type="InsertStringCommand" date="Sat Feb 25 11:10:04 EST 2023" starttimestamp="1677312753280" timestamp="28651305" timestamp2="28651305">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="2174" _type="InsertStringCommand" date="Sat Feb 25 11:10:04 EST 2023" starttimestamp="1677312753280" timestamp="28651306" timestamp2="28651306">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="2176" _type="InsertStringCommand" date="Sat Feb 25 11:10:04 EST 2023" starttimestamp="1677312753280" timestamp="28651451" timestamp2="28651451">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="2177" _type="InsertStringCommand" date="Sat Feb 25 11:10:04 EST 2023" starttimestamp="1677312753280" timestamp="28651451" timestamp2="28651451">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="2179" _type="InsertStringCommand" date="Sat Feb 25 11:10:04 EST 2023" starttimestamp="1677312753280" timestamp="28651580" timestamp2="28651580">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2180" _type="InsertStringCommand" date="Sat Feb 25 11:10:04 EST 2023" starttimestamp="1677312753280" timestamp="28651580" timestamp2="28651580">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2182" _type="InsertStringCommand" date="Sat Feb 25 11:10:05 EST 2023" starttimestamp="1677312753280" timestamp="28651794" timestamp2="28651794">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="2183" _type="InsertStringCommand" date="Sat Feb 25 11:10:05 EST 2023" starttimestamp="1677312753280" timestamp="28651794" timestamp2="28651794">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="2184" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sat Feb 25 11:10:05 EST 2023" start_end="START" starttimestamp="1677312753280" timestamp="28651797" />
  <Command __id="2195" _type="PauseCommand" date="Sat Feb 25 11:10:08 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="28654915">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[3118]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="2194" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sat Feb 25 11:10:08 EST 2023" start_end="END" starttimestamp="1677312753280" timestamp="28654915" />
  <DocumentChange __id="2196" _type="Delete" date="Sat Feb 25 11:10:08 EST 2023" docASTNodeCount="1564" docActiveCodeLength="9164" docExpressionCount="1073" docLength="10094" endLine="177" length="1" offset="5991" startLine="177" starttimestamp="1677312753280" timestamp="28655211">
    <text><![CDATA[M]]></text>
  </DocumentChange>
  <Command __id="2197" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 11:10:08 EST 2023" starttimestamp="1677312753280" timestamp="28655258" />
  <Command __id="2198" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 11:10:08 EST 2023" starttimestamp="1677312753280" timestamp="28655259" />
  <Command __id="2200" _type="InsertStringCommand" date="Sat Feb 25 11:10:08 EST 2023" starttimestamp="1677312753280" timestamp="28655577" timestamp2="28655577">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="2201" _type="InsertStringCommand" date="Sat Feb 25 11:10:08 EST 2023" starttimestamp="1677312753280" timestamp="28655578" timestamp2="28655578">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="2203" _type="InsertStringCommand" date="Sat Feb 25 11:10:09 EST 2023" starttimestamp="1677312753280" timestamp="28656304" timestamp2="28656304">
    <data><![CDATA[M]]></data>
  </Command>
  <Command __id="2204" _type="InsertStringCommand" date="Sat Feb 25 11:10:09 EST 2023" starttimestamp="1677312753280" timestamp="28656304" timestamp2="28656304">
    <data><![CDATA[M]]></data>
  </Command>
  <Command __id="2206" _type="InsertStringCommand" date="Sat Feb 25 11:10:09 EST 2023" starttimestamp="1677312753280" timestamp="28656493" timestamp2="28656493">
    <data><![CDATA[A]]></data>
  </Command>
  <Command __id="2207" _type="InsertStringCommand" date="Sat Feb 25 11:10:09 EST 2023" starttimestamp="1677312753280" timestamp="28656493" timestamp2="28656493">
    <data><![CDATA[A]]></data>
  </Command>
  <Command __id="2209" _type="InsertStringCommand" date="Sat Feb 25 11:10:09 EST 2023" starttimestamp="1677312753280" timestamp="28656702" timestamp2="28656702">
    <data><![CDATA[D]]></data>
  </Command>
  <Command __id="2210" _type="InsertStringCommand" date="Sat Feb 25 11:10:09 EST 2023" starttimestamp="1677312753280" timestamp="28656702" timestamp2="28656702">
    <data><![CDATA[D]]></data>
  </Command>
  <Command __id="2212" _type="InsertStringCommand" date="Sat Feb 25 11:10:10 EST 2023" starttimestamp="1677312753280" timestamp="28656898" timestamp2="28656898">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="2213" _type="InsertStringCommand" date="Sat Feb 25 11:10:10 EST 2023" starttimestamp="1677312753280" timestamp="28656898" timestamp2="28656898">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="2215" _type="InsertStringCommand" date="Sat Feb 25 11:10:10 EST 2023" starttimestamp="1677312753280" timestamp="28657057" timestamp2="28657057">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2216" _type="InsertStringCommand" date="Sat Feb 25 11:10:10 EST 2023" starttimestamp="1677312753280" timestamp="28657057" timestamp2="28657057">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2218" _type="InsertStringCommand" date="Sat Feb 25 11:10:10 EST 2023" starttimestamp="1677312753280" timestamp="28657265" timestamp2="28657265">
    <data><![CDATA[T]]></data>
  </Command>
  <Command __id="2219" _type="InsertStringCommand" date="Sat Feb 25 11:10:10 EST 2023" starttimestamp="1677312753280" timestamp="28657266" timestamp2="28657266">
    <data><![CDATA[T]]></data>
  </Command>
  <Command __id="2221" _type="InsertStringCommand" date="Sat Feb 25 11:10:10 EST 2023" starttimestamp="1677312753280" timestamp="28657412" timestamp2="28657412">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="2222" _type="InsertStringCommand" date="Sat Feb 25 11:10:10 EST 2023" starttimestamp="1677312753280" timestamp="28657412" timestamp2="28657412">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="2224" _type="InsertStringCommand" date="Sat Feb 25 11:10:10 EST 2023" starttimestamp="1677312753280" timestamp="28657607" timestamp2="28657607">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2225" _type="InsertStringCommand" date="Sat Feb 25 11:10:10 EST 2023" starttimestamp="1677312753280" timestamp="28657608" timestamp2="28657608">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2227" _type="InsertStringCommand" date="Sat Feb 25 11:10:11 EST 2023" starttimestamp="1677312753280" timestamp="28657890" timestamp2="28657890">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="2228" _type="InsertStringCommand" date="Sat Feb 25 11:10:11 EST 2023" starttimestamp="1677312753280" timestamp="28657890" timestamp2="28657890">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="2230" _type="InsertStringCommand" date="Sat Feb 25 11:10:11 EST 2023" starttimestamp="1677312753280" timestamp="28658092" timestamp2="28658092">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="2231" _type="InsertStringCommand" date="Sat Feb 25 11:10:11 EST 2023" starttimestamp="1677312753280" timestamp="28658092" timestamp2="28658092">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="2233" _type="InsertStringCommand" date="Sat Feb 25 11:10:11 EST 2023" starttimestamp="1677312753280" timestamp="28658209" timestamp2="28658209">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="2234" _type="InsertStringCommand" date="Sat Feb 25 11:10:11 EST 2023" starttimestamp="1677312753280" timestamp="28658210" timestamp2="28658210">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="2236" _type="InsertStringCommand" date="Sat Feb 25 11:10:11 EST 2023" starttimestamp="1677312753280" timestamp="28658402" timestamp2="28658402">
    <data><![CDATA[K]]></data>
  </Command>
  <Command __id="2237" _type="InsertStringCommand" date="Sat Feb 25 11:10:11 EST 2023" starttimestamp="1677312753280" timestamp="28658405" timestamp2="28658405">
    <data><![CDATA[K]]></data>
  </Command>
  <Command __id="2239" _type="InsertStringCommand" date="Sat Feb 25 11:10:11 EST 2023" starttimestamp="1677312753280" timestamp="28658542" timestamp2="28658542">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2240" _type="InsertStringCommand" date="Sat Feb 25 11:10:11 EST 2023" starttimestamp="1677312753280" timestamp="28658542" timestamp2="28658542">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2242" _type="InsertStringCommand" date="Sat Feb 25 11:10:11 EST 2023" starttimestamp="1677312753280" timestamp="28658711" timestamp2="28658711">
    <data><![CDATA[M]]></data>
  </Command>
  <Command __id="2243" _type="InsertStringCommand" date="Sat Feb 25 11:10:11 EST 2023" starttimestamp="1677312753280" timestamp="28658711" timestamp2="28658711">
    <data><![CDATA[M]]></data>
  </Command>
  <Command __id="2245" _type="InsertStringCommand" date="Sat Feb 25 11:10:12 EST 2023" starttimestamp="1677312753280" timestamp="28658861" timestamp2="28658861">
    <data><![CDATA[A]]></data>
  </Command>
  <Command __id="2246" _type="InsertStringCommand" date="Sat Feb 25 11:10:12 EST 2023" starttimestamp="1677312753280" timestamp="28658861" timestamp2="28658861">
    <data><![CDATA[A]]></data>
  </Command>
  <Command __id="2248" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 11:10:12 EST 2023" starttimestamp="1677312753280" timestamp="28659127" />
  <Command __id="2249" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 11:10:12 EST 2023" starttimestamp="1677312753280" timestamp="28659128" />
  <Command __id="2251" _type="InsertStringCommand" date="Sat Feb 25 11:10:12 EST 2023" starttimestamp="1677312753280" timestamp="28659215" timestamp2="28659215">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="2252" _type="InsertStringCommand" date="Sat Feb 25 11:10:12 EST 2023" starttimestamp="1677312753280" timestamp="28659215" timestamp2="28659215">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="2254" _type="InsertStringCommand" date="Sat Feb 25 11:10:12 EST 2023" starttimestamp="1677312753280" timestamp="28659404" timestamp2="28659404">
    <data><![CDATA[T]]></data>
  </Command>
  <Command __id="2255" _type="InsertStringCommand" date="Sat Feb 25 11:10:12 EST 2023" starttimestamp="1677312753280" timestamp="28659404" timestamp2="28659404">
    <data><![CDATA[T]]></data>
  </Command>
  <Command __id="2257" _type="InsertStringCommand" date="Sat Feb 25 11:10:12 EST 2023" starttimestamp="1677312753280" timestamp="28659487" timestamp2="28659487">
    <data><![CDATA[H]]></data>
  </Command>
  <Command __id="2258" _type="InsertStringCommand" date="Sat Feb 25 11:10:12 EST 2023" starttimestamp="1677312753280" timestamp="28659487" timestamp2="28659487">
    <data><![CDATA[H]]></data>
  </Command>
  <Command __id="2260" _type="InsertStringCommand" date="Sat Feb 25 11:10:12 EST 2023" starttimestamp="1677312753280" timestamp="28659566" timestamp2="28659566">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="2261" _type="InsertStringCommand" date="Sat Feb 25 11:10:12 EST 2023" starttimestamp="1677312753280" timestamp="28659566" timestamp2="28659566">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="2263" _type="InsertStringCommand" date="Sat Feb 25 11:10:12 EST 2023" starttimestamp="1677312753280" timestamp="28659715" timestamp2="28659715">
    <data><![CDATA[D]]></data>
  </Command>
  <Command __id="2264" _type="InsertStringCommand" date="Sat Feb 25 11:10:12 EST 2023" starttimestamp="1677312753280" timestamp="28659715" timestamp2="28659715">
    <data><![CDATA[D]]></data>
  </Command>
  <Command __id="2266" _type="InsertStringCommand" date="Sat Feb 25 11:10:13 EST 2023" starttimestamp="1677312753280" timestamp="28660643" timestamp2="28660643">
    <data><![CDATA[@]]></data>
  </Command>
  <Command __id="2267" _type="InsertStringCommand" date="Sat Feb 25 11:10:13 EST 2023" starttimestamp="1677312753280" timestamp="28660643" timestamp2="28660643">
    <data><![CDATA[@]]></data>
  </Command>
  <Command __id="2269" _type="InsertStringCommand" date="Sat Feb 25 11:10:14 EST 2023" starttimestamp="1677312753280" timestamp="28660874" timestamp2="28660874">
    <data><![CDATA[@]]></data>
  </Command>
  <Command __id="2270" _type="InsertStringCommand" date="Sat Feb 25 11:10:14 EST 2023" starttimestamp="1677312753280" timestamp="28660874" timestamp2="28660874">
    <data><![CDATA[@]]></data>
  </Command>
  <Command __id="2272" _type="InsertStringCommand" date="Sat Feb 25 11:10:14 EST 2023" starttimestamp="1677312753280" timestamp="28660992" timestamp2="28660992">
    <data><![CDATA[@]]></data>
  </Command>
  <Command __id="2273" _type="InsertStringCommand" date="Sat Feb 25 11:10:14 EST 2023" starttimestamp="1677312753280" timestamp="28660992" timestamp2="28660992">
    <data><![CDATA[@]]></data>
  </Command>
  <Command __id="2275" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 11:10:14 EST 2023" starttimestamp="1677312753280" timestamp="28661316" />
  <Command __id="2276" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 11:10:14 EST 2023" starttimestamp="1677312753280" timestamp="28661316" />
  <Command __id="2278" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 11:10:14 EST 2023" starttimestamp="1677312753280" timestamp="28661507" />
  <Command __id="2279" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 11:10:14 EST 2023" starttimestamp="1677312753280" timestamp="28661507" />
  <Command __id="2281" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 11:10:14 EST 2023" starttimestamp="1677312753280" timestamp="28661636" />
  <Command __id="2282" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 11:10:14 EST 2023" starttimestamp="1677312753280" timestamp="28661636" />
  <Command __id="2284" _type="InsertStringCommand" date="Sat Feb 25 11:10:15 EST 2023" starttimestamp="1677312753280" timestamp="28661937" timestamp2="28661937">
    <data><![CDATA[@]]></data>
  </Command>
  <Command __id="2285" _type="InsertStringCommand" date="Sat Feb 25 11:10:15 EST 2023" starttimestamp="1677312753280" timestamp="28661937" timestamp2="28661937">
    <data><![CDATA[@]]></data>
  </Command>
  <Command __id="2287" _type="InsertStringCommand" date="Sat Feb 25 11:10:15 EST 2023" starttimestamp="1677312753280" timestamp="28662087" timestamp2="28662087">
    <data><![CDATA[@]]></data>
  </Command>
  <Command __id="2288" _type="InsertStringCommand" date="Sat Feb 25 11:10:15 EST 2023" starttimestamp="1677312753280" timestamp="28662087" timestamp2="28662087">
    <data><![CDATA[@]]></data>
  </Command>
  <Command __id="2290" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 11:10:15 EST 2023" starttimestamp="1677312753280" timestamp="28662622" />
  <Command __id="2291" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 11:10:15 EST 2023" starttimestamp="1677312753280" timestamp="28662622" />
  <Command __id="2293" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 11:10:16 EST 2023" starttimestamp="1677312753280" timestamp="28662795" />
  <Command __id="2294" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 11:10:16 EST 2023" starttimestamp="1677312753280" timestamp="28662795" />
  <DocumentChange __id="2199" _type="Insert" date="Sat Feb 25 11:10:08 EST 2023" docASTNodeCount="1565" docActiveCodeLength="9181" docExpressionCount="1074" docLength="10111" length="17" offset="5991" repeat="16" starttimestamp="1677312753280" timestamp="28655545" timestamp2="28658834">
    <text><![CDATA["MADE TO COOK MA"]]></text>
  </DocumentChange>
  <DocumentChange __id="2247" _type="Delete" date="Sat Feb 25 11:10:12 EST 2023" docASTNodeCount="1565" docActiveCodeLength="9180" docExpressionCount="1074" docLength="10110" endLine="177" length="1" offset="6006" startLine="177" starttimestamp="1677312753280" timestamp="28659090">
    <text><![CDATA[A]]></text>
  </DocumentChange>
  <DocumentChange __id="2250" _type="Insert" date="Sat Feb 25 11:10:12 EST 2023" docASTNodeCount="1565" docActiveCodeLength="9188" docExpressionCount="1074" docLength="10118" length="8" offset="6006" repeat="8" starttimestamp="1677312753280" timestamp="28659187" timestamp2="28660980">
    <text><![CDATA[ETHOD@@@]]></text>
  </DocumentChange>
  <DocumentChange __id="2274" _type="Delete" date="Sat Feb 25 11:10:14 EST 2023" docASTNodeCount="1565" docActiveCodeLength="9185" docExpressionCount="1074" docLength="10115" endLine="177" length="3" offset="6011" repeat="3" startLine="177" starttimestamp="1677312753280" timestamp="28661299" timestamp2="28661602">
    <text><![CDATA[@@@]]></text>
  </DocumentChange>
  <DocumentChange __id="2283" _type="Insert" date="Sat Feb 25 11:10:15 EST 2023" docASTNodeCount="1565" docActiveCodeLength="9187" docExpressionCount="1074" docLength="10117" length="2" offset="6011" repeat="2" starttimestamp="1677312753280" timestamp="28661909" timestamp2="28662070">
    <text><![CDATA[@@]]></text>
  </DocumentChange>
  <DocumentChange __id="2289" _type="Delete" date="Sat Feb 25 11:10:15 EST 2023" docASTNodeCount="1565" docActiveCodeLength="9185" docExpressionCount="1074" docLength="10115" endLine="177" length="2" offset="6011" repeat="2" startLine="177" starttimestamp="1677312753280" timestamp="28662586" timestamp2="28662760">
    <text><![CDATA[@@]]></text>
  </DocumentChange>
  <Command __id="2296" _type="PauseCommand" date="Sat Feb 25 11:10:17 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="28663934">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1138]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="2297" _type="InsertStringCommand" date="Sat Feb 25 11:10:17 EST 2023" starttimestamp="1677312753280" timestamp="28663955" timestamp2="28663955">
    <data><![CDATA[!]]></data>
  </Command>
  <Command __id="2298" _type="InsertStringCommand" date="Sat Feb 25 11:10:17 EST 2023" starttimestamp="1677312753280" timestamp="28663955" timestamp2="28663955">
    <data><![CDATA[!]]></data>
  </Command>
  <Command __id="2300" _type="InsertStringCommand" date="Sat Feb 25 11:10:17 EST 2023" starttimestamp="1677312753280" timestamp="28664110" timestamp2="28664110">
    <data><![CDATA[!]]></data>
  </Command>
  <Command __id="2301" _type="InsertStringCommand" date="Sat Feb 25 11:10:17 EST 2023" starttimestamp="1677312753280" timestamp="28664110" timestamp2="28664110">
    <data><![CDATA[!]]></data>
  </Command>
  <Command __id="2303" _type="InsertStringCommand" date="Sat Feb 25 11:10:17 EST 2023" starttimestamp="1677312753280" timestamp="28664277" timestamp2="28664277">
    <data><![CDATA[!]]></data>
  </Command>
  <Command __id="2304" _type="InsertStringCommand" date="Sat Feb 25 11:10:17 EST 2023" starttimestamp="1677312753280" timestamp="28664278" timestamp2="28664278">
    <data><![CDATA[!]]></data>
  </Command>
  <Command __id="2306" _type="InsertStringCommand" date="Sat Feb 25 11:10:17 EST 2023" starttimestamp="1677312753280" timestamp="28664426" timestamp2="28664426">
    <data><![CDATA[!]]></data>
  </Command>
  <Command __id="2307" _type="InsertStringCommand" date="Sat Feb 25 11:10:17 EST 2023" starttimestamp="1677312753280" timestamp="28664426" timestamp2="28664426">
    <data><![CDATA[!]]></data>
  </Command>
  <Command __id="2309" _type="PauseCommand" date="Sat Feb 25 11:10:19 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="28665722">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1296]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2308" _type="MoveCaretCommand" caretOffset="5137" date="Sat Feb 25 11:10:19 EST 2023" docOffset="6017" starttimestamp="1677312753280" timestamp="28665722" />
  <Command __id="2310" _type="MoveCaretCommand" caretOffset="5137" date="Sat Feb 25 11:10:19 EST 2023" docOffset="6017" starttimestamp="1677312753280" timestamp="28665722" />
  <Command __id="2312" _type="InsertStringCommand" date="Sat Feb 25 11:10:19 EST 2023" starttimestamp="1677312753280" timestamp="28666163" timestamp2="28666163">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="2313" _type="InsertStringCommand" date="Sat Feb 25 11:10:19 EST 2023" starttimestamp="1677312753280" timestamp="28666164" timestamp2="28666164">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="2315" _type="PauseCommand" date="Sat Feb 25 11:10:20 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="28667369">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1205]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="2314" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sat Feb 25 11:10:20 EST 2023" starttimestamp="1677312753280" timestamp="28667369" />
  <Command __id="2316" _type="EclipseCommand" commandID="" date="Sat Feb 25 11:10:20 EST 2023" starttimestamp="1677312753280" timestamp="28667436" />
  <Command __id="2317" _type="EclipseCommand" commandID="" date="Sat Feb 25 11:10:20 EST 2023" starttimestamp="1677312753280" timestamp="28667560" />
  <DocumentChange __id="2295" _type="Insert" date="Sat Feb 25 11:10:17 EST 2023" docASTNodeCount="1565" docActiveCodeLength="9189" docExpressionCount="1074" docLength="10119" length="4" offset="6011" repeat="4" starttimestamp="1677312753280" timestamp="28663933" timestamp2="28664399">
    <text><![CDATA[!!!!]]></text>
  </DocumentChange>
  <DocumentChange __id="2311" _type="Insert" date="Sat Feb 25 11:10:19 EST 2023" docASTNodeCount="1565" docActiveCodeLength="9190" docExpressionCount="1074" docLength="10120" length="1" offset="6017" starttimestamp="1677312753280" timestamp="28666098">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <Command __id="2319" _type="PauseCommand" date="Sat Feb 25 11:10:25 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="28671878">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[4318]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2321" _type="ProgramExecutionEvent" className="/ProducersConsumersV3/src/main/Main.java" date="Sat Feb 25 11:10:29 EST 2023" kind="HitBreakPoint" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="28675751" type="Run" />
  <Command __id="2323" _type="RunCommand" className="/ProducersConsumersV3/src/main/Main.java" date="Sat Feb 25 11:10:29 EST 2023" kind="HitBreakPoint" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="28675751" type="Run" />
  <Command __id="2325" _type="PauseCommand" date="Sat Feb 25 11:10:30 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="28677321">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[1570]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2324" _type="ShellCommand" date="Sat Feb 25 11:10:30 EST 2023" starttimestamp="1677312753280" timestamp="28677321" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2327" _type="PauseCommand" date="Sat Feb 25 11:10:33 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="28679758">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2437]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="2326" _type="ConsoleOutput" date="Sat Feb 25 11:10:33 EST 2023" overflow="false" starttimestamp="1677312753280" timestamp="28679758" type="ConsoleOutput">
    <outputString><![CDATA[E*** Object:graphics.ABell@b6b1987 displayed multiple times with following references:
 [AProducerConsumerScene2.queueBellList.first, AProducerConsumerScene2.queueBellList.last]
 Remove one of these references in the displayed logical structure by, for instance, renaming the getter for the property storing the shared object or adding the @util.annotations.Visible(false) annotation before the getter.
If you think it is safe to tareverse  all of these  references then add the annotattion @util.annotattions.AllowMultipleEqualReferences(false) nefore the getter.
E*** Object:graphics.ABell@b6b1987 displayed multiple times with following references:
 [AProducerConsumerScene2.queueBellList.first, AProducerConsumerScene2.queueBellList.0, AProducerConsumerScene2.queueBellList.last]
 Remove one of these references in the displayed logical structure by, for instance, renaming the getter for the property storing the shared object or adding the @util.annotations.Visible(false) annotation before the getter.
If you think it is safe to tareverse  all of these  references then add the annotattion @util.annotattions.AllowMultipleEqualReferences(false) nefore the getter.
E*** Object:graphics.APlate@2c532cd8 displayed multiple times with following references:
 [AProducerConsumerScene2.queuedList.first, AProducerConsumerScene2.queuedList.last]
 Remove one of these references in the displayed logical structure by, for instance, renaming the getter for the property storing the shared object or adding the @util.annotations.Visible(false) annotation before the getter.
If you think it is safe to tareverse  all of these  references then add the annotattion @util.annotattions.AllowMultipleEqualReferences(false) nefore the getter.
E*** Object:graphics.APlate@2c532cd8 displayed multiple times with following references:
 [AProducerConsumerScene2.queuedList.0, AProducerConsumerScene2.queuedList.first, AProducerConsumerScene2.queuedList.last]
 Remove one of these references in the displayed logical structure by, for instance, renaming the getter for the property storing the shared object or adding the @util.annotations.Visible(false) annotation before the getter.
If you think it is safe to tareverse  all of these  references then add the annotattion @util.annotattions.AllowMultipleEqualReferences(false) nefore the getter.
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"E*** Object:graphics.ABell@"), Diff(DELETE,"2ccca26f"), Diff(INSERT,"b6b1987"), Diff(EQUAL," displayed multiple times with following references:¶ [AProducerConsumerScene2.queueBellList.first, AProducerConsumerScene2.queueBellList.last]¶ Remove one of these references in the displayed logical structure by, for instance, renaming the getter for the property storing the shared object or adding the @util.annotations.Visible(false) annotation before the getter.¶If you think it is safe to tareverse  all of these  references then add the annotattion @util.annotattions.AllowMultipleEqualReferences(false) nefore the getter.¶E*** Object:graphics.ABell@"), Diff(DELETE,"2ccca26f"), Diff(INSERT,"b6b1987"), Diff(EQUAL," displayed multiple times with following references:¶ [AProducerConsumerScene2.queueBellList.first, AProducerConsumerScene2.queueBellList.0, AProducerConsumerScene2.queueBellList.last]¶ Remove one of these references in the displayed logical structure by, for instance, renaming the getter for the property storing the shared object or adding the @util.annotations.Visible(false) annotation before the getter.¶If you think it is safe to tareverse  all of these  references then add the annotattion @util.annotattions.AllowMultipleEqualReferences(false) nefore the getter.¶E*** Object:graphics.APlate@"), Diff(DELETE,"51972dc7"), Diff(INSERT,"2c532cd8"), Diff(EQUAL," displayed multiple times with following references:¶ [AProducerConsumerScene2.queuedList.first, AProducerConsumerScene2.queuedList.last]¶ Remove one of these references in the displayed logical structure by, for instance, renaming the getter for the property storing the shared object or adding the @util.annotations.Visible(false) annotation before the getter.¶If you think it is safe to tareverse  all of these  references then add the annotattion @util.annotattions.AllowMultipleEqualReferences(false) nefore the getter.¶E*** Object:graphics.APlate@"), Diff(DELETE,"51972dc7"), Diff(INSERT,"2c532cd8"), Diff(EQUAL," displayed multiple times with following references:¶ [AProducerConsumerScene2.queuedList.0, AProducerConsumerScene2.queuedList.first, AProducerConsumerScene2.queuedList.last]¶ Remove one of these references in the displayed logical structure by, for instance, renaming the getter for the property storing the shared object or adding the @util.annotations.Visible(false) annotation before the getter.¶If you think it is safe to tareverse  all of these  references then add the annotattion @util.annotattions.AllowMultipleEqualReferences(false) nefore the getter.¶")]]]></diff>
  </Command>
  <Command __id="2329" _type="PauseCommand" date="Sat Feb 25 11:11:06 EST 2023" range="30s-1m" starttimestamp="1677312753280" timestamp="28713163">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[33405]]></pause>
    <nextType><![CDATA[Exception]]></nextType>
    <next><![CDATA[ExceptionCommand]]></next>
  </Command>
  <Command __id="2328" _type="ExceptionCommand" date="Sat Feb 25 11:11:06 EST 2023" starttimestamp="1677312753280" timestamp="28713163" type="Exception">
    <exceptionString><![CDATA[MADE TO COOK METHOD!!!!
class java.util.NoSuchElementException
java.util.NoSuchElementException
	at java.base/java.util.LinkedList.getFirst(LinkedList.java:248)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1415)
	at bus.uigen.sadapters.BeanToRecord.get(BeanToRecord.java:204)
	at bus.uigen.sadapters.BeanToRecord.get(BeanToRecord.java:189)
	at bus.uigen.oadapters.ClassAdapter.refreshChild(ClassAdapter.java:481)
	at bus.uigen.oadapters.ClassAdapter.refreshChildren(ClassAdapter.java:457)
	at bus.uigen.oadapters.ClassAdapter.refreshValueButNotAtomic(ClassAdapter.java:371)
	at bus.uigen.oadapters.VectorAdapter.refreshValue(VectorAdapter.java:1882)
	at bus.uigen.oadapters.ClassAdapter.refresh(ClassAdapter.java:672)
	at bus.uigen.oadapters.ClassAdapter.refreshChild(ClassAdapter.java:487)
	at bus.uigen.oadapters.ClassAdapter.refreshChildren(ClassAdapter.java:457)
	at bus.uigen.oadapters.ClassAdapter.refreshValueButNotAtomic(ClassAdapter.java:371)
	at bus.uigen.oadapters.ClassAdapter.refreshValue(ClassAdapter.java:357)
	at bus.uigen.oadapters.ObjectAdapter.implicitRefresh(ObjectAdapter.java:5406)
	at bus.uigen.uiFrame.doMyImplicitRefresh(uiFrame.java:4601)
	at bus.uigen.uiFrame.subDoImplicitRefresh(uiFrame.java:4702)
	at bus.uigen.uiFrame.doImplicitRefresh(uiFrame.java:4682)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1920)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:2002)
	at bus.uigen.controller.MethodInvocationManager.checkIfArgumentsAvailable(MethodInvocationManager.java:685)
	at bus.uigen.controller.MethodInvocationManager.init(MethodInvocationManager.java:453)
	at bus.uigen.controller.MethodInvocationManager.<init>(MethodInvocationManager.java:406)
	at bus.uigen.uiFrame.processMethod(uiFrame.java:3986)
	at bus.uigen.controller.menus.VirtualMethodMenuItem.processMethodMenuItem(VirtualMethodMenuItem.java:129)
	at bus.uigen.controller.menus.VirtualMethodMenuItem.actionPerformed(VirtualMethodMenuItem.java:111)
	at bus.uigen.widgets.swing.SwingMenuItemEventForwarder.actionPerformed(SwingMenuItemEventForwarder.java:30)
	at java.desktop/javax.swing.AbstractButton.fireActionPerformed(AbstractButton.java:1967)
	at java.desktop/javax.swing.AbstractButton$Handler.actionPerformed(AbstractButton.java:2308)
	at java.desktop/javax.swing.DefaultButtonModel.fireActionPerformed(DefaultButtonModel.java:405)
	at java.desktop/javax.swing.DefaultButtonModel.setPressed(DefaultButtonModel.java:262)
	at java.desktop/javax.swing.AbstractButton.doClick(AbstractButton.java:369)
	at java.desktop/javax.swing.plaf.basic.BasicMenuItemUI.doClick(BasicMenuItemUI.java:1020)
	at java.desktop/javax.swing.plaf.basic.BasicMenuItemUI$Handler.mouseReleased(BasicMenuItemUI.java:1064)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6636)
	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)
	at java.desktop/java.awt.Component.processEvent(Component.java:6401)
	at java.desktop/java.awt.Container.processEvent(Container.java:2263)
	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5012)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="2331" _type="PauseCommand" date="Sat Feb 25 11:11:08 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="28714787">
    <prevType><![CDATA[Exception]]></prevType>
    <prev><![CDATA[ExceptionCommand]]></prev>
    <pause><![CDATA[1624]]></pause>
    <nextType><![CDATA[Exception]]></nextType>
    <next><![CDATA[ExceptionCommand]]></next>
  </Command>
  <Command __id="2330" _type="ExceptionCommand" date="Sat Feb 25 11:11:08 EST 2023" starttimestamp="1677312753280" timestamp="28714787" type="Exception">
    <exceptionString><![CDATA[java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1415)
	at bus.uigen.sadapters.BeanToRecord.get(BeanToRecord.java:204)
	at bus.uigen.sadapters.BeanToRecord.get(BeanToRecord.java:189)
	at bus.uigen.oadapters.ClassAdapter.refreshChild(ClassAdapter.java:481)
	at bus.uigen.oadapters.ClassAdapter.refreshChildren(ClassAdapter.java:457)
	at bus.uigen.oadapters.ClassAdapter.refreshValueButNotAtomic(ClassAdapter.java:371)
	at bus.uigen.oadapters.VectorAdapter.refreshValue(VectorAdapter.java:1882)
	at bus.uigen.oadapters.ClassAdapter.refresh(ClassAdapter.java:672)
	at bus.uigen.oadapters.ClassAdapter.refreshChild(ClassAdapter.java:487)
	at bus.uigen.oadapters.ClassAdapter.refreshChildren(ClassAdapter.java:457)
	at bus.uigen.oadapters.ClassAdapter.refreshValueButNotAtomic(ClassAdapter.java:371)
	at bus.uigen.oadapters.ClassAdapter.refreshValue(ClassAdapter.java:357)
	at bus.uigen.oadapters.ObjectAdapter.implicitRefresh(ObjectAdapter.java:5406)
	at bus.uigen.uiFrame.doMyImplicitRefresh(uiFrame.java:4601)
	at bus.uigen.uiFrame.subDoImplicitRefresh(uiFrame.java:4702)
	at bus.uigen.uiFrame.doImplicitRefresh(uiFrame.java:4682)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1920)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:2002)
	at bus.uigen.controller.MethodInvocationManager.checkIfArgumentsAvailable(MethodInvocationManager.java:685)
	at bus.uigen.controller.MethodInvocationManager.init(MethodInvocationManager.java:453)
	at bus.uigen.controller.MethodInvocationManager.<init>(MethodInvocationManager.java:406)
	at bus.uigen.uiFrame.processMethod(uiFrame.java:3986)
	at bus.uigen.controller.menus.VirtualMethodMenuItem.processMethodMenuItem(VirtualMethodMenuItem.java:129)
	at bus.uigen.controller.menus.VirtualMethodMenuItem.actionPerformed(VirtualMethodMenuItem.java:111)
	at bus.uigen.widgets.swing.SwingMenuItemEventForwarder.actionPerformed(SwingMenuItemEventForwarder.java:30)
	at java.desktop/javax.swing.AbstractButton.fireActionPerformed(AbstractButton.java:1967)
	at java.desktop/javax.swing.AbstractButton$Handler.actionPerformed(AbstractButton.java:2308)
	at java.desktop/javax.swing.DefaultButtonModel.fireActionPerformed(DefaultButtonModel.java:405)
	at java.desktop/javax.swing.DefaultButtonModel.setPressed(DefaultButtonModel.java:262)
	at java.desktop/javax.swing.AbstractButton.doClick(AbstractButton.java:369)
	at java.desktop/javax.swing.plaf.basic.BasicMenuItemUI.doClick(BasicMenuItemUI.java:1020)
	at java.desktop/javax.swing.plaf.basic.BasicMenuItemUI$Handler.mouseReleased(BasicMenuItemUI.java:1064)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6636)
	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)
	at java.desktop/java.awt.Component.processEvent(Component.java:6401)
	at java.desktop/java.awt.Container.processEvent(Container.java:2263)
	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5012)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4844)
	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4919)
	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4548)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="2332" _type="ExceptionCommand" date="Sat Feb 25 11:11:08 EST 2023" starttimestamp="1677312753280" timestamp="28714823" type="Exception">
    <exceptionString><![CDATA[	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2307)
	at java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2764)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4844)
	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:772)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:721)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:715)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:391)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:95)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:745)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:743)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:391)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)
	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:742)
	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)
Caused by: java.util.NoSuchElementException
	at java.base/java.util.LinkedList.getFirst(LinkedList.java:248)
	... 70 more
class java.util.NoSuchElementException
java.util.NoSuchElementException
	at java.base/java.util.LinkedList.getLast(LinkedList.java:261)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1415)
	at bus.uigen.sadapters.BeanToRecord.get(BeanToRecord.java:204)
	at bus.uigen.sadapters.BeanToRecord.get(BeanToRecord.java:189)
	at bus.uigen.oadapters.ClassAdapter.refreshChild(ClassAdapter.java:481)
	at bus.uigen.oadapters.ClassAdapter.refreshChildren(ClassAdapter.java:457)
	at bus.uigen.oadapters.ClassAdapter.refreshValueButNotAtomic(ClassAdapter.java:371)
	at bus.uigen.oadapters.VectorAdapter.refreshValue(VectorAdapter.java:1882)
	at bus.uigen.oadapters.ClassAdapter.refresh(ClassAdapter.java:672)
	at bus.uigen.oadapters.ClassAdapter.refreshChild(ClassAdapter.java:487)
	at bus.uigen.oadapters.ClassAdapter.refreshChildren(ClassAdapter.java:457)
	at bus.uigen.oadapters.ClassAdapter.refreshValueButNotAtomic(ClassAdapter.java:371)
	at bus.uigen.oadapters.ClassAdapter.refreshValue(ClassAdapter.java:357)
	at bus.uigen.oadapters.ObjectAdapter.implicitRefresh(ObjectAdapter.java:5406)
	at bus.uigen.uiFrame.doMyImplicitRefresh(uiFrame.java:4601)
	at bus.uigen.uiFrame.subDoImplicitRefresh(uiFrame.java:4702)
	at bus.uigen.uiFrame.doImplicitRefresh(uiFrame.java:4682)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1920)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="2334" _type="PauseCommand" date="Sat Feb 25 11:11:09 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="28716469">
    <prevType><![CDATA[Exception]]></prevType>
    <prev><![CDATA[ExceptionCommand]]></prev>
    <pause><![CDATA[1646]]></pause>
    <nextType><![CDATA[Exception]]></nextType>
    <next><![CDATA[ExceptionCommand]]></next>
  </Command>
  <Command __id="2333" _type="ExceptionCommand" date="Sat Feb 25 11:11:09 EST 2023" starttimestamp="1677312753280" timestamp="28716469" type="Exception">
    <exceptionString><![CDATA[java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1415)
	at bus.uigen.sadapters.BeanToRecord.get(BeanToRecord.java:204)
	at bus.uigen.sadapters.BeanToRecord.get(BeanToRecord.java:189)
	at bus.uigen.oadapters.ClassAdapter.refreshChild(ClassAdapter.java:481)
	at bus.uigen.oadapters.ClassAdapter.refreshChildren(ClassAdapter.java:457)
	at bus.uigen.oadapters.ClassAdapter.refreshValueButNotAtomic(ClassAdapter.java:371)
	at bus.uigen.oadapters.VectorAdapter.refreshValue(VectorAdapter.java:1882)
	at bus.uigen.oadapters.ClassAdapter.refresh(ClassAdapter.java:672)
	at bus.uigen.oadapters.ClassAdapter.refreshChild(ClassAdapter.java:487)
	at bus.uigen.oadapters.ClassAdapter.refreshChildren(ClassAdapter.java:457)
	at bus.uigen.oadapters.ClassAdapter.refreshValueButNotAtomic(ClassAdapter.java:371)
	at bus.uigen.oadapters.ClassAdapter.refreshValue(ClassAdapter.java:357)
	at bus.uigen.oadapters.ObjectAdapter.implicitRefresh(ObjectAdapter.java:5406)
	at bus.uigen.uiFrame.doMyImplicitRefresh(uiFrame.java:4601)
	at bus.uigen.uiFrame.subDoImplicitRefresh(uiFrame.java:4702)
	at bus.uigen.uiFrame.doImplicitRefresh(uiFrame.java:4682)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1920)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:2002)
	at bus.uigen.controller.MethodInvocationManager.checkIfArgumentsAvailable(MethodInvocationManager.java:685)
	at bus.uigen.controller.MethodInvocationManager.init(MethodInvocationManager.java:453)
	at bus.uigen.controller.MethodInvocationManager.<init>(MethodInvocationManager.java:406)
	at bus.uigen.uiFrame.processMethod(uiFrame.java:3986)
	at bus.uigen.controller.menus.VirtualMethodMenuItem.processMethodMenuItem(VirtualMethodMenuItem.java:129)
	at bus.uigen.controller.menus.VirtualMethodMenuItem.actionPerformed(VirtualMethodMenuItem.java:111)
	at bus.uigen.widgets.swing.SwingMenuItemEventForwarder.actionPerformed(SwingMenuItemEventForwarder.java:30)
	at java.desktop/javax.swing.AbstractButton.fireActionPerformed(AbstractButton.java:1967)
	at java.desktop/javax.swing.AbstractButton$Handler.actionPerformed(AbstractButton.java:2308)
	at java.desktop/javax.swing.DefaultButtonModel.fireActionPerformed(DefaultButtonModel.java:405)
	at java.desktop/javax.swing.DefaultButtonModel.setPressed(DefaultButtonModel.java:262)
	at java.desktop/javax.swing.AbstractButton.doClick(AbstractButton.java:369)
	at java.desktop/javax.swing.plaf.basic.BasicMenuItemUI.doClick(BasicMenuItemUI.java:1020)
	at java.desktop/javax.swing.plaf.basic.BasicMenuItemUI$Handler.mouseReleased(BasicMenuItemUI.java:1064)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6636)
	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)
	at java.desktop/java.awt.Component.processEvent(Component.java:6401)
	at java.desktop/java.awt.Container.processEvent(Container.java:2263)
	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5012)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4844)
	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4919)
	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4548)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="2336" _type="PauseCommand" date="Sat Feb 25 11:11:12 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="28719668">
    <prevType><![CDATA[Exception]]></prevType>
    <prev><![CDATA[ExceptionCommand]]></prev>
    <pause><![CDATA[3199]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2335" _type="ShellCommand" date="Sat Feb 25 11:11:12 EST 2023" starttimestamp="1677312753280" timestamp="28719668" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2318" _type="DiffBasedFileOpenCommand" date="Sat Feb 25 11:10:25 EST 2023" docASTNodeCount="221" docActiveCodeLength="1636" docExpressionCount="148" docLength="1738" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="28671878">
    <filePath><![CDATA[C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\main\Main.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package main;¶¶import java.awt.Color;¶import java.lang.reflect.Method;¶¶import bus.uigen.OEFrame;¶import bus.uigen.ObjectEditor;¶import bus.uigen.attributes.AttributeNames;¶import graphics.AProducerConsumerScene;¶import graphics.AProducerConsumerScene2;¶import graphics.ProducerConsumerScene;¶import graphics.ProducerConsumerScene2;¶¶public class Main {¶	static ProducerConsumerScene2 scene = new AProducerConsumerScene2();¶	¶	public static void main(String[] args) {¶		animateScene();¶	}¶	¶	public static void animateScene() {¶		¶		//Adding labels and buttons inside object editor screen¶		ObjectEditor.confirmSelectedMethodParameters(false);¶		ObjectEditor.setMethodAttribute(AProducerConsumerScene.class, "initScene", AttributeNames.TOOLBAR_METHOD, true);¶		ObjectEditor.setMethodAttribute(AProducerConsumerScene.class, "initScene", AttributeNames.LABEL, "Init Scene");¶		¶		//Setting up init scene method in object editor¶		try {¶			Class[] initSceneArgTypes = {Integer.TYPE, Integer.TYPE};¶			Object[] initSceneDefaultArgs = {4, 4};¶			String[] initSceneArgNames = {"Number of Patrons", "Number of Chefs"};¶			Method initSceneMethod = AProducerConsumerScene.class.getMethod("initScene", initSceneArgTypes);¶			ObjectEditor.registerDefaultParameterValues(initSceneMethod, initSceneDefaultArgs);¶			ObjectEditor.registerParameterNames(initSceneMethod, initSceneArgNames);¶		} catch (NoSuchMethodException e) {¶			e.printStackTrace();¶		} catch (SecurityException e) {¶			e.printStackTrace();¶		}¶		¶		¶		OEFrame editor = ObjectEditor.edit(scene);¶		editor.getDrawComponent().setBackground(Color.DARK_GRAY);¶		editor.getDrawPanel().setSize(450, 450);¶		editor.showDrawPanel();¶		¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="2338" _type="PauseCommand" date="Sat Feb 25 11:11:28 EST 2023" range="10s-20s" starttimestamp="1677312753280" timestamp="28735538">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[15870]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2339" _type="MoveCaretCommand" caretOffset="844" date="Sat Feb 25 11:11:28 EST 2023" docOffset="1235" starttimestamp="1677312753280" timestamp="28735672" />
  <Command __id="2337" _type="DiffBasedFileOpenCommand" date="Sat Feb 25 11:11:28 EST 2023" docASTNodeCount="449" docActiveCodeLength="2603" docExpressionCount="301" docLength="2603" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="28735538">
    <filePath><![CDATA[C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\graphics\APlate.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package graphics;¶¶import java.awt.Color;¶¶import bus.uigen.OEFrame;¶import bus.uigen.ObjectEditor;¶import bus.uigen.shapes.AStringModel;¶import bus.uigen.shapes.AnImageModel;¶import bus.uigen.shapes.OEShapeModel;¶import shapes.FlexibleTextShape;¶import util.annotations.EditablePropertyNames;¶import util.annotations.PropertyNames;¶import util.annotations.StructurePattern;¶import util.annotations.StructurePatternNames;¶¶@StructurePattern(StructurePatternNames.BEAN_PATTERN)¶@PropertyNames({¶	"plate",¶	"text"¶})¶@EditablePropertyNames({¶	"plate",¶	"text"¶})¶public class APlate implements Plate {¶	¶	String INIT_PLATE_STRING = "images/12.png";¶	int INIT_PLATE_X = 50;¶	int INIT_PLATE_Y = 40;¶	int INIT_PLATE_HEIGHT = 50;¶	int INIT_PLATE_WIDTH = 40;¶	¶	String INIT_PLATE_TEXT = "";¶	int INIT_TEXT_X = 95;¶	int INIT_TEXT_Y = 70;¶	¶	int TEXT_X_OFFSET = 45;¶	int TEXT_Y_OFFSET = 30;¶	¶	OEShapeModel plate;¶	FlexibleTextShape text;¶	¶	¶	public APlate() {¶		plate = new AnImageModel(INIT_PLATE_STRING);¶		text = new AStringModel(INIT_PLATE_TEXT);¶		text.setX(INIT_TEXT_X);¶		text.setY(INIT_TEXT_Y);¶		text.setColor(Color.WHITE);¶		¶		plate.setX(INIT_PLATE_X);¶		plate.setY(INIT_PLATE_Y);¶		plate.setHeight(INIT_PLATE_HEIGHT);¶		plate.setWidth(INIT_PLATE_WIDTH);¶		¶	}¶	¶	public APlate(int queue) {¶		plate = new AnImageModel(INIT_PLATE_STRING);¶		text = new AStringModel(String.valueOf(queue));¶		text.setX(INIT_TEXT_X);¶		text.setY(INIT_TEXT_Y);¶		text.setColor(Color.WHITE);¶		¶		plate.setX(INIT_PLATE_X);¶		plate.setY(INIT_PLATE_Y);¶		plate.setHeight(INIT_PLATE_HEIGHT);¶		plate.setWidth(INIT_PLATE_WIDTH);¶	}¶	¶	@Override¶	public OEShapeModel getPlate() {¶		return plate;¶	}¶	¶	@Override¶	public FlexibleTextShape getText() {¶		return text;¶	}¶	¶	@Override¶	public void setText(FlexibleTextShape newString) {¶		text = newString;¶	}¶	¶	@Override¶	public void setPlate(OEShapeModel newPlate) {¶		plate = newPlate;¶	}¶	¶	@Override¶	public void move(int newX, int newY) {¶		plate.setX(plate.getX() + newX);¶		plate.setY(plate.getY() + newY);¶		text.setX(text.getX() + newX);¶		text.setY(text.getY() + newY);¶	}¶	¶	@Override¶	public void moveTo(int newX, int newY) {¶		plate.setX(newX);¶		plate.setY(newY);¶		text.setX(newX+TEXT_X_OFFSET);¶		text.setY(newY+TEXT_Y_OFFSET);¶	}¶	¶	public static void main(String[] args) {¶		final Plate plate = new APlate();¶		OEFrame editor = ObjectEditor.edit(plate);¶		editor.getDrawComponent().setBackground(Color.DARK_GRAY);¶		editor.showDrawPanel();¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="2341" _type="PauseCommand" date="Sat Feb 25 11:11:32 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="28739106">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3433]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2342" _type="MoveCaretCommand" caretOffset="5138" date="Sat Feb 25 11:11:32 EST 2023" docOffset="6018" starttimestamp="1677312753280" timestamp="28739272" />
  <Command __id="2344" _type="PauseCommand" date="Sat Feb 25 11:11:34 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="28741631">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2359]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2343" _type="SelectTextCommand" caretOffset="5093" date="Sat Feb 25 11:11:34 EST 2023" end="5138" start="5093" starttimestamp="1677312753280" timestamp="28741631" />
  <Command __id="2345" _type="SelectTextCommand" caretOffset="5093" date="Sat Feb 25 11:11:34 EST 2023" end="5138" start="5093" starttimestamp="1677312753280" timestamp="28741632" />
  <Command __id="2346" _type="MoveCaretCommand" caretOffset="5093" date="Sat Feb 25 11:11:35 EST 2023" docOffset="5973" starttimestamp="1677312753280" timestamp="28741921" />
  <Command __id="2347" _type="MoveCaretCommand" caretOffset="5093" date="Sat Feb 25 11:11:35 EST 2023" docOffset="5973" starttimestamp="1677312753280" timestamp="28741921" />
  <Command __id="2349" _type="PauseCommand" date="Sat Feb 25 11:11:37 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="28744169">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2248]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2348" _type="SelectTextCommand" caretOffset="5138" date="Sat Feb 25 11:11:37 EST 2023" end="5138" start="5092" starttimestamp="1677312753280" timestamp="28744169" />
  <Command __id="2350" _type="SelectTextCommand" caretOffset="5138" date="Sat Feb 25 11:11:37 EST 2023" end="5138" start="5092" starttimestamp="1677312753280" timestamp="28744169" />
  <Command __id="2351" _type="CopyCommand" date="Sat Feb 25 11:11:38 EST 2023" starttimestamp="1677312753280" timestamp="28745164" />
  <Command __id="2353" _type="PauseCommand" date="Sat Feb 25 11:11:39 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="28746221">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[1057]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2352" _type="MoveCaretCommand" caretOffset="5184" date="Sat Feb 25 11:11:39 EST 2023" docOffset="6064" starttimestamp="1677312753280" timestamp="28746221" />
  <Command __id="2354" _type="MoveCaretCommand" caretOffset="5184" date="Sat Feb 25 11:11:39 EST 2023" docOffset="6064" starttimestamp="1677312753280" timestamp="28746221" />
  <Command __id="2355" _type="MoveCaretCommand" caretOffset="5218" date="Sat Feb 25 11:11:40 EST 2023" docOffset="6098" starttimestamp="1677312753280" timestamp="28746852" />
  <Command __id="2356" _type="MoveCaretCommand" caretOffset="5218" date="Sat Feb 25 11:11:40 EST 2023" docOffset="6098" starttimestamp="1677312753280" timestamp="28746852" />
  <Command __id="2358" _type="PauseCommand" date="Sat Feb 25 11:11:41 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="28747915">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1062]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2357" _type="MoveCaretCommand" caretOffset="5324" date="Sat Feb 25 11:11:41 EST 2023" docOffset="6204" starttimestamp="1677312753280" timestamp="28747914" />
  <Command __id="2359" _type="MoveCaretCommand" caretOffset="5324" date="Sat Feb 25 11:11:41 EST 2023" docOffset="6204" starttimestamp="1677312753280" timestamp="28747915" />
  <Command __id="2360" _type="MoveCaretCommand" caretOffset="5290" date="Sat Feb 25 11:11:41 EST 2023" docOffset="6170" starttimestamp="1677312753280" timestamp="28748668" />
  <Command __id="2361" _type="MoveCaretCommand" caretOffset="5290" date="Sat Feb 25 11:11:41 EST 2023" docOffset="6170" starttimestamp="1677312753280" timestamp="28748669" />
  <Command __id="2363" _type="InsertStringCommand" date="Sat Feb 25 11:11:42 EST 2023" starttimestamp="1677312753280" timestamp="28749023" timestamp2="28749023">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2364" _type="InsertStringCommand" date="Sat Feb 25 11:11:42 EST 2023" starttimestamp="1677312753280" timestamp="28749023" timestamp2="28749023">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2366" _type="PasteCommand" date="Sat Feb 25 11:11:43 EST 2023" starttimestamp="1677312753280" timestamp="28749970" />
  <Command __id="2368" _type="PauseCommand" date="Sat Feb 25 11:11:45 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="28752298">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[2328]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2367" _type="SelectTextCommand" caretOffset="5337" date="Sat Feb 25 11:11:45 EST 2023" end="5337" start="5314" starttimestamp="1677312753280" timestamp="28752298" />
  <Command __id="2369" _type="SelectTextCommand" caretOffset="5337" date="Sat Feb 25 11:11:45 EST 2023" end="5337" start="5314" starttimestamp="1677312753280" timestamp="28752298" />
  <Command __id="2371" _type="InsertStringCommand" date="Sat Feb 25 11:11:46 EST 2023" starttimestamp="1677312753280" timestamp="28752795" timestamp2="28752795">
    <data><![CDATA[F]]></data>
  </Command>
  <Command __id="2372" _type="InsertStringCommand" date="Sat Feb 25 11:11:46 EST 2023" starttimestamp="1677312753280" timestamp="28752795" timestamp2="28752795">
    <data><![CDATA[F]]></data>
  </Command>
  <Command __id="2374" _type="InsertStringCommand" date="Sat Feb 25 11:11:46 EST 2023" starttimestamp="1677312753280" timestamp="28753054" timestamp2="28753054">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="2375" _type="InsertStringCommand" date="Sat Feb 25 11:11:46 EST 2023" starttimestamp="1677312753280" timestamp="28753054" timestamp2="28753054">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="2377" _type="InsertStringCommand" date="Sat Feb 25 11:11:46 EST 2023" starttimestamp="1677312753280" timestamp="28753135" timestamp2="28753135">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2378" _type="InsertStringCommand" date="Sat Feb 25 11:11:46 EST 2023" starttimestamp="1677312753280" timestamp="28753135" timestamp2="28753135">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2380" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 11:11:46 EST 2023" starttimestamp="1677312753280" timestamp="28753398" />
  <Command __id="2381" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 11:11:46 EST 2023" starttimestamp="1677312753280" timestamp="28753399" />
  <Command __id="2383" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 11:11:46 EST 2023" starttimestamp="1677312753280" timestamp="28753517" />
  <Command __id="2384" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 11:11:46 EST 2023" starttimestamp="1677312753280" timestamp="28753517" />
  <Command __id="2386" _type="InsertStringCommand" date="Sat Feb 25 11:11:47 EST 2023" starttimestamp="1677312753280" timestamp="28753790" timestamp2="28753790">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2387" _type="InsertStringCommand" date="Sat Feb 25 11:11:47 EST 2023" starttimestamp="1677312753280" timestamp="28753790" timestamp2="28753790">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2389" _type="InsertStringCommand" date="Sat Feb 25 11:11:47 EST 2023" starttimestamp="1677312753280" timestamp="28753976" timestamp2="28753976">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="2390" _type="InsertStringCommand" date="Sat Feb 25 11:11:47 EST 2023" starttimestamp="1677312753280" timestamp="28753976" timestamp2="28753976">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="2392" _type="InsertStringCommand" date="Sat Feb 25 11:11:47 EST 2023" starttimestamp="1677312753280" timestamp="28754107" timestamp2="28754107">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2393" _type="InsertStringCommand" date="Sat Feb 25 11:11:47 EST 2023" starttimestamp="1677312753280" timestamp="28754107" timestamp2="28754107">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2395" _type="InsertStringCommand" date="Sat Feb 25 11:11:47 EST 2023" starttimestamp="1677312753280" timestamp="28754272" timestamp2="28754272">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2396" _type="InsertStringCommand" date="Sat Feb 25 11:11:47 EST 2023" starttimestamp="1677312753280" timestamp="28754272" timestamp2="28754272">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2398" _type="InsertStringCommand" date="Sat Feb 25 11:11:47 EST 2023" starttimestamp="1677312753280" timestamp="28754355" timestamp2="28754355">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2399" _type="InsertStringCommand" date="Sat Feb 25 11:11:47 EST 2023" starttimestamp="1677312753280" timestamp="28754355" timestamp2="28754355">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2401" _type="InsertStringCommand" date="Sat Feb 25 11:11:47 EST 2023" starttimestamp="1677312753280" timestamp="28754680" timestamp2="28754680">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="2402" _type="InsertStringCommand" date="Sat Feb 25 11:11:47 EST 2023" starttimestamp="1677312753280" timestamp="28754681" timestamp2="28754681">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="2404" _type="InsertStringCommand" date="Sat Feb 25 11:11:48 EST 2023" starttimestamp="1677312753280" timestamp="28754831" timestamp2="28754831">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="2405" _type="InsertStringCommand" date="Sat Feb 25 11:11:48 EST 2023" starttimestamp="1677312753280" timestamp="28754833" timestamp2="28754833">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="2407" _type="InsertStringCommand" date="Sat Feb 25 11:11:48 EST 2023" starttimestamp="1677312753280" timestamp="28754906" timestamp2="28754906">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2408" _type="InsertStringCommand" date="Sat Feb 25 11:11:48 EST 2023" starttimestamp="1677312753280" timestamp="28754906" timestamp2="28754906">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2410" _type="InsertStringCommand" date="Sat Feb 25 11:11:48 EST 2023" starttimestamp="1677312753280" timestamp="28755049" timestamp2="28755049">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="2411" _type="InsertStringCommand" date="Sat Feb 25 11:11:48 EST 2023" starttimestamp="1677312753280" timestamp="28755049" timestamp2="28755049">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="2413" _type="InsertStringCommand" date="Sat Feb 25 11:11:48 EST 2023" starttimestamp="1677312753280" timestamp="28755170" timestamp2="28755170">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="2414" _type="InsertStringCommand" date="Sat Feb 25 11:11:48 EST 2023" starttimestamp="1677312753280" timestamp="28755170" timestamp2="28755170">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="2416" _type="InsertStringCommand" date="Sat Feb 25 11:11:48 EST 2023" starttimestamp="1677312753280" timestamp="28755376" timestamp2="28755376">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="2417" _type="InsertStringCommand" date="Sat Feb 25 11:11:48 EST 2023" starttimestamp="1677312753280" timestamp="28755376" timestamp2="28755376">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="2419" _type="InsertStringCommand" date="Sat Feb 25 11:11:48 EST 2023" starttimestamp="1677312753280" timestamp="28755471" timestamp2="28755471">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="2420" _type="InsertStringCommand" date="Sat Feb 25 11:11:48 EST 2023" starttimestamp="1677312753280" timestamp="28755471" timestamp2="28755471">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="2422" _type="InsertStringCommand" date="Sat Feb 25 11:11:48 EST 2023" starttimestamp="1677312753280" timestamp="28755699" timestamp2="28755699">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2423" _type="InsertStringCommand" date="Sat Feb 25 11:11:48 EST 2023" starttimestamp="1677312753280" timestamp="28755699" timestamp2="28755699">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2425" _type="InsertStringCommand" date="Sat Feb 25 11:11:49 EST 2023" starttimestamp="1677312753280" timestamp="28755859" timestamp2="28755859">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2426" _type="InsertStringCommand" date="Sat Feb 25 11:11:49 EST 2023" starttimestamp="1677312753280" timestamp="28755859" timestamp2="28755859">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2428" _type="InsertStringCommand" date="Sat Feb 25 11:11:49 EST 2023" starttimestamp="1677312753280" timestamp="28756021" timestamp2="28756021">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2429" _type="InsertStringCommand" date="Sat Feb 25 11:11:49 EST 2023" starttimestamp="1677312753280" timestamp="28756021" timestamp2="28756021">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2430" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sat Feb 25 11:11:49 EST 2023" starttimestamp="1677312753280" timestamp="28756700" />
  <Command __id="2431" _type="EclipseCommand" commandID="" date="Sat Feb 25 11:11:50 EST 2023" starttimestamp="1677312753280" timestamp="28756741" />
  <Command __id="2432" _type="EclipseCommand" commandID="" date="Sat Feb 25 11:11:50 EST 2023" starttimestamp="1677312753280" timestamp="28756858" />
  <Command __id="2434" _type="PauseCommand" date="Sat Feb 25 11:11:51 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="28758502">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1644]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2433" _type="MoveCaretCommand" caretOffset="5445" date="Sat Feb 25 11:11:51 EST 2023" docOffset="6325" starttimestamp="1677312753280" timestamp="28758502" />
  <Command __id="2435" _type="MoveCaretCommand" caretOffset="5445" date="Sat Feb 25 11:11:51 EST 2023" docOffset="6325" starttimestamp="1677312753280" timestamp="28758503" />
  <Command __id="2437" _type="PauseCommand" date="Sat Feb 25 11:11:53 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="28760267">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1764]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2436" _type="MoveCaretCommand" caretOffset="5666" date="Sat Feb 25 11:11:53 EST 2023" docOffset="6546" starttimestamp="1677312753280" timestamp="28760267" />
  <Command __id="2438" _type="MoveCaretCommand" caretOffset="5666" date="Sat Feb 25 11:11:53 EST 2023" docOffset="6546" starttimestamp="1677312753280" timestamp="28760267" />
  <Command __id="2440" _type="InsertStringCommand" date="Sat Feb 25 11:11:54 EST 2023" starttimestamp="1677312753280" timestamp="28760920" timestamp2="28760920">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2441" _type="InsertStringCommand" date="Sat Feb 25 11:11:54 EST 2023" starttimestamp="1677312753280" timestamp="28760920" timestamp2="28760920">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2443" _type="PasteCommand" date="Sat Feb 25 11:11:54 EST 2023" starttimestamp="1677312753280" timestamp="28761337" />
  <Command __id="2445" _type="PauseCommand" date="Sat Feb 25 11:11:58 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="28764885">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[3548]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2444" _type="SelectTextCommand" caretOffset="5713" date="Sat Feb 25 11:11:58 EST 2023" end="5713" start="5690" starttimestamp="1677312753280" timestamp="28764885" />
  <Command __id="2446" _type="SelectTextCommand" caretOffset="5713" date="Sat Feb 25 11:11:58 EST 2023" end="5713" start="5690" starttimestamp="1677312753280" timestamp="28764886" />
  <Command __id="2448" _type="InsertStringCommand" date="Sat Feb 25 11:11:58 EST 2023" starttimestamp="1677312753280" timestamp="28765427" timestamp2="28765427">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="2449" _type="InsertStringCommand" date="Sat Feb 25 11:11:58 EST 2023" starttimestamp="1677312753280" timestamp="28765427" timestamp2="28765427">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="2451" _type="InsertStringCommand" date="Sat Feb 25 11:11:58 EST 2023" starttimestamp="1677312753280" timestamp="28765644" timestamp2="28765644">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2452" _type="InsertStringCommand" date="Sat Feb 25 11:11:58 EST 2023" starttimestamp="1677312753280" timestamp="28765644" timestamp2="28765644">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2454" _type="InsertStringCommand" date="Sat Feb 25 11:11:59 EST 2023" starttimestamp="1677312753280" timestamp="28765805" timestamp2="28765805">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="2455" _type="InsertStringCommand" date="Sat Feb 25 11:11:59 EST 2023" starttimestamp="1677312753280" timestamp="28765805" timestamp2="28765805">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="2457" _type="InsertStringCommand" date="Sat Feb 25 11:11:59 EST 2023" starttimestamp="1677312753280" timestamp="28765907" timestamp2="28765907">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="2458" _type="InsertStringCommand" date="Sat Feb 25 11:11:59 EST 2023" starttimestamp="1677312753280" timestamp="28765907" timestamp2="28765907">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="2460" _type="InsertStringCommand" date="Sat Feb 25 11:11:59 EST 2023" starttimestamp="1677312753280" timestamp="28766043" timestamp2="28766043">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2461" _type="InsertStringCommand" date="Sat Feb 25 11:11:59 EST 2023" starttimestamp="1677312753280" timestamp="28766043" timestamp2="28766043">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2463" _type="InsertStringCommand" date="Sat Feb 25 11:11:59 EST 2023" starttimestamp="1677312753280" timestamp="28766114" timestamp2="28766114">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="2464" _type="InsertStringCommand" date="Sat Feb 25 11:11:59 EST 2023" starttimestamp="1677312753280" timestamp="28766114" timestamp2="28766114">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="2466" _type="InsertStringCommand" date="Sat Feb 25 11:11:59 EST 2023" starttimestamp="1677312753280" timestamp="28766246" timestamp2="28766246">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2467" _type="InsertStringCommand" date="Sat Feb 25 11:11:59 EST 2023" starttimestamp="1677312753280" timestamp="28766246" timestamp2="28766246">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2469" _type="InsertStringCommand" date="Sat Feb 25 11:11:59 EST 2023" starttimestamp="1677312753280" timestamp="28766389" timestamp2="28766389">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="2470" _type="InsertStringCommand" date="Sat Feb 25 11:11:59 EST 2023" starttimestamp="1677312753280" timestamp="28766389" timestamp2="28766389">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="2472" _type="InsertStringCommand" date="Sat Feb 25 11:11:59 EST 2023" starttimestamp="1677312753280" timestamp="28766442" timestamp2="28766442">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="2473" _type="InsertStringCommand" date="Sat Feb 25 11:11:59 EST 2023" starttimestamp="1677312753280" timestamp="28766442" timestamp2="28766442">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="2475" _type="InsertStringCommand" date="Sat Feb 25 11:11:59 EST 2023" starttimestamp="1677312753280" timestamp="28766574" timestamp2="28766574">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2476" _type="InsertStringCommand" date="Sat Feb 25 11:11:59 EST 2023" starttimestamp="1677312753280" timestamp="28766575" timestamp2="28766575">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2478" _type="InsertStringCommand" date="Sat Feb 25 11:12:00 EST 2023" starttimestamp="1677312753280" timestamp="28766736" timestamp2="28766736">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="2479" _type="InsertStringCommand" date="Sat Feb 25 11:12:00 EST 2023" starttimestamp="1677312753280" timestamp="28766736" timestamp2="28766736">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="2501" _type="ProgramExecutionEvent" className="(Unknown)" date="Sat Feb 25 11:12:03 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1677312753280" timestamp="28770309" type="Debug" />
  <Command __id="2503" _type="ProgramExecutionEvent" className="/ProducersConsumersV3/src/main/Main.java" date="Sat Feb 25 11:12:03 EST 2023" kind="HitBreakPoint" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="28770310" type="Run" />
  <Command __id="2504" _type="ProgramExecutionEvent" className="(Unknown)" date="Sat Feb 25 11:12:03 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1677312753280" timestamp="28770310" type="Debug" />
  <Command __id="2505" _type="ProgramExecutionEvent" className="/ProducersConsumersV3/src/main/Main.java" date="Sat Feb 25 11:12:03 EST 2023" kind="HitBreakPoint" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="28770310" type="Run" />
  <Command __id="2340" _type="DiffBasedFileOpenCommand" date="Sat Feb 25 11:11:32 EST 2023" docASTNodeCount="1565" docActiveCodeLength="9190" docExpressionCount="1074" docLength="10120" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="28739105">
    <filePath><![CDATA[C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\graphics\AProducerConsumerScene2.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package graphics;¶¶import java.util.ArrayList;¶import java.util.LinkedList;¶import java.util.List;¶import java.util.Queue;¶¶import animations.ACookingPlateAnimator;¶import animations.ACookingPlateCommand;¶import animations.AServingPlateAnimator;¶import animations.AServingPlateCommand;¶import animations.CookingPlateAnimator;¶import animations.ServingPlateAnimator;¶import bus.uigen.OEFrame;¶import bus.uigen.ObjectEditor;¶import bus.uigen.shapes.ALineModel;¶import bus.uigen.shapes.AStringModel;¶import bus.uigen.shapes.AnImageModel;¶import bus.uigen.shapes.OEShapeModel;¶import shapes.FlexibleTextShape;¶import util.annotations.EditablePropertyNames;¶import util.annotations.Label;¶import util.annotations.PropertyNames;¶import util.annotations.StructurePattern;¶import util.annotations.StructurePatternNames;¶import util.annotations.Visible;¶import util.misc.ThreadSupport;¶¶import java.awt.Color;¶¶@StructurePattern(StructurePatternNames.BEAN_PATTERN)¶@PropertyNames({¶	"patronList",¶	"chefList",¶	"buffer",¶	"queuedList",¶	"bellsList",¶	"queueBellList"¶})¶@EditablePropertyNames({¶})¶public class AProducerConsumerScene2 implements ProducerConsumerScene2 {¶	¶	//Avatar offsets inside scene¶	int[] chefXValues = {120,-50,-50,120};¶	int[] chefYValues = {-50,35,210,320};¶	int[] patronXValues = {650,850,850,650};¶	int[] patronYValues = {-50,35,220,320};¶	int[] bellXValues = {680,880,880,680};¶	int[] bellYValues = {75,160,345,445};¶	int INIT_HEAD_Y = 60;¶	int INIT_HEAD_X = 163;¶	int INIT_HEAD_HEIGHT = 90;¶	int INIT_HEAD_WIDTH = 80;¶	int PLATE_OFFSET_X = 30;¶	int PLATE_OFFSET_Y = 10;¶	int PAUSE = 5;¶	¶	//Booleans that help with the functionality of the below methods¶	boolean INIT_COOK = true;¶	boolean full = false;¶	int fullPlateOffset = -5;¶	¶	//Defining the chef and patron images¶	String[] chefImages = {"images/0.png","images/1.png","images/2.png","images/3.png"};¶	String[] patronImages = {"images/4.png", "images/5.png", "images/6.png", "images/7.png"};¶	¶	//Buffer arrays¶	int[] bufferXValues = {625, 680, 680, 620, 535, 460, 460, 535};¶	int[] bufferYValues = {200, 275, 365, 425, 425, 365, 275, 200};¶	boolean[] isFull = {false, false, false, false, false, false, false, false};¶	¶	//The properties of our class¶	List<APatron> patronList;¶	List<AChef> chefList;¶	BoundedBuffer buffer = new ABoundedBuffer();¶	¶	//This list will keep a track of the plates that enter the buffer so that FIFO¶	Queue<APlate> queuedList;¶	¶	OEShapeModel[] lineArray = {buffer.getLineTwo(), buffer.getLineThree(), buffer.getLineFour(), ¶								buffer.getLineFive(), buffer.getLineSix(), buffer.getLineSeven(), ¶								buffer.getLineEight(), buffer.getLineOne()};¶	¶	List<ABell> bellsList;¶	Queue<ABell> queueBellList;¶	int[] bellValues = {127, 212, 397, 497};¶	Queue<Integer> bellIntegerList;¶	¶	ACookingPlateCommand cookingCommand;¶	CookingPlateAnimator cookingAnimator;¶	¶	AServingPlateCommand servingCommand;¶	ServingPlateAnimator servingAnimator;¶	¶	//The constructor sets the scene with one chef, patron, a buffer, and a plate (not visible)¶	public AProducerConsumerScene2() {¶		patronList = new ArrayList<APatron>();¶		chefList = new ArrayList<AChef>();¶		//buffer = new ABoundedBuffer();¶		¶		queuedList = new LinkedList<APlate>();¶		bellsList = new ArrayList<ABell>();¶		queueBellList = new LinkedList<ABell>();¶		bellIntegerList = new LinkedList<Integer>();¶		¶		patronList.add(0, new APatron());¶		OEShapeModel initPatronHead = new AnImageModel(patronImages[0]);¶		initPatronHead.setX(INIT_HEAD_X);¶		initPatronHead.setY(INIT_HEAD_Y);¶		initPatronHead.setHeight(INIT_HEAD_HEIGHT);¶		initPatronHead.setWidth(INIT_HEAD_WIDTH);¶		patronList.get(0).patron.setHead(initPatronHead);¶		patronList.get(0).move(patronXValues[0], patronYValues[0]);¶		¶		chefList.add(0, new AChef());¶		OEShapeModel initChefHead = new AnImageModel(chefImages[0]);¶		initChefHead.setX(INIT_HEAD_X);¶		initChefHead.setY(INIT_HEAD_Y);¶		initChefHead.setHeight(INIT_HEAD_HEIGHT);¶		initChefHead.setWidth(INIT_HEAD_WIDTH);¶		chefList.get(0).chef.setHead(initChefHead);¶		chefList.get(0).move(chefXValues[0], chefYValues[0]);¶		¶		queuedList.add(new APlate());¶		queuedList.peek().getPlate().setHeight(0);¶		queuedList.peek().getPlate().setWidth(0);¶		¶		cookingAnimator = new ACookingPlateAnimator();¶		servingAnimator = new AServingPlateAnimator();¶		¶		bellsList.add(new ABell());¶		bellsList.get(0).getBell().setHeight(0);¶		bellsList.get(0).getBell().setWidth(0);¶		¶		queueBellList.add(new ABell());¶		queueBellList.peek().getBell().setHeight(0);¶		queueBellList.peek().getBell().setWidth(0);¶		¶		bellIntegerList.add(0);¶	}¶	¶	//Producer consumer methods¶	¶	//Init Scene sets the number of patrons and chefs in the scene¶	@Label("Init Scene")¶	public void initScene(int patronAmount, int chefAmount) {¶		bellsList.clear();¶		for (int i=0; i<patronAmount; i++) { ¶			APatron patron = new APatron();¶			patronList.add(i, patron);¶			OEShapeModel newHead = new AnImageModel(patronImages[i]);¶			patron.patron.setHead(newHead); ¶			newHead.setX(INIT_HEAD_X); ¶			newHead.setY(INIT_HEAD_Y);¶			newHead.setHeight(INIT_HEAD_HEIGHT);¶			newHead.setWidth(INIT_HEAD_WIDTH);¶			patron.move(patronXValues[i], patronYValues[i]);¶			¶			bellsList.add(new ABell());¶			bellsList.get(i).move(bellXValues[i], bellYValues[i]);¶		}¶		for (int i=0; i<chefAmount; i++) {¶			AChef chef = new AChef();¶			chefList.add(i, chef);¶			OEShapeModel newHead = new AnImageModel(chefImages[i]);¶			chef.chef.setHead(newHead);¶			newHead.setX(INIT_HEAD_X); ¶			newHead.setY(INIT_HEAD_Y);¶			newHead.setHeight(INIT_HEAD_HEIGHT);¶			newHead.setWidth(INIT_HEAD_WIDTH);¶			chef.move(chefXValues[i], chefYValues[i]);¶		}¶	}¶	¶	//Once the head of an avatar is chosen, it makes the plate that they "cook" appear¶	public void cook(OEShapeModel head) {¶		"), Diff(INSERT,"System.out.println("MADE TO COOK METHOD!!!!");¶		"), Diff(EQUAL,"if (INIT_COOK) {¶			INIT_COOK=!INIT_COOK;¶			queuedList.remove();¶		}¶		¶		int headX = head.getCenterX();¶		int headY = head.getCenterY();¶		¶		APlate newPlate = new APlate();¶		newPlate.getPlate().setHeight(0);¶		newPlate.getPlate().setWidth(0);¶		¶		if (full) {¶			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y+fullPlateOffset);¶			fullPlateOffset = fullPlateOffset - 5;¶		} else {¶			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y);¶		}¶		¶		cookingCommand = new ACookingPlateCommand(cookingAnimator, newPlate, 40, 15);¶		Thread thread = new Thread (cookingCommand);¶		thread.start();¶	}¶	¶	public void serve(APlate plate) {¶		//Checks to see if the buffer is full. If it is, then can't serve.¶		resetLineColors();¶		if(checkIfFull()) {¶			resetLineColors();¶			return;¶		}¶		¶		queuedList.add(plate);¶		¶		int workingPlatePlace = queuedList.size();¶		FlexibleTextShape platePlace = new AStringModel(Integer.toString(workingPlatePlace));¶		plate.setText(platePlace);¶		¶		changeLineColors(workingPlatePlace);¶		servingCommand = new AServingPlateCommand(servingAnimator,plate,PAUSE, bufferXValues[workingPlatePlace], bufferYValues[workingPlatePlace]);¶		Thread thread = new Thread(servingCommand);¶		thread.start();¶		isFull[workingPlatePlace] = true;¶	}¶	¶	public void order(OEShapeModel bell) {¶		if(checkIfFull()) {¶			resetLineColors();¶			resetBuffer();¶		}¶		bellIntegerList.add(0);¶		int bellPlace = findBell(bell.getCenterY());¶		bellsList.get(bellPlace).getText().setText(String.valueOf(bellIntegerList.size()-1));¶		¶		int platePlace = findFirstAvailablePlate();¶		//servingCommand = new AServingPlateCommand(servingAnimator,plateList.get(platePlace),PAUSE, bell.getCenterX() , bell.getCenterY());¶		Thread thread = new Thread(servingCommand);¶		thread.start();¶		¶		//cookingCommand = new ACookingPlateCommand(cookingAnimator, plateList.get(0), 0, 15);¶		Thread eatingThread = new Thread (cookingCommand);¶		eatingThread.start();¶		//plateList.get(0).getText().setText("");¶	}¶	¶	public void eat() {¶		//plateList.remove(0);¶	}¶	¶	@Override¶	@Visible(false)¶	public int findBell(int centerY) {¶		for(int i=0; i<bellsList.size();i++) {¶			if(bellsList.get(i).getBell().getCenterY() == centerY) {¶				return i;¶			}¶		}¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public int findFirstAvailablePlate() {¶		for (int i=0; i<isFull.length;i++) {¶			if(isFull[i] == true) {¶				return i;¶			}¶		}¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public void resetBuffer() {¶		¶		for (int i=0; i<isFull.length;i++) {¶			isFull[i] = false;¶		}¶	}¶	¶	@Override¶	@Visible(false)¶	public int findPatron(OEShapeModel patronHead) {¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public boolean checkIfFull() {¶		for (int i=0; i<isFull.length;i++) {¶			if (isFull[i] == false) {¶				full = false;¶				return full;¶			}¶		}¶		full = true;¶		return full;¶	}¶	¶	@Override¶	@Visible(false)¶	public void changeLineColors(int workingPlatePlace) {¶		if(workingPlatePlace == lineArray.length-1) {¶			lineArray[workingPlatePlace].setColor(Color.GREEN);¶			lineArray[0].setColor(Color.GREEN);¶		} else {¶			lineArray[workingPlatePlace].setColor(Color.GREEN);¶			lineArray[workingPlatePlace+1].setColor(Color.GREEN);¶		}¶	}¶	¶	¶	@Override¶	@Visible(false)¶	public void resetLineColors() {¶		for (int i=0; i<lineArray.length; i++) {¶			lineArray[i].setColor(Color.WHITE);¶		}¶	}¶	¶	//Getters for properties of the scene¶	@Override¶	public List<AChef> getChefList() {¶		return chefList;¶	}¶	¶	@Override¶	public List<APatron> getPatronList() {¶		return patronList;¶	}¶	¶	@Override¶	public BoundedBuffer getBuffer() {¶		return buffer;¶	}¶	¶	@Override¶	@util.annotations.Visible(false)¶	public Queue<APlate> getQueuedList() {¶		return queuedList;¶	}¶	¶	@Override¶	public List<ABell> getBellsList() {¶		return bellsList;¶	}¶	¶	@Override¶	@Visible(false)¶	public Queue<ABell> getQueueBellList() {¶		return queueBellList;¶	}¶}¶")]]]></diff>
    <snapshot><![CDATA[package graphics;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

import animations.ACookingPlateAnimator;
import animations.ACookingPlateCommand;
import animations.AServingPlateAnimator;
import animations.AServingPlateCommand;
import animations.CookingPlateAnimator;
import animations.ServingPlateAnimator;
import bus.uigen.OEFrame;
import bus.uigen.ObjectEditor;
import bus.uigen.shapes.ALineModel;
import bus.uigen.shapes.AStringModel;
import bus.uigen.shapes.AnImageModel;
import bus.uigen.shapes.OEShapeModel;
import shapes.FlexibleTextShape;
import util.annotations.EditablePropertyNames;
import util.annotations.Label;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Visible;
import util.misc.ThreadSupport;

import java.awt.Color;

@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({
	"patronList",
	"chefList",
	"buffer",
	"queuedList",
	"bellsList",
	"queueBellList"
})
@EditablePropertyNames({
})
public class AProducerConsumerScene2 implements ProducerConsumerScene2 {
	
	//Avatar offsets inside scene
	int[] chefXValues = {120,-50,-50,120};
	int[] chefYValues = {-50,35,210,320};
	int[] patronXValues = {650,850,850,650};
	int[] patronYValues = {-50,35,220,320};
	int[] bellXValues = {680,880,880,680};
	int[] bellYValues = {75,160,345,445};
	int INIT_HEAD_Y = 60;
	int INIT_HEAD_X = 163;
	int INIT_HEAD_HEIGHT = 90;
	int INIT_HEAD_WIDTH = 80;
	int PLATE_OFFSET_X = 30;
	int PLATE_OFFSET_Y = 10;
	int PAUSE = 5;
	
	//Booleans that help with the functionality of the below methods
	boolean INIT_COOK = true;
	boolean full = false;
	int fullPlateOffset = -5;
	
	//Defining the chef and patron images
	String[] chefImages = {"images/0.png","images/1.png","images/2.png","images/3.png"};
	String[] patronImages = {"images/4.png", "images/5.png", "images/6.png", "images/7.png"};
	
	//Buffer arrays
	int[] bufferXValues = {625, 680, 680, 620, 535, 460, 460, 535};
	int[] bufferYValues = {200, 275, 365, 425, 425, 365, 275, 200};
	boolean[] isFull = {false, false, false, false, false, false, false, false};
	
	//The properties of our class
	List<APatron> patronList;
	List<AChef> chefList;
	BoundedBuffer buffer = new ABoundedBuffer();
	
	//This list will keep a track of the plates that enter the buffer so that FIFO
	Queue<APlate> queuedList;
	
	OEShapeModel[] lineArray = {buffer.getLineTwo(), buffer.getLineThree(), buffer.getLineFour(), 
								buffer.getLineFive(), buffer.getLineSix(), buffer.getLineSeven(), 
								buffer.getLineEight(), buffer.getLineOne()};
	
	List<ABell> bellsList;
	Queue<ABell> queueBellList;
	int[] bellValues = {127, 212, 397, 497};
	Queue<Integer> bellIntegerList;
	
	ACookingPlateCommand cookingCommand;
	CookingPlateAnimator cookingAnimator;
	
	AServingPlateCommand servingCommand;
	ServingPlateAnimator servingAnimator;
	
	//The constructor sets the scene with one chef, patron, a buffer, and a plate (not visible)
	public AProducerConsumerScene2() {
		patronList = new ArrayList<APatron>();
		chefList = new ArrayList<AChef>();
		//buffer = new ABoundedBuffer();
		
		queuedList = new LinkedList<APlate>();
		bellsList = new ArrayList<ABell>();
		queueBellList = new LinkedList<ABell>();
		bellIntegerList = new LinkedList<Integer>();
		
		patronList.add(0, new APatron());
		OEShapeModel initPatronHead = new AnImageModel(patronImages[0]);
		initPatronHead.setX(INIT_HEAD_X);
		initPatronHead.setY(INIT_HEAD_Y);
		initPatronHead.setHeight(INIT_HEAD_HEIGHT);
		initPatronHead.setWidth(INIT_HEAD_WIDTH);
		patronList.get(0).patron.setHead(initPatronHead);
		patronList.get(0).move(patronXValues[0], patronYValues[0]);
		
		chefList.add(0, new AChef());
		OEShapeModel initChefHead = new AnImageModel(chefImages[0]);
		initChefHead.setX(INIT_HEAD_X);
		initChefHead.setY(INIT_HEAD_Y);
		initChefHead.setHeight(INIT_HEAD_HEIGHT);
		initChefHead.setWidth(INIT_HEAD_WIDTH);
		chefList.get(0).chef.setHead(initChefHead);
		chefList.get(0).move(chefXValues[0], chefYValues[0]);
		
		queuedList.add(new APlate());
		queuedList.peek().getPlate().setHeight(0);
		queuedList.peek().getPlate().setWidth(0);
		
		cookingAnimator = new ACookingPlateAnimator();
		servingAnimator = new AServingPlateAnimator();
		
		bellsList.add(new ABell());
		bellsList.get(0).getBell().setHeight(0);
		bellsList.get(0).getBell().setWidth(0);
		
		queueBellList.add(new ABell());
		queueBellList.peek().getBell().setHeight(0);
		queueBellList.peek().getBell().setWidth(0);
		
		bellIntegerList.add(0);
	}
	
	//Producer consumer methods
	
	//Init Scene sets the number of patrons and chefs in the scene
	@Label("Init Scene")
	public void initScene(int patronAmount, int chefAmount) {
		bellsList.clear();
		for (int i=0; i<patronAmount; i++) { 
			APatron patron = new APatron();
			patronList.add(i, patron);
			OEShapeModel newHead = new AnImageModel(patronImages[i]);
			patron.patron.setHead(newHead); 
			newHead.setX(INIT_HEAD_X); 
			newHead.setY(INIT_HEAD_Y);
			newHead.setHeight(INIT_HEAD_HEIGHT);
			newHead.setWidth(INIT_HEAD_WIDTH);
			patron.move(patronXValues[i], patronYValues[i]);
			
			bellsList.add(new ABell());
			bellsList.get(i).move(bellXValues[i], bellYValues[i]);
		}
		for (int i=0; i<chefAmount; i++) {
			AChef chef = new AChef();
			chefList.add(i, chef);
			OEShapeModel newHead = new AnImageModel(chefImages[i]);
			chef.chef.setHead(newHead);
			newHead.setX(INIT_HEAD_X); 
			newHead.setY(INIT_HEAD_Y);
			newHead.setHeight(INIT_HEAD_HEIGHT);
			newHead.setWidth(INIT_HEAD_WIDTH);
			chef.move(chefXValues[i], chefYValues[i]);
		}
	}
	
	//Once the head of an avatar is chosen, it makes the plate that they "cook" appear
	public void cook(OEShapeModel head) {
		System.out.println("MADE TO COOK METHOD!!!!");
		if (INIT_COOK) {
			INIT_COOK=!INIT_COOK;
			queuedList.remove();
		}
		
		int headX = head.getCenterX();
		int headY = head.getCenterY();
		
		APlate newPlate = new APlate();
		newPlate.getPlate().setHeight(0);
		newPlate.getPlate().setWidth(0);
		
		if (full) {
			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y+fullPlateOffset);
			fullPlateOffset = fullPlateOffset - 5;
		} else {
			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y);
		}
		
		cookingCommand = new ACookingPlateCommand(cookingAnimator, newPlate, 40, 15);
		Thread thread = new Thread (cookingCommand);
		thread.start();
	}
	
	public void serve(APlate plate) {
		//Checks to see if the buffer is full. If it is, then can't serve.
		resetLineColors();
		if(checkIfFull()) {
			resetLineColors();
			return;
		}
		
		queuedList.add(plate);
		
		int workingPlatePlace = queuedList.size();
		FlexibleTextShape platePlace = new AStringModel(Integer.toString(workingPlatePlace));
		plate.setText(platePlace);
		
		changeLineColors(workingPlatePlace);
		servingCommand = new AServingPlateCommand(servingAnimator,plate,PAUSE, bufferXValues[workingPlatePlace], bufferYValues[workingPlatePlace]);
		Thread thread = new Thread(servingCommand);
		thread.start();
		isFull[workingPlatePlace] = true;
	}
	
	public void order(OEShapeModel bell) {
		if(checkIfFull()) {
			resetLineColors();
			resetBuffer();
		}
		bellIntegerList.add(0);
		int bellPlace = findBell(bell.getCenterY());
		bellsList.get(bellPlace).getText().setText(String.valueOf(bellIntegerList.size()-1));
		
		int platePlace = findFirstAvailablePlate();
		//servingCommand = new AServingPlateCommand(servingAnimator,plateList.get(platePlace),PAUSE, bell.getCenterX() , bell.getCenterY());
		Thread thread = new Thread(servingCommand);
		thread.start();
		
		//cookingCommand = new ACookingPlateCommand(cookingAnimator, plateList.get(0), 0, 15);
		Thread eatingThread = new Thread (cookingCommand);
		eatingThread.start();
		//plateList.get(0).getText().setText("");
	}
	
	public void eat() {
		//plateList.remove(0);
	}
	
	@Override
	@Visible(false)
	public int findBell(int centerY) {
		for(int i=0; i<bellsList.size();i++) {
			if(bellsList.get(i).getBell().getCenterY() == centerY) {
				return i;
			}
		}
		return 0;
	}
	
	@Override
	@Visible(false)
	public int findFirstAvailablePlate() {
		for (int i=0; i<isFull.length;i++) {
			if(isFull[i] == true) {
				return i;
			}
		}
		return 0;
	}
	
	@Override
	@Visible(false)
	public void resetBuffer() {
		
		for (int i=0; i<isFull.length;i++) {
			isFull[i] = false;
		}
	}
	
	@Override
	@Visible(false)
	public int findPatron(OEShapeModel patronHead) {
		return 0;
	}
	
	@Override
	@Visible(false)
	public boolean checkIfFull() {
		for (int i=0; i<isFull.length;i++) {
			if (isFull[i] == false) {
				full = false;
				return full;
			}
		}
		full = true;
		return full;
	}
	
	@Override
	@Visible(false)
	public void changeLineColors(int workingPlatePlace) {
		if(workingPlatePlace == lineArray.length-1) {
			lineArray[workingPlatePlace].setColor(Color.GREEN);
			lineArray[0].setColor(Color.GREEN);
		} else {
			lineArray[workingPlatePlace].setColor(Color.GREEN);
			lineArray[workingPlatePlace+1].setColor(Color.GREEN);
		}
	}
	
	
	@Override
	@Visible(false)
	public void resetLineColors() {
		for (int i=0; i<lineArray.length; i++) {
			lineArray[i].setColor(Color.WHITE);
		}
	}
	
	//Getters for properties of the scene
	@Override
	public List<AChef> getChefList() {
		return chefList;
	}
	
	@Override
	public List<APatron> getPatronList() {
		return patronList;
	}
	
	@Override
	public BoundedBuffer getBuffer() {
		return buffer;
	}
	
	@Override
	@util.annotations.Visible(false)
	public Queue<APlate> getQueuedList() {
		return queuedList;
	}
	
	@Override
	public List<ABell> getBellsList() {
		return bellsList;
	}
	
	@Override
	@Visible(false)
	public Queue<ABell> getQueueBellList() {
		return queueBellList;
	}
}
]]></snapshot>
  </Command>
  <DocumentChange __id="2362" _type="Insert" date="Sat Feb 25 11:11:42 EST 2023" docASTNodeCount="1565" docActiveCodeLength="9194" docExpressionCount="1074" docLength="10124" length="4" offset="6170" starttimestamp="1677312753280" timestamp="28748997">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <DocumentChange __id="2365" _type="Replace" date="Sat Feb 25 11:11:43 EST 2023" docASTNodeCount="1572" docActiveCodeLength="9240" docExpressionCount="1080" docLength="10170" endLine="186" insertionLength="48" int_docASTNodeCount="1565" int_docActiveCodeLength="9192" int_docExpressionCount="1074" int_docLength="10122" length="2" offset="6172" startLine="186" starttimestamp="1677312753280" timestamp="28749929">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		System.out.println("MADE TO COOK METHOD!!!!");]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2370" _type="Replace" date="Sat Feb 25 11:11:46 EST 2023" docASTNodeCount="1572" docActiveCodeLength="9218" docExpressionCount="1080" docLength="10148" endLine="186" insertionLength="1" int_docASTNodeCount="1572" int_docActiveCodeLength="9217" int_docExpressionCount="1080" int_docLength="10147" length="23" offset="6194" startLine="186" starttimestamp="1677312753280" timestamp="28752743">
    <deletedText><![CDATA[MADE TO COOK METHOD!!!!]]></deletedText>
    <insertedText><![CDATA[F]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2373" _type="Insert" date="Sat Feb 25 11:11:46 EST 2023" docASTNodeCount="1572" docActiveCodeLength="9220" docExpressionCount="1080" docLength="10150" length="2" offset="6195" repeat="2" starttimestamp="1677312753280" timestamp="28753013" timestamp2="28753110">
    <text><![CDATA[ri]]></text>
  </DocumentChange>
  <DocumentChange __id="2379" _type="Delete" date="Sat Feb 25 11:11:46 EST 2023" docASTNodeCount="1572" docActiveCodeLength="9218" docExpressionCount="1080" docLength="10148" endLine="186" length="2" offset="6195" repeat="2" startLine="186" starttimestamp="1677312753280" timestamp="28753364" timestamp2="28753480">
    <text><![CDATA[ri]]></text>
  </DocumentChange>
  <DocumentChange __id="2385" _type="Insert" date="Sat Feb 25 11:11:47 EST 2023" docASTNodeCount="1572" docActiveCodeLength="9233" docExpressionCount="1080" docLength="10163" length="15" offset="6195" repeat="15" starttimestamp="1677312753280" timestamp="28753747" timestamp2="28755968">
    <text><![CDATA[irst Checkpoint]]></text>
  </DocumentChange>
  <DocumentChange __id="2439" _type="Insert" date="Sat Feb 25 11:11:54 EST 2023" docASTNodeCount="1572" docActiveCodeLength="9237" docExpressionCount="1080" docLength="10167" length="4" offset="6546" starttimestamp="1677312753280" timestamp="28760892">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <DocumentChange __id="2442" _type="Replace" date="Sat Feb 25 11:11:54 EST 2023" docASTNodeCount="1579" docActiveCodeLength="9283" docExpressionCount="1086" docLength="10213" endLine="198" insertionLength="48" int_docASTNodeCount="1572" int_docActiveCodeLength="9235" int_docExpressionCount="1080" int_docLength="10165" length="2" offset="6548" startLine="198" starttimestamp="1677312753280" timestamp="28761299">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		System.out.println("MADE TO COOK METHOD!!!!");]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2447" _type="Replace" date="Sat Feb 25 11:11:58 EST 2023" docASTNodeCount="1579" docActiveCodeLength="9261" docExpressionCount="1086" docLength="10191" endLine="198" insertionLength="1" int_docASTNodeCount="1579" int_docActiveCodeLength="9260" int_docExpressionCount="1086" int_docLength="10190" length="23" offset="6570" startLine="198" starttimestamp="1677312753280" timestamp="28765401">
    <deletedText><![CDATA[MADE TO COOK METHOD!!!!]]></deletedText>
    <insertedText><![CDATA[S]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2450" _type="Insert" date="Sat Feb 25 11:11:58 EST 2023" docASTNodeCount="1579" docActiveCodeLength="9277" docExpressionCount="1086" docLength="10207" length="16" offset="6571" repeat="16" starttimestamp="1677312753280" timestamp="28765604" timestamp2="28767580">
    <text><![CDATA[econd checkpoint]]></text>
  </DocumentChange>
  <Command __id="2507" _type="PauseCommand" date="Sat Feb 25 11:12:05 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="28772252">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[1942]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2509" _type="ProgramExecutionEvent" className="/ProducersConsumersV3/src/main/Main.java" date="Sat Feb 25 11:12:07 EST 2023" kind="HitBreakPoint" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="28774626" type="Run" />
  <Command __id="2511" _type="RunCommand" className="/ProducersConsumersV3/src/main/Main.java" date="Sat Feb 25 11:12:07 EST 2023" kind="HitBreakPoint" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="28774627" type="Run" />
  <Command __id="2513" _type="PauseCommand" date="Sat Feb 25 11:12:09 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="28776043">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[1416]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2512" _type="ShellCommand" date="Sat Feb 25 11:12:09 EST 2023" starttimestamp="1677312753280" timestamp="28776043" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2515" _type="PauseCommand" date="Sat Feb 25 11:12:11 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="28778436">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2393]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="2514" _type="ConsoleOutput" date="Sat Feb 25 11:12:11 EST 2023" overflow="false" starttimestamp="1677312753280" timestamp="28778436" type="ConsoleOutput">
    <outputString><![CDATA[E*** Object:graphics.ABell@b6b1987 displayed multiple times with following references:
 [AProducerConsumerScene2.queueBellList.first, AProducerConsumerScene2.queueBellList.last]
 Remove one of these references in the displayed logical structure by, for instance, renaming the getter for the property storing the shared object or adding the @util.annotations.Visible(false) annotation before the getter.
If you think it is safe to tareverse  all of these  references then add the annotattion @util.annotattions.AllowMultipleEqualReferences(false) nefore the getter.
E*** Object:graphics.ABell@b6b1987 displayed multiple times with following references:
 [AProducerConsumerScene2.queueBellList.first, AProducerConsumerScene2.queueBellList.0, AProducerConsumerScene2.queueBellList.last]
 Remove one of these references in the displayed logical structure by, for instance, renaming the getter for the property storing the shared object or adding the @util.annotations.Visible(false) annotation before the getter.
If you think it is safe to tareverse  all of these  references then add the annotattion @util.annotattions.AllowMultipleEqualReferences(false) nefore the getter.
E*** Object:graphics.APlate@2c532cd8 displayed multiple times with following references:
 [AProducerConsumerScene2.queuedList.first, AProducerConsumerScene2.queuedList.last]
 Remove one of these references in the displayed logical structure by, for instance, renaming the getter for the property storing the shared object or adding the @util.annotations.Visible(false) annotation before the getter.
If you think it is safe to tareverse  all of these  references then add the annotattion @util.annotattions.AllowMultipleEqualReferences(false) nefore the getter.
E*** Object:graphics.APlate@2c532cd8 displayed multiple times with following references:
 [AProducerConsumerScene2.queuedList.0, AProducerConsumerScene2.queuedList.first, AProducerConsumerScene2.queuedList.last]
 Remove one of these references in the displayed logical structure by, for instance, renaming the getter for the property storing the shared object or adding the @util.annotations.Visible(false) annotation before the getter.
If you think it is safe to tareverse  all of these  references then add the annotattion @util.annotattions.AllowMultipleEqualReferences(false) nefore the getter.
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"E*** Object:graphics.ABell@b6b1987 displayed multiple times with following references:¶ [AProducerConsumerScene2.queueBellList.first, AProducerConsumerScene2.queueBellList.last]¶ Remove one of these references in the displayed logical structure by, for instance, renaming the getter for the property storing the shared object or adding the @util.annotations.Visible(false) annotation before the getter.¶If you think it is safe to tareverse  all of these  references then add the annotattion @util.annotattions.AllowMultipleEqualReferences(false) nefore the getter.¶E*** Object:graphics.ABell@b6b1987 displayed multiple times with following references:¶ [AProducerConsumerScene2.queueBellList.first, AProducerConsumerScene2.queueBellList.0, AProducerConsumerScene2.queueBellList.last]¶ Remove one of these references in the displayed logical structure by, for instance, renaming the getter for the property storing the shared object or adding the @util.annotations.Visible(false) annotation before the getter.¶If you think it is safe to tareverse  all of these  references then add the annotattion @util.annotattions.AllowMultipleEqualReferences(false) nefore the getter.¶E*** Object:graphics.APlate@2c532cd8 displayed multiple times with following references:¶ [AProducerConsumerScene2.queuedList.first, AProducerConsumerScene2.queuedList.last]¶ Remove one of these references in the displayed logical structure by, for instance, renaming the getter for the property storing the shared object or adding the @util.annotations.Visible(false) annotation before the getter.¶If you think it is safe to tareverse  all of these  references then add the annotattion @util.annotattions.AllowMultipleEqualReferences(false) nefore the getter.¶E*** Object:graphics.APlate@2c532cd8 displayed multiple times with following references:¶ [AProducerConsumerScene2.queuedList.0, AProducerConsumerScene2.queuedList.first, AProducerConsumerScene2.queuedList.last]¶ Remove one of these references in the displayed logical structure by, for instance, renaming the getter for the property storing the shared object or adding the @util.annotations.Visible(false) annotation before the getter.¶If you think it is safe to tareverse  all of these  references then add the annotattion @util.annotattions.AllowMultipleEqualReferences(false) nefore the getter.¶")]]]></diff>
  </Command>
  <Command __id="2517" _type="PauseCommand" date="Sat Feb 25 11:12:30 EST 2023" range="10s-20s" starttimestamp="1677312753280" timestamp="28796927">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[18490]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2516" _type="ShellCommand" date="Sat Feb 25 11:12:30 EST 2023" starttimestamp="1677312753280" timestamp="28796926" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2518" _type="MoveCaretCommand" caretOffset="420" date="Sat Feb 25 11:12:30 EST 2023" docOffset="724" starttimestamp="1677312753280" timestamp="28796996" />
  <Command __id="2519" _type="MoveCaretCommand" caretOffset="420" date="Sat Feb 25 11:12:30 EST 2023" docOffset="724" starttimestamp="1677312753280" timestamp="28796996" />
  <Command __id="2506" _type="DiffBasedFileOpenCommand" date="Sat Feb 25 11:12:05 EST 2023" docASTNodeCount="221" docActiveCodeLength="1636" docExpressionCount="148" docLength="1738" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="28772252">
    <filePath><![CDATA[C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\main\Main.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package main;¶¶import java.awt.Color;¶import java.lang.reflect.Method;¶¶import bus.uigen.OEFrame;¶import bus.uigen.ObjectEditor;¶import bus.uigen.attributes.AttributeNames;¶import graphics.AProducerConsumerScene;¶import graphics.AProducerConsumerScene2;¶import graphics.ProducerConsumerScene;¶import graphics.ProducerConsumerScene2;¶¶public class Main {¶	static ProducerConsumerScene2 scene = new AProducerConsumerScene2();¶	¶	public static void main(String[] args) {¶		animateScene();¶	}¶	¶	public static void animateScene() {¶		¶		//Adding labels and buttons inside object editor screen¶		ObjectEditor.confirmSelectedMethodParameters(false);¶		ObjectEditor.setMethodAttribute(AProducerConsumerScene.class, "initScene", AttributeNames.TOOLBAR_METHOD, true);¶		ObjectEditor.setMethodAttribute(AProducerConsumerScene.class, "initScene", AttributeNames.LABEL, "Init Scene");¶		¶		//Setting up init scene method in object editor¶		try {¶			Class[] initSceneArgTypes = {Integer.TYPE, Integer.TYPE};¶			Object[] initSceneDefaultArgs = {4, 4};¶			String[] initSceneArgNames = {"Number of Patrons", "Number of Chefs"};¶			Method initSceneMethod = AProducerConsumerScene.class.getMethod("initScene", initSceneArgTypes);¶			ObjectEditor.registerDefaultParameterValues(initSceneMethod, initSceneDefaultArgs);¶			ObjectEditor.registerParameterNames(initSceneMethod, initSceneArgNames);¶		} catch (NoSuchMethodException e) {¶			e.printStackTrace();¶		} catch (SecurityException e) {¶			e.printStackTrace();¶		}¶		¶		¶		OEFrame editor = ObjectEditor.edit(scene);¶		editor.getDrawComponent().setBackground(Color.DARK_GRAY);¶		editor.getDrawPanel().setSize(450, 450);¶		editor.showDrawPanel();¶		¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="2521" _type="PauseCommand" date="Sat Feb 25 11:12:44 EST 2023" range="10s-20s" starttimestamp="1677312753280" timestamp="28811637">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[14641]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="2522" _type="InsertStringCommand" date="Sat Feb 25 11:12:44 EST 2023" starttimestamp="1677312753280" timestamp="28811687" timestamp2="28811687">
    <data><![CDATA[2]]></data>
  </Command>
  <Command __id="2523" _type="InsertStringCommand" date="Sat Feb 25 11:12:44 EST 2023" starttimestamp="1677312753280" timestamp="28811687" timestamp2="28811687">
    <data><![CDATA[2]]></data>
  </Command>
  <Command __id="2525" _type="PauseCommand" date="Sat Feb 25 11:12:46 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="28812895">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1208]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2524" _type="MoveCaretCommand" caretOffset="536" date="Sat Feb 25 11:12:46 EST 2023" docOffset="840" starttimestamp="1677312753280" timestamp="28812895" />
  <Command __id="2526" _type="MoveCaretCommand" caretOffset="536" date="Sat Feb 25 11:12:46 EST 2023" docOffset="840" starttimestamp="1677312753280" timestamp="28812895" />
  <Command __id="2527" _type="MoveCaretCommand" caretOffset="536" date="Sat Feb 25 11:12:46 EST 2023" docOffset="840" starttimestamp="1677312753280" timestamp="28813706" />
  <Command __id="2528" _type="MoveCaretCommand" caretOffset="536" date="Sat Feb 25 11:12:46 EST 2023" docOffset="840" starttimestamp="1677312753280" timestamp="28813706" />
  <Command __id="2530" _type="PauseCommand" date="Sat Feb 25 11:12:48 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="28815272">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1566]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2529" _type="MoveCaretCommand" caretOffset="537" date="Sat Feb 25 11:12:48 EST 2023" docOffset="841" starttimestamp="1677312753280" timestamp="28815272" />
  <Command __id="2531" _type="MoveCaretCommand" caretOffset="537" date="Sat Feb 25 11:12:48 EST 2023" docOffset="841" starttimestamp="1677312753280" timestamp="28815272" />
  <Command __id="2533" _type="InsertStringCommand" date="Sat Feb 25 11:12:48 EST 2023" starttimestamp="1677312753280" timestamp="28815639" timestamp2="28815639">
    <data><![CDATA[2]]></data>
  </Command>
  <Command __id="2534" _type="InsertStringCommand" date="Sat Feb 25 11:12:48 EST 2023" starttimestamp="1677312753280" timestamp="28815639" timestamp2="28815639">
    <data><![CDATA[2]]></data>
  </Command>
  <Command __id="2536" _type="PauseCommand" date="Sat Feb 25 11:12:53 EST 2023" range="5s-10s" starttimestamp="1677312753280" timestamp="28820652">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[5013]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2535" _type="MoveCaretCommand" caretOffset="892" date="Sat Feb 25 11:12:53 EST 2023" docOffset="1196" starttimestamp="1677312753280" timestamp="28820652" />
  <Command __id="2537" _type="MoveCaretCommand" caretOffset="892" date="Sat Feb 25 11:12:53 EST 2023" docOffset="1196" starttimestamp="1677312753280" timestamp="28820652" />
  <Command __id="2539" _type="InsertStringCommand" date="Sat Feb 25 11:12:54 EST 2023" starttimestamp="1677312753280" timestamp="28821098" timestamp2="28821098">
    <data><![CDATA[2]]></data>
  </Command>
  <Command __id="2540" _type="InsertStringCommand" date="Sat Feb 25 11:12:54 EST 2023" starttimestamp="1677312753280" timestamp="28821098" timestamp2="28821098">
    <data><![CDATA[2]]></data>
  </Command>
  <Command __id="2542" _type="PauseCommand" date="Sat Feb 25 11:12:55 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="28822297">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1199]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2541" _type="MoveCaretCommand" caretOffset="965" date="Sat Feb 25 11:12:55 EST 2023" docOffset="1269" starttimestamp="1677312753280" timestamp="28822297" />
  <Command __id="2543" _type="MoveCaretCommand" caretOffset="965" date="Sat Feb 25 11:12:55 EST 2023" docOffset="1269" starttimestamp="1677312753280" timestamp="28822297" />
  <Command __id="2545" _type="PauseCommand" date="Sat Feb 25 11:12:59 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="28825774">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3477]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="2544" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sat Feb 25 11:12:59 EST 2023" starttimestamp="1677312753280" timestamp="28825774" />
  <Command __id="2546" _type="EclipseCommand" commandID="" date="Sat Feb 25 11:12:59 EST 2023" starttimestamp="1677312753280" timestamp="28825825" />
  <Command __id="2547" _type="EclipseCommand" commandID="" date="Sat Feb 25 11:12:59 EST 2023" starttimestamp="1677312753280" timestamp="28825903" />
  <Command __id="2548" _type="ShellCommand" date="Sat Feb 25 11:13:00 EST 2023" starttimestamp="1677312753280" timestamp="28826765" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2550" _type="PauseCommand" date="Sat Feb 25 11:13:04 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="28831503">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[4738]]></pause>
    <nextType><![CDATA[Exception]]></nextType>
    <next><![CDATA[ExceptionCommand]]></next>
  </Command>
  <Command __id="2549" _type="ExceptionCommand" date="Sat Feb 25 11:13:04 EST 2023" starttimestamp="1677312753280" timestamp="28831503" type="Exception">
    <exceptionString><![CDATA[MADE TO COOK METHOD!!!!
First Checkpoint
Second checkpoint
class java.util.NoSuchElementException
java.util.NoSuchElementException
	at java.base/java.util.LinkedList.getFirst(LinkedList.java:248)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1415)
	at bus.uigen.sadapters.BeanToRecord.get(BeanToRecord.java:204)
	at bus.uigen.sadapters.BeanToRecord.get(BeanToRecord.java:189)
	at bus.uigen.oadapters.ClassAdapter.refreshChild(ClassAdapter.java:481)
	at bus.uigen.oadapters.ClassAdapter.refreshChildren(ClassAdapter.java:457)
	at bus.uigen.oadapters.ClassAdapter.refreshValueButNotAtomic(ClassAdapter.java:371)
	at bus.uigen.oadapters.VectorAdapter.refreshValue(VectorAdapter.java:1882)
	at bus.uigen.oadapters.ClassAdapter.refresh(ClassAdapter.java:672)
	at bus.uigen.oadapters.ClassAdapter.refreshChild(ClassAdapter.java:487)
	at bus.uigen.oadapters.ClassAdapter.refreshChildren(ClassAdapter.java:457)
	at bus.uigen.oadapters.ClassAdapter.refreshValueButNotAtomic(ClassAdapter.java:371)
	at bus.uigen.oadapters.ClassAdapter.refreshValue(ClassAdapter.java:357)
	at bus.uigen.oadapters.ObjectAdapter.implicitRefresh(ObjectAdapter.java:5406)
	at bus.uigen.uiFrame.doMyImplicitRefresh(uiFrame.java:4601)
	at bus.uigen.uiFrame.subDoImplicitRefresh(uiFrame.java:4702)
	at bus.uigen.uiFrame.doImplicitRefresh(uiFrame.java:4682)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1920)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:2002)
	at bus.uigen.controller.MethodInvocationManager.checkIfArgumentsAvailable(MethodInvocationManager.java:685)
	at bus.uigen.controller.MethodInvocationManager.init(MethodInvocationManager.java:453)
	at bus.uigen.controller.MethodInvocationManager.<init>(MethodInvocationManager.java:406)
	at bus.uigen.uiFrame.processMethod(uiFrame.java:3986)
	at bus.uigen.controller.menus.VirtualMethodMenuItem.processMethodMenuItem(VirtualMethodMenuItem.java:129)
	at bus.uigen.controller.menus.VirtualMethodMenuItem.actionPerformed(VirtualMethodMenuItem.java:111)
	at bus.uigen.widgets.swing.SwingMenuItemEventForwarder.actionPerformed(SwingMenuItemEventForwarder.java:30)
	at java.desktop/javax.swing.AbstractButton.fireActionPerformed(AbstractButton.java:1967)
	at java.desktop/javax.swing.AbstractButton$Handler.actionPerformed(AbstractButton.java:2308)
	at java.desktop/javax.swing.DefaultButtonModel.fireActionPerformed(DefaultButtonModel.java:405)
	at java.desktop/javax.swing.DefaultButtonModel.setPressed(DefaultButtonModel.java:262)
	at java.desktop/javax.swing.AbstractButton.doClick(AbstractButton.java:369)
	at java.desktop/javax.swing.plaf.basic.BasicMenuItemUI.doClick(BasicMenuItemUI.java:1020)
	at java.desktop/javax.swing.plaf.basic.BasicMenuItemUI$Handler.mouseReleased(BasicMenuItemUI.java:1064)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6636)
	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)
	at java.desktop/java.awt.Component.processEvent(Component.java:6401)
	at java.desktop/java.awt.Container.processEvent(Container.java:2263)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="2552" _type="PauseCommand" date="Sat Feb 25 11:13:06 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="28833256">
    <prevType><![CDATA[Exception]]></prevType>
    <prev><![CDATA[ExceptionCommand]]></prev>
    <pause><![CDATA[1753]]></pause>
    <nextType><![CDATA[Exception]]></nextType>
    <next><![CDATA[ExceptionCommand]]></next>
  </Command>
  <Command __id="2551" _type="ExceptionCommand" date="Sat Feb 25 11:13:06 EST 2023" starttimestamp="1677312753280" timestamp="28833256" type="Exception">
    <exceptionString><![CDATA[java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1415)
	at bus.uigen.sadapters.BeanToRecord.get(BeanToRecord.java:204)
	at bus.uigen.sadapters.BeanToRecord.get(BeanToRecord.java:189)
	at bus.uigen.oadapters.ClassAdapter.refreshChild(ClassAdapter.java:481)
	at bus.uigen.oadapters.ClassAdapter.refreshChildren(ClassAdapter.java:457)
	at bus.uigen.oadapters.ClassAdapter.refreshValueButNotAtomic(ClassAdapter.java:371)
	at bus.uigen.oadapters.VectorAdapter.refreshValue(VectorAdapter.java:1882)
	at bus.uigen.oadapters.ClassAdapter.refresh(ClassAdapter.java:672)
	at bus.uigen.oadapters.ClassAdapter.refreshChild(ClassAdapter.java:487)
	at bus.uigen.oadapters.ClassAdapter.refreshChildren(ClassAdapter.java:457)
	at bus.uigen.oadapters.ClassAdapter.refreshValueButNotAtomic(ClassAdapter.java:371)
	at bus.uigen.oadapters.ClassAdapter.refreshValue(ClassAdapter.java:357)
	at bus.uigen.oadapters.ObjectAdapter.implicitRefresh(ObjectAdapter.java:5406)
	at bus.uigen.uiFrame.doMyImplicitRefresh(uiFrame.java:4601)
	at bus.uigen.uiFrame.subDoImplicitRefresh(uiFrame.java:4702)
	at bus.uigen.uiFrame.doImplicitRefresh(uiFrame.java:4682)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1920)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:2002)
	at bus.uigen.controller.MethodInvocationManager.checkIfArgumentsAvailable(MethodInvocationManager.java:685)
	at bus.uigen.controller.MethodInvocationManager.init(MethodInvocationManager.java:453)
	at bus.uigen.controller.MethodInvocationManager.<init>(MethodInvocationManager.java:406)
	at bus.uigen.uiFrame.processMethod(uiFrame.java:3986)
	at bus.uigen.controller.menus.VirtualMethodMenuItem.processMethodMenuItem(VirtualMethodMenuItem.java:129)
	at bus.uigen.controller.menus.VirtualMethodMenuItem.actionPerformed(VirtualMethodMenuItem.java:111)
	at bus.uigen.widgets.swing.SwingMenuItemEventForwarder.actionPerformed(SwingMenuItemEventForwarder.java:30)
	at java.desktop/javax.swing.AbstractButton.fireActionPerformed(AbstractButton.java:1967)
	at java.desktop/javax.swing.AbstractButton$Handler.actionPerformed(AbstractButton.java:2308)
	at java.desktop/javax.swing.DefaultButtonModel.fireActionPerformed(DefaultButtonModel.java:405)
	at java.desktop/javax.swing.DefaultButtonModel.setPressed(DefaultButtonModel.java:262)
	at java.desktop/javax.swing.AbstractButton.doClick(AbstractButton.java:369)
	at java.desktop/javax.swing.plaf.basic.BasicMenuItemUI.doClick(BasicMenuItemUI.java:1020)
	at java.desktop/javax.swing.plaf.basic.BasicMenuItemUI$Handler.mouseReleased(BasicMenuItemUI.java:1064)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6636)
	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)
	at java.desktop/java.awt.Component.processEvent(Component.java:6401)
	at java.desktop/java.awt.Container.processEvent(Container.java:2263)
	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5012)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4844)
	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4919)
	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4548)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="2553" _type="ExceptionCommand" date="Sat Feb 25 11:13:07 EST 2023" starttimestamp="1677312753280" timestamp="28833830" type="Exception">
    <exceptionString><![CDATA[java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1415)
	at bus.uigen.sadapters.BeanToRecord.get(BeanToRecord.java:204)
	at bus.uigen.sadapters.BeanToRecord.get(BeanToRecord.java:189)
	at bus.uigen.oadapters.ClassAdapter.refreshChild(ClassAdapter.java:481)
	at bus.uigen.oadapters.ClassAdapter.refreshChildren(ClassAdapter.java:457)
	at bus.uigen.oadapters.ClassAdapter.refreshValueButNotAtomic(ClassAdapter.java:371)
	at bus.uigen.oadapters.VectorAdapter.refreshValue(VectorAdapter.java:1882)
	at bus.uigen.oadapters.ClassAdapter.refresh(ClassAdapter.java:672)
	at bus.uigen.oadapters.ClassAdapter.refreshChild(ClassAdapter.java:487)
	at bus.uigen.oadapters.ClassAdapter.refreshChildren(ClassAdapter.java:457)
	at bus.uigen.oadapters.ClassAdapter.refreshValueButNotAtomic(ClassAdapter.java:371)
	at bus.uigen.oadapters.ClassAdapter.refreshValue(ClassAdapter.java:357)
	at bus.uigen.oadapters.ObjectAdapter.implicitRefresh(ObjectAdapter.java:5406)
	at bus.uigen.uiFrame.doMyImplicitRefresh(uiFrame.java:4601)
	at bus.uigen.uiFrame.subDoImplicitRefresh(uiFrame.java:4702)
	at bus.uigen.uiFrame.doImplicitRefresh(uiFrame.java:4682)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1920)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:2002)
	at bus.uigen.controller.MethodInvocationManager.checkIfArgumentsAvailable(MethodInvocationManager.java:685)
	at bus.uigen.controller.MethodInvocationManager.init(MethodInvocationManager.java:453)
	at bus.uigen.controller.MethodInvocationManager.<init>(MethodInvocationManager.java:406)
	at bus.uigen.uiFrame.processMethod(uiFrame.java:3986)
	at bus.uigen.controller.menus.VirtualMethodMenuItem.processMethodMenuItem(VirtualMethodMenuItem.java:129)
	at bus.uigen.controller.menus.VirtualMethodMenuItem.actionPerformed(VirtualMethodMenuItem.java:111)
	at bus.uigen.widgets.swing.SwingMenuItemEventForwarder.actionPerformed(SwingMenuItemEventForwarder.java:30)
	at java.desktop/javax.swing.AbstractButton.fireActionPerformed(AbstractButton.java:1967)
	at java.desktop/javax.swing.AbstractButton$Handler.actionPerformed(AbstractButton.java:2308)
	at java.desktop/javax.swing.DefaultButtonModel.fireActionPerformed(DefaultButtonModel.java:405)
	at java.desktop/javax.swing.DefaultButtonModel.setPressed(DefaultButtonModel.java:262)
	at java.desktop/javax.swing.AbstractButton.doClick(AbstractButton.java:369)
	at java.desktop/javax.swing.plaf.basic.BasicMenuItemUI.doClick(BasicMenuItemUI.java:1020)
	at java.desktop/javax.swing.plaf.basic.BasicMenuItemUI$Handler.mouseReleased(BasicMenuItemUI.java:1064)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6636)
	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)
	at java.desktop/java.awt.Component.processEvent(Component.java:6401)
	at java.desktop/java.awt.Container.processEvent(Container.java:2263)
	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5012)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4844)
	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4919)
	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4548)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="2555" _type="PauseCommand" date="Sat Feb 25 11:13:08 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="28834858">
    <prevType><![CDATA[Exception]]></prevType>
    <prev><![CDATA[ExceptionCommand]]></prev>
    <pause><![CDATA[1028]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2554" _type="ShellCommand" date="Sat Feb 25 11:13:08 EST 2023" starttimestamp="1677312753280" timestamp="28834858" type="ECLIPSE_GAINED_FOCUS" />
  <DocumentChange __id="2520" _type="Insert" date="Sat Feb 25 11:12:44 EST 2023" docASTNodeCount="221" docActiveCodeLength="1637" docExpressionCount="148" docLength="1739" length="1" offset="724" starttimestamp="1677312753280" timestamp="28811637">
    <text><![CDATA[2]]></text>
  </DocumentChange>
  <DocumentChange __id="2532" _type="Insert" date="Sat Feb 25 11:12:48 EST 2023" docASTNodeCount="221" docActiveCodeLength="1638" docExpressionCount="148" docLength="1740" length="1" offset="841" starttimestamp="1677312753280" timestamp="28815587">
    <text><![CDATA[2]]></text>
  </DocumentChange>
  <DocumentChange __id="2538" _type="Insert" date="Sat Feb 25 11:12:54 EST 2023" docASTNodeCount="221" docActiveCodeLength="1639" docExpressionCount="148" docLength="1741" length="1" offset="1196" starttimestamp="1677312753280" timestamp="28821047">
    <text><![CDATA[2]]></text>
  </DocumentChange>
  <Command __id="2557" _type="PauseCommand" date="Sat Feb 25 11:13:29 EST 2023" range="20s-30s" starttimestamp="1677312753280" timestamp="28855849">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[20991]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2558" _type="MoveCaretCommand" caretOffset="5707" date="Sat Feb 25 11:13:29 EST 2023" docOffset="6587" starttimestamp="1677312753280" timestamp="28856123" />
  <Command __id="2560" _type="PauseCommand" date="Sat Feb 25 11:13:32 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="28859029">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2906]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2559" _type="SelectTextCommand" caretOffset="5670" date="Sat Feb 25 11:13:32 EST 2023" end="5710" start="5670" starttimestamp="1677312753280" timestamp="28859029" />
  <Command __id="2561" _type="SelectTextCommand" caretOffset="5670" date="Sat Feb 25 11:13:32 EST 2023" end="5710" start="5670" starttimestamp="1677312753280" timestamp="28859030" />
  <Command __id="2562" _type="CopyCommand" date="Sat Feb 25 11:13:33 EST 2023" starttimestamp="1677312753280" timestamp="28859908" />
  <Command __id="2564" _type="PauseCommand" date="Sat Feb 25 11:13:34 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="28860917">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[1009]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2598" _type="ProgramExecutionEvent" className="/ProducersConsumersV3/src/main/Main.java" date="Sat Feb 25 11:13:43 EST 2023" kind="HitBreakPoint" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="28870037" type="Run" />
  <Command __id="2600" _type="RunCommand" className="/ProducersConsumersV3/src/main/Main.java" date="Sat Feb 25 11:13:43 EST 2023" kind="HitBreakPoint" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="28870037" type="Run" />
  <Command __id="2602" _type="PauseCommand" date="Sat Feb 25 11:13:44 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="28871487">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[1449]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2601" _type="ShellCommand" date="Sat Feb 25 11:13:44 EST 2023" starttimestamp="1677312753280" timestamp="28871486" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2604" _type="PauseCommand" date="Sat Feb 25 11:13:47 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="28874111">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2625]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="2603" _type="ConsoleOutput" date="Sat Feb 25 11:13:47 EST 2023" overflow="false" starttimestamp="1677312753280" timestamp="28874111" type="ConsoleOutput">
    <outputString><![CDATA[E*** Object:graphics.ABell@18cebaa5 displayed multiple times with following references:
 [AProducerConsumerScene2.queueBellList.first, AProducerConsumerScene2.queueBellList.last]
 Remove one of these references in the displayed logical structure by, for instance, renaming the getter for the property storing the shared object or adding the @util.annotations.Visible(false) annotation before the getter.
If you think it is safe to tareverse  all of these  references then add the annotattion @util.annotattions.AllowMultipleEqualReferences(false) nefore the getter.
E*** Object:graphics.ABell@18cebaa5 displayed multiple times with following references:
 [AProducerConsumerScene2.queueBellList.first, AProducerConsumerScene2.queueBellList.0, AProducerConsumerScene2.queueBellList.last]
 Remove one of these references in the displayed logical structure by, for instance, renaming the getter for the property storing the shared object or adding the @util.annotations.Visible(false) annotation before the getter.
If you think it is safe to tareverse  all of these  references then add the annotattion @util.annotattions.AllowMultipleEqualReferences(false) nefore the getter.
E*** Object:graphics.APlate@3243b914 displayed multiple times with following references:
 [AProducerConsumerScene2.queuedList.first, AProducerConsumerScene2.queuedList.last]
 Remove one of these references in the displayed logical structure by, for instance, renaming the getter for the property storing the shared object or adding the @util.annotations.Visible(false) annotation before the getter.
If you think it is safe to tareverse  all of these  references then add the annotattion @util.annotattions.AllowMultipleEqualReferences(false) nefore the getter.
E*** Object:graphics.APlate@3243b914 displayed multiple times with following references:
 [AProducerConsumerScene2.queuedList.0, AProducerConsumerScene2.queuedList.first, AProducerConsumerScene2.queuedList.last]
 Remove one of these references in the displayed logical structure by, for instance, renaming the getter for the property storing the shared object or adding the @util.annotations.Visible(false) annotation before the getter.
If you think it is safe to tareverse  all of these  references then add the annotattion @util.annotattions.AllowMultipleEqualReferences(false) nefore the getter.
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"E*** Object:graphics.ABell@"), Diff(DELETE,"b6b1987"), Diff(INSERT,"18cebaa5"), Diff(EQUAL," displayed multiple times with following references:¶ [AProducerConsumerScene2.queueBellList.first, AProducerConsumerScene2.queueBellList.last]¶ Remove one of these references in the displayed logical structure by, for instance, renaming the getter for the property storing the shared object or adding the @util.annotations.Visible(false) annotation before the getter.¶If you think it is safe to tareverse  all of these  references then add the annotattion @util.annotattions.AllowMultipleEqualReferences(false) nefore the getter.¶E*** Object:graphics.ABell@"), Diff(DELETE,"b6b1987"), Diff(INSERT,"18cebaa5"), Diff(EQUAL," displayed multiple times with following references:¶ [AProducerConsumerScene2.queueBellList.first, AProducerConsumerScene2.queueBellList.0, AProducerConsumerScene2.queueBellList.last]¶ Remove one of these references in the displayed logical structure by, for instance, renaming the getter for the property storing the shared object or adding the @util.annotations.Visible(false) annotation before the getter.¶If you think it is safe to tareverse  all of these  references then add the annotattion @util.annotattions.AllowMultipleEqualReferences(false) nefore the getter.¶E*** Object:graphics.APlate@"), Diff(DELETE,"2c532cd8"), Diff(INSERT,"3243b914"), Diff(EQUAL," displayed multiple times with following references:¶ [AProducerConsumerScene2.queuedList.first, AProducerConsumerScene2.queuedList.last]¶ Remove one of these references in the displayed logical structure by, for instance, renaming the getter for the property storing the shared object or adding the @util.annotations.Visible(false) annotation before the getter.¶If you think it is safe to tareverse  all of these  references then add the annotattion @util.annotattions.AllowMultipleEqualReferences(false) nefore the getter.¶E*** Object:graphics.APlate@"), Diff(DELETE,"2c532cd8"), Diff(INSERT,"3243b914"), Diff(EQUAL," displayed multiple times with following references:¶ [AProducerConsumerScene2.queuedList.0, AProducerConsumerScene2.queuedList.first, AProducerConsumerScene2.queuedList.last]¶ Remove one of these references in the displayed logical structure by, for instance, renaming the getter for the property storing the shared object or adding the @util.annotations.Visible(false) annotation before the getter.¶If you think it is safe to tareverse  all of these  references then add the annotattion @util.annotattions.AllowMultipleEqualReferences(false) nefore the getter.¶")]]]></diff>
  </Command>
  <Command __id="2606" _type="PauseCommand" date="Sat Feb 25 11:14:02 EST 2023" range="10s-20s" starttimestamp="1677312753280" timestamp="28889471">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[15360]]></pause>
    <nextType><![CDATA[Exception]]></nextType>
    <next><![CDATA[ExceptionCommand]]></next>
  </Command>
  <Command __id="2605" _type="ExceptionCommand" date="Sat Feb 25 11:14:02 EST 2023" starttimestamp="1677312753280" timestamp="28889471" type="Exception">
    <exceptionString><![CDATA[MADE TO COOK METHOD!!!!
First Checkpoint
Second checkpoint
Third checkpoint
class java.util.NoSuchElementException
java.util.NoSuchElementException
	at java.base/java.util.LinkedList.getFirst(LinkedList.java:248)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1415)
	at bus.uigen.sadapters.BeanToRecord.get(BeanToRecord.java:204)
	at bus.uigen.sadapters.BeanToRecord.get(BeanToRecord.java:189)
	at bus.uigen.oadapters.ClassAdapter.refreshChild(ClassAdapter.java:481)
	at bus.uigen.oadapters.ClassAdapter.refreshChildren(ClassAdapter.java:457)
	at bus.uigen.oadapters.ClassAdapter.refreshValueButNotAtomic(ClassAdapter.java:371)
	at bus.uigen.oadapters.VectorAdapter.refreshValue(VectorAdapter.java:1882)
	at bus.uigen.oadapters.ClassAdapter.refresh(ClassAdapter.java:672)
	at bus.uigen.oadapters.ClassAdapter.refreshChild(ClassAdapter.java:487)
	at bus.uigen.oadapters.ClassAdapter.refreshChildren(ClassAdapter.java:457)
	at bus.uigen.oadapters.ClassAdapter.refreshValueButNotAtomic(ClassAdapter.java:371)
	at bus.uigen.oadapters.ClassAdapter.refreshValue(ClassAdapter.java:357)
	at bus.uigen.oadapters.ObjectAdapter.implicitRefresh(ObjectAdapter.java:5406)
	at bus.uigen.uiFrame.doMyImplicitRefresh(uiFrame.java:4601)
	at bus.uigen.uiFrame.subDoImplicitRefresh(uiFrame.java:4702)
	at bus.uigen.uiFrame.doImplicitRefresh(uiFrame.java:4682)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1920)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:2002)
	at bus.uigen.controller.MethodInvocationManager.checkIfArgumentsAvailable(MethodInvocationManager.java:685)
	at bus.uigen.controller.MethodInvocationManager.init(MethodInvocationManager.java:453)
	at bus.uigen.controller.MethodInvocationManager.<init>(MethodInvocationManager.java:406)
	at bus.uigen.uiFrame.processMethod(uiFrame.java:3986)
	at bus.uigen.controller.menus.VirtualMethodMenuItem.processMethodMenuItem(VirtualMethodMenuItem.java:129)
	at bus.uigen.controller.menus.VirtualMethodMenuItem.actionPerformed(VirtualMethodMenuItem.java:111)
	at bus.uigen.widgets.swing.SwingMenuItemEventForwarder.actionPerformed(SwingMenuItemEventForwarder.java:30)
	at java.desktop/javax.swing.AbstractButton.fireActionPerformed(AbstractButton.java:1967)
	at java.desktop/javax.swing.AbstractButton$Handler.actionPerformed(AbstractButton.java:2308)
	at java.desktop/javax.swing.DefaultButtonModel.fireActionPerformed(DefaultButtonModel.java:405)
	at java.desktop/javax.swing.DefaultButtonModel.setPressed(DefaultButtonModel.java:262)
	at java.desktop/javax.swing.AbstractButton.doClick(AbstractButton.java:369)
	at java.desktop/javax.swing.plaf.basic.BasicMenuItemUI.doClick(BasicMenuItemUI.java:1020)
	at java.desktop/javax.swing.plaf.basic.BasicMenuItemUI$Handler.mouseReleased(BasicMenuItemUI.java:1064)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6636)
	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)
	at java.desktop/java.awt.Component.processEvent(Component.java:6401)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="2608" _type="PauseCommand" date="Sat Feb 25 11:14:04 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="28891108">
    <prevType><![CDATA[Exception]]></prevType>
    <prev><![CDATA[ExceptionCommand]]></prev>
    <pause><![CDATA[1637]]></pause>
    <nextType><![CDATA[Exception]]></nextType>
    <next><![CDATA[ExceptionCommand]]></next>
  </Command>
  <Command __id="2607" _type="ExceptionCommand" date="Sat Feb 25 11:14:04 EST 2023" starttimestamp="1677312753280" timestamp="28891108" type="Exception">
    <exceptionString><![CDATA[java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1415)
	at bus.uigen.sadapters.BeanToRecord.get(BeanToRecord.java:204)
	at bus.uigen.sadapters.BeanToRecord.get(BeanToRecord.java:189)
	at bus.uigen.oadapters.ClassAdapter.refreshChild(ClassAdapter.java:481)
	at bus.uigen.oadapters.ClassAdapter.refreshChildren(ClassAdapter.java:457)
	at bus.uigen.oadapters.ClassAdapter.refreshValueButNotAtomic(ClassAdapter.java:371)
	at bus.uigen.oadapters.VectorAdapter.refreshValue(VectorAdapter.java:1882)
	at bus.uigen.oadapters.ClassAdapter.refresh(ClassAdapter.java:672)
	at bus.uigen.oadapters.ClassAdapter.refreshChild(ClassAdapter.java:487)
	at bus.uigen.oadapters.ClassAdapter.refreshChildren(ClassAdapter.java:457)
	at bus.uigen.oadapters.ClassAdapter.refreshValueButNotAtomic(ClassAdapter.java:371)
	at bus.uigen.oadapters.ClassAdapter.refreshValue(ClassAdapter.java:357)
	at bus.uigen.oadapters.ObjectAdapter.implicitRefresh(ObjectAdapter.java:5406)
	at bus.uigen.uiFrame.doMyImplicitRefresh(uiFrame.java:4601)
	at bus.uigen.uiFrame.subDoImplicitRefresh(uiFrame.java:4702)
	at bus.uigen.uiFrame.doImplicitRefresh(uiFrame.java:4682)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1920)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:2002)
	at bus.uigen.controller.MethodInvocationManager.checkIfArgumentsAvailable(MethodInvocationManager.java:685)
	at bus.uigen.controller.MethodInvocationManager.init(MethodInvocationManager.java:453)
	at bus.uigen.controller.MethodInvocationManager.<init>(MethodInvocationManager.java:406)
	at bus.uigen.uiFrame.processMethod(uiFrame.java:3986)
	at bus.uigen.controller.menus.VirtualMethodMenuItem.processMethodMenuItem(VirtualMethodMenuItem.java:129)
	at bus.uigen.controller.menus.VirtualMethodMenuItem.actionPerformed(VirtualMethodMenuItem.java:111)
	at bus.uigen.widgets.swing.SwingMenuItemEventForwarder.actionPerformed(SwingMenuItemEventForwarder.java:30)
	at java.desktop/javax.swing.AbstractButton.fireActionPerformed(AbstractButton.java:1967)
	at java.desktop/javax.swing.AbstractButton$Handler.actionPerformed(AbstractButton.java:2308)
	at java.desktop/javax.swing.DefaultButtonModel.fireActionPerformed(DefaultButtonModel.java:405)
	at java.desktop/javax.swing.DefaultButtonModel.setPressed(DefaultButtonModel.java:262)
	at java.desktop/javax.swing.AbstractButton.doClick(AbstractButton.java:369)
	at java.desktop/javax.swing.plaf.basic.BasicMenuItemUI.doClick(BasicMenuItemUI.java:1020)
	at java.desktop/javax.swing.plaf.basic.BasicMenuItemUI$Handler.mouseReleased(BasicMenuItemUI.java:1064)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6636)
	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)
	at java.desktop/java.awt.Component.processEvent(Component.java:6401)
	at java.desktop/java.awt.Container.processEvent(Container.java:2263)
	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5012)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4844)
	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4919)
	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4548)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="2609" _type="ExceptionCommand" date="Sat Feb 25 11:14:05 EST 2023" starttimestamp="1677312753280" timestamp="28891837" type="Exception">
    <exceptionString><![CDATA[java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1415)
	at bus.uigen.sadapters.BeanToRecord.get(BeanToRecord.java:204)
	at bus.uigen.sadapters.BeanToRecord.get(BeanToRecord.java:189)
	at bus.uigen.oadapters.ClassAdapter.refreshChild(ClassAdapter.java:481)
	at bus.uigen.oadapters.ClassAdapter.refreshChildren(ClassAdapter.java:457)
	at bus.uigen.oadapters.ClassAdapter.refreshValueButNotAtomic(ClassAdapter.java:371)
	at bus.uigen.oadapters.VectorAdapter.refreshValue(VectorAdapter.java:1882)
	at bus.uigen.oadapters.ClassAdapter.refresh(ClassAdapter.java:672)
	at bus.uigen.oadapters.ClassAdapter.refreshChild(ClassAdapter.java:487)
	at bus.uigen.oadapters.ClassAdapter.refreshChildren(ClassAdapter.java:457)
	at bus.uigen.oadapters.ClassAdapter.refreshValueButNotAtomic(ClassAdapter.java:371)
	at bus.uigen.oadapters.ClassAdapter.refreshValue(ClassAdapter.java:357)
	at bus.uigen.oadapters.ObjectAdapter.implicitRefresh(ObjectAdapter.java:5406)
	at bus.uigen.uiFrame.doMyImplicitRefresh(uiFrame.java:4601)
	at bus.uigen.uiFrame.subDoImplicitRefresh(uiFrame.java:4702)
	at bus.uigen.uiFrame.doImplicitRefresh(uiFrame.java:4682)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1920)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:2002)
	at bus.uigen.controller.MethodInvocationManager.checkIfArgumentsAvailable(MethodInvocationManager.java:685)
	at bus.uigen.controller.MethodInvocationManager.init(MethodInvocationManager.java:453)
	at bus.uigen.controller.MethodInvocationManager.<init>(MethodInvocationManager.java:406)
	at bus.uigen.uiFrame.processMethod(uiFrame.java:3986)
	at bus.uigen.controller.menus.VirtualMethodMenuItem.processMethodMenuItem(VirtualMethodMenuItem.java:129)
	at bus.uigen.controller.menus.VirtualMethodMenuItem.actionPerformed(VirtualMethodMenuItem.java:111)
	at bus.uigen.widgets.swing.SwingMenuItemEventForwarder.actionPerformed(SwingMenuItemEventForwarder.java:30)
	at java.desktop/javax.swing.AbstractButton.fireActionPerformed(AbstractButton.java:1967)
	at java.desktop/javax.swing.AbstractButton$Handler.actionPerformed(AbstractButton.java:2308)
	at java.desktop/javax.swing.DefaultButtonModel.fireActionPerformed(DefaultButtonModel.java:405)
	at java.desktop/javax.swing.DefaultButtonModel.setPressed(DefaultButtonModel.java:262)
	at java.desktop/javax.swing.AbstractButton.doClick(AbstractButton.java:369)
	at java.desktop/javax.swing.plaf.basic.BasicMenuItemUI.doClick(BasicMenuItemUI.java:1020)
	at java.desktop/javax.swing.plaf.basic.BasicMenuItemUI$Handler.mouseReleased(BasicMenuItemUI.java:1064)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6636)
	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)
	at java.desktop/java.awt.Component.processEvent(Component.java:6401)
	at java.desktop/java.awt.Container.processEvent(Container.java:2263)
	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5012)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4844)
	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4919)
	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4548)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="2611" _type="PauseCommand" date="Sat Feb 25 11:14:08 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="28895491">
    <prevType><![CDATA[Exception]]></prevType>
    <prev><![CDATA[ExceptionCommand]]></prev>
    <pause><![CDATA[3653]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2610" _type="ShellCommand" date="Sat Feb 25 11:14:08 EST 2023" starttimestamp="1677312753280" timestamp="28895490" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2613" _type="PauseCommand" date="Sat Feb 25 11:14:23 EST 2023" range="10s-20s" starttimestamp="1677312753280" timestamp="28910212">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[14722]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2612" _type="SelectTextCommand" caretOffset="2077" date="Sat Feb 25 11:14:23 EST 2023" end="2077" start="2062" starttimestamp="1677312753280" timestamp="28910212" />
  <Command __id="2614" _type="SelectTextCommand" caretOffset="2077" date="Sat Feb 25 11:14:23 EST 2023" end="2077" start="2062" starttimestamp="1677312753280" timestamp="28910213" />
  <Command __id="2556" _type="DiffBasedFileOpenCommand" date="Sat Feb 25 11:13:29 EST 2023" docASTNodeCount="1579" docActiveCodeLength="9277" docExpressionCount="1086" docLength="10207" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="28855849">
    <filePath><![CDATA[C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\graphics\AProducerConsumerScene2.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package graphics;¶¶import java.util.ArrayList;¶import java.util.LinkedList;¶import java.util.List;¶import java.util.Queue;¶¶import animations.ACookingPlateAnimator;¶import animations.ACookingPlateCommand;¶import animations.AServingPlateAnimator;¶import animations.AServingPlateCommand;¶import animations.CookingPlateAnimator;¶import animations.ServingPlateAnimator;¶import bus.uigen.OEFrame;¶import bus.uigen.ObjectEditor;¶import bus.uigen.shapes.ALineModel;¶import bus.uigen.shapes.AStringModel;¶import bus.uigen.shapes.AnImageModel;¶import bus.uigen.shapes.OEShapeModel;¶import shapes.FlexibleTextShape;¶import util.annotations.EditablePropertyNames;¶import util.annotations.Label;¶import util.annotations.PropertyNames;¶import util.annotations.StructurePattern;¶import util.annotations.StructurePatternNames;¶import util.annotations.Visible;¶import util.misc.ThreadSupport;¶¶import java.awt.Color;¶¶@StructurePattern(StructurePatternNames.BEAN_PATTERN)¶@PropertyNames({¶	"patronList",¶	"chefList",¶	"buffer",¶	"queuedList",¶	"bellsList",¶	"queueBellList"¶})¶@EditablePropertyNames({¶})¶public class AProducerConsumerScene2 implements ProducerConsumerScene2 {¶	¶	//Avatar offsets inside scene¶	int[] chefXValues = {120,-50,-50,120};¶	int[] chefYValues = {-50,35,210,320};¶	int[] patronXValues = {650,850,850,650};¶	int[] patronYValues = {-50,35,220,320};¶	int[] bellXValues = {680,880,880,680};¶	int[] bellYValues = {75,160,345,445};¶	int INIT_HEAD_Y = 60;¶	int INIT_HEAD_X = 163;¶	int INIT_HEAD_HEIGHT = 90;¶	int INIT_HEAD_WIDTH = 80;¶	int PLATE_OFFSET_X = 30;¶	int PLATE_OFFSET_Y = 10;¶	int PAUSE = 5;¶	¶	//Booleans that help with the functionality of the below methods¶	boolean INIT_COOK = true;¶	boolean full = false;¶	int fullPlateOffset = -5;¶	¶	//Defining the chef and patron images¶	String[] chefImages = {"images/0.png","images/1.png","images/2.png","images/3.png"};¶	String[] patronImages = {"images/4.png", "images/5.png", "images/6.png", "images/7.png"};¶	¶	//Buffer arrays¶	int[] bufferXValues = {625, 680, 680, 620, 535, 460, 460, 535};¶	int[] bufferYValues = {200, 275, 365, 425, 425, 365, 275, 200};¶	boolean[] isFull = {false, false, false, false, false, false, false, false};¶	¶	//The properties of our class¶	List<APatron> patronList;¶	List<AChef> chefList;¶	BoundedBuffer buffer = new ABoundedBuffer();¶	¶	//This list will keep a track of the plates that enter the buffer so that FIFO¶	Queue<APlate> queuedList;¶	¶	OEShapeModel[] lineArray = {buffer.getLineTwo(), buffer.getLineThree(), buffer.getLineFour(), ¶								buffer.getLineFive(), buffer.getLineSix(), buffer.getLineSeven(), ¶								buffer.getLineEight(), buffer.getLineOne()};¶	¶	List<ABell> bellsList;¶	Queue<ABell> queueBellList;¶	int[] bellValues = {127, 212, 397, 497};¶	Queue<Integer> bellIntegerList;¶	¶	ACookingPlateCommand cookingCommand;¶	CookingPlateAnimator cookingAnimator;¶	¶	AServingPlateCommand servingCommand;¶	ServingPlateAnimator servingAnimator;¶	¶	//The constructor sets the scene with one chef, patron, a buffer, and a plate (not visible)¶	public AProducerConsumerScene2() {¶		patronList = new ArrayList<APatron>();¶		chefList = new ArrayList<AChef>();¶		//buffer = new ABoundedBuffer();¶		¶		queuedList = new LinkedList<APlate>();¶		bellsList = new ArrayList<ABell>();¶		queueBellList = new LinkedList<ABell>();¶		bellIntegerList = new LinkedList<Integer>();¶		¶		patronList.add(0, new APatron());¶		OEShapeModel initPatronHead = new AnImageModel(patronImages[0]);¶		initPatronHead.setX(INIT_HEAD_X);¶		initPatronHead.setY(INIT_HEAD_Y);¶		initPatronHead.setHeight(INIT_HEAD_HEIGHT);¶		initPatronHead.setWidth(INIT_HEAD_WIDTH);¶		patronList.get(0).patron.setHead(initPatronHead);¶		patronList.get(0).move(patronXValues[0], patronYValues[0]);¶		¶		chefList.add(0, new AChef());¶		OEShapeModel initChefHead = new AnImageModel(chefImages[0]);¶		initChefHead.setX(INIT_HEAD_X);¶		initChefHead.setY(INIT_HEAD_Y);¶		initChefHead.setHeight(INIT_HEAD_HEIGHT);¶		initChefHead.setWidth(INIT_HEAD_WIDTH);¶		chefList.get(0).chef.setHead(initChefHead);¶		chefList.get(0).move(chefXValues[0], chefYValues[0]);¶		¶		queuedList.add(new APlate());¶		queuedList.peek().getPlate().setHeight(0);¶		queuedList.peek().getPlate().setWidth(0);¶		¶		cookingAnimator = new ACookingPlateAnimator();¶		servingAnimator = new AServingPlateAnimator();¶		¶		bellsList.add(new ABell());¶		bellsList.get(0).getBell().setHeight(0);¶		bellsList.get(0).getBell().setWidth(0);¶		¶		queueBellList.add(new ABell());¶		queueBellList.peek().getBell().setHeight(0);¶		queueBellList.peek().getBell().setWidth(0);¶		¶		bellIntegerList.add(0);¶	}¶	¶	//Producer consumer methods¶	¶	//Init Scene sets the number of patrons and chefs in the scene¶	@Label("Init Scene")¶	public void initScene(int patronAmount, int chefAmount) {¶		bellsList.clear();¶		for (int i=0; i<patronAmount; i++) { ¶			APatron patron = new APatron();¶			patronList.add(i, patron);¶			OEShapeModel newHead = new AnImageModel(patronImages[i]);¶			patron.patron.setHead(newHead); ¶			newHead.setX(INIT_HEAD_X); ¶			newHead.setY(INIT_HEAD_Y);¶			newHead.setHeight(INIT_HEAD_HEIGHT);¶			newHead.setWidth(INIT_HEAD_WIDTH);¶			patron.move(patronXValues[i], patronYValues[i]);¶			¶			bellsList.add(new ABell());¶			bellsList.get(i).move(bellXValues[i], bellYValues[i]);¶		}¶		for (int i=0; i<chefAmount; i++) {¶			AChef chef = new AChef();¶			chefList.add(i, chef);¶			OEShapeModel newHead = new AnImageModel(chefImages[i]);¶			chef.chef.setHead(newHead);¶			newHead.setX(INIT_HEAD_X); ¶			newHead.setY(INIT_HEAD_Y);¶			newHead.setHeight(INIT_HEAD_HEIGHT);¶			newHead.setWidth(INIT_HEAD_WIDTH);¶			chef.move(chefXValues[i], chefYValues[i]);¶		}¶	}¶	¶	//Once the head of an avatar is chosen, it makes the plate that they "cook" appear¶	public void cook(OEShapeModel head) {¶		System.out.println("MADE TO COOK METHOD!!!!");¶		if (INIT_COOK) {¶			INIT_COOK=!INIT_COOK;¶			queuedList.remove();¶		}¶		¶		int headX = head.getCenterX();¶		int headY = head.getCenterY();¶		¶		"), Diff(INSERT,"System.out.println("First Checkpoint");¶		"), Diff(EQUAL,"APlate newPlate = new APlate();¶		newPlate.getPlate().setHeight(0);¶		newPlate.getPlate().setWidth(0);¶		¶		if (full) {¶			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y+fullPlateOffset);¶			fullPlateOffset = fullPlateOffset - 5;¶		} else {¶			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y);¶		}¶		¶		"), Diff(INSERT,"System.out.println("Second checkpoint");¶		"), Diff(EQUAL,"cookingCommand = new ACookingPlateCommand(cookingAnimator, newPlate, 40, 15);¶		Thread thread = new Thread (cookingCommand);¶		thread.start();¶	}¶	¶	public void serve(APlate plate) {¶		//Checks to see if the buffer is full. If it is, then can't serve.¶		resetLineColors();¶		if(checkIfFull()) {¶			resetLineColors();¶			return;¶		}¶		¶		queuedList.add(plate);¶		¶		int workingPlatePlace = queuedList.size();¶		FlexibleTextShape platePlace = new AStringModel(Integer.toString(workingPlatePlace));¶		plate.setText(platePlace);¶		¶		changeLineColors(workingPlatePlace);¶		servingCommand = new AServingPlateCommand(servingAnimator,plate,PAUSE, bufferXValues[workingPlatePlace], bufferYValues[workingPlatePlace]);¶		Thread thread = new Thread(servingCommand);¶		thread.start();¶		isFull[workingPlatePlace] = true;¶	}¶	¶	public void order(OEShapeModel bell) {¶		if(checkIfFull()) {¶			resetLineColors();¶			resetBuffer();¶		}¶		bellIntegerList.add(0);¶		int bellPlace = findBell(bell.getCenterY());¶		bellsList.get(bellPlace).getText().setText(String.valueOf(bellIntegerList.size()-1));¶		¶		int platePlace = findFirstAvailablePlate();¶		//servingCommand = new AServingPlateCommand(servingAnimator,plateList.get(platePlace),PAUSE, bell.getCenterX() , bell.getCenterY());¶		Thread thread = new Thread(servingCommand);¶		thread.start();¶		¶		//cookingCommand = new ACookingPlateCommand(cookingAnimator, plateList.get(0), 0, 15);¶		Thread eatingThread = new Thread (cookingCommand);¶		eatingThread.start();¶		//plateList.get(0).getText().setText("");¶	}¶	¶	public void eat() {¶		//plateList.remove(0);¶	}¶	¶	@Override¶	@Visible(false)¶	public int findBell(int centerY) {¶		for(int i=0; i<bellsList.size();i++) {¶			if(bellsList.get(i).getBell().getCenterY() == centerY) {¶				return i;¶			}¶		}¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public int findFirstAvailablePlate() {¶		for (int i=0; i<isFull.length;i++) {¶			if(isFull[i] == true) {¶				return i;¶			}¶		}¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public void resetBuffer() {¶		¶		for (int i=0; i<isFull.length;i++) {¶			isFull[i] = false;¶		}¶	}¶	¶	@Override¶	@Visible(false)¶	public int findPatron(OEShapeModel patronHead) {¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public boolean checkIfFull() {¶		for (int i=0; i<isFull.length;i++) {¶			if (isFull[i] == false) {¶				full = false;¶				return full;¶			}¶		}¶		full = true;¶		return full;¶	}¶	¶	@Override¶	@Visible(false)¶	public void changeLineColors(int workingPlatePlace) {¶		if(workingPlatePlace == lineArray.length-1) {¶			lineArray[workingPlatePlace].setColor(Color.GREEN);¶			lineArray[0].setColor(Color.GREEN);¶		} else {¶			lineArray[workingPlatePlace].setColor(Color.GREEN);¶			lineArray[workingPlatePlace+1].setColor(Color.GREEN);¶		}¶	}¶	¶	¶	@Override¶	@Visible(false)¶	public void resetLineColors() {¶		for (int i=0; i<lineArray.length; i++) {¶			lineArray[i].setColor(Color.WHITE);¶		}¶	}¶	¶	//Getters for properties of the scene¶	@Override¶	public List<AChef> getChefList() {¶		return chefList;¶	}¶	¶	@Override¶	public List<APatron> getPatronList() {¶		return patronList;¶	}¶	¶	@Override¶	public BoundedBuffer getBuffer() {¶		return buffer;¶	}¶	¶	@Override¶	@util.annotations.Visible(false)¶	public Queue<APlate> getQueuedList() {¶		return queuedList;¶	}¶	¶	@Override¶	public List<ABell> getBellsList() {¶		return bellsList;¶	}¶	¶	@Override¶	@Visible(false)¶	public Queue<ABell> getQueueBellList() {¶		return queueBellList;¶	}¶}¶")]]]></diff>
    <snapshot><![CDATA[package graphics;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

import animations.ACookingPlateAnimator;
import animations.ACookingPlateCommand;
import animations.AServingPlateAnimator;
import animations.AServingPlateCommand;
import animations.CookingPlateAnimator;
import animations.ServingPlateAnimator;
import bus.uigen.OEFrame;
import bus.uigen.ObjectEditor;
import bus.uigen.shapes.ALineModel;
import bus.uigen.shapes.AStringModel;
import bus.uigen.shapes.AnImageModel;
import bus.uigen.shapes.OEShapeModel;
import shapes.FlexibleTextShape;
import util.annotations.EditablePropertyNames;
import util.annotations.Label;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Visible;
import util.misc.ThreadSupport;

import java.awt.Color;

@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({
	"patronList",
	"chefList",
	"buffer",
	"queuedList",
	"bellsList",
	"queueBellList"
})
@EditablePropertyNames({
})
public class AProducerConsumerScene2 implements ProducerConsumerScene2 {
	
	//Avatar offsets inside scene
	int[] chefXValues = {120,-50,-50,120};
	int[] chefYValues = {-50,35,210,320};
	int[] patronXValues = {650,850,850,650};
	int[] patronYValues = {-50,35,220,320};
	int[] bellXValues = {680,880,880,680};
	int[] bellYValues = {75,160,345,445};
	int INIT_HEAD_Y = 60;
	int INIT_HEAD_X = 163;
	int INIT_HEAD_HEIGHT = 90;
	int INIT_HEAD_WIDTH = 80;
	int PLATE_OFFSET_X = 30;
	int PLATE_OFFSET_Y = 10;
	int PAUSE = 5;
	
	//Booleans that help with the functionality of the below methods
	boolean INIT_COOK = true;
	boolean full = false;
	int fullPlateOffset = -5;
	
	//Defining the chef and patron images
	String[] chefImages = {"images/0.png","images/1.png","images/2.png","images/3.png"};
	String[] patronImages = {"images/4.png", "images/5.png", "images/6.png", "images/7.png"};
	
	//Buffer arrays
	int[] bufferXValues = {625, 680, 680, 620, 535, 460, 460, 535};
	int[] bufferYValues = {200, 275, 365, 425, 425, 365, 275, 200};
	boolean[] isFull = {false, false, false, false, false, false, false, false};
	
	//The properties of our class
	List<APatron> patronList;
	List<AChef> chefList;
	BoundedBuffer buffer = new ABoundedBuffer();
	
	//This list will keep a track of the plates that enter the buffer so that FIFO
	Queue<APlate> queuedList;
	
	OEShapeModel[] lineArray = {buffer.getLineTwo(), buffer.getLineThree(), buffer.getLineFour(), 
								buffer.getLineFive(), buffer.getLineSix(), buffer.getLineSeven(), 
								buffer.getLineEight(), buffer.getLineOne()};
	
	List<ABell> bellsList;
	Queue<ABell> queueBellList;
	int[] bellValues = {127, 212, 397, 497};
	Queue<Integer> bellIntegerList;
	
	ACookingPlateCommand cookingCommand;
	CookingPlateAnimator cookingAnimator;
	
	AServingPlateCommand servingCommand;
	ServingPlateAnimator servingAnimator;
	
	//The constructor sets the scene with one chef, patron, a buffer, and a plate (not visible)
	public AProducerConsumerScene2() {
		patronList = new ArrayList<APatron>();
		chefList = new ArrayList<AChef>();
		//buffer = new ABoundedBuffer();
		
		queuedList = new LinkedList<APlate>();
		bellsList = new ArrayList<ABell>();
		queueBellList = new LinkedList<ABell>();
		bellIntegerList = new LinkedList<Integer>();
		
		patronList.add(0, new APatron());
		OEShapeModel initPatronHead = new AnImageModel(patronImages[0]);
		initPatronHead.setX(INIT_HEAD_X);
		initPatronHead.setY(INIT_HEAD_Y);
		initPatronHead.setHeight(INIT_HEAD_HEIGHT);
		initPatronHead.setWidth(INIT_HEAD_WIDTH);
		patronList.get(0).patron.setHead(initPatronHead);
		patronList.get(0).move(patronXValues[0], patronYValues[0]);
		
		chefList.add(0, new AChef());
		OEShapeModel initChefHead = new AnImageModel(chefImages[0]);
		initChefHead.setX(INIT_HEAD_X);
		initChefHead.setY(INIT_HEAD_Y);
		initChefHead.setHeight(INIT_HEAD_HEIGHT);
		initChefHead.setWidth(INIT_HEAD_WIDTH);
		chefList.get(0).chef.setHead(initChefHead);
		chefList.get(0).move(chefXValues[0], chefYValues[0]);
		
		queuedList.add(new APlate());
		queuedList.peek().getPlate().setHeight(0);
		queuedList.peek().getPlate().setWidth(0);
		
		cookingAnimator = new ACookingPlateAnimator();
		servingAnimator = new AServingPlateAnimator();
		
		bellsList.add(new ABell());
		bellsList.get(0).getBell().setHeight(0);
		bellsList.get(0).getBell().setWidth(0);
		
		queueBellList.add(new ABell());
		queueBellList.peek().getBell().setHeight(0);
		queueBellList.peek().getBell().setWidth(0);
		
		bellIntegerList.add(0);
	}
	
	//Producer consumer methods
	
	//Init Scene sets the number of patrons and chefs in the scene
	@Label("Init Scene")
	public void initScene(int patronAmount, int chefAmount) {
		bellsList.clear();
		for (int i=0; i<patronAmount; i++) { 
			APatron patron = new APatron();
			patronList.add(i, patron);
			OEShapeModel newHead = new AnImageModel(patronImages[i]);
			patron.patron.setHead(newHead); 
			newHead.setX(INIT_HEAD_X); 
			newHead.setY(INIT_HEAD_Y);
			newHead.setHeight(INIT_HEAD_HEIGHT);
			newHead.setWidth(INIT_HEAD_WIDTH);
			patron.move(patronXValues[i], patronYValues[i]);
			
			bellsList.add(new ABell());
			bellsList.get(i).move(bellXValues[i], bellYValues[i]);
		}
		for (int i=0; i<chefAmount; i++) {
			AChef chef = new AChef();
			chefList.add(i, chef);
			OEShapeModel newHead = new AnImageModel(chefImages[i]);
			chef.chef.setHead(newHead);
			newHead.setX(INIT_HEAD_X); 
			newHead.setY(INIT_HEAD_Y);
			newHead.setHeight(INIT_HEAD_HEIGHT);
			newHead.setWidth(INIT_HEAD_WIDTH);
			chef.move(chefXValues[i], chefYValues[i]);
		}
	}
	
	//Once the head of an avatar is chosen, it makes the plate that they "cook" appear
	public void cook(OEShapeModel head) {
		System.out.println("MADE TO COOK METHOD!!!!");
		if (INIT_COOK) {
			INIT_COOK=!INIT_COOK;
			queuedList.remove();
		}
		
		int headX = head.getCenterX();
		int headY = head.getCenterY();
		
		System.out.println("First Checkpoint");
		APlate newPlate = new APlate();
		newPlate.getPlate().setHeight(0);
		newPlate.getPlate().setWidth(0);
		
		if (full) {
			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y+fullPlateOffset);
			fullPlateOffset = fullPlateOffset - 5;
		} else {
			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y);
		}
		
		System.out.println("Second checkpoint");
		cookingCommand = new ACookingPlateCommand(cookingAnimator, newPlate, 40, 15);
		Thread thread = new Thread (cookingCommand);
		thread.start();
	}
	
	public void serve(APlate plate) {
		//Checks to see if the buffer is full. If it is, then can't serve.
		resetLineColors();
		if(checkIfFull()) {
			resetLineColors();
			return;
		}
		
		queuedList.add(plate);
		
		int workingPlatePlace = queuedList.size();
		FlexibleTextShape platePlace = new AStringModel(Integer.toString(workingPlatePlace));
		plate.setText(platePlace);
		
		changeLineColors(workingPlatePlace);
		servingCommand = new AServingPlateCommand(servingAnimator,plate,PAUSE, bufferXValues[workingPlatePlace], bufferYValues[workingPlatePlace]);
		Thread thread = new Thread(servingCommand);
		thread.start();
		isFull[workingPlatePlace] = true;
	}
	
	public void order(OEShapeModel bell) {
		if(checkIfFull()) {
			resetLineColors();
			resetBuffer();
		}
		bellIntegerList.add(0);
		int bellPlace = findBell(bell.getCenterY());
		bellsList.get(bellPlace).getText().setText(String.valueOf(bellIntegerList.size()-1));
		
		int platePlace = findFirstAvailablePlate();
		//servingCommand = new AServingPlateCommand(servingAnimator,plateList.get(platePlace),PAUSE, bell.getCenterX() , bell.getCenterY());
		Thread thread = new Thread(servingCommand);
		thread.start();
		
		//cookingCommand = new ACookingPlateCommand(cookingAnimator, plateList.get(0), 0, 15);
		Thread eatingThread = new Thread (cookingCommand);
		eatingThread.start();
		//plateList.get(0).getText().setText("");
	}
	
	public void eat() {
		//plateList.remove(0);
	}
	
	@Override
	@Visible(false)
	public int findBell(int centerY) {
		for(int i=0; i<bellsList.size();i++) {
			if(bellsList.get(i).getBell().getCenterY() == centerY) {
				return i;
			}
		}
		return 0;
	}
	
	@Override
	@Visible(false)
	public int findFirstAvailablePlate() {
		for (int i=0; i<isFull.length;i++) {
			if(isFull[i] == true) {
				return i;
			}
		}
		return 0;
	}
	
	@Override
	@Visible(false)
	public void resetBuffer() {
		
		for (int i=0; i<isFull.length;i++) {
			isFull[i] = false;
		}
	}
	
	@Override
	@Visible(false)
	public int findPatron(OEShapeModel patronHead) {
		return 0;
	}
	
	@Override
	@Visible(false)
	public boolean checkIfFull() {
		for (int i=0; i<isFull.length;i++) {
			if (isFull[i] == false) {
				full = false;
				return full;
			}
		}
		full = true;
		return full;
	}
	
	@Override
	@Visible(false)
	public void changeLineColors(int workingPlatePlace) {
		if(workingPlatePlace == lineArray.length-1) {
			lineArray[workingPlatePlace].setColor(Color.GREEN);
			lineArray[0].setColor(Color.GREEN);
		} else {
			lineArray[workingPlatePlace].setColor(Color.GREEN);
			lineArray[workingPlatePlace+1].setColor(Color.GREEN);
		}
	}
	
	
	@Override
	@Visible(false)
	public void resetLineColors() {
		for (int i=0; i<lineArray.length; i++) {
			lineArray[i].setColor(Color.WHITE);
		}
	}
	
	//Getters for properties of the scene
	@Override
	public List<AChef> getChefList() {
		return chefList;
	}
	
	@Override
	public List<APatron> getPatronList() {
		return patronList;
	}
	
	@Override
	public BoundedBuffer getBuffer() {
		return buffer;
	}
	
	@Override
	@util.annotations.Visible(false)
	public Queue<APlate> getQueuedList() {
		return queuedList;
	}
	
	@Override
	public List<ABell> getBellsList() {
		return bellsList;
	}
	
	@Override
	@Visible(false)
	public Queue<ABell> getQueueBellList() {
		return queueBellList;
	}
}
]]></snapshot>
  </Command>
  <DocumentChange __id="2566" _type="Insert" date="Sat Feb 25 11:13:34 EST 2023" docASTNodeCount="1579" docActiveCodeLength="9281" docExpressionCount="1086" docLength="10211" length="4" offset="6738" starttimestamp="1677312753280" timestamp="28861692">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <DocumentChange __id="2569" _type="Replace" date="Sat Feb 25 11:13:35 EST 2023" docASTNodeCount="1586" docActiveCodeLength="9321" docExpressionCount="1092" docLength="10251" endLine="202" insertionLength="42" int_docASTNodeCount="1579" int_docActiveCodeLength="9279" int_docExpressionCount="1086" int_docLength="10209" length="2" offset="6740" startLine="202" starttimestamp="1677312753280" timestamp="28862212">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		System.out.println("Second checkpoint");]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2575" _type="Replace" date="Sat Feb 25 11:13:37 EST 2023" docASTNodeCount="1586" docActiveCodeLength="9316" docExpressionCount="1092" docLength="10246" endLine="202" insertionLength="1" int_docASTNodeCount="1586" int_docActiveCodeLength="9315" int_docExpressionCount="1092" int_docLength="10245" length="6" offset="6762" startLine="202" starttimestamp="1677312753280" timestamp="28864124">
    <deletedText><![CDATA[Second]]></deletedText>
    <insertedText><![CDATA[T]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2578" _type="Insert" date="Sat Feb 25 11:13:37 EST 2023" docASTNodeCount="1586" docActiveCodeLength="9320" docExpressionCount="1092" docLength="10250" length="4" offset="6763" repeat="4" starttimestamp="1677312753280" timestamp="28864329" timestamp2="28864667">
    <text><![CDATA[hird]]></text>
  </DocumentChange>
  <Command __id="2616" _type="PauseCommand" date="Sat Feb 25 11:14:28 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="28914842">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[4629]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2617" _type="SelectTextCommand" caretOffset="86" date="Sat Feb 25 11:14:28 EST 2023" end="86" start="66" starttimestamp="1677312753280" timestamp="28914911" />
  <Command __id="2618" _type="SelectTextCommand" caretOffset="86" date="Sat Feb 25 11:14:28 EST 2023" end="86" start="66" starttimestamp="1677312753280" timestamp="28915014" />
  <Command __id="2615" _type="DiffBasedFileOpenCommand" date="Sat Feb 25 11:14:28 EST 2023" docASTNodeCount="38" docActiveCodeLength="200" docExpressionCount="15" docLength="200" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="28914842">
    <filePath><![CDATA[C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\animations\CookingPlateAnimator.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package animations;

import graphics.Plate;

public interface CookingPlateAnimator {
	public void cook(Plate plate, int size, int pause);
	public void eat(Plate plate, int size, int pause);
}
]]></snapshot>
  </Command>
  <Command __id="2620" _type="PauseCommand" date="Sat Feb 25 11:14:31 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="28918113">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[3099]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2628" _type="ProgramExecutionEvent" className="(Unknown)" date="Sat Feb 25 11:14:52 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1677312753280" timestamp="28939077" type="Debug" />
  <Command __id="2630" _type="ProgramExecutionEvent" className="/ProducersConsumersV3/src/main/Main.java" date="Sat Feb 25 11:14:52 EST 2023" kind="HitBreakPoint" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="28939078" type="Run" />
  <Command __id="2631" _type="ProgramExecutionEvent" className="(Unknown)" date="Sat Feb 25 11:14:52 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1677312753280" timestamp="28939078" type="Debug" />
  <Command __id="2632" _type="ProgramExecutionEvent" className="/ProducersConsumersV3/src/main/Main.java" date="Sat Feb 25 11:14:52 EST 2023" kind="HitBreakPoint" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="28939078" type="Run" />
  <Command __id="2633" _type="ShellCommand" date="Sat Feb 25 11:14:53 EST 2023" starttimestamp="1677312753280" timestamp="28939866" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2634" _type="ShellCommand" date="Sat Feb 25 11:14:53 EST 2023" starttimestamp="1677312753280" timestamp="28939918" type="ECLIPSE_MINIMIZED" />
  <Command __id="2636" _type="PauseCommand" date="Sat Feb 25 11:31:18 EST 2023" range="10m-20m" starttimestamp="1677312753280" timestamp="29925506">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[985576]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2635" _type="ShellCommand" date="Sat Feb 25 11:31:18 EST 2023" starttimestamp="1677312753280" timestamp="29925494" type="ECLIPSE_MAXIMIZED" />
  <Command __id="2638" _type="PauseCommand" date="Sat Feb 25 11:31:20 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="29926864">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1370]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2637" _type="ShellCommand" date="Sat Feb 25 11:31:20 EST 2023" starttimestamp="1677312753280" timestamp="29926864" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2639" _type="ShellCommand" date="Sat Feb 25 11:31:21 EST 2023" starttimestamp="1677312753280" timestamp="29927857" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2640" _type="ShellCommand" date="Sat Feb 25 11:31:21 EST 2023" starttimestamp="1677312753280" timestamp="29927973" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2619" _type="DiffBasedFileOpenCommand" date="Sat Feb 25 11:14:31 EST 2023" docASTNodeCount="1586" docActiveCodeLength="9320" docExpressionCount="1092" docLength="10250" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="28918113">
    <filePath><![CDATA[C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\graphics\AProducerConsumerScene2.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package graphics;¶¶import java.util.ArrayList;¶import java.util.LinkedList;¶import java.util.List;¶import java.util.Queue;¶¶import animations.ACookingPlateAnimator;¶import animations.ACookingPlateCommand;¶import animations.AServingPlateAnimator;¶import animations.AServingPlateCommand;¶import animations.CookingPlateAnimator;¶import animations.ServingPlateAnimator;¶import bus.uigen.OEFrame;¶import bus.uigen.ObjectEditor;¶import bus.uigen.shapes.ALineModel;¶import bus.uigen.shapes.AStringModel;¶import bus.uigen.shapes.AnImageModel;¶import bus.uigen.shapes.OEShapeModel;¶import shapes.FlexibleTextShape;¶import util.annotations.EditablePropertyNames;¶import util.annotations.Label;¶import util.annotations.PropertyNames;¶import util.annotations.StructurePattern;¶import util.annotations.StructurePatternNames;¶import util.annotations.Visible;¶import util.misc.ThreadSupport;¶¶import java.awt.Color;¶¶@StructurePattern(StructurePatternNames.BEAN_PATTERN)¶@PropertyNames({¶	"patronList",¶	"chefList",¶	"buffer",¶	"queuedList",¶	"bellsList",¶	"queueBellList"¶})¶@EditablePropertyNames({¶})¶public class AProducerConsumerScene2 implements ProducerConsumerScene2 {¶	¶	//Avatar offsets inside scene¶	int[] chefXValues = {120,-50,-50,120};¶	int[] chefYValues = {-50,35,210,320};¶	int[] patronXValues = {650,850,850,650};¶	int[] patronYValues = {-50,35,220,320};¶	int[] bellXValues = {680,880,880,680};¶	int[] bellYValues = {75,160,345,445};¶	int INIT_HEAD_Y = 60;¶	int INIT_HEAD_X = 163;¶	int INIT_HEAD_HEIGHT = 90;¶	int INIT_HEAD_WIDTH = 80;¶	int PLATE_OFFSET_X = 30;¶	int PLATE_OFFSET_Y = 10;¶	int PAUSE = 5;¶	¶	//Booleans that help with the functionality of the below methods¶	boolean INIT_COOK = true;¶	boolean full = false;¶	int fullPlateOffset = -5;¶	¶	//Defining the chef and patron images¶	String[] chefImages = {"images/0.png","images/1.png","images/2.png","images/3.png"};¶	String[] patronImages = {"images/4.png", "images/5.png", "images/6.png", "images/7.png"};¶	¶	//Buffer arrays¶	int[] bufferXValues = {625, 680, 680, 620, 535, 460, 460, 535};¶	int[] bufferYValues = {200, 275, 365, 425, 425, 365, 275, 200};¶	boolean[] isFull = {false, false, false, false, false, false, false, false};¶	¶	//The properties of our class¶	List<APatron> patronList;¶	List<AChef> chefList;¶	BoundedBuffer buffer = new ABoundedBuffer();¶	¶	//This list will keep a track of the plates that enter the buffer so that FIFO¶	Queue<APlate> queuedList;¶	¶	OEShapeModel[] lineArray = {buffer.getLineTwo(), buffer.getLineThree(), buffer.getLineFour(), ¶								buffer.getLineFive(), buffer.getLineSix(), buffer.getLineSeven(), ¶								buffer.getLineEight(), buffer.getLineOne()};¶	¶	List<ABell> bellsList;¶	Queue<ABell> queueBellList;¶	int[] bellValues = {127, 212, 397, 497};¶	Queue<Integer> bellIntegerList;¶	¶	ACookingPlateCommand cookingCommand;¶	CookingPlateAnimator cookingAnimator;¶	¶	AServingPlateCommand servingCommand;¶	ServingPlateAnimator servingAnimator;¶	¶	//The constructor sets the scene with one chef, patron, a buffer, and a plate (not visible)¶	public AProducerConsumerScene2() {¶		patronList = new ArrayList<APatron>();¶		chefList = new ArrayList<AChef>();¶		//buffer = new ABoundedBuffer();¶		¶		queuedList = new LinkedList<APlate>();¶		bellsList = new ArrayList<ABell>();¶		queueBellList = new LinkedList<ABell>();¶		bellIntegerList = new LinkedList<Integer>();¶		¶		patronList.add(0, new APatron());¶		OEShapeModel initPatronHead = new AnImageModel(patronImages[0]);¶		initPatronHead.setX(INIT_HEAD_X);¶		initPatronHead.setY(INIT_HEAD_Y);¶		initPatronHead.setHeight(INIT_HEAD_HEIGHT);¶		initPatronHead.setWidth(INIT_HEAD_WIDTH);¶		patronList.get(0).patron.setHead(initPatronHead);¶		patronList.get(0).move(patronXValues[0], patronYValues[0]);¶		¶		chefList.add(0, new AChef());¶		OEShapeModel initChefHead = new AnImageModel(chefImages[0]);¶		initChefHead.setX(INIT_HEAD_X);¶		initChefHead.setY(INIT_HEAD_Y);¶		initChefHead.setHeight(INIT_HEAD_HEIGHT);¶		initChefHead.setWidth(INIT_HEAD_WIDTH);¶		chefList.get(0).chef.setHead(initChefHead);¶		chefList.get(0).move(chefXValues[0], chefYValues[0]);¶		¶		queuedList.add(new APlate());¶		queuedList.peek().getPlate().setHeight(0);¶		queuedList.peek().getPlate().setWidth(0);¶		¶		cookingAnimator = new ACookingPlateAnimator();¶		servingAnimator = new AServingPlateAnimator();¶		¶		bellsList.add(new ABell());¶		bellsList.get(0).getBell().setHeight(0);¶		bellsList.get(0).getBell().setWidth(0);¶		¶		queueBellList.add(new ABell());¶		queueBellList.peek().getBell().setHeight(0);¶		queueBellList.peek().getBell().setWidth(0);¶		¶		bellIntegerList.add(0);¶	}¶	¶	//Producer consumer methods¶	¶	//Init Scene sets the number of patrons and chefs in the scene¶	@Label("Init Scene")¶	public void initScene(int patronAmount, int chefAmount) {¶		bellsList.clear();¶		for (int i=0; i<patronAmount; i++) { ¶			APatron patron = new APatron();¶			patronList.add(i, patron);¶			OEShapeModel newHead = new AnImageModel(patronImages[i]);¶			patron.patron.setHead(newHead); ¶			newHead.setX(INIT_HEAD_X); ¶			newHead.setY(INIT_HEAD_Y);¶			newHead.setHeight(INIT_HEAD_HEIGHT);¶			newHead.setWidth(INIT_HEAD_WIDTH);¶			patron.move(patronXValues[i], patronYValues[i]);¶			¶			bellsList.add(new ABell());¶			bellsList.get(i).move(bellXValues[i], bellYValues[i]);¶		}¶		for (int i=0; i<chefAmount; i++) {¶			AChef chef = new AChef();¶			chefList.add(i, chef);¶			OEShapeModel newHead = new AnImageModel(chefImages[i]);¶			chef.chef.setHead(newHead);¶			newHead.setX(INIT_HEAD_X); ¶			newHead.setY(INIT_HEAD_Y);¶			newHead.setHeight(INIT_HEAD_HEIGHT);¶			newHead.setWidth(INIT_HEAD_WIDTH);¶			chef.move(chefXValues[i], chefYValues[i]);¶		}¶	}¶	¶	//Once the head of an avatar is chosen, it makes the plate that they "cook" appear¶	public void cook(OEShapeModel head) {¶		System.out.println("MADE TO COOK METHOD!!!!");¶		if (INIT_COOK) {¶			INIT_COOK=!INIT_COOK;¶			queuedList.remove();¶		}¶		¶		int headX = head.getCenterX();¶		int headY = head.getCenterY();¶		¶		System.out.println("First Checkpoint");¶		APlate newPlate = new APlate();¶		newPlate.getPlate().setHeight(0);¶		newPlate.getPlate().setWidth(0);¶		¶		if (full) {¶			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y+fullPlateOffset);¶			fullPlateOffset = fullPlateOffset - 5;¶		} else {¶			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y);¶		}¶		¶		System.out.println("Second checkpoint");¶		cookingCommand = new ACookingPlateCommand(cookingAnimator, newPlate, 40, 15);¶		Thread thread = new Thread (cookingCommand);¶		thread.start();¶	"), Diff(INSERT,"	System.out.println("Third checkpoint");¶	"), Diff(EQUAL,"}¶	¶	public void serve(APlate plate) {¶		//Checks to see if the buffer is full. If it is, then can't serve.¶		resetLineColors();¶		if(checkIfFull()) {¶			resetLineColors();¶			return;¶		}¶		¶		queuedList.add(plate);¶		¶		int workingPlatePlace = queuedList.size();¶		FlexibleTextShape platePlace = new AStringModel(Integer.toString(workingPlatePlace));¶		plate.setText(platePlace);¶		¶		changeLineColors(workingPlatePlace);¶		servingCommand = new AServingPlateCommand(servingAnimator,plate,PAUSE, bufferXValues[workingPlatePlace], bufferYValues[workingPlatePlace]);¶		Thread thread = new Thread(servingCommand);¶		thread.start();¶		isFull[workingPlatePlace] = true;¶	}¶	¶	public void order(OEShapeModel bell) {¶		if(checkIfFull()) {¶			resetLineColors();¶			resetBuffer();¶		}¶		bellIntegerList.add(0);¶		int bellPlace = findBell(bell.getCenterY());¶		bellsList.get(bellPlace).getText().setText(String.valueOf(bellIntegerList.size()-1));¶		¶		int platePlace = findFirstAvailablePlate();¶		//servingCommand = new AServingPlateCommand(servingAnimator,plateList.get(platePlace),PAUSE, bell.getCenterX() , bell.getCenterY());¶		Thread thread = new Thread(servingCommand);¶		thread.start();¶		¶		//cookingCommand = new ACookingPlateCommand(cookingAnimator, plateList.get(0), 0, 15);¶		Thread eatingThread = new Thread (cookingCommand);¶		eatingThread.start();¶		//plateList.get(0).getText().setText("");¶	}¶	¶	public void eat() {¶		//plateList.remove(0);¶	}¶	¶	@Override¶	@Visible(false)¶	public int findBell(int centerY) {¶		for(int i=0; i<bellsList.size();i++) {¶			if(bellsList.get(i).getBell().getCenterY() == centerY) {¶				return i;¶			}¶		}¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public int findFirstAvailablePlate() {¶		for (int i=0; i<isFull.length;i++) {¶			if(isFull[i] == true) {¶				return i;¶			}¶		}¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public void resetBuffer() {¶		¶		for (int i=0; i<isFull.length;i++) {¶			isFull[i] = false;¶		}¶	}¶	¶	@Override¶	@Visible(false)¶	public int findPatron(OEShapeModel patronHead) {¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public boolean checkIfFull() {¶		for (int i=0; i<isFull.length;i++) {¶			if (isFull[i] == false) {¶				full = false;¶				return full;¶			}¶		}¶		full = true;¶		return full;¶	}¶	¶	@Override¶	@Visible(false)¶	public void changeLineColors(int workingPlatePlace) {¶		if(workingPlatePlace == lineArray.length-1) {¶			lineArray[workingPlatePlace].setColor(Color.GREEN);¶			lineArray[0].setColor(Color.GREEN);¶		} else {¶			lineArray[workingPlatePlace].setColor(Color.GREEN);¶			lineArray[workingPlatePlace+1].setColor(Color.GREEN);¶		}¶	}¶	¶	¶	@Override¶	@Visible(false)¶	public void resetLineColors() {¶		for (int i=0; i<lineArray.length; i++) {¶			lineArray[i].setColor(Color.WHITE);¶		}¶	}¶	¶	//Getters for properties of the scene¶	@Override¶	public List<AChef> getChefList() {¶		return chefList;¶	}¶	¶	@Override¶	public List<APatron> getPatronList() {¶		return patronList;¶	}¶	¶	@Override¶	public BoundedBuffer getBuffer() {¶		return buffer;¶	}¶	¶	@Override¶	@util.annotations.Visible(false)¶	public Queue<APlate> getQueuedList() {¶		return queuedList;¶	}¶	¶	@Override¶	public List<ABell> getBellsList() {¶		return bellsList;¶	}¶	¶	@Override¶	@Visible(false)¶	public Queue<ABell> getQueueBellList() {¶		return queueBellList;¶	}¶}¶")]]]></diff>
    <snapshot><![CDATA[package graphics;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

import animations.ACookingPlateAnimator;
import animations.ACookingPlateCommand;
import animations.AServingPlateAnimator;
import animations.AServingPlateCommand;
import animations.CookingPlateAnimator;
import animations.ServingPlateAnimator;
import bus.uigen.OEFrame;
import bus.uigen.ObjectEditor;
import bus.uigen.shapes.ALineModel;
import bus.uigen.shapes.AStringModel;
import bus.uigen.shapes.AnImageModel;
import bus.uigen.shapes.OEShapeModel;
import shapes.FlexibleTextShape;
import util.annotations.EditablePropertyNames;
import util.annotations.Label;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Visible;
import util.misc.ThreadSupport;

import java.awt.Color;

@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({
	"patronList",
	"chefList",
	"buffer",
	"queuedList",
	"bellsList",
	"queueBellList"
})
@EditablePropertyNames({
})
public class AProducerConsumerScene2 implements ProducerConsumerScene2 {
	
	//Avatar offsets inside scene
	int[] chefXValues = {120,-50,-50,120};
	int[] chefYValues = {-50,35,210,320};
	int[] patronXValues = {650,850,850,650};
	int[] patronYValues = {-50,35,220,320};
	int[] bellXValues = {680,880,880,680};
	int[] bellYValues = {75,160,345,445};
	int INIT_HEAD_Y = 60;
	int INIT_HEAD_X = 163;
	int INIT_HEAD_HEIGHT = 90;
	int INIT_HEAD_WIDTH = 80;
	int PLATE_OFFSET_X = 30;
	int PLATE_OFFSET_Y = 10;
	int PAUSE = 5;
	
	//Booleans that help with the functionality of the below methods
	boolean INIT_COOK = true;
	boolean full = false;
	int fullPlateOffset = -5;
	
	//Defining the chef and patron images
	String[] chefImages = {"images/0.png","images/1.png","images/2.png","images/3.png"};
	String[] patronImages = {"images/4.png", "images/5.png", "images/6.png", "images/7.png"};
	
	//Buffer arrays
	int[] bufferXValues = {625, 680, 680, 620, 535, 460, 460, 535};
	int[] bufferYValues = {200, 275, 365, 425, 425, 365, 275, 200};
	boolean[] isFull = {false, false, false, false, false, false, false, false};
	
	//The properties of our class
	List<APatron> patronList;
	List<AChef> chefList;
	BoundedBuffer buffer = new ABoundedBuffer();
	
	//This list will keep a track of the plates that enter the buffer so that FIFO
	Queue<APlate> queuedList;
	
	OEShapeModel[] lineArray = {buffer.getLineTwo(), buffer.getLineThree(), buffer.getLineFour(), 
								buffer.getLineFive(), buffer.getLineSix(), buffer.getLineSeven(), 
								buffer.getLineEight(), buffer.getLineOne()};
	
	List<ABell> bellsList;
	Queue<ABell> queueBellList;
	int[] bellValues = {127, 212, 397, 497};
	Queue<Integer> bellIntegerList;
	
	ACookingPlateCommand cookingCommand;
	CookingPlateAnimator cookingAnimator;
	
	AServingPlateCommand servingCommand;
	ServingPlateAnimator servingAnimator;
	
	//The constructor sets the scene with one chef, patron, a buffer, and a plate (not visible)
	public AProducerConsumerScene2() {
		patronList = new ArrayList<APatron>();
		chefList = new ArrayList<AChef>();
		//buffer = new ABoundedBuffer();
		
		queuedList = new LinkedList<APlate>();
		bellsList = new ArrayList<ABell>();
		queueBellList = new LinkedList<ABell>();
		bellIntegerList = new LinkedList<Integer>();
		
		patronList.add(0, new APatron());
		OEShapeModel initPatronHead = new AnImageModel(patronImages[0]);
		initPatronHead.setX(INIT_HEAD_X);
		initPatronHead.setY(INIT_HEAD_Y);
		initPatronHead.setHeight(INIT_HEAD_HEIGHT);
		initPatronHead.setWidth(INIT_HEAD_WIDTH);
		patronList.get(0).patron.setHead(initPatronHead);
		patronList.get(0).move(patronXValues[0], patronYValues[0]);
		
		chefList.add(0, new AChef());
		OEShapeModel initChefHead = new AnImageModel(chefImages[0]);
		initChefHead.setX(INIT_HEAD_X);
		initChefHead.setY(INIT_HEAD_Y);
		initChefHead.setHeight(INIT_HEAD_HEIGHT);
		initChefHead.setWidth(INIT_HEAD_WIDTH);
		chefList.get(0).chef.setHead(initChefHead);
		chefList.get(0).move(chefXValues[0], chefYValues[0]);
		
		queuedList.add(new APlate());
		queuedList.peek().getPlate().setHeight(0);
		queuedList.peek().getPlate().setWidth(0);
		
		cookingAnimator = new ACookingPlateAnimator();
		servingAnimator = new AServingPlateAnimator();
		
		bellsList.add(new ABell());
		bellsList.get(0).getBell().setHeight(0);
		bellsList.get(0).getBell().setWidth(0);
		
		queueBellList.add(new ABell());
		queueBellList.peek().getBell().setHeight(0);
		queueBellList.peek().getBell().setWidth(0);
		
		bellIntegerList.add(0);
	}
	
	//Producer consumer methods
	
	//Init Scene sets the number of patrons and chefs in the scene
	@Label("Init Scene")
	public void initScene(int patronAmount, int chefAmount) {
		bellsList.clear();
		for (int i=0; i<patronAmount; i++) { 
			APatron patron = new APatron();
			patronList.add(i, patron);
			OEShapeModel newHead = new AnImageModel(patronImages[i]);
			patron.patron.setHead(newHead); 
			newHead.setX(INIT_HEAD_X); 
			newHead.setY(INIT_HEAD_Y);
			newHead.setHeight(INIT_HEAD_HEIGHT);
			newHead.setWidth(INIT_HEAD_WIDTH);
			patron.move(patronXValues[i], patronYValues[i]);
			
			bellsList.add(new ABell());
			bellsList.get(i).move(bellXValues[i], bellYValues[i]);
		}
		for (int i=0; i<chefAmount; i++) {
			AChef chef = new AChef();
			chefList.add(i, chef);
			OEShapeModel newHead = new AnImageModel(chefImages[i]);
			chef.chef.setHead(newHead);
			newHead.setX(INIT_HEAD_X); 
			newHead.setY(INIT_HEAD_Y);
			newHead.setHeight(INIT_HEAD_HEIGHT);
			newHead.setWidth(INIT_HEAD_WIDTH);
			chef.move(chefXValues[i], chefYValues[i]);
		}
	}
	
	//Once the head of an avatar is chosen, it makes the plate that they "cook" appear
	public void cook(OEShapeModel head) {
		System.out.println("MADE TO COOK METHOD!!!!");
		if (INIT_COOK) {
			INIT_COOK=!INIT_COOK;
			queuedList.remove();
		}
		
		int headX = head.getCenterX();
		int headY = head.getCenterY();
		
		System.out.println("First Checkpoint");
		APlate newPlate = new APlate();
		newPlate.getPlate().setHeight(0);
		newPlate.getPlate().setWidth(0);
		
		if (full) {
			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y+fullPlateOffset);
			fullPlateOffset = fullPlateOffset - 5;
		} else {
			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y);
		}
		
		System.out.println("Second checkpoint");
		cookingCommand = new ACookingPlateCommand(cookingAnimator, newPlate, 40, 15);
		Thread thread = new Thread (cookingCommand);
		thread.start();
		System.out.println("Third checkpoint");
	}
	
	public void serve(APlate plate) {
		//Checks to see if the buffer is full. If it is, then can't serve.
		resetLineColors();
		if(checkIfFull()) {
			resetLineColors();
			return;
		}
		
		queuedList.add(plate);
		
		int workingPlatePlace = queuedList.size();
		FlexibleTextShape platePlace = new AStringModel(Integer.toString(workingPlatePlace));
		plate.setText(platePlace);
		
		changeLineColors(workingPlatePlace);
		servingCommand = new AServingPlateCommand(servingAnimator,plate,PAUSE, bufferXValues[workingPlatePlace], bufferYValues[workingPlatePlace]);
		Thread thread = new Thread(servingCommand);
		thread.start();
		isFull[workingPlatePlace] = true;
	}
	
	public void order(OEShapeModel bell) {
		if(checkIfFull()) {
			resetLineColors();
			resetBuffer();
		}
		bellIntegerList.add(0);
		int bellPlace = findBell(bell.getCenterY());
		bellsList.get(bellPlace).getText().setText(String.valueOf(bellIntegerList.size()-1));
		
		int platePlace = findFirstAvailablePlate();
		//servingCommand = new AServingPlateCommand(servingAnimator,plateList.get(platePlace),PAUSE, bell.getCenterX() , bell.getCenterY());
		Thread thread = new Thread(servingCommand);
		thread.start();
		
		//cookingCommand = new ACookingPlateCommand(cookingAnimator, plateList.get(0), 0, 15);
		Thread eatingThread = new Thread (cookingCommand);
		eatingThread.start();
		//plateList.get(0).getText().setText("");
	}
	
	public void eat() {
		//plateList.remove(0);
	}
	
	@Override
	@Visible(false)
	public int findBell(int centerY) {
		for(int i=0; i<bellsList.size();i++) {
			if(bellsList.get(i).getBell().getCenterY() == centerY) {
				return i;
			}
		}
		return 0;
	}
	
	@Override
	@Visible(false)
	public int findFirstAvailablePlate() {
		for (int i=0; i<isFull.length;i++) {
			if(isFull[i] == true) {
				return i;
			}
		}
		return 0;
	}
	
	@Override
	@Visible(false)
	public void resetBuffer() {
		
		for (int i=0; i<isFull.length;i++) {
			isFull[i] = false;
		}
	}
	
	@Override
	@Visible(false)
	public int findPatron(OEShapeModel patronHead) {
		return 0;
	}
	
	@Override
	@Visible(false)
	public boolean checkIfFull() {
		for (int i=0; i<isFull.length;i++) {
			if (isFull[i] == false) {
				full = false;
				return full;
			}
		}
		full = true;
		return full;
	}
	
	@Override
	@Visible(false)
	public void changeLineColors(int workingPlatePlace) {
		if(workingPlatePlace == lineArray.length-1) {
			lineArray[workingPlatePlace].setColor(Color.GREEN);
			lineArray[0].setColor(Color.GREEN);
		} else {
			lineArray[workingPlatePlace].setColor(Color.GREEN);
			lineArray[workingPlatePlace+1].setColor(Color.GREEN);
		}
	}
	
	
	@Override
	@Visible(false)
	public void resetLineColors() {
		for (int i=0; i<lineArray.length; i++) {
			lineArray[i].setColor(Color.WHITE);
		}
	}
	
	//Getters for properties of the scene
	@Override
	public List<AChef> getChefList() {
		return chefList;
	}
	
	@Override
	public List<APatron> getPatronList() {
		return patronList;
	}
	
	@Override
	public BoundedBuffer getBuffer() {
		return buffer;
	}
	
	@Override
	@util.annotations.Visible(false)
	public Queue<APlate> getQueuedList() {
		return queuedList;
	}
	
	@Override
	public List<ABell> getBellsList() {
		return bellsList;
	}
	
	@Override
	@Visible(false)
	public Queue<ABell> getQueueBellList() {
		return queueBellList;
	}
}
]]></snapshot>
  </Command>
  <Command __id="2642" _type="PauseCommand" date="Sat Feb 25 11:31:41 EST 2023" range="10s-20s" starttimestamp="1677312753280" timestamp="29947805">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[19829]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2643" _type="MoveCaretCommand" caretOffset="413" date="Sat Feb 25 11:31:41 EST 2023" docOffset="518" starttimestamp="1677312753280" timestamp="29948557" />
  <Command __id="2641" _type="DiffBasedFileOpenCommand" date="Sat Feb 25 11:31:41 EST 2023" docASTNodeCount="151" docActiveCodeLength="877" docExpressionCount="66" docLength="877" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="29947802">
    <filePath><![CDATA[C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\graphics\ProducerConsumerScene2.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package graphics;¶¶import java.util.List;¶import java.util.Queue;¶¶import bus.uigen.shapes.AnImageModel;¶import bus.uigen.shapes.OEShapeModel;¶¶public interface ProducerConsumerScene2 {¶	public List<AChef> getChefList();¶	public List<APatron> getPatronList();¶	public Queue<APlate> getQueuedList();¶	public BoundedBuffer getBuffer();¶	public Queue<ABell> getQueueBellList();¶	public void initScene(int patronAmount, int chefAmount);¶	public void cook(OEShapeModel head);¶	public void serve(APlate plate);¶	public boolean checkIfFull();¶	public void changeLineColors(int workingPlatePlace);¶	public void resetLineColors();¶	public int findPatron(OEShapeModel patronHead);¶	public List<ABell> getBellsList();¶	public int findBell(int centerY);¶	public void order(OEShapeModel bell);¶	public int findFirstAvailablePlate();¶	public void resetBuffer();¶}¶")]]]></diff>
  </Command>
  <Command __id="2645" _type="PauseCommand" date="Sat Feb 25 11:31:46 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="29953445">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[4887]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2647" _type="BalloonCommand" date="Sat Feb 25 11:31:57 EST 2023" message="*******************************************
Worked 37 minutes(fixed)/31 minutes(context based) from
Sat Feb 25 10:31:57 EST 2023 to Sat Feb 25 11:31:46 EST 2023
Edited 1 Projects: 
	ProducersConsumersV3
Edited 5 Files: 
	C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\graphics\ProducerConsumerScene2.java
	C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\graphics\ProducerConsumerScene.java
	C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\graphics\AProducerConsumerScene2.java
	C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\graphics\AProducerConsumerScene.java
	C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\main\Main.java
Number of insert: 992
Number of delete: 1035
" starttimestamp="1677312753280" timestamp="29964201">
    <fineGrainedWorkTime><![CDATA[31]]></fineGrainedWorkTime>
    <insert><![CDATA[992]]></insert>
    <startTime><![CDATA[1677339117623]]></startTime>
    <endTime><![CDATA[1677342706931]]></endTime>
    <workTime><![CDATA[37]]></workTime>
    <delete><![CDATA[1035]]></delete>
  </Command>
  <Command __id="2644" _type="DiffBasedFileOpenCommand" date="Sat Feb 25 11:31:46 EST 2023" docASTNodeCount="1586" docActiveCodeLength="9320" docExpressionCount="1092" docLength="10250" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="29953444">
    <filePath><![CDATA[C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\graphics\AProducerConsumerScene2.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package graphics;¶¶import java.util.ArrayList;¶import java.util.LinkedList;¶import java.util.List;¶import java.util.Queue;¶¶import animations.ACookingPlateAnimator;¶import animations.ACookingPlateCommand;¶import animations.AServingPlateAnimator;¶import animations.AServingPlateCommand;¶import animations.CookingPlateAnimator;¶import animations.ServingPlateAnimator;¶import bus.uigen.OEFrame;¶import bus.uigen.ObjectEditor;¶import bus.uigen.shapes.ALineModel;¶import bus.uigen.shapes.AStringModel;¶import bus.uigen.shapes.AnImageModel;¶import bus.uigen.shapes.OEShapeModel;¶import shapes.FlexibleTextShape;¶import util.annotations.EditablePropertyNames;¶import util.annotations.Label;¶import util.annotations.PropertyNames;¶import util.annotations.StructurePattern;¶import util.annotations.StructurePatternNames;¶import util.annotations.Visible;¶import util.misc.ThreadSupport;¶¶import java.awt.Color;¶¶@StructurePattern(StructurePatternNames.BEAN_PATTERN)¶@PropertyNames({¶	"patronList",¶	"chefList",¶	"buffer",¶	"queuedList",¶	"bellsList",¶	"queueBellList"¶})¶@EditablePropertyNames({¶})¶public class AProducerConsumerScene2 implements ProducerConsumerScene2 {¶	¶	//Avatar offsets inside scene¶	int[] chefXValues = {120,-50,-50,120};¶	int[] chefYValues = {-50,35,210,320};¶	int[] patronXValues = {650,850,850,650};¶	int[] patronYValues = {-50,35,220,320};¶	int[] bellXValues = {680,880,880,680};¶	int[] bellYValues = {75,160,345,445};¶	int INIT_HEAD_Y = 60;¶	int INIT_HEAD_X = 163;¶	int INIT_HEAD_HEIGHT = 90;¶	int INIT_HEAD_WIDTH = 80;¶	int PLATE_OFFSET_X = 30;¶	int PLATE_OFFSET_Y = 10;¶	int PAUSE = 5;¶	¶	//Booleans that help with the functionality of the below methods¶	boolean INIT_COOK = true;¶	boolean full = false;¶	int fullPlateOffset = -5;¶	¶	//Defining the chef and patron images¶	String[] chefImages = {"images/0.png","images/1.png","images/2.png","images/3.png"};¶	String[] patronImages = {"images/4.png", "images/5.png", "images/6.png", "images/7.png"};¶	¶	//Buffer arrays¶	int[] bufferXValues = {625, 680, 680, 620, 535, 460, 460, 535};¶	int[] bufferYValues = {200, 275, 365, 425, 425, 365, 275, 200};¶	boolean[] isFull = {false, false, false, false, false, false, false, false};¶	¶	//The properties of our class¶	List<APatron> patronList;¶	List<AChef> chefList;¶	BoundedBuffer buffer = new ABoundedBuffer();¶	¶	//This list will keep a track of the plates that enter the buffer so that FIFO¶	Queue<APlate> queuedList;¶	¶	OEShapeModel[] lineArray = {buffer.getLineTwo(), buffer.getLineThree(), buffer.getLineFour(), ¶								buffer.getLineFive(), buffer.getLineSix(), buffer.getLineSeven(), ¶								buffer.getLineEight(), buffer.getLineOne()};¶	¶	List<ABell> bellsList;¶	Queue<ABell> queueBellList;¶	int[] bellValues = {127, 212, 397, 497};¶	Queue<Integer> bellIntegerList;¶	¶	ACookingPlateCommand cookingCommand;¶	CookingPlateAnimator cookingAnimator;¶	¶	AServingPlateCommand servingCommand;¶	ServingPlateAnimator servingAnimator;¶	¶	//The constructor sets the scene with one chef, patron, a buffer, and a plate (not visible)¶	public AProducerConsumerScene2() {¶		patronList = new ArrayList<APatron>();¶		chefList = new ArrayList<AChef>();¶		//buffer = new ABoundedBuffer();¶		¶		queuedList = new LinkedList<APlate>();¶		bellsList = new ArrayList<ABell>();¶		queueBellList = new LinkedList<ABell>();¶		bellIntegerList = new LinkedList<Integer>();¶		¶		patronList.add(0, new APatron());¶		OEShapeModel initPatronHead = new AnImageModel(patronImages[0]);¶		initPatronHead.setX(INIT_HEAD_X);¶		initPatronHead.setY(INIT_HEAD_Y);¶		initPatronHead.setHeight(INIT_HEAD_HEIGHT);¶		initPatronHead.setWidth(INIT_HEAD_WIDTH);¶		patronList.get(0).patron.setHead(initPatronHead);¶		patronList.get(0).move(patronXValues[0], patronYValues[0]);¶		¶		chefList.add(0, new AChef());¶		OEShapeModel initChefHead = new AnImageModel(chefImages[0]);¶		initChefHead.setX(INIT_HEAD_X);¶		initChefHead.setY(INIT_HEAD_Y);¶		initChefHead.setHeight(INIT_HEAD_HEIGHT);¶		initChefHead.setWidth(INIT_HEAD_WIDTH);¶		chefList.get(0).chef.setHead(initChefHead);¶		chefList.get(0).move(chefXValues[0], chefYValues[0]);¶		¶		queuedList.add(new APlate());¶		queuedList.peek().getPlate().setHeight(0);¶		queuedList.peek().getPlate().setWidth(0);¶		¶		cookingAnimator = new ACookingPlateAnimator();¶		servingAnimator = new AServingPlateAnimator();¶		¶		bellsList.add(new ABell());¶		bellsList.get(0).getBell().setHeight(0);¶		bellsList.get(0).getBell().setWidth(0);¶		¶		queueBellList.add(new ABell());¶		queueBellList.peek().getBell().setHeight(0);¶		queueBellList.peek().getBell().setWidth(0);¶		¶		bellIntegerList.add(0);¶	}¶	¶	//Producer consumer methods¶	¶	//Init Scene sets the number of patrons and chefs in the scene¶	@Label("Init Scene")¶	public void initScene(int patronAmount, int chefAmount) {¶		bellsList.clear();¶		for (int i=0; i<patronAmount; i++) { ¶			APatron patron = new APatron();¶			patronList.add(i, patron);¶			OEShapeModel newHead = new AnImageModel(patronImages[i]);¶			patron.patron.setHead(newHead); ¶			newHead.setX(INIT_HEAD_X); ¶			newHead.setY(INIT_HEAD_Y);¶			newHead.setHeight(INIT_HEAD_HEIGHT);¶			newHead.setWidth(INIT_HEAD_WIDTH);¶			patron.move(patronXValues[i], patronYValues[i]);¶			¶			bellsList.add(new ABell());¶			bellsList.get(i).move(bellXValues[i], bellYValues[i]);¶		}¶		for (int i=0; i<chefAmount; i++) {¶			AChef chef = new AChef();¶			chefList.add(i, chef);¶			OEShapeModel newHead = new AnImageModel(chefImages[i]);¶			chef.chef.setHead(newHead);¶			newHead.setX(INIT_HEAD_X); ¶			newHead.setY(INIT_HEAD_Y);¶			newHead.setHeight(INIT_HEAD_HEIGHT);¶			newHead.setWidth(INIT_HEAD_WIDTH);¶			chef.move(chefXValues[i], chefYValues[i]);¶		}¶	}¶	¶	//Once the head of an avatar is chosen, it makes the plate that they "cook" appear¶	public void cook(OEShapeModel head) {¶		System.out.println("MADE TO COOK METHOD!!!!");¶		if (INIT_COOK) {¶			INIT_COOK=!INIT_COOK;¶			queuedList.remove();¶		}¶		¶		int headX = head.getCenterX();¶		int headY = head.getCenterY();¶		¶		System.out.println("First Checkpoint");¶		APlate newPlate = new APlate();¶		newPlate.getPlate().setHeight(0);¶		newPlate.getPlate().setWidth(0);¶		¶		if (full) {¶			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y+fullPlateOffset);¶			fullPlateOffset = fullPlateOffset - 5;¶		} else {¶			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y);¶		}¶		¶		System.out.println("Second checkpoint");¶		cookingCommand = new ACookingPlateCommand(cookingAnimator, newPlate, 40, 15);¶		Thread thread = new Thread (cookingCommand);¶		thread.start();¶		System.out.println("Third checkpoint");¶	}¶	¶	public void serve(APlate plate) {¶		//Checks to see if the buffer is full. If it is, then can't serve.¶		resetLineColors();¶		if(checkIfFull()) {¶			resetLineColors();¶			return;¶		}¶		¶		queuedList.add(plate);¶		¶		int workingPlatePlace = queuedList.size();¶		FlexibleTextShape platePlace = new AStringModel(Integer.toString(workingPlatePlace));¶		plate.setText(platePlace);¶		¶		changeLineColors(workingPlatePlace);¶		servingCommand = new AServingPlateCommand(servingAnimator,plate,PAUSE, bufferXValues[workingPlatePlace], bufferYValues[workingPlatePlace]);¶		Thread thread = new Thread(servingCommand);¶		thread.start();¶		isFull[workingPlatePlace] = true;¶	}¶	¶	public void order(OEShapeModel bell) {¶		if(checkIfFull()) {¶			resetLineColors();¶			resetBuffer();¶		}¶		bellIntegerList.add(0);¶		int bellPlace = findBell(bell.getCenterY());¶		bellsList.get(bellPlace).getText().setText(String.valueOf(bellIntegerList.size()-1));¶		¶		int platePlace = findFirstAvailablePlate();¶		//servingCommand = new AServingPlateCommand(servingAnimator,plateList.get(platePlace),PAUSE, bell.getCenterX() , bell.getCenterY());¶		Thread thread = new Thread(servingCommand);¶		thread.start();¶		¶		//cookingCommand = new ACookingPlateCommand(cookingAnimator, plateList.get(0), 0, 15);¶		Thread eatingThread = new Thread (cookingCommand);¶		eatingThread.start();¶		//plateList.get(0).getText().setText("");¶	}¶	¶	public void eat() {¶		//plateList.remove(0);¶	}¶	¶	@Override¶	@Visible(false)¶	public int findBell(int centerY) {¶		for(int i=0; i<bellsList.size();i++) {¶			if(bellsList.get(i).getBell().getCenterY() == centerY) {¶				return i;¶			}¶		}¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public int findFirstAvailablePlate() {¶		for (int i=0; i<isFull.length;i++) {¶			if(isFull[i] == true) {¶				return i;¶			}¶		}¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public void resetBuffer() {¶		¶		for (int i=0; i<isFull.length;i++) {¶			isFull[i] = false;¶		}¶	}¶	¶	@Override¶	@Visible(false)¶	public int findPatron(OEShapeModel patronHead) {¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public boolean checkIfFull() {¶		for (int i=0; i<isFull.length;i++) {¶			if (isFull[i] == false) {¶				full = false;¶				return full;¶			}¶		}¶		full = true;¶		return full;¶	}¶	¶	@Override¶	@Visible(false)¶	public void changeLineColors(int workingPlatePlace) {¶		if(workingPlatePlace == lineArray.length-1) {¶			lineArray[workingPlatePlace].setColor(Color.GREEN);¶			lineArray[0].setColor(Color.GREEN);¶		} else {¶			lineArray[workingPlatePlace].setColor(Color.GREEN);¶			lineArray[workingPlatePlace+1].setColor(Color.GREEN);¶		}¶	}¶	¶	¶	@Override¶	@Visible(false)¶	public void resetLineColors() {¶		for (int i=0; i<lineArray.length; i++) {¶			lineArray[i].setColor(Color.WHITE);¶		}¶	}¶	¶	//Getters for properties of the scene¶	@Override¶	public List<AChef> getChefList() {¶		return chefList;¶	}¶	¶	@Override¶	public List<APatron> getPatronList() {¶		return patronList;¶	}¶	¶	@Override¶	public BoundedBuffer getBuffer() {¶		return buffer;¶	}¶	¶	@Override¶	@util.annotations.Visible(false)¶	public Queue<APlate> getQueuedList() {¶		return queuedList;¶	}¶	¶	@Override¶	public List<ABell> getBellsList() {¶		return bellsList;¶	}¶	¶	@Override¶	@Visible(false)¶	public Queue<ABell> getQueueBellList() {¶		return queueBellList;¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="2650" _type="PauseCommand" date="Sat Feb 25 11:32:05 EST 2023" range="5s-10s" starttimestamp="1677312753280" timestamp="29971823">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[BalloonCommand]]></prev>
    <pause><![CDATA[7622]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2652" _type="ProgramExecutionEvent" className="/ProducersConsumersV3/src/main/Main.java" date="Sat Feb 25 11:32:08 EST 2023" kind="HitBreakPoint" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="29975023" type="Run" />
  <Command __id="2654" _type="RunCommand" className="/ProducersConsumersV3/src/main/Main.java" date="Sat Feb 25 11:32:08 EST 2023" kind="HitBreakPoint" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="29975024" type="Run" />
  <Command __id="2656" _type="PauseCommand" date="Sat Feb 25 11:32:10 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="29976954">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[1930]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2655" _type="ShellCommand" date="Sat Feb 25 11:32:10 EST 2023" starttimestamp="1677312753280" timestamp="29976954" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2658" _type="PauseCommand" date="Sat Feb 25 11:32:14 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="29981549">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[4595]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="2657" _type="ConsoleOutput" date="Sat Feb 25 11:32:14 EST 2023" overflow="false" starttimestamp="1677312753280" timestamp="29981549" type="ConsoleOutput">
    <outputString><![CDATA[E*** Object:graphics.ABell@463b4ac8 displayed multiple times with following references:
 [AProducerConsumerScene2.queueBellList.first, AProducerConsumerScene2.queueBellList.last]
 Remove one of these references in the displayed logical structure by, for instance, renaming the getter for the property storing the shared object or adding the @util.annotations.Visible(false) annotation before the getter.
If you think it is safe to tareverse  all of these  references then add the annotattion @util.annotattions.AllowMultipleEqualReferences(false) nefore the getter.
E*** Object:graphics.ABell@463b4ac8 displayed multiple times with following references:
 [AProducerConsumerScene2.queueBellList.first, AProducerConsumerScene2.queueBellList.0, AProducerConsumerScene2.queueBellList.last]
 Remove one of these references in the displayed logical structure by, for instance, renaming the getter for the property storing the shared object or adding the @util.annotations.Visible(false) annotation before the getter.
If you think it is safe to tareverse  all of these  references then add the annotattion @util.annotattions.AllowMultipleEqualReferences(false) nefore the getter.
E*** Object:graphics.APlate@241e8ea6 displayed multiple times with following references:
 [AProducerConsumerScene2.queuedList.first, AProducerConsumerScene2.queuedList.last]
 Remove one of these references in the displayed logical structure by, for instance, renaming the getter for the property storing the shared object or adding the @util.annotations.Visible(false) annotation before the getter.
If you think it is safe to tareverse  all of these  references then add the annotattion @util.annotattions.AllowMultipleEqualReferences(false) nefore the getter.
E*** Object:graphics.APlate@241e8ea6 displayed multiple times with following references:
 [AProducerConsumerScene2.queuedList.0, AProducerConsumerScene2.queuedList.first, AProducerConsumerScene2.queuedList.last]
 Remove one of these references in the displayed logical structure by, for instance, renaming the getter for the property storing the shared object or adding the @util.annotations.Visible(false) annotation before the getter.
If you think it is safe to tareverse  all of these  references then add the annotattion @util.annotattions.AllowMultipleEqualReferences(false) nefore the getter.
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"E*** Object:graphics.ABell@"), Diff(DELETE,"18cebaa5"), Diff(INSERT,"463b4ac8"), Diff(EQUAL," displayed multiple times with following references:¶ [AProducerConsumerScene2.queueBellList.first, AProducerConsumerScene2.queueBellList.last]¶ Remove one of these references in the displayed logical structure by, for instance, renaming the getter for the property storing the shared object or adding the @util.annotations.Visible(false) annotation before the getter.¶If you think it is safe to tareverse  all of these  references then add the annotattion @util.annotattions.AllowMultipleEqualReferences(false) nefore the getter.¶E*** Object:graphics.ABell@"), Diff(DELETE,"18cebaa5"), Diff(INSERT,"463b4ac8"), Diff(EQUAL," displayed multiple times with following references:¶ [AProducerConsumerScene2.queueBellList.first, AProducerConsumerScene2.queueBellList.0, AProducerConsumerScene2.queueBellList.last]¶ Remove one of these references in the displayed logical structure by, for instance, renaming the getter for the property storing the shared object or adding the @util.annotations.Visible(false) annotation before the getter.¶If you think it is safe to tareverse  all of these  references then add the annotattion @util.annotattions.AllowMultipleEqualReferences(false) nefore the getter.¶E*** Object:graphics.APlate@"), Diff(DELETE,"3"), Diff(EQUAL,"24"), Diff(DELETE,"3b914"), Diff(INSERT,"1e8ea6"), Diff(EQUAL," displayed multiple times with following references:¶ [AProducerConsumerScene2.queuedList.first, AProducerConsumerScene2.queuedList.last]¶ Remove one of these references in the displayed logical structure by, for instance, renaming the getter for the property storing the shared object or adding the @util.annotations.Visible(false) annotation before the getter.¶If you think it is safe to tareverse  all of these  references then add the annotattion @util.annotattions.AllowMultipleEqualReferences(false) nefore the getter.¶E*** Object:graphics.APlate@"), Diff(DELETE,"3"), Diff(EQUAL,"24"), Diff(DELETE,"3b914"), Diff(INSERT,"1e8ea6"), Diff(EQUAL," displayed multiple times with following references:¶ [AProducerConsumerScene2.queuedList.0, AProducerConsumerScene2.queuedList.first, AProducerConsumerScene2.queuedList.last]¶ Remove one of these references in the displayed logical structure by, for instance, renaming the getter for the property storing the shared object or adding the @util.annotations.Visible(false) annotation before the getter.¶If you think it is safe to tareverse  all of these  references then add the annotattion @util.annotattions.AllowMultipleEqualReferences(false) nefore the getter.¶")]]]></diff>
  </Command>
  <Command __id="2660" _type="PauseCommand" date="Sat Feb 25 11:32:31 EST 2023" range="10s-20s" starttimestamp="1677312753280" timestamp="29998101">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[16552]]></pause>
    <nextType><![CDATA[Exception]]></nextType>
    <next><![CDATA[ExceptionCommand]]></next>
  </Command>
  <Command __id="2659" _type="ExceptionCommand" date="Sat Feb 25 11:32:31 EST 2023" starttimestamp="1677312753280" timestamp="29998101" type="Exception">
    <exceptionString><![CDATA[MADE TO COOK METHOD!!!!
First Checkpoint
Second checkpoint
Third checkpoint
class java.util.NoSuchElementException
java.util.NoSuchElementException
	at java.base/java.util.LinkedList.getFirst(LinkedList.java:248)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1415)
	at bus.uigen.sadapters.BeanToRecord.get(BeanToRecord.java:204)
	at bus.uigen.sadapters.BeanToRecord.get(BeanToRecord.java:189)
	at bus.uigen.oadapters.ClassAdapter.refreshChild(ClassAdapter.java:481)
	at bus.uigen.oadapters.ClassAdapter.refreshChildren(ClassAdapter.java:457)
	at bus.uigen.oadapters.ClassAdapter.refreshValueButNotAtomic(ClassAdapter.java:371)
	at bus.uigen.oadapters.VectorAdapter.refreshValue(VectorAdapter.java:1882)
	at bus.uigen.oadapters.ClassAdapter.refresh(ClassAdapter.java:672)
	at bus.uigen.oadapters.ClassAdapter.refreshChild(ClassAdapter.java:487)
	at bus.uigen.oadapters.ClassAdapter.refreshChildren(ClassAdapter.java:457)
	at bus.uigen.oadapters.ClassAdapter.refreshValueButNotAtomic(ClassAdapter.java:371)
	at bus.uigen.oadapters.ClassAdapter.refreshValue(ClassAdapter.java:357)
	at bus.uigen.oadapters.ObjectAdapter.implicitRefresh(ObjectAdapter.java:5406)
	at bus.uigen.uiFrame.doMyImplicitRefresh(uiFrame.java:4601)
	at bus.uigen.uiFrame.subDoImplicitRefresh(uiFrame.java:4702)
	at bus.uigen.uiFrame.doImplicitRefresh(uiFrame.java:4682)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1920)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:2002)
	at bus.uigen.controller.MethodInvocationManager.checkIfArgumentsAvailable(MethodInvocationManager.java:685)
	at bus.uigen.controller.MethodInvocationManager.init(MethodInvocationManager.java:453)
	at bus.uigen.controller.MethodInvocationManager.<init>(MethodInvocationManager.java:406)
	at bus.uigen.uiFrame.processMethod(uiFrame.java:3986)
	at bus.uigen.controller.menus.VirtualMethodMenuItem.processMethodMenuItem(VirtualMethodMenuItem.java:129)
	at bus.uigen.controller.menus.VirtualMethodMenuItem.actionPerformed(VirtualMethodMenuItem.java:111)
	at bus.uigen.widgets.swing.SwingMenuItemEventForwarder.actionPerformed(SwingMenuItemEventForwarder.java:30)
	at java.desktop/javax.swing.AbstractButton.fireActionPerformed(AbstractButton.java:1967)
	at java.desktop/javax.swing.AbstractButton$Handler.actionPerformed(AbstractButton.java:2308)
	at java.desktop/javax.swing.DefaultButtonModel.fireActionPerformed(DefaultButtonModel.java:405)
	at java.desktop/javax.swing.DefaultButtonModel.setPressed(DefaultButtonModel.java:262)
	at java.desktop/javax.swing.AbstractButton.doClick(AbstractButton.java:369)
	at java.desktop/javax.swing.plaf.basic.BasicMenuItemUI.doClick(BasicMenuItemUI.java:1020)
	at java.desktop/javax.swing.plaf.basic.BasicMenuItemUI$Handler.mouseReleased(BasicMenuItemUI.java:1064)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6636)
	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)
	at java.desktop/java.awt.Component.processEvent(Component.java:6401)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="2662" _type="PauseCommand" date="Sat Feb 25 11:32:57 EST 2023" range="20s-30s" starttimestamp="1677312753280" timestamp="30024153">
    <prevType><![CDATA[Exception]]></prevType>
    <prev><![CDATA[ExceptionCommand]]></prev>
    <pause><![CDATA[26052]]></pause>
    <nextType><![CDATA[Exception]]></nextType>
    <next><![CDATA[ExceptionCommand]]></next>
  </Command>
  <Command __id="2661" _type="ExceptionCommand" date="Sat Feb 25 11:32:57 EST 2023" starttimestamp="1677312753280" timestamp="30024153" type="Exception">
    <exceptionString><![CDATA[java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1415)
	at bus.uigen.sadapters.BeanToRecord.get(BeanToRecord.java:204)
	at bus.uigen.sadapters.BeanToRecord.get(BeanToRecord.java:189)
	at bus.uigen.oadapters.ClassAdapter.refreshChild(ClassAdapter.java:481)
	at bus.uigen.oadapters.ClassAdapter.refreshChildren(ClassAdapter.java:457)
	at bus.uigen.oadapters.ClassAdapter.refreshValueButNotAtomic(ClassAdapter.java:371)
	at bus.uigen.oadapters.VectorAdapter.refreshValue(VectorAdapter.java:1882)
	at bus.uigen.oadapters.ClassAdapter.refresh(ClassAdapter.java:672)
	at bus.uigen.oadapters.ClassAdapter.refreshChild(ClassAdapter.java:487)
	at bus.uigen.oadapters.ClassAdapter.refreshChildren(ClassAdapter.java:457)
	at bus.uigen.oadapters.ClassAdapter.refreshValueButNotAtomic(ClassAdapter.java:371)
	at bus.uigen.oadapters.ClassAdapter.refreshValue(ClassAdapter.java:357)
	at bus.uigen.oadapters.ObjectAdapter.implicitRefresh(ObjectAdapter.java:5406)
	at bus.uigen.uiFrame.doMyImplicitRefresh(uiFrame.java:4601)
	at bus.uigen.uiFrame.subDoImplicitRefresh(uiFrame.java:4702)
	at bus.uigen.uiFrame.doImplicitRefresh(uiFrame.java:4682)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1920)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:2002)
	at bus.uigen.controller.MethodInvocationManager.checkIfArgumentsAvailable(MethodInvocationManager.java:685)
	at bus.uigen.controller.MethodInvocationManager.init(MethodInvocationManager.java:453)
	at bus.uigen.controller.MethodInvocationManager.<init>(MethodInvocationManager.java:406)
	at bus.uigen.uiFrame.processMethod(uiFrame.java:3986)
	at bus.uigen.controller.menus.VirtualMethodMenuItem.processMethodMenuItem(VirtualMethodMenuItem.java:129)
	at bus.uigen.controller.menus.VirtualMethodMenuItem.actionPerformed(VirtualMethodMenuItem.java:111)
	at bus.uigen.widgets.swing.SwingMenuItemEventForwarder.actionPerformed(SwingMenuItemEventForwarder.java:30)
	at java.desktop/javax.swing.AbstractButton.fireActionPerformed(AbstractButton.java:1967)
	at java.desktop/javax.swing.AbstractButton$Handler.actionPerformed(AbstractButton.java:2308)
	at java.desktop/javax.swing.DefaultButtonModel.fireActionPerformed(DefaultButtonModel.java:405)
	at java.desktop/javax.swing.DefaultButtonModel.setPressed(DefaultButtonModel.java:262)
	at java.desktop/javax.swing.AbstractButton.doClick(AbstractButton.java:369)
	at java.desktop/javax.swing.plaf.basic.BasicMenuItemUI.doClick(BasicMenuItemUI.java:1020)
	at java.desktop/javax.swing.plaf.basic.BasicMenuItemUI$Handler.mouseReleased(BasicMenuItemUI.java:1064)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6636)
	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)
	at java.desktop/java.awt.Component.processEvent(Component.java:6401)
	at java.desktop/java.awt.Container.processEvent(Container.java:2263)
	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5012)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4844)
	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4919)
	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4548)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="2663" _type="ExceptionCommand" date="Sat Feb 25 11:32:57 EST 2023" starttimestamp="1677312753280" timestamp="30024167" type="Exception">
    <exceptionString><![CDATA[	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2307)
	at java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2764)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4844)
	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:772)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:721)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:715)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:391)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:95)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:745)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:743)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:391)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)
	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:742)
	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)
Caused by: java.util.NoSuchElementException
	at java.base/java.util.LinkedList.getFirst(LinkedList.java:248)
	... 70 more
class java.util.NoSuchElementException
java.util.NoSuchElementException
	at java.base/java.util.LinkedList.getLast(LinkedList.java:261)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1415)
	at bus.uigen.sadapters.BeanToRecord.get(BeanToRecord.java:204)
	at bus.uigen.sadapters.BeanToRecord.get(BeanToRecord.java:189)
	at bus.uigen.oadapters.ClassAdapter.refreshChild(ClassAdapter.java:481)
	at bus.uigen.oadapters.ClassAdapter.refreshChildren(ClassAdapter.java:457)
	at bus.uigen.oadapters.ClassAdapter.refreshValueButNotAtomic(ClassAdapter.java:371)
	at bus.uigen.oadapters.VectorAdapter.refreshValue(VectorAdapter.java:1882)
	at bus.uigen.oadapters.ClassAdapter.refresh(ClassAdapter.java:672)
	at bus.uigen.oadapters.ClassAdapter.refreshChild(ClassAdapter.java:487)
	at bus.uigen.oadapters.ClassAdapter.refreshChildren(ClassAdapter.java:457)
	at bus.uigen.oadapters.ClassAdapter.refreshValueButNotAtomic(ClassAdapter.java:371)
	at bus.uigen.oadapters.ClassAdapter.refreshValue(ClassAdapter.java:357)
	at bus.uigen.oadapters.ObjectAdapter.implicitRefresh(ObjectAdapter.java:5406)
	at bus.uigen.uiFrame.doMyImplicitRefresh(uiFrame.java:4601)
	at bus.uigen.uiFrame.subDoImplicitRefresh(uiFrame.java:4702)
	at bus.uigen.uiFrame.doImplicitRefresh(uiFrame.java:4682)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1920)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="2665" _type="PauseCommand" date="Sat Feb 25 11:32:59 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="30025720">
    <prevType><![CDATA[Exception]]></prevType>
    <prev><![CDATA[ExceptionCommand]]></prev>
    <pause><![CDATA[1553]]></pause>
    <nextType><![CDATA[Exception]]></nextType>
    <next><![CDATA[ExceptionCommand]]></next>
  </Command>
  <Command __id="2664" _type="ExceptionCommand" date="Sat Feb 25 11:32:59 EST 2023" starttimestamp="1677312753280" timestamp="30025720" type="Exception">
    <exceptionString><![CDATA[java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1415)
	at bus.uigen.sadapters.BeanToRecord.get(BeanToRecord.java:204)
	at bus.uigen.sadapters.BeanToRecord.get(BeanToRecord.java:189)
	at bus.uigen.oadapters.ClassAdapter.refreshChild(ClassAdapter.java:481)
	at bus.uigen.oadapters.ClassAdapter.refreshChildren(ClassAdapter.java:457)
	at bus.uigen.oadapters.ClassAdapter.refreshValueButNotAtomic(ClassAdapter.java:371)
	at bus.uigen.oadapters.VectorAdapter.refreshValue(VectorAdapter.java:1882)
	at bus.uigen.oadapters.ClassAdapter.refresh(ClassAdapter.java:672)
	at bus.uigen.oadapters.ClassAdapter.refreshChild(ClassAdapter.java:487)
	at bus.uigen.oadapters.ClassAdapter.refreshChildren(ClassAdapter.java:457)
	at bus.uigen.oadapters.ClassAdapter.refreshValueButNotAtomic(ClassAdapter.java:371)
	at bus.uigen.oadapters.ClassAdapter.refreshValue(ClassAdapter.java:357)
	at bus.uigen.oadapters.ObjectAdapter.implicitRefresh(ObjectAdapter.java:5406)
	at bus.uigen.uiFrame.doMyImplicitRefresh(uiFrame.java:4601)
	at bus.uigen.uiFrame.subDoImplicitRefresh(uiFrame.java:4702)
	at bus.uigen.uiFrame.doImplicitRefresh(uiFrame.java:4682)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1920)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:2002)
	at bus.uigen.controller.MethodInvocationManager.checkIfArgumentsAvailable(MethodInvocationManager.java:685)
	at bus.uigen.controller.MethodInvocationManager.init(MethodInvocationManager.java:453)
	at bus.uigen.controller.MethodInvocationManager.<init>(MethodInvocationManager.java:406)
	at bus.uigen.uiFrame.processMethod(uiFrame.java:3986)
	at bus.uigen.controller.menus.VirtualMethodMenuItem.processMethodMenuItem(VirtualMethodMenuItem.java:129)
	at bus.uigen.controller.menus.VirtualMethodMenuItem.actionPerformed(VirtualMethodMenuItem.java:111)
	at bus.uigen.widgets.swing.SwingMenuItemEventForwarder.actionPerformed(SwingMenuItemEventForwarder.java:30)
	at java.desktop/javax.swing.AbstractButton.fireActionPerformed(AbstractButton.java:1967)
	at java.desktop/javax.swing.AbstractButton$Handler.actionPerformed(AbstractButton.java:2308)
	at java.desktop/javax.swing.DefaultButtonModel.fireActionPerformed(DefaultButtonModel.java:405)
	at java.desktop/javax.swing.DefaultButtonModel.setPressed(DefaultButtonModel.java:262)
	at java.desktop/javax.swing.AbstractButton.doClick(AbstractButton.java:369)
	at java.desktop/javax.swing.plaf.basic.BasicMenuItemUI.doClick(BasicMenuItemUI.java:1020)
	at java.desktop/javax.swing.plaf.basic.BasicMenuItemUI$Handler.mouseReleased(BasicMenuItemUI.java:1064)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6636)
	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)
	at java.desktop/java.awt.Component.processEvent(Component.java:6401)
	at java.desktop/java.awt.Container.processEvent(Container.java:2263)
	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:5012)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2321)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4844)
	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4919)
	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4548)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="2666" _type="ExceptionCommand" date="Sat Feb 25 11:32:59 EST 2023" starttimestamp="1677312753280" timestamp="30025739" type="Exception">
    <exceptionString><![CDATA[	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2307)
	at java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2764)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4844)
	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:772)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:721)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:715)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:391)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:95)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:745)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:743)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:391)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:85)
	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:742)
	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)
Caused by: java.util.NoSuchElementException
	at java.base/java.util.LinkedList.getLast(LinkedList.java:261)
	... 70 more
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="2668" _type="PauseCommand" date="Sat Feb 25 11:33:00 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="30026991">
    <prevType><![CDATA[Exception]]></prevType>
    <prev><![CDATA[ExceptionCommand]]></prev>
    <pause><![CDATA[1252]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2667" _type="ShellCommand" date="Sat Feb 25 11:33:00 EST 2023" starttimestamp="1677312753280" timestamp="30026991" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2649" _type="DiffBasedFileOpenCommand" date="Sat Feb 25 11:32:05 EST 2023" docASTNodeCount="221" docActiveCodeLength="1639" docExpressionCount="148" docLength="1741" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="29971823">
    <filePath><![CDATA[C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\main\Main.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package main;¶¶import java.awt.Color;¶import java.lang.reflect.Method;¶¶import bus.uigen.OEFrame;¶import bus.uigen.ObjectEditor;¶import bus.uigen.attributes.AttributeNames;¶import graphics.AProducerConsumerScene;¶import graphics.AProducerConsumerScene2;¶import graphics.ProducerConsumerScene;¶import graphics.ProducerConsumerScene2;¶¶public class Main {¶	static ProducerConsumerScene2 scene = new AProducerConsumerScene2();¶	¶	public static void main(String[] args) {¶		animateScene();¶	}¶	¶	public static void animateScene() {¶		¶		//Adding labels and buttons inside object editor screen¶		ObjectEditor.confirmSelectedMethodParameters(false);¶		ObjectEditor.setMethodAttribute(AProducerConsumerScene"), Diff(INSERT,"2"), Diff(EQUAL,".class, "initScene", AttributeNames.TOOLBAR_METHOD, true);¶		ObjectEditor.setMethodAttribute(AProducerConsumerScene"), Diff(INSERT,"2"), Diff(EQUAL,".class, "initScene", AttributeNames.LABEL, "Init Scene");¶		¶		//Setting up init scene method in object editor¶		try {¶			Class[] initSceneArgTypes = {Integer.TYPE, Integer.TYPE};¶			Object[] initSceneDefaultArgs = {4, 4};¶			String[] initSceneArgNames = {"Number of Patrons", "Number of Chefs"};¶			Method initSceneMethod = AProducerConsumerScene"), Diff(INSERT,"2"), Diff(EQUAL,".class.getMethod("initScene", initSceneArgTypes);¶			ObjectEditor.registerDefaultParameterValues(initSceneMethod, initSceneDefaultArgs);¶			ObjectEditor.registerParameterNames(initSceneMethod, initSceneArgNames);¶		} catch (NoSuchMethodException e) {¶			e.printStackTrace();¶		} catch (SecurityException e) {¶			e.printStackTrace();¶		}¶		¶		¶		OEFrame editor = ObjectEditor.edit(scene);¶		editor.getDrawComponent().setBackground(Color.DARK_GRAY);¶		editor.getDrawPanel().setSize(450, 450);¶		editor.showDrawPanel();¶		¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package main;

import java.awt.Color;
import java.lang.reflect.Method;

import bus.uigen.OEFrame;
import bus.uigen.ObjectEditor;
import bus.uigen.attributes.AttributeNames;
import graphics.AProducerConsumerScene;
import graphics.AProducerConsumerScene2;
import graphics.ProducerConsumerScene;
import graphics.ProducerConsumerScene2;

public class Main {
	static ProducerConsumerScene2 scene = new AProducerConsumerScene2();
	
	public static void main(String[] args) {
		animateScene();
	}
	
	public static void animateScene() {
		
		//Adding labels and buttons inside object editor screen
		ObjectEditor.confirmSelectedMethodParameters(false);
		ObjectEditor.setMethodAttribute(AProducerConsumerScene2.class, "initScene", AttributeNames.TOOLBAR_METHOD, true);
		ObjectEditor.setMethodAttribute(AProducerConsumerScene2.class, "initScene", AttributeNames.LABEL, "Init Scene");
		
		//Setting up init scene method in object editor
		try {
			Class[] initSceneArgTypes = {Integer.TYPE, Integer.TYPE};
			Object[] initSceneDefaultArgs = {4, 4};
			String[] initSceneArgNames = {"Number of Patrons", "Number of Chefs"};
			Method initSceneMethod = AProducerConsumerScene2.class.getMethod("initScene", initSceneArgTypes);
			ObjectEditor.registerDefaultParameterValues(initSceneMethod, initSceneDefaultArgs);
			ObjectEditor.registerParameterNames(initSceneMethod, initSceneArgNames);
		} catch (NoSuchMethodException e) {
			e.printStackTrace();
		} catch (SecurityException e) {
			e.printStackTrace();
		}
		
		
		OEFrame editor = ObjectEditor.edit(scene);
		editor.getDrawComponent().setBackground(Color.DARK_GRAY);
		editor.getDrawPanel().setSize(450, 450);
		editor.showDrawPanel();
		
	}

}
]]></snapshot>
  </Command>
  <Command __id="2670" _type="PauseCommand" date="Sat Feb 25 11:33:04 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="30031169">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[4178]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2671" _type="MoveCaretCommand" caretOffset="2055" date="Sat Feb 25 11:33:04 EST 2023" docOffset="2935" starttimestamp="1677312753280" timestamp="30031343" />
  <Command __id="2673" _type="PauseCommand" date="Sat Feb 25 11:33:13 EST 2023" range="5s-10s" starttimestamp="1677312753280" timestamp="30040035">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[8692]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2672" _type="MoveCaretCommand" caretOffset="5884" date="Sat Feb 25 11:33:13 EST 2023" docOffset="6764" starttimestamp="1677312753280" timestamp="30040035" />
  <Command __id="2674" _type="MoveCaretCommand" caretOffset="5884" date="Sat Feb 25 11:33:13 EST 2023" docOffset="6764" starttimestamp="1677312753280" timestamp="30040035" />
  <Command __id="2675" _type="SelectTextCommand" caretOffset="5887" date="Sat Feb 25 11:33:13 EST 2023" end="5887" start="5882" starttimestamp="1677312753280" timestamp="30040181" />
  <Command __id="2676" _type="SelectTextCommand" caretOffset="5887" date="Sat Feb 25 11:33:13 EST 2023" end="5887" start="5882" starttimestamp="1677312753280" timestamp="30040181" />
  <Command __id="2677" _type="SelectTextCommand" caretOffset="5903" date="Sat Feb 25 11:33:13 EST 2023" end="5903" start="5860" starttimestamp="1677312753280" timestamp="30040325" />
  <Command __id="2678" _type="SelectTextCommand" caretOffset="5903" date="Sat Feb 25 11:33:13 EST 2023" end="5903" start="5860" starttimestamp="1677312753280" timestamp="30040325" />
  <Command __id="2680" _type="PauseCommand" date="Sat Feb 25 11:34:19 EST 2023" range="1m-2m" starttimestamp="1677312753280" timestamp="30106250">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[65925]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2679" _type="MoveCaretCommand" caretOffset="5901" date="Sat Feb 25 11:34:19 EST 2023" docOffset="6781" starttimestamp="1677312753280" timestamp="30106250" />
  <Command __id="2681" _type="MoveCaretCommand" caretOffset="5901" date="Sat Feb 25 11:34:19 EST 2023" docOffset="6781" starttimestamp="1677312753280" timestamp="30106250" />
  <Command __id="2669" _type="DiffBasedFileOpenCommand" date="Sat Feb 25 11:33:04 EST 2023" docASTNodeCount="1586" docActiveCodeLength="9320" docExpressionCount="1092" docLength="10250" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="30031169">
    <filePath><![CDATA[C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\graphics\AProducerConsumerScene2.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package graphics;¶¶import java.util.ArrayList;¶import java.util.LinkedList;¶import java.util.List;¶import java.util.Queue;¶¶import animations.ACookingPlateAnimator;¶import animations.ACookingPlateCommand;¶import animations.AServingPlateAnimator;¶import animations.AServingPlateCommand;¶import animations.CookingPlateAnimator;¶import animations.ServingPlateAnimator;¶import bus.uigen.OEFrame;¶import bus.uigen.ObjectEditor;¶import bus.uigen.shapes.ALineModel;¶import bus.uigen.shapes.AStringModel;¶import bus.uigen.shapes.AnImageModel;¶import bus.uigen.shapes.OEShapeModel;¶import shapes.FlexibleTextShape;¶import util.annotations.EditablePropertyNames;¶import util.annotations.Label;¶import util.annotations.PropertyNames;¶import util.annotations.StructurePattern;¶import util.annotations.StructurePatternNames;¶import util.annotations.Visible;¶import util.misc.ThreadSupport;¶¶import java.awt.Color;¶¶@StructurePattern(StructurePatternNames.BEAN_PATTERN)¶@PropertyNames({¶	"patronList",¶	"chefList",¶	"buffer",¶	"queuedList",¶	"bellsList",¶	"queueBellList"¶})¶@EditablePropertyNames({¶})¶public class AProducerConsumerScene2 implements ProducerConsumerScene2 {¶	¶	//Avatar offsets inside scene¶	int[] chefXValues = {120,-50,-50,120};¶	int[] chefYValues = {-50,35,210,320};¶	int[] patronXValues = {650,850,850,650};¶	int[] patronYValues = {-50,35,220,320};¶	int[] bellXValues = {680,880,880,680};¶	int[] bellYValues = {75,160,345,445};¶	int INIT_HEAD_Y = 60;¶	int INIT_HEAD_X = 163;¶	int INIT_HEAD_HEIGHT = 90;¶	int INIT_HEAD_WIDTH = 80;¶	int PLATE_OFFSET_X = 30;¶	int PLATE_OFFSET_Y = 10;¶	int PAUSE = 5;¶	¶	//Booleans that help with the functionality of the below methods¶	boolean INIT_COOK = true;¶	boolean full = false;¶	int fullPlateOffset = -5;¶	¶	//Defining the chef and patron images¶	String[] chefImages = {"images/0.png","images/1.png","images/2.png","images/3.png"};¶	String[] patronImages = {"images/4.png", "images/5.png", "images/6.png", "images/7.png"};¶	¶	//Buffer arrays¶	int[] bufferXValues = {625, 680, 680, 620, 535, 460, 460, 535};¶	int[] bufferYValues = {200, 275, 365, 425, 425, 365, 275, 200};¶	boolean[] isFull = {false, false, false, false, false, false, false, false};¶	¶	//The properties of our class¶	List<APatron> patronList;¶	List<AChef> chefList;¶	BoundedBuffer buffer = new ABoundedBuffer();¶	¶	//This list will keep a track of the plates that enter the buffer so that FIFO¶	Queue<APlate> queuedList;¶	¶	OEShapeModel[] lineArray = {buffer.getLineTwo(), buffer.getLineThree(), buffer.getLineFour(), ¶								buffer.getLineFive(), buffer.getLineSix(), buffer.getLineSeven(), ¶								buffer.getLineEight(), buffer.getLineOne()};¶	¶	List<ABell> bellsList;¶	Queue<ABell> queueBellList;¶	int[] bellValues = {127, 212, 397, 497};¶	Queue<Integer> bellIntegerList;¶	¶	ACookingPlateCommand cookingCommand;¶	CookingPlateAnimator cookingAnimator;¶	¶	AServingPlateCommand servingCommand;¶	ServingPlateAnimator servingAnimator;¶	¶	//The constructor sets the scene with one chef, patron, a buffer, and a plate (not visible)¶	public AProducerConsumerScene2() {¶		patronList = new ArrayList<APatron>();¶		chefList = new ArrayList<AChef>();¶		//buffer = new ABoundedBuffer();¶		¶		queuedList = new LinkedList<APlate>();¶		bellsList = new ArrayList<ABell>();¶		queueBellList = new LinkedList<ABell>();¶		bellIntegerList = new LinkedList<Integer>();¶		¶		patronList.add(0, new APatron());¶		OEShapeModel initPatronHead = new AnImageModel(patronImages[0]);¶		initPatronHead.setX(INIT_HEAD_X);¶		initPatronHead.setY(INIT_HEAD_Y);¶		initPatronHead.setHeight(INIT_HEAD_HEIGHT);¶		initPatronHead.setWidth(INIT_HEAD_WIDTH);¶		patronList.get(0).patron.setHead(initPatronHead);¶		patronList.get(0).move(patronXValues[0], patronYValues[0]);¶		¶		chefList.add(0, new AChef());¶		OEShapeModel initChefHead = new AnImageModel(chefImages[0]);¶		initChefHead.setX(INIT_HEAD_X);¶		initChefHead.setY(INIT_HEAD_Y);¶		initChefHead.setHeight(INIT_HEAD_HEIGHT);¶		initChefHead.setWidth(INIT_HEAD_WIDTH);¶		chefList.get(0).chef.setHead(initChefHead);¶		chefList.get(0).move(chefXValues[0], chefYValues[0]);¶		¶		queuedList.add(new APlate());¶		queuedList.peek().getPlate().setHeight(0);¶		queuedList.peek().getPlate().setWidth(0);¶		¶		cookingAnimator = new ACookingPlateAnimator();¶		servingAnimator = new AServingPlateAnimator();¶		¶		bellsList.add(new ABell());¶		bellsList.get(0).getBell().setHeight(0);¶		bellsList.get(0).getBell().setWidth(0);¶		¶		queueBellList.add(new ABell());¶		queueBellList.peek().getBell().setHeight(0);¶		queueBellList.peek().getBell().setWidth(0);¶		¶		bellIntegerList.add(0);¶	}¶	¶	//Producer consumer methods¶	¶	//Init Scene sets the number of patrons and chefs in the scene¶	@Label("Init Scene")¶	public void initScene(int patronAmount, int chefAmount) {¶		bellsList.clear();¶		for (int i=0; i<patronAmount; i++) { ¶			APatron patron = new APatron();¶			patronList.add(i, patron);¶			OEShapeModel newHead = new AnImageModel(patronImages[i]);¶			patron.patron.setHead(newHead); ¶			newHead.setX(INIT_HEAD_X); ¶			newHead.setY(INIT_HEAD_Y);¶			newHead.setHeight(INIT_HEAD_HEIGHT);¶			newHead.setWidth(INIT_HEAD_WIDTH);¶			patron.move(patronXValues[i], patronYValues[i]);¶			¶			bellsList.add(new ABell());¶			bellsList.get(i).move(bellXValues[i], bellYValues[i]);¶		}¶		for (int i=0; i<chefAmount; i++) {¶			AChef chef = new AChef();¶			chefList.add(i, chef);¶			OEShapeModel newHead = new AnImageModel(chefImages[i]);¶			chef.chef.setHead(newHead);¶			newHead.setX(INIT_HEAD_X); ¶			newHead.setY(INIT_HEAD_Y);¶			newHead.setHeight(INIT_HEAD_HEIGHT);¶			newHead.setWidth(INIT_HEAD_WIDTH);¶			chef.move(chefXValues[i], chefYValues[i]);¶		}¶	}¶	¶	//Once the head of an avatar is chosen, it makes the plate that they "cook" appear¶	public void cook(OEShapeModel head) {¶		System.out.println("MADE TO COOK METHOD!!!!");¶		if (INIT_COOK) {¶			INIT_COOK=!INIT_COOK;¶			queuedList.remove();¶		}¶		¶		int headX = head.getCenterX();¶		int headY = head.getCenterY();¶		¶		System.out.println("First Checkpoint");¶		APlate newPlate = new APlate();¶		newPlate.getPlate().setHeight(0);¶		newPlate.getPlate().setWidth(0);¶		¶		if (full) {¶			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y+fullPlateOffset);¶			fullPlateOffset = fullPlateOffset - 5;¶		} else {¶			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y);¶		}¶		¶		System.out.println("Second checkpoint");¶		cookingCommand = new ACookingPlateCommand(cookingAnimator, newPlate, 40, 15);¶		Thread thread = new Thread (cookingCommand);¶		thread.start();¶		System.out.println("Third checkpoint");¶	}¶	¶	public void serve(APlate plate) {¶		//Checks to see if the buffer is full. If it is, then can't serve.¶		resetLineColors();¶		if(checkIfFull()) {¶			resetLineColors();¶			return;¶		}¶		¶		queuedList.add(plate);¶		¶		int workingPlatePlace = queuedList.size();¶		FlexibleTextShape platePlace = new AStringModel(Integer.toString(workingPlatePlace));¶		plate.setText(platePlace);¶		¶		changeLineColors(workingPlatePlace);¶		servingCommand = new AServingPlateCommand(servingAnimator,plate,PAUSE, bufferXValues[workingPlatePlace], bufferYValues[workingPlatePlace]);¶		Thread thread = new Thread(servingCommand);¶		thread.start();¶		isFull[workingPlatePlace] = true;¶	}¶	¶	public void order(OEShapeModel bell) {¶		if(checkIfFull()) {¶			resetLineColors();¶			resetBuffer();¶		}¶		bellIntegerList.add(0);¶		int bellPlace = findBell(bell.getCenterY());¶		bellsList.get(bellPlace).getText().setText(String.valueOf(bellIntegerList.size()-1));¶		¶		int platePlace = findFirstAvailablePlate();¶		//servingCommand = new AServingPlateCommand(servingAnimator,plateList.get(platePlace),PAUSE, bell.getCenterX() , bell.getCenterY());¶		Thread thread = new Thread(servingCommand);¶		thread.start();¶		¶		//cookingCommand = new ACookingPlateCommand(cookingAnimator, plateList.get(0), 0, 15);¶		Thread eatingThread = new Thread (cookingCommand);¶		eatingThread.start();¶		//plateList.get(0).getText().setText("");¶	}¶	¶	public void eat() {¶		//plateList.remove(0);¶	}¶	¶	@Override¶	@Visible(false)¶	public int findBell(int centerY) {¶		for(int i=0; i<bellsList.size();i++) {¶			if(bellsList.get(i).getBell().getCenterY() == centerY) {¶				return i;¶			}¶		}¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public int findFirstAvailablePlate() {¶		for (int i=0; i<isFull.length;i++) {¶			if(isFull[i] == true) {¶				return i;¶			}¶		}¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public void resetBuffer() {¶		¶		for (int i=0; i<isFull.length;i++) {¶			isFull[i] = false;¶		}¶	}¶	¶	@Override¶	@Visible(false)¶	public int findPatron(OEShapeModel patronHead) {¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public boolean checkIfFull() {¶		for (int i=0; i<isFull.length;i++) {¶			if (isFull[i] == false) {¶				full = false;¶				return full;¶			}¶		}¶		full = true;¶		return full;¶	}¶	¶	@Override¶	@Visible(false)¶	public void changeLineColors(int workingPlatePlace) {¶		if(workingPlatePlace == lineArray.length-1) {¶			lineArray[workingPlatePlace].setColor(Color.GREEN);¶			lineArray[0].setColor(Color.GREEN);¶		} else {¶			lineArray[workingPlatePlace].setColor(Color.GREEN);¶			lineArray[workingPlatePlace+1].setColor(Color.GREEN);¶		}¶	}¶	¶	¶	@Override¶	@Visible(false)¶	public void resetLineColors() {¶		for (int i=0; i<lineArray.length; i++) {¶			lineArray[i].setColor(Color.WHITE);¶		}¶	}¶	¶	//Getters for properties of the scene¶	@Override¶	public List<AChef> getChefList() {¶		return chefList;¶	}¶	¶	@Override¶	public List<APatron> getPatronList() {¶		return patronList;¶	}¶	¶	@Override¶	public BoundedBuffer getBuffer() {¶		return buffer;¶	}¶	¶	@Override¶	@util.annotations.Visible(false)¶	public Queue<APlate> getQueuedList() {¶		return queuedList;¶	}¶	¶	@Override¶	public List<ABell> getBellsList() {¶		return bellsList;¶	}¶	¶	@Override¶	@Visible(false)¶	public Queue<ABell> getQueueBellList() {¶		return queueBellList;¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="2683" _type="PauseCommand" date="Sat Feb 25 11:35:13 EST 2023" range="30s-1m" starttimestamp="1677312753280" timestamp="30159875">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[53625]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2684" _type="MoveCaretCommand" caretOffset="965" date="Sat Feb 25 11:35:13 EST 2023" docOffset="1269" starttimestamp="1677312753280" timestamp="30160416" />
  <Command __id="2686" _type="PauseCommand" date="Sat Feb 25 11:35:18 EST 2023" range="5s-10s" starttimestamp="1677312753280" timestamp="30165646">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[5230]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2685" _type="SelectTextCommand" caretOffset="135" date="Sat Feb 25 11:35:18 EST 2023" end="205" start="135" starttimestamp="1677312753280" timestamp="30165646" />
  <Command __id="2687" _type="SelectTextCommand" caretOffset="135" date="Sat Feb 25 11:35:18 EST 2023" end="205" start="135" starttimestamp="1677312753280" timestamp="30165646" />
  <Command __id="2688" _type="CopyCommand" date="Sat Feb 25 11:35:19 EST 2023" starttimestamp="1677312753280" timestamp="30166222" />
  <Command __id="2689" _type="MoveCaretCommand" caretOffset="62" date="Sat Feb 25 11:35:20 EST 2023" docOffset="366" starttimestamp="1677312753280" timestamp="30166862" />
  <Command __id="2690" _type="MoveCaretCommand" caretOffset="62" date="Sat Feb 25 11:35:20 EST 2023" docOffset="366" starttimestamp="1677312753280" timestamp="30166862" />
  <Command __id="2682" _type="DiffBasedFileOpenCommand" date="Sat Feb 25 11:35:13 EST 2023" docASTNodeCount="221" docActiveCodeLength="1639" docExpressionCount="148" docLength="1741" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="30159875">
    <filePath><![CDATA[C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\main\Main.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package main;¶¶import java.awt.Color;¶import java.lang.reflect.Method;¶¶import bus.uigen.OEFrame;¶import bus.uigen.ObjectEditor;¶import bus.uigen.attributes.AttributeNames;¶import graphics.AProducerConsumerScene;¶import graphics.AProducerConsumerScene2;¶import graphics.ProducerConsumerScene;¶import graphics.ProducerConsumerScene2;¶¶public class Main {¶	static ProducerConsumerScene2 scene = new AProducerConsumerScene2();¶	¶	public static void main(String[] args) {¶		animateScene();¶	}¶	¶	public static void animateScene() {¶		¶		//Adding labels and buttons inside object editor screen¶		ObjectEditor.confirmSelectedMethodParameters(false);¶		ObjectEditor.setMethodAttribute(AProducerConsumerScene2.class, "initScene", AttributeNames.TOOLBAR_METHOD, true);¶		ObjectEditor.setMethodAttribute(AProducerConsumerScene2.class, "initScene", AttributeNames.LABEL, "Init Scene");¶		¶		//Setting up init scene method in object editor¶		try {¶			Class[] initSceneArgTypes = {Integer.TYPE, Integer.TYPE};¶			Object[] initSceneDefaultArgs = {4, 4};¶			String[] initSceneArgNames = {"Number of Patrons", "Number of Chefs"};¶			Method initSceneMethod = AProducerConsumerScene2.class.getMethod("initScene", initSceneArgTypes);¶			ObjectEditor.registerDefaultParameterValues(initSceneMethod, initSceneDefaultArgs);¶			ObjectEditor.registerParameterNames(initSceneMethod, initSceneArgNames);¶		} catch (NoSuchMethodException e) {¶			e.printStackTrace();¶		} catch (SecurityException e) {¶			e.printStackTrace();¶		}¶		¶		¶		OEFrame editor = ObjectEditor.edit(scene);¶		editor.getDrawComponent().setBackground(Color.DARK_GRAY);¶		editor.getDrawPanel().setSize(450, 450);¶		editor.showDrawPanel();¶		¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="2692" _type="PauseCommand" date="Sat Feb 25 11:35:21 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="30168709">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1847]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2691" _type="DiffBasedFileOpenCommand" date="Sat Feb 25 11:35:21 EST 2023" docASTNodeCount="151" docActiveCodeLength="877" docExpressionCount="66" docLength="877" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="30168709">
    <filePath><![CDATA[C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\graphics\ProducerConsumerScene2.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package graphics;¶¶import java.util.List;¶import java.util.Queue;¶¶import bus.uigen.shapes.AnImageModel;¶import bus.uigen.shapes.OEShapeModel;¶¶public interface ProducerConsumerScene2 {¶	public List<AChef> getChefList();¶	public List<APatron> getPatronList();¶	public Queue<APlate> getQueuedList();¶	public BoundedBuffer getBuffer();¶	public Queue<ABell> getQueueBellList();¶	public void initScene(int patronAmount, int chefAmount);¶	public void cook(OEShapeModel head);¶	public void serve(APlate plate);¶	public boolean checkIfFull();¶	public void changeLineColors(int workingPlatePlace);¶	public void resetLineColors();¶	public int findPatron(OEShapeModel patronHead);¶	public List<ABell> getBellsList();¶	public int findBell(int centerY);¶	public void order(OEShapeModel bell);¶	public int findFirstAvailablePlate();¶	public void resetBuffer();¶}¶")]]]></diff>
  </Command>
  <Command __id="2693" _type="MoveCaretCommand" caretOffset="413" date="Sat Feb 25 11:35:22 EST 2023" docOffset="518" starttimestamp="1677312753280" timestamp="30168795" />
  <Command __id="2695" _type="MoveCaretCommand" caretOffset="5901" date="Sat Feb 25 11:35:23 EST 2023" docOffset="6781" starttimestamp="1677312753280" timestamp="30169744" />
  <Command __id="2697" _type="PauseCommand" date="Sat Feb 25 11:35:26 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="30172971">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3227]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2696" _type="MoveCaretCommand" caretOffset="9365" date="Sat Feb 25 11:35:26 EST 2023" docOffset="10245" starttimestamp="1677312753280" timestamp="30172971" />
  <Command __id="2698" _type="MoveCaretCommand" caretOffset="9365" date="Sat Feb 25 11:35:26 EST 2023" docOffset="10245" starttimestamp="1677312753280" timestamp="30172971" />
  <Command __id="2700" _type="InsertStringCommand" date="Sat Feb 25 11:35:26 EST 2023" starttimestamp="1677312753280" timestamp="30173238" timestamp2="30173238">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2701" _type="InsertStringCommand" date="Sat Feb 25 11:35:26 EST 2023" starttimestamp="1677312753280" timestamp="30173238" timestamp2="30173238">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2703" _type="InsertStringCommand" date="Sat Feb 25 11:35:26 EST 2023" starttimestamp="1677312753280" timestamp="30173391" timestamp2="30173391">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2704" _type="InsertStringCommand" date="Sat Feb 25 11:35:26 EST 2023" starttimestamp="1677312753280" timestamp="30173392" timestamp2="30173392">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2706" _type="PasteCommand" date="Sat Feb 25 11:35:27 EST 2023" starttimestamp="1677312753280" timestamp="30174024" />
  <Command __id="2708" _type="PauseCommand" date="Sat Feb 25 11:35:29 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="30175993">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[1969]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2707" _type="SelectTextCommand" caretOffset="9433" date="Sat Feb 25 11:35:29 EST 2023" end="9433" start="9418" starttimestamp="1677312753280" timestamp="30175993" />
  <Command __id="2709" _type="SelectTextCommand" caretOffset="9433" date="Sat Feb 25 11:35:29 EST 2023" end="9433" start="9418" starttimestamp="1677312753280" timestamp="30175993" />
  <Command __id="2711" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 11:35:29 EST 2023" starttimestamp="1677312753280" timestamp="30176233" />
  <Command __id="2712" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 11:35:29 EST 2023" starttimestamp="1677312753280" timestamp="30176233" />
  <Command __id="2714" _type="PauseCommand" date="Sat Feb 25 11:35:31 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="30177820">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1586]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="2717" _type="ProgramExecutionEvent" className="(Unknown)" date="Sat Feb 25 11:35:32 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1677312753280" timestamp="30179246" type="Debug" />
  <Command __id="2719" _type="ProgramExecutionEvent" className="/ProducersConsumersV3/src/main/Main.java" date="Sat Feb 25 11:35:32 EST 2023" kind="HitBreakPoint" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="30179246" type="Run" />
  <Command __id="2720" _type="ProgramExecutionEvent" className="(Unknown)" date="Sat Feb 25 11:35:32 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1677312753280" timestamp="30179246" type="Debug" />
  <Command __id="2721" _type="ProgramExecutionEvent" className="/ProducersConsumersV3/src/main/Main.java" date="Sat Feb 25 11:35:32 EST 2023" kind="HitBreakPoint" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="30179246" type="Run" />
  <Command __id="2722" _type="MoveCaretCommand" caretOffset="9418" date="Sat Feb 25 11:35:33 EST 2023" docOffset="10298" starttimestamp="1677312753280" timestamp="30180169" />
  <Command __id="2723" _type="MoveCaretCommand" caretOffset="9418" date="Sat Feb 25 11:35:33 EST 2023" docOffset="10298" starttimestamp="1677312753280" timestamp="30180169" />
  <Command __id="2725" _type="InsertStringCommand" date="Sat Feb 25 11:35:34 EST 2023" starttimestamp="1677312753280" timestamp="30181050" timestamp2="30181050">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="2726" _type="InsertStringCommand" date="Sat Feb 25 11:35:34 EST 2023" starttimestamp="1677312753280" timestamp="30181050" timestamp2="30181050">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="2728" _type="InsertStringCommand" date="Sat Feb 25 11:35:34 EST 2023" starttimestamp="1677312753280" timestamp="30181244" timestamp2="30181244">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2729" _type="InsertStringCommand" date="Sat Feb 25 11:35:34 EST 2023" starttimestamp="1677312753280" timestamp="30181244" timestamp2="30181244">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2731" _type="InsertStringCommand" date="Sat Feb 25 11:35:34 EST 2023" starttimestamp="1677312753280" timestamp="30181393" timestamp2="30181393">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2732" _type="InsertStringCommand" date="Sat Feb 25 11:35:34 EST 2023" starttimestamp="1677312753280" timestamp="30181393" timestamp2="30181393">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2734" _type="InsertStringCommand" date="Sat Feb 25 11:35:34 EST 2023" starttimestamp="1677312753280" timestamp="30181446" timestamp2="30181446">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="2735" _type="InsertStringCommand" date="Sat Feb 25 11:35:34 EST 2023" starttimestamp="1677312753280" timestamp="30181446" timestamp2="30181446">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="2737" _type="InsertStringCommand" date="Sat Feb 25 11:35:34 EST 2023" starttimestamp="1677312753280" timestamp="30181561" timestamp2="30181561">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2738" _type="InsertStringCommand" date="Sat Feb 25 11:35:34 EST 2023" starttimestamp="1677312753280" timestamp="30181561" timestamp2="30181561">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2740" _type="InsertStringCommand" date="Sat Feb 25 11:35:34 EST 2023" starttimestamp="1677312753280" timestamp="30181704" timestamp2="30181704">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="2741" _type="InsertStringCommand" date="Sat Feb 25 11:35:34 EST 2023" starttimestamp="1677312753280" timestamp="30181704" timestamp2="30181704">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="2743" _type="InsertStringCommand" date="Sat Feb 25 11:35:35 EST 2023" starttimestamp="1677312753280" timestamp="30182088" timestamp2="30182088">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="2744" _type="InsertStringCommand" date="Sat Feb 25 11:35:35 EST 2023" starttimestamp="1677312753280" timestamp="30182088" timestamp2="30182088">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="2746" _type="InsertStringCommand" date="Sat Feb 25 11:35:35 EST 2023" starttimestamp="1677312753280" timestamp="30182224" timestamp2="30182224">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2747" _type="InsertStringCommand" date="Sat Feb 25 11:35:35 EST 2023" starttimestamp="1677312753280" timestamp="30182224" timestamp2="30182224">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2749" _type="InsertStringCommand" date="Sat Feb 25 11:35:35 EST 2023" starttimestamp="1677312753280" timestamp="30182297" timestamp2="30182297">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2750" _type="InsertStringCommand" date="Sat Feb 25 11:35:35 EST 2023" starttimestamp="1677312753280" timestamp="30182297" timestamp2="30182297">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2752" _type="InsertStringCommand" date="Sat Feb 25 11:35:35 EST 2023" starttimestamp="1677312753280" timestamp="30182446" timestamp2="30182446">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2753" _type="InsertStringCommand" date="Sat Feb 25 11:35:35 EST 2023" starttimestamp="1677312753280" timestamp="30182448" timestamp2="30182448">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2755" _type="InsertStringCommand" date="Sat Feb 25 11:35:36 EST 2023" starttimestamp="1677312753280" timestamp="30182845" timestamp2="30182845">
    <data><![CDATA[<]]></data>
  </Command>
  <Command __id="2756" _type="InsertStringCommand" date="Sat Feb 25 11:35:36 EST 2023" starttimestamp="1677312753280" timestamp="30182845" timestamp2="30182845">
    <data><![CDATA[<]]></data>
  </Command>
  <Command __id="2758" _type="InsertStringCommand" date="Sat Feb 25 11:35:36 EST 2023" starttimestamp="1677312753280" timestamp="30183565" timestamp2="30183565">
    <data><![CDATA[A]]></data>
  </Command>
  <Command __id="2759" _type="InsertStringCommand" date="Sat Feb 25 11:35:36 EST 2023" starttimestamp="1677312753280" timestamp="30183565" timestamp2="30183565">
    <data><![CDATA[A]]></data>
  </Command>
  <Command __id="2761" _type="InsertStringCommand" date="Sat Feb 25 11:35:37 EST 2023" starttimestamp="1677312753280" timestamp="30183884" timestamp2="30183884">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="2762" _type="InsertStringCommand" date="Sat Feb 25 11:35:37 EST 2023" starttimestamp="1677312753280" timestamp="30183884" timestamp2="30183884">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="2764" _type="InsertStringCommand" date="Sat Feb 25 11:35:37 EST 2023" starttimestamp="1677312753280" timestamp="30184228" timestamp2="30184228">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="2765" _type="InsertStringCommand" date="Sat Feb 25 11:35:37 EST 2023" starttimestamp="1677312753280" timestamp="30184228" timestamp2="30184228">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="2767" _type="InsertStringCommand" date="Sat Feb 25 11:35:37 EST 2023" starttimestamp="1677312753280" timestamp="30184325" timestamp2="30184325">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="2768" _type="InsertStringCommand" date="Sat Feb 25 11:35:37 EST 2023" starttimestamp="1677312753280" timestamp="30184326" timestamp2="30184326">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="2770" _type="InsertStringCommand" date="Sat Feb 25 11:35:37 EST 2023" starttimestamp="1677312753280" timestamp="30184459" timestamp2="30184459">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2771" _type="InsertStringCommand" date="Sat Feb 25 11:35:37 EST 2023" starttimestamp="1677312753280" timestamp="30184459" timestamp2="30184459">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2773" _type="InsertStringCommand" date="Sat Feb 25 11:35:37 EST 2023" starttimestamp="1677312753280" timestamp="30184510" timestamp2="30184510">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2774" _type="InsertStringCommand" date="Sat Feb 25 11:35:37 EST 2023" starttimestamp="1677312753280" timestamp="30184510" timestamp2="30184510">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2775" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sat Feb 25 11:35:37 EST 2023" starttimestamp="1677312753280" timestamp="30184643" />
  <Command __id="2776" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sat Feb 25 11:35:37 EST 2023" starttimestamp="1677312753280" timestamp="30184643" />
  <Command __id="2778" _type="InsertStringCommand" date="Sat Feb 25 11:35:38 EST 2023" starttimestamp="1677312753280" timestamp="30184857" timestamp2="30184857">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2779" _type="InsertStringCommand" date="Sat Feb 25 11:35:38 EST 2023" starttimestamp="1677312753280" timestamp="30184857" timestamp2="30184857">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2781" _type="InsertStringCommand" date="Sat Feb 25 11:35:38 EST 2023" starttimestamp="1677312753280" timestamp="30185276" timestamp2="30185276">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="2782" _type="InsertStringCommand" date="Sat Feb 25 11:35:38 EST 2023" starttimestamp="1677312753280" timestamp="30185277" timestamp2="30185277">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="2784" _type="InsertStringCommand" date="Sat Feb 25 11:35:38 EST 2023" starttimestamp="1677312753280" timestamp="30185391" timestamp2="30185391">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2785" _type="InsertStringCommand" date="Sat Feb 25 11:35:38 EST 2023" starttimestamp="1677312753280" timestamp="30185391" timestamp2="30185391">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2787" _type="InsertStringCommand" date="Sat Feb 25 11:35:38 EST 2023" starttimestamp="1677312753280" timestamp="30185494" timestamp2="30185494">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2788" _type="InsertStringCommand" date="Sat Feb 25 11:35:38 EST 2023" starttimestamp="1677312753280" timestamp="30185496" timestamp2="30185496">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2790" _type="InsertStringCommand" date="Sat Feb 25 11:35:38 EST 2023" starttimestamp="1677312753280" timestamp="30185627" timestamp2="30185627">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2791" _type="InsertStringCommand" date="Sat Feb 25 11:35:38 EST 2023" starttimestamp="1677312753280" timestamp="30185628" timestamp2="30185628">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2793" _type="InsertStringCommand" date="Sat Feb 25 11:35:39 EST 2023" starttimestamp="1677312753280" timestamp="30185732" timestamp2="30185732">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2794" _type="InsertStringCommand" date="Sat Feb 25 11:35:39 EST 2023" starttimestamp="1677312753280" timestamp="30185732" timestamp2="30185732">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2796" _type="InsertStringCommand" date="Sat Feb 25 11:35:39 EST 2023" starttimestamp="1677312753280" timestamp="30185820" timestamp2="30185820">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="2797" _type="InsertStringCommand" date="Sat Feb 25 11:35:39 EST 2023" starttimestamp="1677312753280" timestamp="30185820" timestamp2="30185820">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="2799" _type="InsertStringCommand" date="Sat Feb 25 11:35:39 EST 2023" starttimestamp="1677312753280" timestamp="30185953" timestamp2="30185953">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2800" _type="InsertStringCommand" date="Sat Feb 25 11:35:39 EST 2023" starttimestamp="1677312753280" timestamp="30185953" timestamp2="30185953">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2802" _type="InsertStringCommand" date="Sat Feb 25 11:35:39 EST 2023" starttimestamp="1677312753280" timestamp="30186283" timestamp2="30186283">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2803" _type="InsertStringCommand" date="Sat Feb 25 11:35:39 EST 2023" starttimestamp="1677312753280" timestamp="30186284" timestamp2="30186284">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2805" _type="InsertStringCommand" date="Sat Feb 25 11:35:39 EST 2023" starttimestamp="1677312753280" timestamp="30186377" timestamp2="30186377">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2806" _type="InsertStringCommand" date="Sat Feb 25 11:35:39 EST 2023" starttimestamp="1677312753280" timestamp="30186377" timestamp2="30186377">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2808" _type="InsertStringCommand" date="Sat Feb 25 11:35:39 EST 2023" starttimestamp="1677312753280" timestamp="30186470" timestamp2="30186470">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="2809" _type="InsertStringCommand" date="Sat Feb 25 11:35:39 EST 2023" starttimestamp="1677312753280" timestamp="30186470" timestamp2="30186470">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="2811" _type="InsertStringCommand" date="Sat Feb 25 11:35:39 EST 2023" starttimestamp="1677312753280" timestamp="30186532" timestamp2="30186532">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2812" _type="InsertStringCommand" date="Sat Feb 25 11:35:39 EST 2023" starttimestamp="1677312753280" timestamp="30186532" timestamp2="30186532">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2814" _type="InsertStringCommand" date="Sat Feb 25 11:35:40 EST 2023" starttimestamp="1677312753280" timestamp="30186806" timestamp2="30186806">
    <data><![CDATA[A]]></data>
  </Command>
  <Command __id="2815" _type="InsertStringCommand" date="Sat Feb 25 11:35:40 EST 2023" starttimestamp="1677312753280" timestamp="30186806" timestamp2="30186806">
    <data><![CDATA[A]]></data>
  </Command>
  <Command __id="2817" _type="PauseCommand" date="Sat Feb 25 11:35:41 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="30188285">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1479]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2816" _type="MoveCaretCommand" caretOffset="9432" date="Sat Feb 25 11:35:41 EST 2023" docOffset="10312" starttimestamp="1677312753280" timestamp="30188285" />
  <Command __id="2818" _type="MoveCaretCommand" caretOffset="9432" date="Sat Feb 25 11:35:41 EST 2023" docOffset="10312" starttimestamp="1677312753280" timestamp="30188287" />
  <Command __id="2819" _type="SelectTextCommand" caretOffset="9435" date="Sat Feb 25 11:35:41 EST 2023" end="9435" start="9429" starttimestamp="1677312753280" timestamp="30188438" />
  <Command __id="2820" _type="SelectTextCommand" caretOffset="9435" date="Sat Feb 25 11:35:41 EST 2023" end="9435" start="9429" starttimestamp="1677312753280" timestamp="30188438" />
  <Command __id="2822" _type="InsertStringCommand" date="Sat Feb 25 11:35:42 EST 2023" starttimestamp="1677312753280" timestamp="30188800" timestamp2="30188800">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2823" _type="InsertStringCommand" date="Sat Feb 25 11:35:42 EST 2023" starttimestamp="1677312753280" timestamp="30188800" timestamp2="30188800">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2825" _type="InsertStringCommand" date="Sat Feb 25 11:35:42 EST 2023" starttimestamp="1677312753280" timestamp="30188949" timestamp2="30188949">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2826" _type="InsertStringCommand" date="Sat Feb 25 11:35:42 EST 2023" starttimestamp="1677312753280" timestamp="30188949" timestamp2="30188949">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2828" _type="InsertStringCommand" date="Sat Feb 25 11:35:42 EST 2023" starttimestamp="1677312753280" timestamp="30189038" timestamp2="30189038">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2829" _type="InsertStringCommand" date="Sat Feb 25 11:35:42 EST 2023" starttimestamp="1677312753280" timestamp="30189038" timestamp2="30189038">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2694" _type="DiffBasedFileOpenCommand" date="Sat Feb 25 11:35:22 EST 2023" docASTNodeCount="1586" docActiveCodeLength="9320" docExpressionCount="1092" docLength="10250" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="30169590">
    <filePath><![CDATA[C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\graphics\AProducerConsumerScene2.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package graphics;¶¶import java.util.ArrayList;¶import java.util.LinkedList;¶import java.util.List;¶import java.util.Queue;¶¶import animations.ACookingPlateAnimator;¶import animations.ACookingPlateCommand;¶import animations.AServingPlateAnimator;¶import animations.AServingPlateCommand;¶import animations.CookingPlateAnimator;¶import animations.ServingPlateAnimator;¶import bus.uigen.OEFrame;¶import bus.uigen.ObjectEditor;¶import bus.uigen.shapes.ALineModel;¶import bus.uigen.shapes.AStringModel;¶import bus.uigen.shapes.AnImageModel;¶import bus.uigen.shapes.OEShapeModel;¶import shapes.FlexibleTextShape;¶import util.annotations.EditablePropertyNames;¶import util.annotations.Label;¶import util.annotations.PropertyNames;¶import util.annotations.StructurePattern;¶import util.annotations.StructurePatternNames;¶import util.annotations.Visible;¶import util.misc.ThreadSupport;¶¶import java.awt.Color;¶¶@StructurePattern(StructurePatternNames.BEAN_PATTERN)¶@PropertyNames({¶	"patronList",¶	"chefList",¶	"buffer",¶	"queuedList",¶	"bellsList",¶	"queueBellList"¶})¶@EditablePropertyNames({¶})¶public class AProducerConsumerScene2 implements ProducerConsumerScene2 {¶	¶	//Avatar offsets inside scene¶	int[] chefXValues = {120,-50,-50,120};¶	int[] chefYValues = {-50,35,210,320};¶	int[] patronXValues = {650,850,850,650};¶	int[] patronYValues = {-50,35,220,320};¶	int[] bellXValues = {680,880,880,680};¶	int[] bellYValues = {75,160,345,445};¶	int INIT_HEAD_Y = 60;¶	int INIT_HEAD_X = 163;¶	int INIT_HEAD_HEIGHT = 90;¶	int INIT_HEAD_WIDTH = 80;¶	int PLATE_OFFSET_X = 30;¶	int PLATE_OFFSET_Y = 10;¶	int PAUSE = 5;¶	¶	//Booleans that help with the functionality of the below methods¶	boolean INIT_COOK = true;¶	boolean full = false;¶	int fullPlateOffset = -5;¶	¶	//Defining the chef and patron images¶	String[] chefImages = {"images/0.png","images/1.png","images/2.png","images/3.png"};¶	String[] patronImages = {"images/4.png", "images/5.png", "images/6.png", "images/7.png"};¶	¶	//Buffer arrays¶	int[] bufferXValues = {625, 680, 680, 620, 535, 460, 460, 535};¶	int[] bufferYValues = {200, 275, 365, 425, 425, 365, 275, 200};¶	boolean[] isFull = {false, false, false, false, false, false, false, false};¶	¶	//The properties of our class¶	List<APatron> patronList;¶	List<AChef> chefList;¶	BoundedBuffer buffer = new ABoundedBuffer();¶	¶	//This list will keep a track of the plates that enter the buffer so that FIFO¶	Queue<APlate> queuedList;¶	¶	OEShapeModel[] lineArray = {buffer.getLineTwo(), buffer.getLineThree(), buffer.getLineFour(), ¶								buffer.getLineFive(), buffer.getLineSix(), buffer.getLineSeven(), ¶								buffer.getLineEight(), buffer.getLineOne()};¶	¶	List<ABell> bellsList;¶	Queue<ABell> queueBellList;¶	int[] bellValues = {127, 212, 397, 497};¶	Queue<Integer> bellIntegerList;¶	¶	ACookingPlateCommand cookingCommand;¶	CookingPlateAnimator cookingAnimator;¶	¶	AServingPlateCommand servingCommand;¶	ServingPlateAnimator servingAnimator;¶	¶	//The constructor sets the scene with one chef, patron, a buffer, and a plate (not visible)¶	public AProducerConsumerScene2() {¶		patronList = new ArrayList<APatron>();¶		chefList = new ArrayList<AChef>();¶		//buffer = new ABoundedBuffer();¶		¶		queuedList = new LinkedList<APlate>();¶		bellsList = new ArrayList<ABell>();¶		queueBellList = new LinkedList<ABell>();¶		bellIntegerList = new LinkedList<Integer>();¶		¶		patronList.add(0, new APatron());¶		OEShapeModel initPatronHead = new AnImageModel(patronImages[0]);¶		initPatronHead.setX(INIT_HEAD_X);¶		initPatronHead.setY(INIT_HEAD_Y);¶		initPatronHead.setHeight(INIT_HEAD_HEIGHT);¶		initPatronHead.setWidth(INIT_HEAD_WIDTH);¶		patronList.get(0).patron.setHead(initPatronHead);¶		patronList.get(0).move(patronXValues[0], patronYValues[0]);¶		¶		chefList.add(0, new AChef());¶		OEShapeModel initChefHead = new AnImageModel(chefImages[0]);¶		initChefHead.setX(INIT_HEAD_X);¶		initChefHead.setY(INIT_HEAD_Y);¶		initChefHead.setHeight(INIT_HEAD_HEIGHT);¶		initChefHead.setWidth(INIT_HEAD_WIDTH);¶		chefList.get(0).chef.setHead(initChefHead);¶		chefList.get(0).move(chefXValues[0], chefYValues[0]);¶		¶		queuedList.add(new APlate());¶		queuedList.peek().getPlate().setHeight(0);¶		queuedList.peek().getPlate().setWidth(0);¶		¶		cookingAnimator = new ACookingPlateAnimator();¶		servingAnimator = new AServingPlateAnimator();¶		¶		bellsList.add(new ABell());¶		bellsList.get(0).getBell().setHeight(0);¶		bellsList.get(0).getBell().setWidth(0);¶		¶		queueBellList.add(new ABell());¶		queueBellList.peek().getBell().setHeight(0);¶		queueBellList.peek().getBell().setWidth(0);¶		¶		bellIntegerList.add(0);¶	}¶	¶	//Producer consumer methods¶	¶	//Init Scene sets the number of patrons and chefs in the scene¶	@Label("Init Scene")¶	public void initScene(int patronAmount, int chefAmount) {¶		bellsList.clear();¶		for (int i=0; i<patronAmount; i++) { ¶			APatron patron = new APatron();¶			patronList.add(i, patron);¶			OEShapeModel newHead = new AnImageModel(patronImages[i]);¶			patron.patron.setHead(newHead); ¶			newHead.setX(INIT_HEAD_X); ¶			newHead.setY(INIT_HEAD_Y);¶			newHead.setHeight(INIT_HEAD_HEIGHT);¶			newHead.setWidth(INIT_HEAD_WIDTH);¶			patron.move(patronXValues[i], patronYValues[i]);¶			¶			bellsList.add(new ABell());¶			bellsList.get(i).move(bellXValues[i], bellYValues[i]);¶		}¶		for (int i=0; i<chefAmount; i++) {¶			AChef chef = new AChef();¶			chefList.add(i, chef);¶			OEShapeModel newHead = new AnImageModel(chefImages[i]);¶			chef.chef.setHead(newHead);¶			newHead.setX(INIT_HEAD_X); ¶			newHead.setY(INIT_HEAD_Y);¶			newHead.setHeight(INIT_HEAD_HEIGHT);¶			newHead.setWidth(INIT_HEAD_WIDTH);¶			chef.move(chefXValues[i], chefYValues[i]);¶		}¶	}¶	¶	//Once the head of an avatar is chosen, it makes the plate that they "cook" appear¶	public void cook(OEShapeModel head) {¶		System.out.println("MADE TO COOK METHOD!!!!");¶		if (INIT_COOK) {¶			INIT_COOK=!INIT_COOK;¶			queuedList.remove();¶		}¶		¶		int headX = head.getCenterX();¶		int headY = head.getCenterY();¶		¶		System.out.println("First Checkpoint");¶		APlate newPlate = new APlate();¶		newPlate.getPlate().setHeight(0);¶		newPlate.getPlate().setWidth(0);¶		¶		if (full) {¶			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y+fullPlateOffset);¶			fullPlateOffset = fullPlateOffset - 5;¶		} else {¶			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y);¶		}¶		¶		System.out.println("Second checkpoint");¶		cookingCommand = new ACookingPlateCommand(cookingAnimator, newPlate, 40, 15);¶		Thread thread = new Thread (cookingCommand);¶		thread.start();¶		System.out.println("Third checkpoint");¶	}¶	¶	public void serve(APlate plate) {¶		//Checks to see if the buffer is full. If it is, then can't serve.¶		resetLineColors();¶		if(checkIfFull()) {¶			resetLineColors();¶			return;¶		}¶		¶		queuedList.add(plate);¶		¶		int workingPlatePlace = queuedList.size();¶		FlexibleTextShape platePlace = new AStringModel(Integer.toString(workingPlatePlace));¶		plate.setText(platePlace);¶		¶		changeLineColors(workingPlatePlace);¶		servingCommand = new AServingPlateCommand(servingAnimator,plate,PAUSE, bufferXValues[workingPlatePlace], bufferYValues[workingPlatePlace]);¶		Thread thread = new Thread(servingCommand);¶		thread.start();¶		isFull[workingPlatePlace] = true;¶	}¶	¶	public void order(OEShapeModel bell) {¶		if(checkIfFull()) {¶			resetLineColors();¶			resetBuffer();¶		}¶		bellIntegerList.add(0);¶		int bellPlace = findBell(bell.getCenterY());¶		bellsList.get(bellPlace).getText().setText(String.valueOf(bellIntegerList.size()-1));¶		¶		int platePlace = findFirstAvailablePlate();¶		//servingCommand = new AServingPlateCommand(servingAnimator,plateList.get(platePlace),PAUSE, bell.getCenterX() , bell.getCenterY());¶		Thread thread = new Thread(servingCommand);¶		thread.start();¶		¶		//cookingCommand = new ACookingPlateCommand(cookingAnimator, plateList.get(0), 0, 15);¶		Thread eatingThread = new Thread (cookingCommand);¶		eatingThread.start();¶		//plateList.get(0).getText().setText("");¶	}¶	¶	public void eat() {¶		//plateList.remove(0);¶	}¶	¶	@Override¶	@Visible(false)¶	public int findBell(int centerY) {¶		for(int i=0; i<bellsList.size();i++) {¶			if(bellsList.get(i).getBell().getCenterY() == centerY) {¶				return i;¶			}¶		}¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public int findFirstAvailablePlate() {¶		for (int i=0; i<isFull.length;i++) {¶			if(isFull[i] == true) {¶				return i;¶			}¶		}¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public void resetBuffer() {¶		¶		for (int i=0; i<isFull.length;i++) {¶			isFull[i] = false;¶		}¶	}¶	¶	@Override¶	@Visible(false)¶	public int findPatron(OEShapeModel patronHead) {¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public boolean checkIfFull() {¶		for (int i=0; i<isFull.length;i++) {¶			if (isFull[i] == false) {¶				full = false;¶				return full;¶			}¶		}¶		full = true;¶		return full;¶	}¶	¶	@Override¶	@Visible(false)¶	public void changeLineColors(int workingPlatePlace) {¶		if(workingPlatePlace == lineArray.length-1) {¶			lineArray[workingPlatePlace].setColor(Color.GREEN);¶			lineArray[0].setColor(Color.GREEN);¶		} else {¶			lineArray[workingPlatePlace].setColor(Color.GREEN);¶			lineArray[workingPlatePlace+1].setColor(Color.GREEN);¶		}¶	}¶	¶	¶	@Override¶	@Visible(false)¶	public void resetLineColors() {¶		for (int i=0; i<lineArray.length; i++) {¶			lineArray[i].setColor(Color.WHITE);¶		}¶	}¶	¶	//Getters for properties of the scene¶	@Override¶	public List<AChef> getChefList() {¶		return chefList;¶	}¶	¶	@Override¶	public List<APatron> getPatronList() {¶		return patronList;¶	}¶	¶	@Override¶	public BoundedBuffer getBuffer() {¶		return buffer;¶	}¶	¶	@Override¶	@util.annotations.Visible(false)¶	public Queue<APlate> getQueuedList() {¶		return queuedList;¶	}¶	¶	@Override¶	public List<ABell> getBellsList() {¶		return bellsList;¶	}¶	¶	@Override¶	@Visible(false)¶	public Queue<ABell> getQueueBellList() {¶		return queueBellList;¶	}¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="2699" _type="Insert" date="Sat Feb 25 11:35:26 EST 2023" docASTNodeCount="1586" docActiveCodeLength="9326" docExpressionCount="1092" docLength="10256" length="6" offset="10245" repeat="2" starttimestamp="1677312753280" timestamp="30173227" timestamp2="30173369">
    <text><![CDATA[
	
	]]></text>
  </DocumentChange>
  <DocumentChange __id="2705" _type="Replace" date="Sat Feb 25 11:35:27 EST 2023" docASTNodeCount="1600" docActiveCodeLength="9395" docExpressionCount="1097" docLength="10325" endLine="354" insertionLength="70" int_docASTNodeCount="1586" int_docActiveCodeLength="9325" int_docExpressionCount="1092" int_docLength="10255" length="1" offset="10250" startLine="354" starttimestamp="1677312753280" timestamp="30173821">
    <deletedText><![CDATA[	]]></deletedText>
    <insertedText><![CDATA[	
	public static void main(String[] args) {
		animateScene();
	}
	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2710" _type="Delete" date="Sat Feb 25 11:35:29 EST 2023" docASTNodeCount="1597" docActiveCodeLength="9380" docExpressionCount="1095" docLength="10310" endLine="356" length="15" offset="10298" startLine="356" starttimestamp="1677312753280" timestamp="30176227">
    <text><![CDATA[animateScene();]]></text>
  </DocumentChange>
  <DocumentChange __id="2724" _type="Insert" date="Sat Feb 25 11:35:34 EST 2023" docASTNodeCount="1608" docActiveCodeLength="9411" docExpressionCount="1100" docLength="10341" length="31" offset="10298" repeat="30" starttimestamp="1677312753280" timestamp="30181042" timestamp2="30186797">
    <text><![CDATA[LinkedList<APlate> list = new A]]></text>
  </DocumentChange>
  <DocumentChange __id="2821" _type="Replace" date="Sat Feb 25 11:35:42 EST 2023" docASTNodeCount="1608" docActiveCodeLength="9406" docExpressionCount="1100" docLength="10336" endLine="356" insertionLength="1" int_docASTNodeCount="1606" int_docActiveCodeLength="9405" int_docExpressionCount="1099" int_docLength="10335" length="6" offset="10309" startLine="356" starttimestamp="1677312753280" timestamp="30188785">
    <deletedText><![CDATA[APlate]]></deletedText>
    <insertedText><![CDATA[i]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2824" _type="Insert" date="Sat Feb 25 11:35:42 EST 2023" docASTNodeCount="1597" docActiveCodeLength="9408" docExpressionCount="1095" docLength="10338" length="2" offset="10310" repeat="2" starttimestamp="1677312753280" timestamp="30188943" timestamp2="30189031">
    <text><![CDATA[nt]]></text>
  </DocumentChange>
  <Command __id="2831" _type="PauseCommand" date="Sat Feb 25 11:35:43 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="30190405">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1367]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="2832" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 11:35:43 EST 2023" starttimestamp="1677312753280" timestamp="30190409" />
  <Command __id="2833" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 11:35:43 EST 2023" starttimestamp="1677312753280" timestamp="30190409" />
  <Command __id="2835" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 11:35:43 EST 2023" starttimestamp="1677312753280" timestamp="30190546" />
  <Command __id="2836" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 11:35:43 EST 2023" starttimestamp="1677312753280" timestamp="30190546" />
  <Command __id="2838" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 11:35:44 EST 2023" starttimestamp="1677312753280" timestamp="30190731" />
  <Command __id="2839" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 11:35:44 EST 2023" starttimestamp="1677312753280" timestamp="30190731" />
  <DocumentChange __id="2830" _type="Delete" date="Sat Feb 25 11:35:43 EST 2023" docASTNodeCount="1606" docActiveCodeLength="9405" docExpressionCount="1099" docLength="10335" endLine="356" length="3" offset="10309" repeat="3" startLine="356" starttimestamp="1677312753280" timestamp="30190405" timestamp2="30190727">
    <text><![CDATA[int]]></text>
  </DocumentChange>
  <Command __id="2841" _type="PauseCommand" date="Sat Feb 25 11:35:45 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="30191763">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1032]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="2842" _type="InsertStringCommand" date="Sat Feb 25 11:35:45 EST 2023" starttimestamp="1677312753280" timestamp="30191786" timestamp2="30191786">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="2843" _type="InsertStringCommand" date="Sat Feb 25 11:35:45 EST 2023" starttimestamp="1677312753280" timestamp="30191787" timestamp2="30191787">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="2845" _type="InsertStringCommand" date="Sat Feb 25 11:35:45 EST 2023" starttimestamp="1677312753280" timestamp="30191923" timestamp2="30191923">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2846" _type="InsertStringCommand" date="Sat Feb 25 11:35:45 EST 2023" starttimestamp="1677312753280" timestamp="30191923" timestamp2="30191923">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2848" _type="InsertStringCommand" date="Sat Feb 25 11:35:45 EST 2023" starttimestamp="1677312753280" timestamp="30192004" timestamp2="30192004">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2849" _type="InsertStringCommand" date="Sat Feb 25 11:35:45 EST 2023" starttimestamp="1677312753280" timestamp="30192004" timestamp2="30192004">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2851" _type="InsertStringCommand" date="Sat Feb 25 11:35:45 EST 2023" starttimestamp="1677312753280" timestamp="30192107" timestamp2="30192107">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2852" _type="InsertStringCommand" date="Sat Feb 25 11:35:45 EST 2023" starttimestamp="1677312753280" timestamp="30192107" timestamp2="30192107">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2854" _type="InsertStringCommand" date="Sat Feb 25 11:35:45 EST 2023" starttimestamp="1677312753280" timestamp="30192233" timestamp2="30192233">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="2855" _type="InsertStringCommand" date="Sat Feb 25 11:35:45 EST 2023" starttimestamp="1677312753280" timestamp="30192233" timestamp2="30192233">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="2857" _type="InsertStringCommand" date="Sat Feb 25 11:35:45 EST 2023" starttimestamp="1677312753280" timestamp="30192311" timestamp2="30192311">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2858" _type="InsertStringCommand" date="Sat Feb 25 11:35:45 EST 2023" starttimestamp="1677312753280" timestamp="30192312" timestamp2="30192312">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2860" _type="InsertStringCommand" date="Sat Feb 25 11:35:45 EST 2023" starttimestamp="1677312753280" timestamp="30192435" timestamp2="30192435">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="2861" _type="InsertStringCommand" date="Sat Feb 25 11:35:45 EST 2023" starttimestamp="1677312753280" timestamp="30192436" timestamp2="30192436">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="2863" _type="PauseCommand" date="Sat Feb 25 11:35:46 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="30193525">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1089]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2862" _type="MoveCaretCommand" caretOffset="9450" date="Sat Feb 25 11:35:46 EST 2023" docOffset="10330" starttimestamp="1677312753280" timestamp="30193525" />
  <Command __id="2864" _type="MoveCaretCommand" caretOffset="9450" date="Sat Feb 25 11:35:46 EST 2023" docOffset="10330" starttimestamp="1677312753280" timestamp="30193525" />
  <Command __id="2866" _type="InsertStringCommand" date="Sat Feb 25 11:35:47 EST 2023" starttimestamp="1677312753280" timestamp="30194283" timestamp2="30194283">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="2867" _type="InsertStringCommand" date="Sat Feb 25 11:35:47 EST 2023" starttimestamp="1677312753280" timestamp="30194283" timestamp2="30194283">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="2869" _type="InsertStringCommand" date="Sat Feb 25 11:35:47 EST 2023" starttimestamp="1677312753280" timestamp="30194659" timestamp2="30194659">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2870" _type="InsertStringCommand" date="Sat Feb 25 11:35:47 EST 2023" starttimestamp="1677312753280" timestamp="30194659" timestamp2="30194659">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2872" _type="InsertStringCommand" date="Sat Feb 25 11:35:48 EST 2023" starttimestamp="1677312753280" timestamp="30194809" timestamp2="30194809">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2873" _type="InsertStringCommand" date="Sat Feb 25 11:35:48 EST 2023" starttimestamp="1677312753280" timestamp="30194809" timestamp2="30194809">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2875" _type="InsertStringCommand" date="Sat Feb 25 11:35:48 EST 2023" starttimestamp="1677312753280" timestamp="30194911" timestamp2="30194911">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="2876" _type="InsertStringCommand" date="Sat Feb 25 11:35:48 EST 2023" starttimestamp="1677312753280" timestamp="30194912" timestamp2="30194912">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="2878" _type="InsertStringCommand" date="Sat Feb 25 11:35:48 EST 2023" starttimestamp="1677312753280" timestamp="30194975" timestamp2="30194975">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2879" _type="InsertStringCommand" date="Sat Feb 25 11:35:48 EST 2023" starttimestamp="1677312753280" timestamp="30194975" timestamp2="30194975">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2881" _type="InsertStringCommand" date="Sat Feb 25 11:35:48 EST 2023" starttimestamp="1677312753280" timestamp="30195310" timestamp2="30195310">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="2882" _type="InsertStringCommand" date="Sat Feb 25 11:35:48 EST 2023" starttimestamp="1677312753280" timestamp="30195310" timestamp2="30195310">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="2884" _type="InsertStringCommand" date="Sat Feb 25 11:35:48 EST 2023" starttimestamp="1677312753280" timestamp="30195535" timestamp2="30195535">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2885" _type="InsertStringCommand" date="Sat Feb 25 11:35:48 EST 2023" starttimestamp="1677312753280" timestamp="30195535" timestamp2="30195535">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2887" _type="InsertStringCommand" date="Sat Feb 25 11:35:48 EST 2023" starttimestamp="1677312753280" timestamp="30195593" timestamp2="30195593">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2888" _type="InsertStringCommand" date="Sat Feb 25 11:35:48 EST 2023" starttimestamp="1677312753280" timestamp="30195594" timestamp2="30195594">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2890" _type="InsertStringCommand" date="Sat Feb 25 11:35:49 EST 2023" starttimestamp="1677312753280" timestamp="30195745" timestamp2="30195745">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2891" _type="InsertStringCommand" date="Sat Feb 25 11:35:49 EST 2023" starttimestamp="1677312753280" timestamp="30195745" timestamp2="30195745">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2893" _type="InsertStringCommand" date="Sat Feb 25 11:35:49 EST 2023" starttimestamp="1677312753280" timestamp="30195924" timestamp2="30195924">
    <data><![CDATA[<]]></data>
  </Command>
  <Command __id="2894" _type="InsertStringCommand" date="Sat Feb 25 11:35:49 EST 2023" starttimestamp="1677312753280" timestamp="30195924" timestamp2="30195924">
    <data><![CDATA[<]]></data>
  </Command>
  <Command __id="2896" _type="PauseCommand" date="Sat Feb 25 11:35:51 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="30198638">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2714]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2895" _type="MoveCaretCommand" caretOffset="9450" date="Sat Feb 25 11:35:51 EST 2023" docOffset="10330" starttimestamp="1677312753280" timestamp="30198638" />
  <Command __id="2897" _type="MoveCaretCommand" caretOffset="9450" date="Sat Feb 25 11:35:51 EST 2023" docOffset="10330" starttimestamp="1677312753280" timestamp="30198639" />
  <Command __id="2899" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 11:35:52 EST 2023" starttimestamp="1677312753280" timestamp="30199386" />
  <Command __id="2900" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 11:35:52 EST 2023" starttimestamp="1677312753280" timestamp="30199386" />
  <Command __id="2901" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sat Feb 25 11:35:53 EST 2023" starttimestamp="1677312753280" timestamp="30199729" />
  <Command __id="2902" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sat Feb 25 11:35:53 EST 2023" starttimestamp="1677312753280" timestamp="30199729" />
  <Command __id="2903" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sat Feb 25 11:35:53 EST 2023" starttimestamp="1677312753280" timestamp="30199899" />
  <Command __id="2904" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sat Feb 25 11:35:53 EST 2023" starttimestamp="1677312753280" timestamp="30199899" />
  <Command __id="2905" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sat Feb 25 11:35:53 EST 2023" starttimestamp="1677312753280" timestamp="30200058" />
  <Command __id="2906" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sat Feb 25 11:35:53 EST 2023" starttimestamp="1677312753280" timestamp="30200058" />
  <Command __id="2907" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sat Feb 25 11:35:53 EST 2023" starttimestamp="1677312753280" timestamp="30200185" />
  <Command __id="2908" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sat Feb 25 11:35:53 EST 2023" starttimestamp="1677312753280" timestamp="30200185" />
  <Command __id="2909" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sat Feb 25 11:35:53 EST 2023" starttimestamp="1677312753280" timestamp="30200326" />
  <Command __id="2910" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sat Feb 25 11:35:53 EST 2023" starttimestamp="1677312753280" timestamp="30200326" />
  <Command __id="2912" _type="InsertStringCommand" date="Sat Feb 25 11:35:54 EST 2023" starttimestamp="1677312753280" timestamp="30200777" timestamp2="30200777">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="2913" _type="InsertStringCommand" date="Sat Feb 25 11:35:54 EST 2023" starttimestamp="1677312753280" timestamp="30200777" timestamp2="30200777">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="2915" _type="PauseCommand" date="Sat Feb 25 11:35:55 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="30202442">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1665]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <DocumentChange __id="2840" _type="Insert" date="Sat Feb 25 11:35:45 EST 2023" docASTNodeCount="1608" docActiveCodeLength="9412" docExpressionCount="1100" docLength="10342" length="7" offset="10309" repeat="7" starttimestamp="1677312753280" timestamp="30191763" timestamp2="30192427">
    <text><![CDATA[Integer]]></text>
  </DocumentChange>
  <DocumentChange __id="2865" _type="Insert" date="Sat Feb 25 11:35:47 EST 2023" docASTNodeCount="1609" docActiveCodeLength="9423" docExpressionCount="1100" docLength="10353" length="11" offset="10330" repeat="10" starttimestamp="1677312753280" timestamp="30194276" timestamp2="30195921">
    <text><![CDATA[LinkeList<>]]></text>
  </DocumentChange>
  <DocumentChange __id="2898" _type="Delete" date="Sat Feb 25 11:35:52 EST 2023" docASTNodeCount="1609" docActiveCodeLength="9422" docExpressionCount="1100" docLength="10352" endLine="356" length="1" offset="10329" startLine="356" starttimestamp="1677312753280" timestamp="30199375">
    <text><![CDATA[A]]></text>
  </DocumentChange>
  <DocumentChange __id="2911" _type="Insert" date="Sat Feb 25 11:35:54 EST 2023" docASTNodeCount="1609" docActiveCodeLength="9423" docExpressionCount="1100" docLength="10353" length="1" offset="10334" starttimestamp="1677312753280" timestamp="30200770">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <DocumentChange __id="2917" _type="Insert" date="Sat Feb 25 11:35:56 EST 2023" docASTNodeCount="1611" docActiveCodeLength="9430" docExpressionCount="1101" docLength="10360" length="7" offset="10340" repeat="7" starttimestamp="1677312753280" timestamp="30203044" timestamp2="30203773">
    <text><![CDATA[Integer]]></text>
  </DocumentChange>
  <Command __id="2914" _type="MoveCaretCommand" caretOffset="9460" date="Sat Feb 25 11:35:55 EST 2023" docOffset="10340" starttimestamp="1677312753280" timestamp="30202442" />
  <Command __id="2916" _type="MoveCaretCommand" caretOffset="9460" date="Sat Feb 25 11:35:55 EST 2023" docOffset="10340" starttimestamp="1677312753280" timestamp="30202443" />
  <Command __id="2918" _type="InsertStringCommand" date="Sat Feb 25 11:35:56 EST 2023" starttimestamp="1677312753280" timestamp="30203053" timestamp2="30203053">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="2919" _type="InsertStringCommand" date="Sat Feb 25 11:35:56 EST 2023" starttimestamp="1677312753280" timestamp="30203053" timestamp2="30203053">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="2921" _type="InsertStringCommand" date="Sat Feb 25 11:35:56 EST 2023" starttimestamp="1677312753280" timestamp="30203230" timestamp2="30203230">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2922" _type="InsertStringCommand" date="Sat Feb 25 11:35:56 EST 2023" starttimestamp="1677312753280" timestamp="30203231" timestamp2="30203231">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2924" _type="InsertStringCommand" date="Sat Feb 25 11:35:56 EST 2023" starttimestamp="1677312753280" timestamp="30203336" timestamp2="30203336">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2925" _type="InsertStringCommand" date="Sat Feb 25 11:35:56 EST 2023" starttimestamp="1677312753280" timestamp="30203345" timestamp2="30203345">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2927" _type="InsertStringCommand" date="Sat Feb 25 11:35:56 EST 2023" starttimestamp="1677312753280" timestamp="30203425" timestamp2="30203425">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2928" _type="InsertStringCommand" date="Sat Feb 25 11:35:56 EST 2023" starttimestamp="1677312753280" timestamp="30203425" timestamp2="30203425">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2930" _type="InsertStringCommand" date="Sat Feb 25 11:35:56 EST 2023" starttimestamp="1677312753280" timestamp="30203585" timestamp2="30203585">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="2931" _type="InsertStringCommand" date="Sat Feb 25 11:35:56 EST 2023" starttimestamp="1677312753280" timestamp="30203585" timestamp2="30203585">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="2933" _type="InsertStringCommand" date="Sat Feb 25 11:35:56 EST 2023" starttimestamp="1677312753280" timestamp="30203695" timestamp2="30203695">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2934" _type="InsertStringCommand" date="Sat Feb 25 11:35:56 EST 2023" starttimestamp="1677312753280" timestamp="30203696" timestamp2="30203696">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2936" _type="InsertStringCommand" date="Sat Feb 25 11:35:57 EST 2023" starttimestamp="1677312753280" timestamp="30203786" timestamp2="30203786">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="2937" _type="InsertStringCommand" date="Sat Feb 25 11:35:57 EST 2023" starttimestamp="1677312753280" timestamp="30203786" timestamp2="30203786">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="2938" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sat Feb 25 11:35:57 EST 2023" starttimestamp="1677312753280" timestamp="30203957" />
  <Command __id="2939" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sat Feb 25 11:35:57 EST 2023" starttimestamp="1677312753280" timestamp="30203957" />
  <Command __id="2941" _type="InsertStringCommand" date="Sat Feb 25 11:35:57 EST 2023" starttimestamp="1677312753280" timestamp="30204628" timestamp2="30204628">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="2942" _type="InsertStringCommand" date="Sat Feb 25 11:35:57 EST 2023" starttimestamp="1677312753280" timestamp="30204628" timestamp2="30204628">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="2943" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sat Feb 25 11:35:58 EST 2023" starttimestamp="1677312753280" timestamp="30204915" />
  <Command __id="2944" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sat Feb 25 11:35:58 EST 2023" starttimestamp="1677312753280" timestamp="30204915" />
  <Command __id="2946" _type="InsertStringCommand" date="Sat Feb 25 11:35:58 EST 2023" starttimestamp="1677312753280" timestamp="30205105" timestamp2="30205105">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="2947" _type="InsertStringCommand" date="Sat Feb 25 11:35:58 EST 2023" starttimestamp="1677312753280" timestamp="30205105" timestamp2="30205105">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="2950" _type="PauseCommand" date="Sat Feb 25 11:35:59 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="30206183">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1078]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="2949" _type="InsertStringCommand" date="Sat Feb 25 11:35:59 EST 2023" starttimestamp="1677312753280" timestamp="30206183" timestamp2="30206183">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2951" _type="InsertStringCommand" date="Sat Feb 25 11:35:59 EST 2023" starttimestamp="1677312753280" timestamp="30206183" timestamp2="30206183">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="2940" _type="Insert" date="Sat Feb 25 11:35:57 EST 2023" docASTNodeCount="1611" docActiveCodeLength="9437" docExpressionCount="1101" docLength="10367" length="7" offset="10348" repeat="3" starttimestamp="1677312753280" timestamp="30204619" timestamp2="30206171">
    <text><![CDATA[();
		]]></text>
  </DocumentChange>
  <Command __id="2953" _type="PauseCommand" date="Sat Feb 25 11:36:02 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="30209293">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[3110]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="2954" _type="InsertStringCommand" date="Sat Feb 25 11:36:02 EST 2023" starttimestamp="1677312753280" timestamp="30209304" timestamp2="30209304">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="2955" _type="InsertStringCommand" date="Sat Feb 25 11:36:02 EST 2023" starttimestamp="1677312753280" timestamp="30209304" timestamp2="30209304">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="2957" _type="InsertStringCommand" date="Sat Feb 25 11:36:02 EST 2023" starttimestamp="1677312753280" timestamp="30209406" timestamp2="30209406">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="2958" _type="InsertStringCommand" date="Sat Feb 25 11:36:02 EST 2023" starttimestamp="1677312753280" timestamp="30209406" timestamp2="30209406">
    <data><![CDATA[E]]></data>
  </Command>
  <DocumentChange __id="2952" _type="Insert" date="Sat Feb 25 11:36:02 EST 2023" docASTNodeCount="1613" docActiveCodeLength="9439" docExpressionCount="1102" docLength="10369" length="2" offset="10355" repeat="2" starttimestamp="1677312753280" timestamp="30209293" timestamp2="30209397">
    <text><![CDATA[OE]]></text>
  </DocumentChange>
  <Command __id="2960" _type="PauseCommand" date="Sat Feb 25 11:36:06 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="30213159">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[3753]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <DocumentChange __id="2959" _type="Insert" date="Sat Feb 25 11:36:06 EST 2023" docASTNodeCount="1613" docActiveCodeLength="9440" docExpressionCount="1102" docLength="10370" length="1" offset="10357" starttimestamp="1677312753280" timestamp="30213159">
    <text><![CDATA[E]]></text>
  </DocumentChange>
  <Command __id="2961" _type="InsertStringCommand" date="Sat Feb 25 11:36:06 EST 2023" starttimestamp="1677312753280" timestamp="30213167" timestamp2="30213167">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="2962" _type="InsertStringCommand" date="Sat Feb 25 11:36:06 EST 2023" starttimestamp="1677312753280" timestamp="30213168" timestamp2="30213168">
    <data><![CDATA[E]]></data>
  </Command>
  <DocumentChange __id="2963" _type="Delete" date="Sat Feb 25 11:36:07 EST 2023" docASTNodeCount="1611" docActiveCodeLength="9437" docExpressionCount="1101" docLength="10367" endLine="357" length="3" offset="10355" repeat="3" startLine="357" starttimestamp="1677312753280" timestamp="30213866" timestamp2="30214793">
    <text><![CDATA[OEE]]></text>
  </DocumentChange>
  <Command __id="2964" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 11:36:07 EST 2023" starttimestamp="1677312753280" timestamp="30213871" />
  <Command __id="2965" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 11:36:07 EST 2023" starttimestamp="1677312753280" timestamp="30213871" />
  <Command __id="2967" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 11:36:07 EST 2023" starttimestamp="1677312753280" timestamp="30214669" />
  <Command __id="2968" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 11:36:07 EST 2023" starttimestamp="1677312753280" timestamp="30214669" />
  <Command __id="2970" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 11:36:08 EST 2023" starttimestamp="1677312753280" timestamp="30214797" />
  <Command __id="2971" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 11:36:08 EST 2023" starttimestamp="1677312753280" timestamp="30214797" />
  <Command __id="2973" _type="InsertStringCommand" date="Sat Feb 25 11:36:08 EST 2023" starttimestamp="1677312753280" timestamp="30215170" timestamp2="30215170">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="2974" _type="InsertStringCommand" date="Sat Feb 25 11:36:08 EST 2023" starttimestamp="1677312753280" timestamp="30215171" timestamp2="30215171">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="2976" _type="InsertStringCommand" date="Sat Feb 25 11:36:08 EST 2023" starttimestamp="1677312753280" timestamp="30215357" timestamp2="30215357">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="2977" _type="InsertStringCommand" date="Sat Feb 25 11:36:08 EST 2023" starttimestamp="1677312753280" timestamp="30215357" timestamp2="30215357">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="2979" _type="InsertStringCommand" date="Sat Feb 25 11:36:08 EST 2023" starttimestamp="1677312753280" timestamp="30215550" timestamp2="30215550">
    <data><![CDATA[j]]></data>
  </Command>
  <Command __id="2980" _type="InsertStringCommand" date="Sat Feb 25 11:36:08 EST 2023" starttimestamp="1677312753280" timestamp="30215550" timestamp2="30215550">
    <data><![CDATA[j]]></data>
  </Command>
  <Command __id="2982" _type="InsertStringCommand" date="Sat Feb 25 11:36:08 EST 2023" starttimestamp="1677312753280" timestamp="30215656" timestamp2="30215656">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2983" _type="InsertStringCommand" date="Sat Feb 25 11:36:08 EST 2023" starttimestamp="1677312753280" timestamp="30215656" timestamp2="30215656">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2985" _type="InsertStringCommand" date="Sat Feb 25 11:36:09 EST 2023" starttimestamp="1677312753280" timestamp="30216216" timestamp2="30216216">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="2986" _type="InsertStringCommand" date="Sat Feb 25 11:36:09 EST 2023" starttimestamp="1677312753280" timestamp="30216216" timestamp2="30216216">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="2988" _type="InsertStringCommand" date="Sat Feb 25 11:36:10 EST 2023" starttimestamp="1677312753280" timestamp="30216907" timestamp2="30216907">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2989" _type="InsertStringCommand" date="Sat Feb 25 11:36:10 EST 2023" starttimestamp="1677312753280" timestamp="30216907" timestamp2="30216907">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2991" _type="InsertStringCommand" date="Sat Feb 25 11:36:10 EST 2023" starttimestamp="1677312753280" timestamp="30217210" timestamp2="30217210">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="2992" _type="InsertStringCommand" date="Sat Feb 25 11:36:10 EST 2023" starttimestamp="1677312753280" timestamp="30217210" timestamp2="30217210">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="2994" _type="InsertStringCommand" date="Sat Feb 25 11:36:10 EST 2023" starttimestamp="1677312753280" timestamp="30217390" timestamp2="30217390">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="2995" _type="InsertStringCommand" date="Sat Feb 25 11:36:10 EST 2023" starttimestamp="1677312753280" timestamp="30217390" timestamp2="30217390">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="2997" _type="InsertStringCommand" date="Sat Feb 25 11:36:10 EST 2023" starttimestamp="1677312753280" timestamp="30217483" timestamp2="30217483">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2998" _type="InsertStringCommand" date="Sat Feb 25 11:36:10 EST 2023" starttimestamp="1677312753280" timestamp="30217483" timestamp2="30217483">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="3000" _type="InsertStringCommand" date="Sat Feb 25 11:36:10 EST 2023" starttimestamp="1677312753280" timestamp="30217580" timestamp2="30217580">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="3001" _type="InsertStringCommand" date="Sat Feb 25 11:36:10 EST 2023" starttimestamp="1677312753280" timestamp="30217580" timestamp2="30217580">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="3003" _type="InsertStringCommand" date="Sat Feb 25 11:36:11 EST 2023" starttimestamp="1677312753280" timestamp="30217938" timestamp2="30217938">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="3004" _type="InsertStringCommand" date="Sat Feb 25 11:36:11 EST 2023" starttimestamp="1677312753280" timestamp="30217938" timestamp2="30217938">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="3006" _type="InsertStringCommand" date="Sat Feb 25 11:36:11 EST 2023" starttimestamp="1677312753280" timestamp="30218025" timestamp2="30218025">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="3007" _type="InsertStringCommand" date="Sat Feb 25 11:36:11 EST 2023" starttimestamp="1677312753280" timestamp="30218025" timestamp2="30218025">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="3009" _type="InsertStringCommand" date="Sat Feb 25 11:36:11 EST 2023" starttimestamp="1677312753280" timestamp="30218171" timestamp2="30218171">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="3010" _type="InsertStringCommand" date="Sat Feb 25 11:36:11 EST 2023" starttimestamp="1677312753280" timestamp="30218173" timestamp2="30218173">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="3011" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sat Feb 25 11:36:11 EST 2023" start_end="START" starttimestamp="1677312753280" timestamp="30218180" />
  <Command __id="3018" _type="PauseCommand" date="Sat Feb 25 11:36:16 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="30222737">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[4557]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="3017" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sat Feb 25 11:36:16 EST 2023" start_end="END" starttimestamp="1677312753280" timestamp="30222737" />
  <Command __id="3020" _type="InsertStringCommand" date="Sat Feb 25 11:36:16 EST 2023" starttimestamp="1677312753280" timestamp="30222851" timestamp2="30222851">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3021" _type="InsertStringCommand" date="Sat Feb 25 11:36:16 EST 2023" starttimestamp="1677312753280" timestamp="30222851" timestamp2="30222851">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="2972" _type="Insert" date="Sat Feb 25 11:36:08 EST 2023" docASTNodeCount="1615" docActiveCodeLength="9455" docExpressionCount="1104" docLength="10385" length="18" offset="10355" repeat="18" starttimestamp="1677312753280" timestamp="30215164" timestamp2="30221812">
    <text><![CDATA[ObjectEditor.editL]]></text>
  </DocumentChange>
  <DocumentChange __id="3019" _type="Replace" date="Sat Feb 25 11:36:16 EST 2023" docASTNodeCount="1616" docActiveCodeLength="9464" docExpressionCount="1105" docLength="10394" endLine="357" insertionLength="14" int_docASTNodeCount="1613" int_docActiveCodeLength="9450" int_docExpressionCount="1102" int_docLength="10380" length="5" offset="10368" startLine="357" starttimestamp="1677312753280" timestamp="30222753">
    <deletedText><![CDATA[editL]]></deletedText>
    <insertedText><![CDATA[editList(null)]]></insertedText>
  </DocumentChange>
  <Command __id="3023" _type="PauseCommand" date="Sat Feb 25 11:36:18 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="30225427">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2576]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="3024" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 11:36:18 EST 2023" starttimestamp="1677312753280" timestamp="30225436" />
  <Command __id="3025" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 11:36:18 EST 2023" starttimestamp="1677312753280" timestamp="30225436" />
  <Command __id="3027" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 11:36:18 EST 2023" starttimestamp="1677312753280" timestamp="30225575" />
  <Command __id="3028" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 11:36:18 EST 2023" starttimestamp="1677312753280" timestamp="30225575" />
  <Command __id="3030" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 11:36:18 EST 2023" starttimestamp="1677312753280" timestamp="30225703" />
  <Command __id="3031" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 11:36:18 EST 2023" starttimestamp="1677312753280" timestamp="30225704" />
  <Command __id="3033" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 11:36:19 EST 2023" starttimestamp="1677312753280" timestamp="30225848" />
  <Command __id="3034" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 11:36:19 EST 2023" starttimestamp="1677312753280" timestamp="30225848" />
  <Command __id="3036" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 11:36:19 EST 2023" starttimestamp="1677312753280" timestamp="30225978" />
  <Command __id="3037" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 11:36:19 EST 2023" starttimestamp="1677312753280" timestamp="30225978" />
  <Command __id="3039" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 11:36:19 EST 2023" starttimestamp="1677312753280" timestamp="30226548" />
  <Command __id="3040" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 11:36:19 EST 2023" starttimestamp="1677312753280" timestamp="30226548" />
  <Command __id="3041" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sat Feb 25 11:36:20 EST 2023" starttimestamp="1677312753280" timestamp="30227075" />
  <Command __id="3042" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sat Feb 25 11:36:20 EST 2023" starttimestamp="1677312753280" timestamp="30227075" />
  <Command __id="3044" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 11:36:20 EST 2023" starttimestamp="1677312753280" timestamp="30227400" />
  <Command __id="3045" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 11:36:20 EST 2023" starttimestamp="1677312753280" timestamp="30227400" />
  <DocumentChange __id="3022" _type="Delete" date="Sat Feb 25 11:36:18 EST 2023" docASTNodeCount="1615" docActiveCodeLength="9454" docExpressionCount="1104" docLength="10384" endLine="357" length="10" offset="10372" repeat="7" startLine="357" starttimestamp="1677312753280" timestamp="30225427" timestamp2="30227395">
    <text><![CDATA[List(null)]]></text>
  </DocumentChange>
  <Command __id="3047" _type="PauseCommand" date="Sat Feb 25 11:36:21 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="30228451">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1051]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <DocumentChange __id="3046" _type="Insert" date="Sat Feb 25 11:36:21 EST 2023" docASTNodeCount="1615" docActiveCodeLength="9455" docExpressionCount="1104" docLength="10385" length="1" offset="10372" starttimestamp="1677312753280" timestamp="30228451">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="3048" _type="InsertStringCommand" date="Sat Feb 25 11:36:21 EST 2023" starttimestamp="1677312753280" timestamp="30228460" timestamp2="30228460">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3049" _type="InsertStringCommand" date="Sat Feb 25 11:36:21 EST 2023" starttimestamp="1677312753280" timestamp="30228460" timestamp2="30228460">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="3050" _type="Delete" date="Sat Feb 25 11:36:22 EST 2023" docASTNodeCount="1615" docActiveCodeLength="9454" docExpressionCount="1104" docLength="10384" endLine="357" length="1" offset="10372" startLine="357" starttimestamp="1677312753280" timestamp="30229400">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="3051" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 11:36:22 EST 2023" starttimestamp="1677312753280" timestamp="30229407" />
  <Command __id="3052" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 11:36:22 EST 2023" starttimestamp="1677312753280" timestamp="30229407" />
  <Command __id="3054" _type="InsertStringCommand" date="Sat Feb 25 11:36:23 EST 2023" starttimestamp="1677312753280" timestamp="30230096" timestamp2="30230096">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="3055" _type="InsertStringCommand" date="Sat Feb 25 11:36:23 EST 2023" starttimestamp="1677312753280" timestamp="30230096" timestamp2="30230096">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="3057" _type="InsertStringCommand" date="Sat Feb 25 11:36:24 EST 2023" starttimestamp="1677312753280" timestamp="30230988" timestamp2="30230988">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="3058" _type="InsertStringCommand" date="Sat Feb 25 11:36:24 EST 2023" starttimestamp="1677312753280" timestamp="30230988" timestamp2="30230988">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="3060" _type="InsertStringCommand" date="Sat Feb 25 11:36:24 EST 2023" starttimestamp="1677312753280" timestamp="30231087" timestamp2="30231087">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="3061" _type="InsertStringCommand" date="Sat Feb 25 11:36:24 EST 2023" starttimestamp="1677312753280" timestamp="30231087" timestamp2="30231087">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="3063" _type="InsertStringCommand" date="Sat Feb 25 11:36:24 EST 2023" starttimestamp="1677312753280" timestamp="30231165" timestamp2="30231165">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="3064" _type="InsertStringCommand" date="Sat Feb 25 11:36:24 EST 2023" starttimestamp="1677312753280" timestamp="30231165" timestamp2="30231165">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="3066" _type="InsertStringCommand" date="Sat Feb 25 11:36:24 EST 2023" starttimestamp="1677312753280" timestamp="30231275" timestamp2="30231275">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="3067" _type="InsertStringCommand" date="Sat Feb 25 11:36:24 EST 2023" starttimestamp="1677312753280" timestamp="30231275" timestamp2="30231275">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="3068" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sat Feb 25 11:36:24 EST 2023" starttimestamp="1677312753280" timestamp="30231418" />
  <Command __id="3069" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sat Feb 25 11:36:24 EST 2023" starttimestamp="1677312753280" timestamp="30231418" />
  <Command __id="3071" _type="InsertStringCommand" date="Sat Feb 25 11:36:24 EST 2023" starttimestamp="1677312753280" timestamp="30231635" timestamp2="30231635">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="3072" _type="InsertStringCommand" date="Sat Feb 25 11:36:24 EST 2023" starttimestamp="1677312753280" timestamp="30231636" timestamp2="30231636">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="3074" _type="PauseCommand" date="Sat Feb 25 11:36:26 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="30233455">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1819]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="3077" _type="ProgramExecutionEvent" className="/ProducersConsumersV3/src/graphics/AProducerConsumerScene2.java" date="Sat Feb 25 11:36:31 EST 2023" kind="HitBreakPoint" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="30238097" type="Run" />
  <Command __id="3079" _type="RunCommand" className="/ProducersConsumersV3/src/graphics/AProducerConsumerScene2.java" date="Sat Feb 25 11:36:31 EST 2023" kind="HitBreakPoint" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="30238098" type="Run" />
  <Command __id="3081" _type="PauseCommand" date="Sat Feb 25 11:36:33 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="30239830">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[1732]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="3080" _type="ShellCommand" date="Sat Feb 25 11:36:33 EST 2023" starttimestamp="1677312753280" timestamp="30239830" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3082" _type="ExceptionCommand" date="Sat Feb 25 11:36:34 EST 2023" starttimestamp="1677312753280" timestamp="30240787" type="Exception">
    <exceptionString><![CDATA[class java.util.NoSuchElementException
java.util.NoSuchElementException
	at java.base/java.util.LinkedList.getFirst(LinkedList.java:248)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1415)
	at bus.uigen.sadapters.BeanToRecord.get(BeanToRecord.java:204)
	at bus.uigen.sadapters.BeanToRecord.get(BeanToRecord.java:189)
	at bus.uigen.oadapters.ClassAdapter.addClassComponents(ClassAdapter.java:1611)
	at bus.uigen.oadapters.VectorAdapter.createChildrenBasic(VectorAdapter.java:2719)
	at bus.uigen.oadapters.CompositeAdapter.createChildren(CompositeAdapter.java:718)
	at bus.uigen.visitors.CreateChildrenAdapterVisitor.visit(CreateChildrenAdapterVisitor.java:28)
	at bus.uigen.visitors.CreateChildrenAdapterVisitor.visit(CreateChildrenAdapterVisitor.java:45)
	at bus.uigen.visitors.AdapterVisitor.traverseVisibleAndInvisible(AdapterVisitor.java:361)
	at bus.uigen.visitors.AdapterVisitor.traverseVisibleAndInvisible(AdapterVisitor.java:372)
	at bus.uigen.visitors.AdapterVisitor.traverseVisibleAndInvisible(AdapterVisitor.java:70)
	at bus.uigen.uiGenerator.deepCreateChildren(uiGenerator.java:4442)
	at bus.uigen.oadapters.RootAdapter.topAddChildComponents(RootAdapter.java:184)
	at bus.uigen.uiGenerator.topAddChildComponents(uiGenerator.java:862)
	at bus.uigen.uiGenerator.generateInUIPanel(uiGenerator.java:1507)
	at bus.uigen.uiGenerator.generateInBrowsableRootPanel(uiGenerator.java:1473)
	at bus.uigen.uiGenerator.generateInNewBrowsableContainer(uiGenerator.java:1432)
	at bus.uigen.uiGenerator.generateUIFrame(uiGenerator.java:351)
	at bus.uigen.uiGenerator.generateUIFrame(uiGenerator.java:172)
	at bus.uigen.ObjectEditor.edit(ObjectEditor.java:2839)
	at bus.uigen.ObjectEditor.edit(ObjectEditor.java:2806)
	at bus.uigen.ObjectEditor.edit(ObjectEditor.java:2287)
	at bus.uigen.ObjectEditor.edit(ObjectEditor.java:2273)
	at graphics.AProducerConsumerScene2.main(AProducerConsumerScene2.java:358)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="3084" _type="PauseCommand" date="Sat Feb 25 11:36:36 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="30242792">
    <prevType><![CDATA[Exception]]></prevType>
    <prev><![CDATA[ExceptionCommand]]></prev>
    <pause><![CDATA[2005]]></pause>
    <nextType><![CDATA[Exception]]></nextType>
    <next><![CDATA[ExceptionCommand]]></next>
  </Command>
  <Command __id="3083" _type="ExceptionCommand" date="Sat Feb 25 11:36:36 EST 2023" starttimestamp="1677312753280" timestamp="30242792" type="Exception">
    <exceptionString><![CDATA[java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1415)
	at bus.uigen.sadapters.BeanToRecord.get(BeanToRecord.java:204)
	at bus.uigen.sadapters.BeanToRecord.get(BeanToRecord.java:189)
	at bus.uigen.oadapters.ClassAdapter.addClassComponents(ClassAdapter.java:1611)
	at bus.uigen.oadapters.VectorAdapter.createChildrenBasic(VectorAdapter.java:2719)
	at bus.uigen.oadapters.CompositeAdapter.createChildren(CompositeAdapter.java:718)
	at bus.uigen.visitors.CreateChildrenAdapterVisitor.visit(CreateChildrenAdapterVisitor.java:28)
	at bus.uigen.visitors.CreateChildrenAdapterVisitor.visit(CreateChildrenAdapterVisitor.java:45)
	at bus.uigen.visitors.AdapterVisitor.traverseVisibleAndInvisible(AdapterVisitor.java:361)
	at bus.uigen.visitors.AdapterVisitor.traverseVisibleAndInvisible(AdapterVisitor.java:372)
	at bus.uigen.visitors.AdapterVisitor.traverseVisibleAndInvisible(AdapterVisitor.java:70)
	at bus.uigen.uiGenerator.deepCreateChildren(uiGenerator.java:4442)
	at bus.uigen.oadapters.RootAdapter.topAddChildComponents(RootAdapter.java:184)
	at bus.uigen.uiGenerator.topAddChildComponents(uiGenerator.java:862)
	at bus.uigen.uiGenerator.generateInUIPanel(uiGenerator.java:1507)
	at bus.uigen.uiGenerator.generateInBrowsableRootPanel(uiGenerator.java:1473)
	at bus.uigen.uiGenerator.generateInNewBrowsableContainer(uiGenerator.java:1432)
	at bus.uigen.uiGenerator.generateUIFrame(uiGenerator.java:351)
	at bus.uigen.uiGenerator.generateUIFrame(uiGenerator.java:172)
	at bus.uigen.ObjectEditor.edit(ObjectEditor.java:2839)
	at bus.uigen.ObjectEditor.edit(ObjectEditor.java:2806)
	at bus.uigen.ObjectEditor.edit(ObjectEditor.java:2287)
	at bus.uigen.ObjectEditor.edit(ObjectEditor.java:2273)
	at graphics.AProducerConsumerScene2.main(AProducerConsumerScene2.java:358)
Caused by: java.util.NoSuchElementException
	at java.base/java.util.LinkedList.getFirst(LinkedList.java:248)
	... 31 more
class java.util.NoSuchElementException
java.util.NoSuchElementException
	at java.base/java.util.LinkedList.getLast(LinkedList.java:261)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1415)
	at bus.uigen.sadapters.BeanToRecord.get(BeanToRecord.java:204)
	at bus.uigen.sadapters.BeanToRecord.get(BeanToRecord.java:189)
	at bus.uigen.oadapters.ClassAdapter.addClassComponents(ClassAdapter.java:1611)
	at bus.uigen.oadapters.VectorAdapter.createChildrenBasic(VectorAdapter.java:2719)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="3086" _type="PauseCommand" date="Sat Feb 25 11:36:39 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="30246162">
    <prevType><![CDATA[Exception]]></prevType>
    <prev><![CDATA[ExceptionCommand]]></prev>
    <pause><![CDATA[3370]]></pause>
    <nextType><![CDATA[Exception]]></nextType>
    <next><![CDATA[ExceptionCommand]]></next>
  </Command>
  <Command __id="3085" _type="ExceptionCommand" date="Sat Feb 25 11:36:39 EST 2023" starttimestamp="1677312753280" timestamp="30246162" type="Exception">
    <exceptionString><![CDATA[java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1415)
	at bus.uigen.sadapters.BeanToRecord.get(BeanToRecord.java:204)
	at bus.uigen.sadapters.BeanToRecord.get(BeanToRecord.java:189)
	at bus.uigen.oadapters.ClassAdapter.addClassComponents(ClassAdapter.java:1611)
	at bus.uigen.oadapters.VectorAdapter.createChildrenBasic(VectorAdapter.java:2719)
	at bus.uigen.oadapters.CompositeAdapter.createChildren(CompositeAdapter.java:718)
	at bus.uigen.visitors.CreateChildrenAdapterVisitor.visit(CreateChildrenAdapterVisitor.java:28)
	at bus.uigen.visitors.CreateChildrenAdapterVisitor.visit(CreateChildrenAdapterVisitor.java:45)
	at bus.uigen.visitors.AdapterVisitor.traverseVisibleAndInvisible(AdapterVisitor.java:361)
	at bus.uigen.visitors.AdapterVisitor.traverseVisibleAndInvisible(AdapterVisitor.java:372)
	at bus.uigen.visitors.AdapterVisitor.traverseVisibleAndInvisible(AdapterVisitor.java:70)
	at bus.uigen.uiGenerator.deepCreateChildren(uiGenerator.java:4442)
	at bus.uigen.oadapters.RootAdapter.topAddChildComponents(RootAdapter.java:184)
	at bus.uigen.uiGenerator.topAddChildComponents(uiGenerator.java:862)
	at bus.uigen.uiGenerator.generateInUIPanel(uiGenerator.java:1507)
	at bus.uigen.uiGenerator.generateInBrowsableRootPanel(uiGenerator.java:1473)
	at bus.uigen.uiGenerator.generateInNewBrowsableContainer(uiGenerator.java:1432)
	at bus.uigen.uiGenerator.generateUIFrame(uiGenerator.java:351)
	at bus.uigen.uiGenerator.generateUIFrame(uiGenerator.java:172)
	at bus.uigen.ObjectEditor.edit(ObjectEditor.java:2839)
	at bus.uigen.ObjectEditor.edit(ObjectEditor.java:2806)
	at bus.uigen.ObjectEditor.edit(ObjectEditor.java:2287)
	at bus.uigen.ObjectEditor.edit(ObjectEditor.java:2273)
	at graphics.AProducerConsumerScene2.main(AProducerConsumerScene2.java:358)
Caused by: java.util.NoSuchElementException
	at java.base/java.util.LinkedList.getLast(LinkedList.java:261)
	... 31 more
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="3087" _type="ConsoleOutput" date="Sat Feb 25 11:36:39 EST 2023" overflow="false" starttimestamp="1677312753280" timestamp="30246384" type="ConsoleOutput">
    <outputString><![CDATA[W*** Value: null of Root.First not in range.
W*** Value: null of Root.Last not in range.
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"E"), Diff(INSERT,"W"), Diff(EQUAL,"*** "), Diff(DELETE,"Object:graphics.ABell@463b4ac8 displayed multiple times with following references:¶ [AProducerConsumerScene2.queueBellList.first, AProducerConsumerScene2.queueBellList.last]¶ Remove one of these references in the displayed logical structure by, for instance, renaming the getter for the property storing the shared object or adding the @util.annotations.Visible(false) annotation before the getter.¶If you think it is safe to tareverse  all of these  references then add the annotattion @util.annotattions.AllowMultipleEqualReferences(false) nefore the getter.¶E*** Object:graphics.ABell@463b4ac8 displayed multiple times with following references:¶ [AProducerConsumerScene2.queueBellList.first, AProducerConsumerScene2.queueBellList.0, AProducerConsumerScene2.queueBellList.last]¶ Remove one of these references in the displayed logical structure by, for instance, renaming the getter for the property storing the shared object or adding the @util.annotations.Visible(false) annotation before the getter.¶If you think it is safe to tareverse  all of these  references then add the annotattion @util.annotattions.AllowMultipleEqualReferences(false) nefore the getter.¶E*** Object:graphics.APlate@241e8ea6 displayed multiple times with following references:¶ [AProducerConsumerScene2.queuedList.first, AProducerConsumerScene2.queuedList.last]¶ Remove one of these references in the displayed logical structure by, for instance, renaming the getter for the property storing the shared object or adding the @util.annotations.Visible(false) annotation before the getter.¶If you think it is safe to tareverse  all of these  references then add the annotattion @util.annotattions.AllowMultipleEqualReferences(false) nefore the getter.¶E*** Object:graphics.APlate@241e8ea6 displayed multiple times with following references:¶ [AProducerConsumerScene2.queuedList.0, AProducerConsumerScene2.queuedList.first, AProducerConsumerScene2.queuedList.last]¶ Remove one of these references in the displayed logical structure by, for instance, renaming the getter for the property storing the shared object or adding the @util.annotations.Visible(false) annotation before the getter.¶If you think it is safe to tareverse  all of these  references then add the annotattion @util.annotattions.AllowMultipleEqualReferences(false) nefore the getter"), Diff(INSERT,"Value: null of Root.First not in range.¶W*** Value: null of Root.Last not in range"), Diff(EQUAL,".¶")]]]></diff>
  </Command>
  <Command __id="3089" _type="PauseCommand" date="Sat Feb 25 11:36:42 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="30248787">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2403]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="3088" _type="ShellCommand" date="Sat Feb 25 11:36:42 EST 2023" starttimestamp="1677312753280" timestamp="30248787" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3090" _type="MoveCaretCommand" caretOffset="9424" date="Sat Feb 25 11:36:42 EST 2023" docOffset="10304" starttimestamp="1677312753280" timestamp="30249714" />
  <Command __id="3091" _type="MoveCaretCommand" caretOffset="9424" date="Sat Feb 25 11:36:42 EST 2023" docOffset="10304" starttimestamp="1677312753280" timestamp="30249714" />
  <Command __id="3092" _type="SelectTextCommand" caretOffset="9428" date="Sat Feb 25 11:36:43 EST 2023" end="9428" start="9418" starttimestamp="1677312753280" timestamp="30249875" />
  <Command __id="3093" _type="SelectTextCommand" caretOffset="9428" date="Sat Feb 25 11:36:43 EST 2023" end="9428" start="9418" starttimestamp="1677312753280" timestamp="30249875" />
  <DocumentChange __id="3053" _type="Insert" date="Sat Feb 25 11:36:23 EST 2023" docASTNodeCount="1616" docActiveCodeLength="9461" docExpressionCount="1105" docLength="10391" length="7" offset="10372" repeat="6" starttimestamp="1677312753280" timestamp="30230093" timestamp2="30231626">
    <text><![CDATA[(list);]]></text>
  </DocumentChange>
  <Command __id="3095" _type="PauseCommand" date="Sat Feb 25 11:36:47 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="30254062">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[4187]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="3099" _type="MoveCaretCommand" caretOffset="0" date="Sat Feb 25 11:37:05 EST 2023" docOffset="3" starttimestamp="1677312753280" timestamp="30272302" />
  <Command __id="3097" _type="DiffBasedFileOpenCommand" date="Sat Feb 25 11:37:05 EST 2023" projectName="null" starttimestamp="1677312753280" timestamp="30272077">
    <filePath><![CDATA[null]]></filePath>
    <diff><![CDATA[null]]></diff>
  </Command>
  <Command __id="3101" _type="PauseCommand" date="Sat Feb 25 11:37:07 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="30273874">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1572]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="3102" _type="SelectTextCommand" caretOffset="9428" date="Sat Feb 25 11:37:07 EST 2023" end="9428" start="9418" starttimestamp="1677312753280" timestamp="30274037" />
  <Command __id="3104" _type="PauseCommand" date="Sat Feb 25 11:37:12 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="30278965">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[4928]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3103" _type="MoveCaretCommand" caretOffset="9499" date="Sat Feb 25 11:37:12 EST 2023" docOffset="10379" starttimestamp="1677312753280" timestamp="30278965" />
  <Command __id="3105" _type="MoveCaretCommand" caretOffset="9499" date="Sat Feb 25 11:37:12 EST 2023" docOffset="10379" starttimestamp="1677312753280" timestamp="30278965" />
  <Command __id="3107" _type="PauseCommand" date="Sat Feb 25 11:38:14 EST 2023" range="1m-2m" starttimestamp="1677312753280" timestamp="30341576">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[62611]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="3106" _type="SelectTextCommand" caretOffset="9070" date="Sat Feb 25 11:38:14 EST 2023" end="9185" start="9070" starttimestamp="1677312753280" timestamp="30341576" />
  <Command __id="3108" _type="SelectTextCommand" caretOffset="9070" date="Sat Feb 25 11:38:14 EST 2023" end="9185" start="9070" starttimestamp="1677312753280" timestamp="30341576" />
  <Command __id="3109" _type="MoveCaretCommand" caretOffset="9178" date="Sat Feb 25 11:38:15 EST 2023" docOffset="10058" starttimestamp="1677312753280" timestamp="30342351" />
  <Command __id="3110" _type="MoveCaretCommand" caretOffset="9178" date="Sat Feb 25 11:38:15 EST 2023" docOffset="10058" starttimestamp="1677312753280" timestamp="30342351" />
  <Command __id="3112" _type="PauseCommand" date="Sat Feb 25 11:38:17 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="30344123">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1772]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3111" _type="MoveCaretCommand" caretOffset="9182" date="Sat Feb 25 11:38:17 EST 2023" docOffset="10062" starttimestamp="1677312753280" timestamp="30344123" />
  <Command __id="3113" _type="MoveCaretCommand" caretOffset="9182" date="Sat Feb 25 11:38:17 EST 2023" docOffset="10062" starttimestamp="1677312753280" timestamp="30344123" />
  <Command __id="3115" _type="PauseCommand" date="Sat Feb 25 11:38:50 EST 2023" range="30s-1m" starttimestamp="1677312753280" timestamp="30377617">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[33494]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3114" _type="MoveCaretCommand" caretOffset="9102" date="Sat Feb 25 11:38:50 EST 2023" docOffset="9982" starttimestamp="1677312753280" timestamp="30377617" />
  <Command __id="3116" _type="MoveCaretCommand" caretOffset="9102" date="Sat Feb 25 11:38:50 EST 2023" docOffset="9982" starttimestamp="1677312753280" timestamp="30377617" />
  <Command __id="3117" _type="SelectTextCommand" caretOffset="9108" date="Sat Feb 25 11:38:51 EST 2023" end="9108" start="9101" starttimestamp="1677312753280" timestamp="30377763" />
  <Command __id="3118" _type="SelectTextCommand" caretOffset="9108" date="Sat Feb 25 11:38:51 EST 2023" end="9108" start="9101" starttimestamp="1677312753280" timestamp="30377764" />
  <Command __id="3119" _type="SelectTextCommand" caretOffset="9117" date="Sat Feb 25 11:38:51 EST 2023" end="9117" start="9082" starttimestamp="1677312753280" timestamp="30377936" />
  <Command __id="3120" _type="SelectTextCommand" caretOffset="9117" date="Sat Feb 25 11:38:51 EST 2023" end="9117" start="9082" starttimestamp="1677312753280" timestamp="30377936" />
  <Command __id="3122" _type="PauseCommand" date="Sat Feb 25 11:38:53 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="30380301">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[2365]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3121" _type="MoveCaretCommand" caretOffset="9114" date="Sat Feb 25 11:38:53 EST 2023" docOffset="9994" starttimestamp="1677312753280" timestamp="30380301" />
  <Command __id="3123" _type="MoveCaretCommand" caretOffset="9114" date="Sat Feb 25 11:38:53 EST 2023" docOffset="9994" starttimestamp="1677312753280" timestamp="30380301" />
  <Command __id="3124" _type="MoveCaretCommand" caretOffset="9182" date="Sat Feb 25 11:38:54 EST 2023" docOffset="10062" starttimestamp="1677312753280" timestamp="30381158" />
  <Command __id="3125" _type="MoveCaretCommand" caretOffset="9182" date="Sat Feb 25 11:38:54 EST 2023" docOffset="10062" starttimestamp="1677312753280" timestamp="30381158" />
  <Command __id="3127" _type="PauseCommand" date="Sat Feb 25 11:39:47 EST 2023" range="30s-1m" starttimestamp="1677312753280" timestamp="30434079">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[52921]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="3126" _type="ShellCommand" date="Sat Feb 25 11:39:47 EST 2023" starttimestamp="1677312753280" timestamp="30434079" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3129" _type="PauseCommand" date="Sat Feb 25 11:39:49 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="30436441">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2362]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="3128" _type="ShellCommand" date="Sat Feb 25 11:39:49 EST 2023" starttimestamp="1677312753280" timestamp="30436441" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3130" _type="MoveCaretCommand" caretOffset="9182" date="Sat Feb 25 11:39:49 EST 2023" docOffset="10062" starttimestamp="1677312753280" timestamp="30436518" />
  <Command __id="3131" _type="MoveCaretCommand" caretOffset="9182" date="Sat Feb 25 11:39:49 EST 2023" docOffset="10062" starttimestamp="1677312753280" timestamp="30436518" />
  <Command __id="3133" _type="PauseCommand" date="Sat Feb 25 11:40:06 EST 2023" range="10s-20s" starttimestamp="1677312753280" timestamp="30453297">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[16779]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3132" _type="MoveCaretCommand" caretOffset="9178" date="Sat Feb 25 11:40:06 EST 2023" docOffset="10058" starttimestamp="1677312753280" timestamp="30453297" />
  <Command __id="3134" _type="MoveCaretCommand" caretOffset="9178" date="Sat Feb 25 11:40:06 EST 2023" docOffset="10058" starttimestamp="1677312753280" timestamp="30453297" />
  <Command __id="3136" _type="PauseCommand" date="Sat Feb 25 11:40:08 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="30455002">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1705]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3135" _type="MoveCaretCommand" caretOffset="9102" date="Sat Feb 25 11:40:08 EST 2023" docOffset="9982" starttimestamp="1677312753280" timestamp="30455002" />
  <Command __id="3137" _type="MoveCaretCommand" caretOffset="9102" date="Sat Feb 25 11:40:08 EST 2023" docOffset="9982" starttimestamp="1677312753280" timestamp="30455003" />
  <Command __id="3138" _type="SelectTextCommand" caretOffset="9108" date="Sat Feb 25 11:40:08 EST 2023" end="9108" start="9101" starttimestamp="1677312753280" timestamp="30455218" />
  <Command __id="3139" _type="SelectTextCommand" caretOffset="9108" date="Sat Feb 25 11:40:08 EST 2023" end="9108" start="9101" starttimestamp="1677312753280" timestamp="30455218" />
  <Command __id="3141" _type="PauseCommand" date="Sat Feb 25 11:40:09 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="30456598">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1380]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3140" _type="MoveCaretCommand" caretOffset="9102" date="Sat Feb 25 11:40:09 EST 2023" docOffset="9982" starttimestamp="1677312753280" timestamp="30456598" />
  <Command __id="3142" _type="MoveCaretCommand" caretOffset="9102" date="Sat Feb 25 11:40:09 EST 2023" docOffset="9982" starttimestamp="1677312753280" timestamp="30456598" />
  <Command __id="3144" _type="PauseCommand" date="Sat Feb 25 11:40:11 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="30457915">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1317]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="3143" _type="ShellCommand" date="Sat Feb 25 11:40:11 EST 2023" starttimestamp="1677312753280" timestamp="30457915" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3146" _type="PauseCommand" date="Sat Feb 25 11:40:12 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="30459323">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1408]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="3145" _type="ShellCommand" date="Sat Feb 25 11:40:12 EST 2023" starttimestamp="1677312753280" timestamp="30459323" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3147" _type="MoveCaretCommand" caretOffset="9182" date="Sat Feb 25 11:40:12 EST 2023" docOffset="10062" starttimestamp="1677312753280" timestamp="30459541" />
  <Command __id="3148" _type="MoveCaretCommand" caretOffset="9182" date="Sat Feb 25 11:40:12 EST 2023" docOffset="10062" starttimestamp="1677312753280" timestamp="30459541" />
  <Command __id="3150" _type="PauseCommand" date="Sat Feb 25 11:40:18 EST 2023" range="5s-10s" starttimestamp="1677312753280" timestamp="30465645">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[6104]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3149" _type="MoveCaretCommand" caretOffset="9185" date="Sat Feb 25 11:40:18 EST 2023" docOffset="10065" starttimestamp="1677312753280" timestamp="30465645" />
  <Command __id="3151" _type="MoveCaretCommand" caretOffset="9185" date="Sat Feb 25 11:40:18 EST 2023" docOffset="10065" starttimestamp="1677312753280" timestamp="30465645" />
  <Command __id="3152" _type="MoveCaretCommand" caretOffset="9182" date="Sat Feb 25 11:40:19 EST 2023" docOffset="10062" starttimestamp="1677312753280" timestamp="30466404" />
  <Command __id="3153" _type="MoveCaretCommand" caretOffset="9182" date="Sat Feb 25 11:40:19 EST 2023" docOffset="10062" starttimestamp="1677312753280" timestamp="30466404" />
  <Command __id="3155" _type="PauseCommand" date="Sat Feb 25 11:40:31 EST 2023" range="10s-20s" starttimestamp="1677312753280" timestamp="30477964">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[11560]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3154" _type="MoveCaretCommand" caretOffset="9182" date="Sat Feb 25 11:40:31 EST 2023" docOffset="10062" starttimestamp="1677312753280" timestamp="30477964" />
  <Command __id="3156" _type="MoveCaretCommand" caretOffset="9182" date="Sat Feb 25 11:40:31 EST 2023" docOffset="10062" starttimestamp="1677312753280" timestamp="30477964" />
  <Command __id="3158" _type="PauseCommand" date="Sat Feb 25 11:40:38 EST 2023" range="5s-10s" starttimestamp="1677312753280" timestamp="30484990">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[7026]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3157" _type="MoveCaretCommand" caretOffset="9182" date="Sat Feb 25 11:40:38 EST 2023" docOffset="10062" starttimestamp="1677312753280" timestamp="30484990" />
  <Command __id="3159" _type="MoveCaretCommand" caretOffset="9182" date="Sat Feb 25 11:40:38 EST 2023" docOffset="10062" starttimestamp="1677312753280" timestamp="30484990" />
  <Command __id="3161" _type="PauseCommand" date="Sat Feb 25 11:41:07 EST 2023" range="20s-30s" starttimestamp="1677312753280" timestamp="30514162">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[29172]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3160" _type="MoveCaretCommand" caretOffset="9150" date="Sat Feb 25 11:41:07 EST 2023" docOffset="10030" starttimestamp="1677312753280" timestamp="30514162" />
  <Command __id="3162" _type="MoveCaretCommand" caretOffset="9150" date="Sat Feb 25 11:41:07 EST 2023" docOffset="10030" starttimestamp="1677312753280" timestamp="30514163" />
  <Command __id="3163" _type="SelectTextCommand" caretOffset="9152" date="Sat Feb 25 11:41:07 EST 2023" end="9152" start="9139" starttimestamp="1677312753280" timestamp="30514380" />
  <Command __id="3164" _type="SelectTextCommand" caretOffset="9152" date="Sat Feb 25 11:41:07 EST 2023" end="9152" start="9139" starttimestamp="1677312753280" timestamp="30514380" />
  <Command __id="3165" _type="MoveCaretCommand" caretOffset="9182" date="Sat Feb 25 11:41:08 EST 2023" docOffset="10062" starttimestamp="1677312753280" timestamp="30515281" />
  <Command __id="3166" _type="MoveCaretCommand" caretOffset="9182" date="Sat Feb 25 11:41:08 EST 2023" docOffset="10062" starttimestamp="1677312753280" timestamp="30515281" />
  <Command __id="3168" _type="PauseCommand" date="Sat Feb 25 11:41:14 EST 2023" range="5s-10s" starttimestamp="1677312753280" timestamp="30521229">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[5948]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3167" _type="MoveCaretCommand" caretOffset="9065" date="Sat Feb 25 11:41:14 EST 2023" docOffset="9945" starttimestamp="1677312753280" timestamp="30521229" />
  <Command __id="3169" _type="MoveCaretCommand" caretOffset="9065" date="Sat Feb 25 11:41:14 EST 2023" docOffset="9945" starttimestamp="1677312753280" timestamp="30521229" />
  <Command __id="3171" _type="PauseCommand" date="Sat Feb 25 11:41:17 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="30524486">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3257]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3170" _type="MoveCaretCommand" caretOffset="9068" date="Sat Feb 25 11:41:17 EST 2023" docOffset="9948" starttimestamp="1677312753280" timestamp="30524486" />
  <Command __id="3172" _type="MoveCaretCommand" caretOffset="9068" date="Sat Feb 25 11:41:17 EST 2023" docOffset="9948" starttimestamp="1677312753280" timestamp="30524486" />
  <Command __id="3100" _type="DiffBasedFileOpenCommand" date="Sat Feb 25 11:37:07 EST 2023" docASTNodeCount="1616" docActiveCodeLength="9461" docExpressionCount="1105" docLength="10391" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="30273874">
    <filePath><![CDATA[C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\graphics\AProducerConsumerScene2.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package graphics;¶¶import java.util.ArrayList;¶import java.util.LinkedList;¶import java.util.List;¶import java.util.Queue;¶¶import animations.ACookingPlateAnimator;¶import animations.ACookingPlateCommand;¶import animations.AServingPlateAnimator;¶import animations.AServingPlateCommand;¶import animations.CookingPlateAnimator;¶import animations.ServingPlateAnimator;¶import bus.uigen.OEFrame;¶import bus.uigen.ObjectEditor;¶import bus.uigen.shapes.ALineModel;¶import bus.uigen.shapes.AStringModel;¶import bus.uigen.shapes.AnImageModel;¶import bus.uigen.shapes.OEShapeModel;¶import shapes.FlexibleTextShape;¶import util.annotations.EditablePropertyNames;¶import util.annotations.Label;¶import util.annotations.PropertyNames;¶import util.annotations.StructurePattern;¶import util.annotations.StructurePatternNames;¶import util.annotations.Visible;¶import util.misc.ThreadSupport;¶¶import java.awt.Color;¶¶@StructurePattern(StructurePatternNames.BEAN_PATTERN)¶@PropertyNames({¶	"patronList",¶	"chefList",¶	"buffer",¶	"queuedList",¶	"bellsList",¶	"queueBellList"¶})¶@EditablePropertyNames({¶})¶public class AProducerConsumerScene2 implements ProducerConsumerScene2 {¶	¶	//Avatar offsets inside scene¶	int[] chefXValues = {120,-50,-50,120};¶	int[] chefYValues = {-50,35,210,320};¶	int[] patronXValues = {650,850,850,650};¶	int[] patronYValues = {-50,35,220,320};¶	int[] bellXValues = {680,880,880,680};¶	int[] bellYValues = {75,160,345,445};¶	int INIT_HEAD_Y = 60;¶	int INIT_HEAD_X = 163;¶	int INIT_HEAD_HEIGHT = 90;¶	int INIT_HEAD_WIDTH = 80;¶	int PLATE_OFFSET_X = 30;¶	int PLATE_OFFSET_Y = 10;¶	int PAUSE = 5;¶	¶	//Booleans that help with the functionality of the below methods¶	boolean INIT_COOK = true;¶	boolean full = false;¶	int fullPlateOffset = -5;¶	¶	//Defining the chef and patron images¶	String[] chefImages = {"images/0.png","images/1.png","images/2.png","images/3.png"};¶	String[] patronImages = {"images/4.png", "images/5.png", "images/6.png", "images/7.png"};¶	¶	//Buffer arrays¶	int[] bufferXValues = {625, 680, 680, 620, 535, 460, 460, 535};¶	int[] bufferYValues = {200, 275, 365, 425, 425, 365, 275, 200};¶	boolean[] isFull = {false, false, false, false, false, false, false, false};¶	¶	//The properties of our class¶	List<APatron> patronList;¶	List<AChef> chefList;¶	BoundedBuffer buffer = new ABoundedBuffer();¶	¶	//This list will keep a track of the plates that enter the buffer so that FIFO¶	Queue<APlate> queuedList;¶	¶	OEShapeModel[] lineArray = {buffer.getLineTwo(), buffer.getLineThree(), buffer.getLineFour(), ¶								buffer.getLineFive(), buffer.getLineSix(), buffer.getLineSeven(), ¶								buffer.getLineEight(), buffer.getLineOne()};¶	¶	List<ABell> bellsList;¶	Queue<ABell> queueBellList;¶	int[] bellValues = {127, 212, 397, 497};¶	Queue<Integer> bellIntegerList;¶	¶	ACookingPlateCommand cookingCommand;¶	CookingPlateAnimator cookingAnimator;¶	¶	AServingPlateCommand servingCommand;¶	ServingPlateAnimator servingAnimator;¶	¶	//The constructor sets the scene with one chef, patron, a buffer, and a plate (not visible)¶	public AProducerConsumerScene2() {¶		patronList = new ArrayList<APatron>();¶		chefList = new ArrayList<AChef>();¶		//buffer = new ABoundedBuffer();¶		¶		queuedList = new LinkedList<APlate>();¶		bellsList = new ArrayList<ABell>();¶		queueBellList = new LinkedList<ABell>();¶		bellIntegerList = new LinkedList<Integer>();¶		¶		patronList.add(0, new APatron());¶		OEShapeModel initPatronHead = new AnImageModel(patronImages[0]);¶		initPatronHead.setX(INIT_HEAD_X);¶		initPatronHead.setY(INIT_HEAD_Y);¶		initPatronHead.setHeight(INIT_HEAD_HEIGHT);¶		initPatronHead.setWidth(INIT_HEAD_WIDTH);¶		patronList.get(0).patron.setHead(initPatronHead);¶		patronList.get(0).move(patronXValues[0], patronYValues[0]);¶		¶		chefList.add(0, new AChef());¶		OEShapeModel initChefHead = new AnImageModel(chefImages[0]);¶		initChefHead.setX(INIT_HEAD_X);¶		initChefHead.setY(INIT_HEAD_Y);¶		initChefHead.setHeight(INIT_HEAD_HEIGHT);¶		initChefHead.setWidth(INIT_HEAD_WIDTH);¶		chefList.get(0).chef.setHead(initChefHead);¶		chefList.get(0).move(chefXValues[0], chefYValues[0]);¶		¶		queuedList.add(new APlate());¶		queuedList.peek().getPlate().setHeight(0);¶		queuedList.peek().getPlate().setWidth(0);¶		¶		cookingAnimator = new ACookingPlateAnimator();¶		servingAnimator = new AServingPlateAnimator();¶		¶		bellsList.add(new ABell());¶		bellsList.get(0).getBell().setHeight(0);¶		bellsList.get(0).getBell().setWidth(0);¶		¶		queueBellList.add(new ABell());¶		queueBellList.peek().getBell().setHeight(0);¶		queueBellList.peek().getBell().setWidth(0);¶		¶		bellIntegerList.add(0);¶	}¶	¶	//Producer consumer methods¶	¶	//Init Scene sets the number of patrons and chefs in the scene¶	@Label("Init Scene")¶	public void initScene(int patronAmount, int chefAmount) {¶		bellsList.clear();¶		for (int i=0; i<patronAmount; i++) { ¶			APatron patron = new APatron();¶			patronList.add(i, patron);¶			OEShapeModel newHead = new AnImageModel(patronImages[i]);¶			patron.patron.setHead(newHead); ¶			newHead.setX(INIT_HEAD_X); ¶			newHead.setY(INIT_HEAD_Y);¶			newHead.setHeight(INIT_HEAD_HEIGHT);¶			newHead.setWidth(INIT_HEAD_WIDTH);¶			patron.move(patronXValues[i], patronYValues[i]);¶			¶			bellsList.add(new ABell());¶			bellsList.get(i).move(bellXValues[i], bellYValues[i]);¶		}¶		for (int i=0; i<chefAmount; i++) {¶			AChef chef = new AChef();¶			chefList.add(i, chef);¶			OEShapeModel newHead = new AnImageModel(chefImages[i]);¶			chef.chef.setHead(newHead);¶			newHead.setX(INIT_HEAD_X); ¶			newHead.setY(INIT_HEAD_Y);¶			newHead.setHeight(INIT_HEAD_HEIGHT);¶			newHead.setWidth(INIT_HEAD_WIDTH);¶			chef.move(chefXValues[i], chefYValues[i]);¶		}¶	}¶	¶	//Once the head of an avatar is chosen, it makes the plate that they "cook" appear¶	public void cook(OEShapeModel head) {¶		System.out.println("MADE TO COOK METHOD!!!!");¶		if (INIT_COOK) {¶			INIT_COOK=!INIT_COOK;¶			queuedList.remove();¶		}¶		¶		int headX = head.getCenterX();¶		int headY = head.getCenterY();¶		¶		System.out.println("First Checkpoint");¶		APlate newPlate = new APlate();¶		newPlate.getPlate().setHeight(0);¶		newPlate.getPlate().setWidth(0);¶		¶		if (full) {¶			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y+fullPlateOffset);¶			fullPlateOffset = fullPlateOffset - 5;¶		} else {¶			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y);¶		}¶		¶		System.out.println("Second checkpoint");¶		cookingCommand = new ACookingPlateCommand(cookingAnimator, newPlate, 40, 15);¶		Thread thread = new Thread (cookingCommand);¶		thread.start();¶		System.out.println("Third checkpoint");¶	}¶	¶	public void serve(APlate plate) {¶		//Checks to see if the buffer is full. If it is, then can't serve.¶		resetLineColors();¶		if(checkIfFull()) {¶			resetLineColors();¶			return;¶		}¶		¶		queuedList.add(plate);¶		¶		int workingPlatePlace = queuedList.size();¶		FlexibleTextShape platePlace = new AStringModel(Integer.toString(workingPlatePlace));¶		plate.setText(platePlace);¶		¶		changeLineColors(workingPlatePlace);¶		servingCommand = new AServingPlateCommand(servingAnimator,plate,PAUSE, bufferXValues[workingPlatePlace], bufferYValues[workingPlatePlace]);¶		Thread thread = new Thread(servingCommand);¶		thread.start();¶		isFull[workingPlatePlace] = true;¶	}¶	¶	public void order(OEShapeModel bell) {¶		if(checkIfFull()) {¶			resetLineColors();¶			resetBuffer();¶		}¶		bellIntegerList.add(0);¶		int bellPlace = findBell(bell.getCenterY());¶		bellsList.get(bellPlace).getText().setText(String.valueOf(bellIntegerList.size()-1));¶		¶		int platePlace = findFirstAvailablePlate();¶		//servingCommand = new AServingPlateCommand(servingAnimator,plateList.get(platePlace),PAUSE, bell.getCenterX() , bell.getCenterY());¶		Thread thread = new Thread(servingCommand);¶		thread.start();¶		¶		//cookingCommand = new ACookingPlateCommand(cookingAnimator, plateList.get(0), 0, 15);¶		Thread eatingThread = new Thread (cookingCommand);¶		eatingThread.start();¶		//plateList.get(0).getText().setText("");¶	}¶	¶	public void eat() {¶		//plateList.remove(0);¶	}¶	¶	@Override¶	@Visible(false)¶	public int findBell(int centerY) {¶		for(int i=0; i<bellsList.size();i++) {¶			if(bellsList.get(i).getBell().getCenterY() == centerY) {¶				return i;¶			}¶		}¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public int findFirstAvailablePlate() {¶		for (int i=0; i<isFull.length;i++) {¶			if(isFull[i] == true) {¶				return i;¶			}¶		}¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public void resetBuffer() {¶		¶		for (int i=0; i<isFull.length;i++) {¶			isFull[i] = false;¶		}¶	}¶	¶	@Override¶	@Visible(false)¶	public int findPatron(OEShapeModel patronHead) {¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public boolean checkIfFull() {¶		for (int i=0; i<isFull.length;i++) {¶			if (isFull[i] == false) {¶				full = false;¶				return full;¶			}¶		}¶		full = true;¶		return full;¶	}¶	¶	@Override¶	@Visible(false)¶	public void changeLineColors(int workingPlatePlace) {¶		if(workingPlatePlace == lineArray.length-1) {¶			lineArray[workingPlatePlace].setColor(Color.GREEN);¶			lineArray[0].setColor(Color.GREEN);¶		} else {¶			lineArray[workingPlatePlace].setColor(Color.GREEN);¶			lineArray[workingPlatePlace+1].setColor(Color.GREEN);¶		}¶	}¶	¶	¶	@Override¶	@Visible(false)¶	public void resetLineColors() {¶		for (int i=0; i<lineArray.length; i++) {¶			lineArray[i].setColor(Color.WHITE);¶		}¶	}¶	¶	//Getters for properties of the scene¶	@Override¶	public List<AChef> getChefList() {¶		return chefList;¶	}¶	¶	@Override¶	public List<APatron> getPatronList() {¶		return patronList;¶	}¶	¶	@Override¶	public BoundedBuffer getBuffer() {¶		return buffer;¶	}¶	¶	@Override¶	@util.annotations.Visible(false)¶	public Queue<APlate> getQueuedList() {¶		return queuedList;¶	}¶	¶	@Override¶	public List<ABell> getBellsList() {¶		return bellsList;¶	}¶	¶	@Override¶	@Visible(false)¶	public Queue<ABell> getQueueBellList() {¶		return queueBellList;¶	}¶"), Diff(INSERT,"	¶	¶	public static void main(String[] args) {¶		LinkedList<Integer> list = new LinkedList<Integer>();¶		ObjectEditor.edit(list);¶	}¶	¶"), Diff(EQUAL,"}¶")]]]></diff>
    <snapshot><![CDATA[package graphics;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

import animations.ACookingPlateAnimator;
import animations.ACookingPlateCommand;
import animations.AServingPlateAnimator;
import animations.AServingPlateCommand;
import animations.CookingPlateAnimator;
import animations.ServingPlateAnimator;
import bus.uigen.OEFrame;
import bus.uigen.ObjectEditor;
import bus.uigen.shapes.ALineModel;
import bus.uigen.shapes.AStringModel;
import bus.uigen.shapes.AnImageModel;
import bus.uigen.shapes.OEShapeModel;
import shapes.FlexibleTextShape;
import util.annotations.EditablePropertyNames;
import util.annotations.Label;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Visible;
import util.misc.ThreadSupport;

import java.awt.Color;

@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({
	"patronList",
	"chefList",
	"buffer",
	"queuedList",
	"bellsList",
	"queueBellList"
})
@EditablePropertyNames({
})
public class AProducerConsumerScene2 implements ProducerConsumerScene2 {
	
	//Avatar offsets inside scene
	int[] chefXValues = {120,-50,-50,120};
	int[] chefYValues = {-50,35,210,320};
	int[] patronXValues = {650,850,850,650};
	int[] patronYValues = {-50,35,220,320};
	int[] bellXValues = {680,880,880,680};
	int[] bellYValues = {75,160,345,445};
	int INIT_HEAD_Y = 60;
	int INIT_HEAD_X = 163;
	int INIT_HEAD_HEIGHT = 90;
	int INIT_HEAD_WIDTH = 80;
	int PLATE_OFFSET_X = 30;
	int PLATE_OFFSET_Y = 10;
	int PAUSE = 5;
	
	//Booleans that help with the functionality of the below methods
	boolean INIT_COOK = true;
	boolean full = false;
	int fullPlateOffset = -5;
	
	//Defining the chef and patron images
	String[] chefImages = {"images/0.png","images/1.png","images/2.png","images/3.png"};
	String[] patronImages = {"images/4.png", "images/5.png", "images/6.png", "images/7.png"};
	
	//Buffer arrays
	int[] bufferXValues = {625, 680, 680, 620, 535, 460, 460, 535};
	int[] bufferYValues = {200, 275, 365, 425, 425, 365, 275, 200};
	boolean[] isFull = {false, false, false, false, false, false, false, false};
	
	//The properties of our class
	List<APatron> patronList;
	List<AChef> chefList;
	BoundedBuffer buffer = new ABoundedBuffer();
	
	//This list will keep a track of the plates that enter the buffer so that FIFO
	Queue<APlate> queuedList;
	
	OEShapeModel[] lineArray = {buffer.getLineTwo(), buffer.getLineThree(), buffer.getLineFour(), 
								buffer.getLineFive(), buffer.getLineSix(), buffer.getLineSeven(), 
								buffer.getLineEight(), buffer.getLineOne()};
	
	List<ABell> bellsList;
	Queue<ABell> queueBellList;
	int[] bellValues = {127, 212, 397, 497};
	Queue<Integer> bellIntegerList;
	
	ACookingPlateCommand cookingCommand;
	CookingPlateAnimator cookingAnimator;
	
	AServingPlateCommand servingCommand;
	ServingPlateAnimator servingAnimator;
	
	//The constructor sets the scene with one chef, patron, a buffer, and a plate (not visible)
	public AProducerConsumerScene2() {
		patronList = new ArrayList<APatron>();
		chefList = new ArrayList<AChef>();
		//buffer = new ABoundedBuffer();
		
		queuedList = new LinkedList<APlate>();
		bellsList = new ArrayList<ABell>();
		queueBellList = new LinkedList<ABell>();
		bellIntegerList = new LinkedList<Integer>();
		
		patronList.add(0, new APatron());
		OEShapeModel initPatronHead = new AnImageModel(patronImages[0]);
		initPatronHead.setX(INIT_HEAD_X);
		initPatronHead.setY(INIT_HEAD_Y);
		initPatronHead.setHeight(INIT_HEAD_HEIGHT);
		initPatronHead.setWidth(INIT_HEAD_WIDTH);
		patronList.get(0).patron.setHead(initPatronHead);
		patronList.get(0).move(patronXValues[0], patronYValues[0]);
		
		chefList.add(0, new AChef());
		OEShapeModel initChefHead = new AnImageModel(chefImages[0]);
		initChefHead.setX(INIT_HEAD_X);
		initChefHead.setY(INIT_HEAD_Y);
		initChefHead.setHeight(INIT_HEAD_HEIGHT);
		initChefHead.setWidth(INIT_HEAD_WIDTH);
		chefList.get(0).chef.setHead(initChefHead);
		chefList.get(0).move(chefXValues[0], chefYValues[0]);
		
		queuedList.add(new APlate());
		queuedList.peek().getPlate().setHeight(0);
		queuedList.peek().getPlate().setWidth(0);
		
		cookingAnimator = new ACookingPlateAnimator();
		servingAnimator = new AServingPlateAnimator();
		
		bellsList.add(new ABell());
		bellsList.get(0).getBell().setHeight(0);
		bellsList.get(0).getBell().setWidth(0);
		
		queueBellList.add(new ABell());
		queueBellList.peek().getBell().setHeight(0);
		queueBellList.peek().getBell().setWidth(0);
		
		bellIntegerList.add(0);
	}
	
	//Producer consumer methods
	
	//Init Scene sets the number of patrons and chefs in the scene
	@Label("Init Scene")
	public void initScene(int patronAmount, int chefAmount) {
		bellsList.clear();
		for (int i=0; i<patronAmount; i++) { 
			APatron patron = new APatron();
			patronList.add(i, patron);
			OEShapeModel newHead = new AnImageModel(patronImages[i]);
			patron.patron.setHead(newHead); 
			newHead.setX(INIT_HEAD_X); 
			newHead.setY(INIT_HEAD_Y);
			newHead.setHeight(INIT_HEAD_HEIGHT);
			newHead.setWidth(INIT_HEAD_WIDTH);
			patron.move(patronXValues[i], patronYValues[i]);
			
			bellsList.add(new ABell());
			bellsList.get(i).move(bellXValues[i], bellYValues[i]);
		}
		for (int i=0; i<chefAmount; i++) {
			AChef chef = new AChef();
			chefList.add(i, chef);
			OEShapeModel newHead = new AnImageModel(chefImages[i]);
			chef.chef.setHead(newHead);
			newHead.setX(INIT_HEAD_X); 
			newHead.setY(INIT_HEAD_Y);
			newHead.setHeight(INIT_HEAD_HEIGHT);
			newHead.setWidth(INIT_HEAD_WIDTH);
			chef.move(chefXValues[i], chefYValues[i]);
		}
	}
	
	//Once the head of an avatar is chosen, it makes the plate that they "cook" appear
	public void cook(OEShapeModel head) {
		System.out.println("MADE TO COOK METHOD!!!!");
		if (INIT_COOK) {
			INIT_COOK=!INIT_COOK;
			queuedList.remove();
		}
		
		int headX = head.getCenterX();
		int headY = head.getCenterY();
		
		System.out.println("First Checkpoint");
		APlate newPlate = new APlate();
		newPlate.getPlate().setHeight(0);
		newPlate.getPlate().setWidth(0);
		
		if (full) {
			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y+fullPlateOffset);
			fullPlateOffset = fullPlateOffset - 5;
		} else {
			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y);
		}
		
		System.out.println("Second checkpoint");
		cookingCommand = new ACookingPlateCommand(cookingAnimator, newPlate, 40, 15);
		Thread thread = new Thread (cookingCommand);
		thread.start();
		System.out.println("Third checkpoint");
	}
	
	public void serve(APlate plate) {
		//Checks to see if the buffer is full. If it is, then can't serve.
		resetLineColors();
		if(checkIfFull()) {
			resetLineColors();
			return;
		}
		
		queuedList.add(plate);
		
		int workingPlatePlace = queuedList.size();
		FlexibleTextShape platePlace = new AStringModel(Integer.toString(workingPlatePlace));
		plate.setText(platePlace);
		
		changeLineColors(workingPlatePlace);
		servingCommand = new AServingPlateCommand(servingAnimator,plate,PAUSE, bufferXValues[workingPlatePlace], bufferYValues[workingPlatePlace]);
		Thread thread = new Thread(servingCommand);
		thread.start();
		isFull[workingPlatePlace] = true;
	}
	
	public void order(OEShapeModel bell) {
		if(checkIfFull()) {
			resetLineColors();
			resetBuffer();
		}
		bellIntegerList.add(0);
		int bellPlace = findBell(bell.getCenterY());
		bellsList.get(bellPlace).getText().setText(String.valueOf(bellIntegerList.size()-1));
		
		int platePlace = findFirstAvailablePlate();
		//servingCommand = new AServingPlateCommand(servingAnimator,plateList.get(platePlace),PAUSE, bell.getCenterX() , bell.getCenterY());
		Thread thread = new Thread(servingCommand);
		thread.start();
		
		//cookingCommand = new ACookingPlateCommand(cookingAnimator, plateList.get(0), 0, 15);
		Thread eatingThread = new Thread (cookingCommand);
		eatingThread.start();
		//plateList.get(0).getText().setText("");
	}
	
	public void eat() {
		//plateList.remove(0);
	}
	
	@Override
	@Visible(false)
	public int findBell(int centerY) {
		for(int i=0; i<bellsList.size();i++) {
			if(bellsList.get(i).getBell().getCenterY() == centerY) {
				return i;
			}
		}
		return 0;
	}
	
	@Override
	@Visible(false)
	public int findFirstAvailablePlate() {
		for (int i=0; i<isFull.length;i++) {
			if(isFull[i] == true) {
				return i;
			}
		}
		return 0;
	}
	
	@Override
	@Visible(false)
	public void resetBuffer() {
		
		for (int i=0; i<isFull.length;i++) {
			isFull[i] = false;
		}
	}
	
	@Override
	@Visible(false)
	public int findPatron(OEShapeModel patronHead) {
		return 0;
	}
	
	@Override
	@Visible(false)
	public boolean checkIfFull() {
		for (int i=0; i<isFull.length;i++) {
			if (isFull[i] == false) {
				full = false;
				return full;
			}
		}
		full = true;
		return full;
	}
	
	@Override
	@Visible(false)
	public void changeLineColors(int workingPlatePlace) {
		if(workingPlatePlace == lineArray.length-1) {
			lineArray[workingPlatePlace].setColor(Color.GREEN);
			lineArray[0].setColor(Color.GREEN);
		} else {
			lineArray[workingPlatePlace].setColor(Color.GREEN);
			lineArray[workingPlatePlace+1].setColor(Color.GREEN);
		}
	}
	
	
	@Override
	@Visible(false)
	public void resetLineColors() {
		for (int i=0; i<lineArray.length; i++) {
			lineArray[i].setColor(Color.WHITE);
		}
	}
	
	//Getters for properties of the scene
	@Override
	public List<AChef> getChefList() {
		return chefList;
	}
	
	@Override
	public List<APatron> getPatronList() {
		return patronList;
	}
	
	@Override
	public BoundedBuffer getBuffer() {
		return buffer;
	}
	
	@Override
	@util.annotations.Visible(false)
	public Queue<APlate> getQueuedList() {
		return queuedList;
	}
	
	@Override
	public List<ABell> getBellsList() {
		return bellsList;
	}
	
	@Override
	@Visible(false)
	public Queue<ABell> getQueueBellList() {
		return queueBellList;
	}
	
	
	public static void main(String[] args) {
		LinkedList<Integer> list = new LinkedList<Integer>();
		ObjectEditor.edit(list);
	}
	
}
]]></snapshot>
  </Command>
  <Command __id="3174" _type="PauseCommand" date="Sat Feb 25 11:41:22 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="30528992">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[4506]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="3201" _type="ProgramExecutionEvent" className="(Unknown)" date="Sat Feb 25 11:41:26 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1677312753280" timestamp="30533278" type="Debug" />
  <Command __id="3203" _type="ProgramExecutionEvent" className="/ProducersConsumersV3/src/graphics/AProducerConsumerScene2.java" date="Sat Feb 25 11:41:26 EST 2023" kind="HitBreakPoint" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="30533279" type="Run" />
  <Command __id="3204" _type="ProgramExecutionEvent" className="(Unknown)" date="Sat Feb 25 11:41:26 EST 2023" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1677312753280" timestamp="30533279" type="Debug" />
  <Command __id="3205" _type="ProgramExecutionEvent" className="/ProducersConsumersV3/src/graphics/AProducerConsumerScene2.java" date="Sat Feb 25 11:41:26 EST 2023" kind="HitBreakPoint" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="30533279" type="Run" />
  <Command __id="3207" _type="PauseCommand" date="Sat Feb 25 11:41:28 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="30535076">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[1797]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3206" _type="MoveCaretCommand" caretOffset="9091" date="Sat Feb 25 11:41:28 EST 2023" docOffset="9971" starttimestamp="1677312753280" timestamp="30535076" />
  <Command __id="3208" _type="MoveCaretCommand" caretOffset="9091" date="Sat Feb 25 11:41:28 EST 2023" docOffset="9971" starttimestamp="1677312753280" timestamp="30535077" />
  <Command __id="3209" _type="MoveCaretCommand" caretOffset="9079" date="Sat Feb 25 11:41:29 EST 2023" docOffset="9959" starttimestamp="1677312753280" timestamp="30536005" />
  <Command __id="3210" _type="MoveCaretCommand" caretOffset="9079" date="Sat Feb 25 11:41:29 EST 2023" docOffset="9959" starttimestamp="1677312753280" timestamp="30536006" />
  <DocumentChange __id="3173" _type="Insert" date="Sat Feb 25 11:41:22 EST 2023" docASTNodeCount="1616" docActiveCodeLength="9464" docExpressionCount="1105" docLength="10402" length="11" offset="9948" repeat="9" starttimestamp="1677312753280" timestamp="30528992" timestamp2="30531187">
    <text><![CDATA[
	//REMOVE]]></text>
  </DocumentChange>
  <Command __id="3212" _type="PauseCommand" date="Sat Feb 25 11:41:31 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="30538673">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2667]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <DocumentChange __id="3211" _type="Insert" date="Sat Feb 25 11:41:31 EST 2023" docASTNodeCount="1616" docActiveCodeLength="9464" docExpressionCount="1105" docLength="10403" length="1" offset="9959" starttimestamp="1677312753280" timestamp="30538673">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="3213" _type="InsertStringCommand" date="Sat Feb 25 11:41:31 EST 2023" starttimestamp="1677312753280" timestamp="30538684" timestamp2="30538684">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3214" _type="InsertStringCommand" date="Sat Feb 25 11:41:31 EST 2023" starttimestamp="1677312753280" timestamp="30538684" timestamp2="30538684">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3216" _type="PauseCommand" date="Sat Feb 25 11:41:32 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="30539684">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1000]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="3217" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 11:41:32 EST 2023" starttimestamp="1677312753280" timestamp="30539691" />
  <Command __id="3218" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 11:41:32 EST 2023" starttimestamp="1677312753280" timestamp="30539691" />
  <Command __id="3220" _type="PauseCommand" date="Sat Feb 25 11:41:49 EST 2023" range="10s-20s" starttimestamp="1677312753280" timestamp="30556095">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[16404]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3219" _type="MoveCaretCommand" caretOffset="9079" date="Sat Feb 25 11:41:49 EST 2023" docOffset="9959" starttimestamp="1677312753280" timestamp="30556095" />
  <Command __id="3221" _type="MoveCaretCommand" caretOffset="9079" date="Sat Feb 25 11:41:49 EST 2023" docOffset="9959" starttimestamp="1677312753280" timestamp="30556095" />
  <DocumentChange __id="3215" _type="Delete" date="Sat Feb 25 11:41:32 EST 2023" docASTNodeCount="1616" docActiveCodeLength="9464" docExpressionCount="1105" docLength="10402" endLine="337" length="1" offset="9959" startLine="337" starttimestamp="1677312753280" timestamp="30539684">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="3223" _type="PauseCommand" date="Sat Feb 25 11:41:56 EST 2023" range="5s-10s" starttimestamp="1677312753280" timestamp="30563204">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[7109]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <DocumentChange __id="3222" _type="Insert" date="Sat Feb 25 11:41:56 EST 2023" docASTNodeCount="1616" docActiveCodeLength="9465" docExpressionCount="1105" docLength="10403" length="1" offset="10023" starttimestamp="1677312753280" timestamp="30563204">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="3224" _type="InsertStringCommand" date="Sat Feb 25 11:41:56 EST 2023" starttimestamp="1677312753280" timestamp="30563215" timestamp2="30563215">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3225" _type="InsertStringCommand" date="Sat Feb 25 11:41:56 EST 2023" starttimestamp="1677312753280" timestamp="30563215" timestamp2="30563215">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3226" _type="MoveCaretCommand" caretOffset="9144" date="Sat Feb 25 11:41:56 EST 2023" docOffset="10024" starttimestamp="1677312753280" timestamp="30563217" />
  <Command __id="3227" _type="MoveCaretCommand" caretOffset="9144" date="Sat Feb 25 11:41:56 EST 2023" docOffset="10024" starttimestamp="1677312753280" timestamp="30563217" />
  <Command __id="3229" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 11:41:57 EST 2023" starttimestamp="1677312753280" timestamp="30563798" />
  <Command __id="3230" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Feb 25 11:41:57 EST 2023" starttimestamp="1677312753280" timestamp="30563798" />
  <Command __id="3232" _type="PauseCommand" date="Sat Feb 25 11:41:58 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="30564822">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1023]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3231" _type="MoveCaretCommand" caretOffset="9079" date="Sat Feb 25 11:41:58 EST 2023" docOffset="9959" starttimestamp="1677312753280" timestamp="30564821" />
  <Command __id="3233" _type="MoveCaretCommand" caretOffset="9079" date="Sat Feb 25 11:41:58 EST 2023" docOffset="9959" starttimestamp="1677312753280" timestamp="30564823" />
  <Command __id="3235" _type="InsertStringCommand" date="Sat Feb 25 11:41:58 EST 2023" starttimestamp="1677312753280" timestamp="30565006" timestamp2="30565006">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3236" _type="InsertStringCommand" date="Sat Feb 25 11:41:58 EST 2023" starttimestamp="1677312753280" timestamp="30565006" timestamp2="30565006">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3238" _type="InsertStringCommand" date="Sat Feb 25 11:41:58 EST 2023" starttimestamp="1677312753280" timestamp="30565613" timestamp2="30565613">
    <data><![CDATA[G]]></data>
  </Command>
  <Command __id="3239" _type="InsertStringCommand" date="Sat Feb 25 11:41:58 EST 2023" starttimestamp="1677312753280" timestamp="30565614" timestamp2="30565614">
    <data><![CDATA[G]]></data>
  </Command>
  <Command __id="3241" _type="InsertStringCommand" date="Sat Feb 25 11:41:59 EST 2023" starttimestamp="1677312753280" timestamp="30565821" timestamp2="30565821">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="3242" _type="InsertStringCommand" date="Sat Feb 25 11:41:59 EST 2023" starttimestamp="1677312753280" timestamp="30565821" timestamp2="30565821">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="3244" _type="InsertStringCommand" date="Sat Feb 25 11:41:59 EST 2023" starttimestamp="1677312753280" timestamp="30566031" timestamp2="30566031">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="3245" _type="InsertStringCommand" date="Sat Feb 25 11:41:59 EST 2023" starttimestamp="1677312753280" timestamp="30566031" timestamp2="30566031">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="3247" _type="InsertStringCommand" date="Sat Feb 25 11:41:59 EST 2023" starttimestamp="1677312753280" timestamp="30566149" timestamp2="30566149">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="3248" _type="InsertStringCommand" date="Sat Feb 25 11:41:59 EST 2023" starttimestamp="1677312753280" timestamp="30566149" timestamp2="30566149">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="3250" _type="InsertStringCommand" date="Sat Feb 25 11:41:59 EST 2023" starttimestamp="1677312753280" timestamp="30566402" timestamp2="30566402">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="3251" _type="InsertStringCommand" date="Sat Feb 25 11:41:59 EST 2023" starttimestamp="1677312753280" timestamp="30566402" timestamp2="30566402">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="3253" _type="InsertStringCommand" date="Sat Feb 25 11:41:59 EST 2023" starttimestamp="1677312753280" timestamp="30566498" timestamp2="30566498">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="3254" _type="InsertStringCommand" date="Sat Feb 25 11:41:59 EST 2023" starttimestamp="1677312753280" timestamp="30566498" timestamp2="30566498">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="3256" _type="PauseCommand" date="Sat Feb 25 11:42:01 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="30568075">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1577]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3255" _type="MoveCaretCommand" caretOffset="9098" date="Sat Feb 25 11:42:01 EST 2023" docOffset="9978" starttimestamp="1677312753280" timestamp="30568075" />
  <Command __id="3257" _type="MoveCaretCommand" caretOffset="9098" date="Sat Feb 25 11:42:01 EST 2023" docOffset="9978" starttimestamp="1677312753280" timestamp="30568076" />
  <Command __id="3259" _type="PauseCommand" date="Sat Feb 25 11:42:04 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="30571262">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3186]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3258" _type="MoveCaretCommand" caretOffset="9200" date="Sat Feb 25 11:42:04 EST 2023" docOffset="10080" starttimestamp="1677312753280" timestamp="30571262" />
  <Command __id="3260" _type="MoveCaretCommand" caretOffset="9200" date="Sat Feb 25 11:42:04 EST 2023" docOffset="10080" starttimestamp="1677312753280" timestamp="30571262" />
  <DocumentChange __id="3228" _type="Delete" date="Sat Feb 25 11:41:57 EST 2023" docASTNodeCount="1616" docActiveCodeLength="9464" docExpressionCount="1105" docLength="10402" endLine="340" length="1" offset="10023" startLine="340" starttimestamp="1677312753280" timestamp="30563788">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="3234" _type="Insert" date="Sat Feb 25 11:41:58 EST 2023" docASTNodeCount="1616" docActiveCodeLength="9464" docExpressionCount="1105" docLength="10409" length="7" offset="9959" repeat="7" starttimestamp="1677312753280" timestamp="30564989" timestamp2="30566483">
    <text><![CDATA[ Getter]]></text>
  </DocumentChange>
  <Command __id="3262" _type="PauseCommand" date="Sat Feb 25 11:42:15 EST 2023" range="10s-20s" starttimestamp="1677312753280" timestamp="30582104">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[10841]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="3263" _type="MoveCaretCommand" caretOffset="0" date="Sat Feb 25 11:42:15 EST 2023" docOffset="0" starttimestamp="1677312753280" timestamp="30582517" />
  <Command __id="3261" _type="DiffBasedFileOpenCommand" date="Sat Feb 25 11:42:15 EST 2023" docASTNodeCount="917" docActiveCodeLength="5404" docExpressionCount="657" docLength="6091" projectName="ProducersConsumersV3" starttimestamp="1677312753280" timestamp="30582103">
    <filePath><![CDATA[C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\graphics\ABoundedBuffer.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package graphics;

import bus.uigen.OEFrame;
import bus.uigen.ObjectEditor;
import bus.uigen.shapes.ALineModel;
import bus.uigen.shapes.AnOvalModel;
import bus.uigen.shapes.OEShapeModel;
import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;

import java.awt.BasicStroke;
import java.awt.Color;

@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({
	"circle",
	"lineOne",
	"lineTwo",
	"lineThree",
	"lineFour",
	"lineFive",
	"lineSix",
	"lineSeven",
	"lineEight"
})
@EditablePropertyNames({
})
public class ABoundedBuffer implements BoundedBuffer {
	//Units for centering the circle
	int INIT_X = 420;
	int INIT_Y = 175;
	int INIT_CIRCLE_HEIGHT = 350;
	int INIT_CIRCLE_WIDTH = 350;
	
	//Line one is the left side of the first buffer & right side of the last buffer
	double LINE_ONE_ANGLE = (5*Math.PI)/4;
	int LINE_ONE_X = INIT_X + (INIT_CIRCLE_WIDTH/2);
	int LINE_ONE_Y = 350;
	int LINE_ONE_RADIUS = 176;
	
	//Line two is the right side of the first buffer & left side of the second buffer
	double LINE_TWO_ANGLE = (3*Math.PI)/2;
	
	//Line three is the right side of the second buffer & left side of the third buffer
	double LINE_THREE_ANGLE = (7*Math.PI)/4;
	
	//Line four is the right side of the third buffer & left side of the fourth buffer
	double LINE_FOUR_ANGLE = 0;
	
	//Line five is the right side of the fourth buffer & left side of the fifth buffer
	double LINE_FIVE_ANGLE = (Math.PI/4);
	
	//Line six is the right side of the fifth buffer & left side of the sixth buffer
	double LINE_SIX_ANGLE = (Math.PI/2);
	
	//Line seven is the right side of the sixth buffer & left side of the seventh buffer
	double LINE_SEVEN_ANGLE = (3*Math.PI/4);
	
	//Line eight is the right side of the seventh buffer & left side of the eight buffer
	double LINE_EIGHT_ANGLE = (Math.PI);
	
	OEShapeModel circle;
	OEShapeModel lineOne;
	OEShapeModel lineTwo;
	OEShapeModel lineThree;
	OEShapeModel lineFour;
	OEShapeModel lineFive;
	OEShapeModel lineSix;
	OEShapeModel lineSeven;
	OEShapeModel lineEight;
	
	public ABoundedBuffer() {
		circle = new AnOvalModel();
		circle.setHeight(INIT_CIRCLE_HEIGHT);
		circle.setWidth(INIT_CIRCLE_WIDTH);
		circle.setX(INIT_X);
		circle.setY(INIT_Y);
		circle.setColor(Color.WHITE);
		circle.setStroke(new BasicStroke(2.0F));
		
		lineOne = new ALineModel();
		lineOne.setX(LINE_ONE_X);
		lineOne.setY(LINE_ONE_Y);
		lineOne.setRadius(LINE_ONE_RADIUS);
		lineOne.setAngle(LINE_ONE_ANGLE);
		lineOne.setColor(Color.WHITE);
		lineOne.setStroke(new BasicStroke(2.0F));
		
		lineTwo = new ALineModel();
		lineTwo.setX(LINE_ONE_X);
		lineTwo.setY(LINE_ONE_Y);
		lineTwo.setRadius(LINE_ONE_RADIUS);
		lineTwo.setAngle(LINE_TWO_ANGLE);
		lineTwo.setColor(Color.WHITE);
		lineTwo.setStroke(new BasicStroke(2.0F));
		
		lineThree = new ALineModel();
		lineThree.setX(LINE_ONE_X);
		lineThree.setY(LINE_ONE_Y);
		lineThree.setRadius(LINE_ONE_RADIUS);
		lineThree.setAngle(LINE_THREE_ANGLE);
		lineThree.setColor(Color.WHITE);
		lineThree.setStroke(new BasicStroke(2.0F));
		
		lineFour = new ALineModel();
		lineFour.setX(LINE_ONE_X);
		lineFour.setY(LINE_ONE_Y);
		lineFour.setRadius(LINE_ONE_RADIUS);
		lineFour.setAngle(LINE_FOUR_ANGLE);
		lineFour.setColor(Color.WHITE);
		lineFour.setStroke(new BasicStroke(2.0F));
		
		lineFive = new ALineModel();
		lineFive.setX(LINE_ONE_X);
		lineFive.setY(LINE_ONE_Y);
		lineFive.setRadius(LINE_ONE_RADIUS);
		lineFive.setAngle(LINE_FIVE_ANGLE);
		lineFive.setColor(Color.WHITE);
		lineFive.setStroke(new BasicStroke(2.0F));
		
		lineSix = new ALineModel();
		lineSix.setX(LINE_ONE_X);
		lineSix.setY(LINE_ONE_Y);
		lineSix.setRadius(LINE_ONE_RADIUS);
		lineSix.setAngle(LINE_SIX_ANGLE);
		lineSix.setColor(Color.WHITE);
		lineSix.setStroke(new BasicStroke(2.0F));
		
		lineSeven = new ALineModel();
		lineSeven.setX(LINE_ONE_X);
		lineSeven.setY(LINE_ONE_Y);
		lineSeven.setRadius(LINE_ONE_RADIUS);
		lineSeven.setAngle(LINE_SEVEN_ANGLE);
		lineSeven.setColor(Color.WHITE);
		lineSeven.setStroke(new BasicStroke(2.0F));
		
		lineEight = new ALineModel();
		lineEight.setX(LINE_ONE_X);
		lineEight.setY(LINE_ONE_Y);
		lineEight.setRadius(LINE_ONE_RADIUS);
		lineEight.setAngle(LINE_EIGHT_ANGLE);
		lineEight.setColor(Color.WHITE);
		lineEight.setStroke(new BasicStroke(2.0F));
		
	}
	
	public OEShapeModel getCircle() {
		return circle;
	}
	
	public OEShapeModel getLineOne() {
		return lineOne;
	}
	
	public OEShapeModel getLineTwo() {
		return lineTwo;
	}
	
	public OEShapeModel getLineThree() {
		return lineThree;
	}
	
	public OEShapeModel getLineFour() {
		return lineFour;
	}
	
	public OEShapeModel getLineFive() {
		return lineFive;
	}
	
	public OEShapeModel getLineSix() {
		return lineSix;
	}
	
	public OEShapeModel getLineSeven() {
		return lineSeven;
	}
	
	public OEShapeModel getLineEight() {
		return lineEight;
	}
	
	public void move(int newX, int newY) {
		circle.setX(circle.getX()+newX);
		circle.setY(circle.getY()+newY);
		
		lineOne.setX(lineOne.getX()+newX);
		lineOne.setY(lineOne.getY()+newY);
		
		lineTwo.setX(lineTwo.getX()+newX);
		lineTwo.setY(lineTwo.getY()+newY);
		
		lineThree.setX(lineThree.getX()+newX);
		lineThree.setY(lineThree.getY()+newY);
		
		lineFour.setX(lineFour.getX()+newX);
		lineFour.setY(lineFour.getY()+newY);
		
		lineFive.setX(lineFive.getX()+newX);
		lineFive.setY(lineFive.getY()+newY);
		
		lineSix.setX(lineSix.getX()+newX);
		lineSix.setY(lineSix.getY()+newY);
		
		lineSeven.setX(lineSeven.getX()+newX);
		lineSeven.setY(lineSeven.getY()+newY);
		
		lineEight.setX(lineEight.getX()+newX);
		lineEight.setY(lineEight.getY()+newY);
		
		
	}
	
	public static void main(String[] args) {
		final BoundedBuffer buffer = new ABoundedBuffer();
		OEFrame editor = ObjectEditor.edit(buffer);
		editor.showDrawPanel();
	}

}
]]></snapshot>
  </Command>
  <Command __id="3265" _type="PauseCommand" date="Sat Feb 25 11:42:36 EST 2023" range="20s-30s" starttimestamp="1677312753280" timestamp="30603706">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[21189]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="3294" _type="MoveCaretCommand" caretOffset="206" date="Sat Feb 25 11:44:57 EST 2023" docOffset="392" starttimestamp="1677312753280" timestamp="30744181" />
  <Command __id="3287" _type="DiffBasedFileOpenCommand" date="Sat Feb 25 11:44:26 EST 2023" docASTNodeCount="568" docActiveCodeLength="3217" docExpressionCount="375" docLength="3250" projectName="ProducersConsumer - Copy (2)" starttimestamp="1677312753280" timestamp="30713280">
    <filePath><![CDATA[C:\Users\wid\eclipse-workspace\ProducersConsumer - Copy (2)\src\pc\graphics\ABoundedBufferView.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package pc.graphics;¶¶import java.awt.Color;¶¶import bus.uigen.OEFrame;¶import bus.uigen.ObjectEditor;¶import util.annotations.StructurePattern;¶import util.annotations.StructurePatternNames;¶import util.annotations.Visible;¶¶@StructurePattern(StructurePatternNames.BEAN_PATTERN)¶public class ABoundedBufferView  implements BoundedBufferView{¶	//make observer of aboundedbuffer¶	BoundedBuffer<Integer> observable;¶	ACircle circle;¶	ALine vertical;¶	ALine horizontal;¶	ALine diagonalOne;¶	ALine diagonalTwo;¶	ALine diagonalThree;¶	ALine diagonalFour;¶	¶	int INITIAL_X = 420;¶	int INITIAL_Y = 175;¶	int INITIAL_Width = 350;¶	int INITIAL_Height = 350;¶	¶	int zero = 0;¶	int one = 1;¶	int two = 2;¶	int three = 3;¶	int four = 4;¶	int five = 5;¶	int six = 6;¶	int seven = 7;¶	¶	public ABoundedBufferView() {¶		observable = new ABoundedBuffer<Integer>();¶		observable.put(zero);¶		observable.put(one);¶		observable.put(two);¶		observable.put(three);¶		observable.put(four);¶		observable.put(five);¶		observable.put(six);¶		observable.put(seven);¶		¶		circle = new ACircle();¶		vertical = new ALine();¶		horizontal = new ALine();¶		diagonalOne = new ALine();¶		diagonalTwo = new ALine();¶		diagonalThree = new ALine();¶		diagonalFour = new ALine();¶		¶		vertical.setX(INITIAL_X+(INITIAL_Width/2));¶		horizontal.setX(INITIAL_X);¶		diagonalOne.setX(INITIAL_X+(INITIAL_Width/2));¶		diagonalTwo.setX(INITIAL_X+(INITIAL_Width/2));¶		diagonalThree.setX(INITIAL_X+(INITIAL_Width/2));¶		diagonalFour.setX(INITIAL_X+(INITIAL_Width/2));¶		¶		vertical.setY(INITIAL_Y);¶		horizontal.setY(INITIAL_Y+(INITIAL_Height/2));¶		diagonalOne.setY(INITIAL_Y+(INITIAL_Height/2));¶		diagonalTwo.setY(INITIAL_Y+(INITIAL_Width/2));¶		diagonalThree.setY(INITIAL_Y+(INITIAL_Width/2));¶		diagonalFour.setY(INITIAL_Y+(INITIAL_Width/2));¶		¶		vertical.setHeight(INITIAL_Height);¶		horizontal.rotate(48);¶		horizontal.setWidth(INITIAL_Width);	¶		diagonalOne.setRadius(INITIAL_Height/2);¶		diagonalOne.rotate(151);¶		diagonalTwo.setRadius(INITIAL_Width/2);¶		diagonalTwo.rotate(-8);¶		diagonalThree.setRadius(INITIAL_Height/2);¶		diagonalFour.setRadius(INITIAL_Width/2);¶		diagonalThree.rotate(168);¶		diagonalFour.rotate(8);¶		¶	}¶	¶	@Override¶	public Line getVertical() {¶		return vertical;¶	}¶	¶	@Override¶	public Line getHorizontal() {¶		return horizontal;¶	}¶	¶	@Override¶	public Line getDiagonalOne() {¶		return diagonalOne;¶	}¶	¶	@Override¶	public Line getDiagonalTwo() {¶		return diagonalTwo;¶	}¶	¶	@Override¶	public Circle getCircle() {¶		return circle;¶	}¶	¶	@Override¶	public Line getDiagonalThree() {¶		return diagonalThree;¶	}¶	¶	@Override¶	public Line getDiagonalFour() {¶		return diagonalFour;¶	}¶	¶	@Override¶	@Visible(false)¶	public BoundedBuffer<Integer> getBoundedBuffer() {¶		return observable;¶	}¶	¶	public void update(BoundedBuffer<Integer> buffer) {¶		System.out.println("Buffer: " + buffer.get());¶	}¶¶	¶	public static void main(String[] args) {¶		BoundedBufferView NewTable = new ABoundedBufferView();¶		OEFrame editor = ObjectEditor.edit(NewTable);¶		editor.showDrawPanel();¶		editor.showTreePanel();¶	}¶	¶	¶¶	¶	¶¶	¶	¶}¶")]]]></diff>
  </Command>
  <Command __id="3297" _type="PauseCommand" date="Sat Feb 25 11:45:09 EST 2023" range="10s-20s" starttimestamp="1677312753280" timestamp="30756006">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[11825]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="3298" _type="MoveCaretCommand" caretOffset="9200" date="Sat Feb 25 11:45:09 EST 2023" docOffset="10080" starttimestamp="1677312753280" timestamp="30756149" />
  <Command __id="3300" _type="PauseCommand" date="Sat Feb 25 11:45:11 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="30758415">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2266]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="3299" _type="ShellCommand" date="Sat Feb 25 11:45:11 EST 2023" starttimestamp="1677312753280" timestamp="30758415" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3302" _type="PauseCommand" date="Sat Feb 25 11:45:16 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="30762946">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[4531]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="3301" _type="ShellCommand" date="Sat Feb 25 11:45:16 EST 2023" starttimestamp="1677312753280" timestamp="30762946" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3304" _type="PauseCommand" date="Sat Feb 25 11:45:43 EST 2023" range="20s-30s" starttimestamp="1677312753280" timestamp="30789820">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[26874]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="3303" _type="ShellCommand" date="Sat Feb 25 11:45:43 EST 2023" starttimestamp="1677312753280" timestamp="30789820" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3306" _type="PauseCommand" date="Sat Feb 25 12:30:49 EST 2023" range="30m-1h" starttimestamp="1677312753280" timestamp="33496437">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2706616]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="3305" _type="ShellCommand" date="Sat Feb 25 12:30:49 EST 2023" starttimestamp="1677312753280" timestamp="33496436" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3308" _type="PauseCommand" date="Sat Feb 25 12:30:51 EST 2023" range="2s-5s" starttimestamp="1677312753280" timestamp="33498576">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2140]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="3307" _type="ShellCommand" date="Sat Feb 25 12:30:51 EST 2023" starttimestamp="1677312753280" timestamp="33498576" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3310" _type="PauseCommand" date="Sat Feb 25 12:30:53 EST 2023" range="1s-2s" starttimestamp="1677312753280" timestamp="33499872">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1296]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
</Events>
