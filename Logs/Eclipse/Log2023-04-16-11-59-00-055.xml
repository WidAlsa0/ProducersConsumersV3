<Events startTimestamp="1681660740055" logVersion="1.0.0.202111260825">
  <Command __id="2" _type="ShellCommand" date="Sun Apr 16 11:59:03 EDT 2023" starttimestamp="1681660740055" timestamp="3719" type="ECLIPSE_MAXIMIZED" />
  <Command __id="4" _type="ShellCommand" date="Sun Apr 16 11:59:03 EDT 2023" starttimestamp="1681660740055" timestamp="3862" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="0" _type="DiffBasedFileOpenCommand" date="Sun Apr 16 11:59:00 EDT 2023" docASTNodeCount="109" docActiveCodeLength="627" docExpressionCount="54" docLength="627" projectName="CaseStudy" starttimestamp="1681660740055" timestamp="599">
    <filePath><![CDATA[C:\Users\wid\eclipse-workspace\CaseStudy\src\example\ACaseStudy.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package example;

import java.util.Scanner;

public class ACaseStudy implements CaseStudy {
	
	int SCALE = 25;
	double AGE = 59.5;
	
	User newUser;
	
	public ACaseStudy(User passedUser) {
		newUser = passedUser;
	}
	
	public boolean checkIncome(User passedUser) {
		if (passedUser.getInvestments() > passedUser.getIncome()*SCALE) {
			return true;
		} else {return false;}
	}
	
	public boolean checkAge(User passedUser) {
		if (passedUser.getAge() < AGE) {
			return false;
		} else {return true;}
	}

	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);
		
	}

}
]]></snapshot>
  </Command>
  <Command __id="6" _type="PauseCommand" date="Sun Apr 16 11:59:13 EDT 2023" range="10s-20s" starttimestamp="1681660740055" timestamp="13886">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[10024]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="7" _type="MoveCaretCommand" caretOffset="6198" date="Sun Apr 16 11:59:14 EDT 2023" docOffset="7078" starttimestamp="1681660740055" timestamp="14289" />
  <Command __id="9" _type="PauseCommand" date="Sun Apr 16 11:59:15 EDT 2023" range="1s-2s" starttimestamp="1681660740055" timestamp="15434">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1145]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8" _type="ShellCommand" date="Sun Apr 16 11:59:15 EDT 2023" starttimestamp="1681660740055" timestamp="15434" type="ECLIPSE_MINIMIZED" />
  <Command __id="10" _type="ShellCommand" date="Sun Apr 16 11:59:15 EDT 2023" starttimestamp="1681660740055" timestamp="15454" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="12" _type="PauseCommand" date="Sun Apr 16 12:00:33 EDT 2023" range="1m-2m" starttimestamp="1681660740055" timestamp="93020">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[77566]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="11" _type="ShellCommand" date="Sun Apr 16 12:00:33 EDT 2023" starttimestamp="1681660740055" timestamp="93020" type="ECLIPSE_MAXIMIZED" />
  <Command __id="13" _type="ShellCommand" date="Sun Apr 16 12:00:33 EDT 2023" starttimestamp="1681660740055" timestamp="93096" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="15" _type="PauseCommand" date="Sun Apr 16 12:00:40 EDT 2023" range="5s-10s" starttimestamp="1681660740055" timestamp="100610">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[7514]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="14" _type="MoveCaretCommand" caretOffset="48" date="Sun Apr 16 12:00:40 EDT 2023" docOffset="48" starttimestamp="1681660740055" timestamp="100610" />
  <Command __id="17" _type="PauseCommand" date="Sun Apr 16 12:00:47 EDT 2023" range="5s-10s" starttimestamp="1681660740055" timestamp="106986">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[6376]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="16" _type="ShellCommand" date="Sun Apr 16 12:00:47 EDT 2023" starttimestamp="1681660740055" timestamp="106986" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="19" _type="PauseCommand" date="Sun Apr 16 12:03:38 EDT 2023" range="2m-5m" starttimestamp="1681660740055" timestamp="277985">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[170998]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="23" _type="ShellCommand" date="Sun Apr 16 12:04:05 EDT 2023" starttimestamp="1681660740055" timestamp="305118" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="26" _type="PauseCommand" date="Sun Apr 16 12:04:11 EDT 2023" range="5s-10s" starttimestamp="1681660740055" timestamp="311333">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[6215]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="25" _type="MoveCaretCommand" caretOffset="656" date="Sun Apr 16 12:04:11 EDT 2023" docOffset="656" starttimestamp="1681660740055" timestamp="311333" />
  <Command __id="28" _type="PauseCommand" date="Sun Apr 16 12:04:26 EDT 2023" range="10s-20s" starttimestamp="1681660740055" timestamp="326569">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[15236]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="27" _type="ShellCommand" date="Sun Apr 16 12:04:26 EDT 2023" starttimestamp="1681660740055" timestamp="326569" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="30" _type="PauseCommand" date="Sun Apr 16 12:04:38 EDT 2023" range="10s-20s" starttimestamp="1681660740055" timestamp="338766">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[12197]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="29" _type="ShellCommand" date="Sun Apr 16 12:04:38 EDT 2023" starttimestamp="1681660740055" timestamp="338766" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="32" _type="PauseCommand" date="Sun Apr 16 12:04:41 EDT 2023" range="2s-5s" starttimestamp="1681660740055" timestamp="341013">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2247]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="31" _type="ShellCommand" date="Sun Apr 16 12:04:41 EDT 2023" starttimestamp="1681660740055" timestamp="341013" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="34" _type="PauseCommand" date="Sun Apr 16 12:04:57 EDT 2023" range="10s-20s" starttimestamp="1681660740055" timestamp="357484">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[16471]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="33" _type="ShellCommand" date="Sun Apr 16 12:04:57 EDT 2023" starttimestamp="1681660740055" timestamp="357484" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="35" _type="ShellCommand" date="Sun Apr 16 12:04:58 EDT 2023" starttimestamp="1681660740055" timestamp="358367" type="ECLIPSE_MINIMIZED" />
  <Command __id="36" _type="ShellCommand" date="Sun Apr 16 12:04:58 EDT 2023" starttimestamp="1681660740055" timestamp="358393" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="38" _type="PauseCommand" date="Sun Apr 16 12:09:21 EDT 2023" range="2m-5m" starttimestamp="1681660740055" timestamp="621094">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[262701]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="37" _type="ShellCommand" date="Sun Apr 16 12:09:21 EDT 2023" starttimestamp="1681660740055" timestamp="621094" type="ECLIPSE_MAXIMIZED" />
  <Command __id="39" _type="ShellCommand" date="Sun Apr 16 12:09:21 EDT 2023" starttimestamp="1681660740055" timestamp="621172" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="41" _type="PauseCommand" date="Sun Apr 16 12:09:25 EDT 2023" range="2s-5s" starttimestamp="1681660740055" timestamp="625030">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3858]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="40" _type="ShellCommand" date="Sun Apr 16 12:09:25 EDT 2023" starttimestamp="1681660740055" timestamp="625030" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="42" _type="ShellCommand" date="Sun Apr 16 12:09:25 EDT 2023" starttimestamp="1681660740055" timestamp="625045" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="43" _type="ShellCommand" date="Sun Apr 16 12:09:25 EDT 2023" starttimestamp="1681660740055" timestamp="625094" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="45" _type="PauseCommand" date="Sun Apr 16 12:09:54 EDT 2023" range="20s-30s" starttimestamp="1681660740055" timestamp="654624">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[29530]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="44" _type="ShellCommand" date="Sun Apr 16 12:09:54 EDT 2023" starttimestamp="1681660740055" timestamp="654624" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="47" _type="PauseCommand" date="Sun Apr 16 12:10:04 EDT 2023" range="10s-20s" starttimestamp="1681660740055" timestamp="664898">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[10274]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="46" _type="ShellCommand" date="Sun Apr 16 12:10:04 EDT 2023" starttimestamp="1681660740055" timestamp="664898" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="49" _type="PauseCommand" date="Sun Apr 16 12:11:20 EDT 2023" range="1m-2m" starttimestamp="1681660740055" timestamp="740624">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[75726]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="48" _type="ShellCommand" date="Sun Apr 16 12:11:20 EDT 2023" starttimestamp="1681660740055" timestamp="740624" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="51" _type="PauseCommand" date="Sun Apr 16 12:11:22 EDT 2023" range="2s-5s" starttimestamp="1681660740055" timestamp="742845">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2221]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="50" _type="ShellCommand" date="Sun Apr 16 12:11:22 EDT 2023" starttimestamp="1681660740055" timestamp="742845" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="52" _type="ShellCommand" date="Sun Apr 16 12:11:23 EDT 2023" starttimestamp="1681660740055" timestamp="742945" type="ECLIPSE_MINIMIZED" />
  <Command __id="54" _type="PauseCommand" date="Sun Apr 16 12:11:28 EDT 2023" range="5s-10s" starttimestamp="1681660740055" timestamp="748463">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[5517]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="53" _type="ShellCommand" date="Sun Apr 16 12:11:28 EDT 2023" starttimestamp="1681660740055" timestamp="748462" type="ECLIPSE_MAXIMIZED" />
  <Command __id="55" _type="ShellCommand" date="Sun Apr 16 12:11:28 EDT 2023" starttimestamp="1681660740055" timestamp="748579" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="5" _type="DiffBasedFileOpenCommand" date="Sun Apr 16 11:59:13 EDT 2023" docASTNodeCount="1675" docActiveCodeLength="9789" docExpressionCount="1160" docLength="10396" projectName="ProducersConsumersV3" starttimestamp="1681660740055" timestamp="13886">
    <filePath><![CDATA[C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\graphics\AProducerConsumerScene.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package graphics;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

import animations.ACookingPlateAnimator;
import animations.ACookingPlateCommand;
import animations.AServingPlateAnimator;
import animations.AServingPlateCommand;
import animations.CookingPlateAnimator;
import animations.ServingPlateAnimator;
import bus.uigen.OEFrame;
import bus.uigen.ObjectEditor;
import bus.uigen.shapes.ALineModel;
import bus.uigen.shapes.AStringModel;
import bus.uigen.shapes.AnImageModel;
import bus.uigen.shapes.OEShapeModel;
import shapes.FlexibleTextShape;
import util.annotations.EditablePropertyNames;
import util.annotations.Label;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Visible;
import util.misc.ThreadSupport;

import java.awt.Color;

@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({
	"patronList",
	"chefList",
	"buffer",
	"plateList",
	"otherPlateList",
	"bellsList",
	"queueBellList"
})
@EditablePropertyNames({
})
public class AProducerConsumerScene implements ProducerConsumerScene {
	
	//Avatar offsets inside scene
	int[] chefXValues = {120,-50,-50,120};
	int[] chefYValues = {-50,35,210,320};
	int[] patronXValues = {650,850,850,650};
	int[] patronYValues = {-50,35,220,320};
	int[] bellXValues = {680,880,880,680};
	int[] bellYValues = {75,160,345,445};
	int INIT_HEAD_Y = 60;
	int INIT_HEAD_X = 163;
	int INIT_HEAD_HEIGHT = 90;
	int INIT_HEAD_WIDTH = 80;
	int PLATE_OFFSET_X = 30;
	int PLATE_OFFSET_Y = 10;
	int PAUSE = 5;
	
	//Booleans that help with the functionality of the below methods
	boolean INIT_COOK = true;
	boolean full = false;
	int fullPlateOffset = -5;
	
	//Defining the chef and patron images
	String[] chefImages = {"images/0.png","images/1.png","images/2.png","images/3.png"};
	String[] patronImages = {"images/4.png", "images/5.png", "images/6.png", "images/7.png"};
	
	//Buffer arrays
	int[] bufferXValues = {625, 680, 680, 620, 535, 460, 460, 535};
	int[] bufferYValues = {200, 275, 365, 425, 425, 365, 275, 200};
	boolean[] isFull = {false, false, false, false, false, false, false, false};
	
	//The properties of our class
	List<APatron> patronList;
	List<AChef> chefList;
	BoundedBuffer buffer = new ABoundedBuffer();
	List<APlate> plateList;
	Queue<APlate> otherPlateList;
	
	OEShapeModel[] lineArray = {buffer.getLineTwo(), buffer.getLineThree(), buffer.getLineFour(), 
								buffer.getLineFive(), buffer.getLineSix(), buffer.getLineSeven(), 
								buffer.getLineEight(), buffer.getLineOne()};
	
	List<ABell> bellsList;
	Queue<ABell> queueBellList;
	int[] bellValues = {127, 212, 397, 497};
	Queue<Integer> bellIntegerList;
	
	ACookingPlateCommand cookingCommand;
	CookingPlateAnimator cookingAnimator;
	
	AServingPlateCommand servingCommand;
	ServingPlateAnimator servingAnimator;
	
	//The constructor sets the scene with one chef, patron, a buffer, and a plate (not visible)
	public AProducerConsumerScene() {
		patronList = new ArrayList<APatron>();
		chefList = new ArrayList<AChef>();
		//buffer = new ABoundedBuffer();
		plateList = new ArrayList<APlate>();
		otherPlateList = new LinkedList<APlate>();
		bellsList = new ArrayList<ABell>();
		queueBellList = new LinkedList<ABell>();
		bellIntegerList = new LinkedList<Integer>();
		
		patronList.add(0, new APatron());
		OEShapeModel initPatronHead = new AnImageModel(patronImages[0]);
		initPatronHead.setX(INIT_HEAD_X);
		initPatronHead.setY(INIT_HEAD_Y);
		initPatronHead.setHeight(INIT_HEAD_HEIGHT);
		initPatronHead.setWidth(INIT_HEAD_WIDTH);
		patronList.get(0).patron.setHead(initPatronHead);
		patronList.get(0).move(patronXValues[0], patronYValues[0]);
		
		chefList.add(0, new AChef());
		OEShapeModel initChefHead = new AnImageModel(chefImages[0]);
		initChefHead.setX(INIT_HEAD_X);
		initChefHead.setY(INIT_HEAD_Y);
		initChefHead.setHeight(INIT_HEAD_HEIGHT);
		initChefHead.setWidth(INIT_HEAD_WIDTH);
		chefList.get(0).chef.setHead(initChefHead);
		chefList.get(0).move(chefXValues[0], chefYValues[0]);
		
		plateList.add(new APlate());
		plateList.get(0).getPlate().setHeight(0);
		plateList.get(0).getPlate().setWidth(0);
		
		otherPlateList.add(new APlate());
		otherPlateList.peek().getPlate().setHeight(0);
		otherPlateList.peek().getPlate().setWidth(0);
		
		cookingAnimator = new ACookingPlateAnimator();
		servingAnimator = new AServingPlateAnimator();
		
		bellsList.add(new ABell());
		bellsList.get(0).getBell().setHeight(0);
		bellsList.get(0).getBell().setWidth(0);
		
		queueBellList.add(new ABell());
		queueBellList.peek().getBell().setHeight(0);
		queueBellList.peek().getBell().setWidth(0);
		
		bellIntegerList.add(0);
	}
	
	//Producer consumer methods
	
	//Init Scene sets the number of patrons and chefs in the scene
	@Label("Init Scene")
	public void initScene(int patronAmount, int chefAmount) {
		bellsList.clear();
		for (int i=0; i<patronAmount; i++) { 
			APatron patron = new APatron();
			patronList.add(i, patron);
			OEShapeModel newHead = new AnImageModel(patronImages[i]);
			patron.patron.setHead(newHead); 
			newHead.setX(INIT_HEAD_X); 
			newHead.setY(INIT_HEAD_Y);
			newHead.setHeight(INIT_HEAD_HEIGHT);
			newHead.setWidth(INIT_HEAD_WIDTH);
			patron.move(patronXValues[i], patronYValues[i]);
			
			bellsList.add(new ABell());
			bellsList.get(i).move(bellXValues[i], bellYValues[i]);
		}
		for (int i=0; i<chefAmount; i++) {
			AChef chef = new AChef();
			chefList.add(i, chef);
			OEShapeModel newHead = new AnImageModel(chefImages[i]);
			chef.chef.setHead(newHead);
			newHead.setX(INIT_HEAD_X); 
			newHead.setY(INIT_HEAD_Y);
			newHead.setHeight(INIT_HEAD_HEIGHT);
			newHead.setWidth(INIT_HEAD_WIDTH);
			chef.move(chefXValues[i], chefYValues[i]);
		}
	}
	
	//Once the head of an avatar is chosen, it makes the plate that they "cook" appear
	public void cook(OEShapeModel head) {
		if (INIT_COOK) {
			INIT_COOK=!INIT_COOK;
			plateList.remove(0);
			otherPlateList.remove();
		}
		
		int headX = head.getCenterX();
		int headY = head.getCenterY();
		APlate newPlate = new APlate(plateList.size()+1);
		newPlate.getPlate().setHeight(0);
		newPlate.getPlate().setWidth(0);
		plateList.add(newPlate);
		otherPlateList.add(newPlate);
		
		if (full) {
			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y+fullPlateOffset);
			fullPlateOffset = fullPlateOffset - 5;
		} else {
			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y);
		}
		
		cookingCommand = new ACookingPlateCommand(cookingAnimator, newPlate, 40, 15);
		Thread thread = new Thread (cookingCommand);
		thread.start();
	}
	
	public void serve() {
		//Checks to see if the buffer is full. If it is, then can't serve.
		resetLineColors();
		if(checkIfFull()) {
			resetLineColors();
			return;
		}
		
		//Do put, it will disable from there
		
		Plate workingPlate = otherPlateList.peek();
		int workingPlatePlace = Integer.valueOf(workingPlate.getText().getText())-1;
		changeLineColors(workingPlatePlace);
		
		servingCommand = new AServingPlateCommand(servingAnimator,workingPlate,PAUSE, bufferXValues[workingPlatePlace], bufferYValues[workingPlatePlace]);
		Thread thread = new Thread(servingCommand);
		thread.start();
		
		isFull[workingPlatePlace] = true;
		otherPlateList.remove();
	}
	
	public void order(OEShapeModel bell) {
		if(checkIfFull()) {
			resetLineColors();
			resetBuffer();
		}
		bellIntegerList.add(0);
		int bellPlace = findBell(bell.getCenterY());
		bellsList.get(bellPlace).getText().setText(String.valueOf(bellIntegerList.size()-1));
		
		int platePlace = findFirstAvailablePlate();
		servingCommand = new AServingPlateCommand(servingAnimator,plateList.get(platePlace),PAUSE, bell.getCenterX() , bell.getCenterY());
		Thread thread = new Thread(servingCommand);
		thread.start();
		
		cookingCommand = new ACookingPlateCommand(cookingAnimator, plateList.get(0), 0, 15);
		Thread eatingThread = new Thread (cookingCommand);
		eatingThread.start();
		plateList.get(0).getText().setText("");
	}
	
	public void eat() {
		plateList.remove(0);
	}
	
	@Override
	@Visible(false)
	public int findBell(int centerY) {
		for(int i=0; i<bellsList.size();i++) {
			if(bellsList.get(i).getBell().getCenterY() == centerY) {
				return i;
			}
		}
		return 0;
	}
	
	@Override
	@Visible(false)
	public int findFirstAvailablePlate() {
		for (int i=0; i<isFull.length;i++) {
			if(isFull[i] == true) {
				return i;
			}
		}
		return 0;
	}
	
	@Override
	@Visible(false)
	public void resetBuffer() {
		
		for (int i=0; i<isFull.length;i++) {
			isFull[i] = false;
		}
	}
	
	@Override
	@Visible(false)
	public int findPatron(OEShapeModel patronHead) {
		return 0;
	}
	
	@Override
	@Visible(false)
	public boolean checkIfFull() {
		for (int i=0; i<isFull.length;i++) {
			if (isFull[i] == false) {
				full = false;
				return full;
			}
		}
		full = true;
		return full;
	}
	
	@Override
	@Visible(false)
	public void changeLineColors(int workingPlatePlace) {
		if(workingPlatePlace == lineArray.length-1) {
			lineArray[workingPlatePlace].setColor(Color.GREEN);
			lineArray[0].setColor(Color.GREEN);
		} else {
			lineArray[workingPlatePlace].setColor(Color.GREEN);
			lineArray[workingPlatePlace+1].setColor(Color.GREEN);
		}
	}
	
	
	@Override
	@Visible(false)
	public void resetLineColors() {
		for (int i=0; i<lineArray.length; i++) {
			lineArray[i].setColor(Color.WHITE);
		}
	}
	
	//Getters for properties of the scene
	@Override
	public List<AChef> getChefList() {
		return chefList;
	}
	
	@Override
	public List<APatron> getPatronList() {
		return patronList;
	}
	
	@Override
	public BoundedBuffer getBuffer() {
		return buffer;
	}
	
	@Override
	public List<APlate> getPlateList() {
		return plateList;
	}	
	
	@Override
	@util.annotations.Visible(false)
	public Queue<APlate> getOtherPlateList() {
		return otherPlateList;
	}
	
	@Override
	public List<ABell> getBellsList() {
		return bellsList;
	}
	
	@Override
	@Visible(false)
	public Queue<ABell> getQueueBellList() {
		return queueBellList;
	}
}
]]></snapshot>
  </Command>
  <Command __id="57" _type="PauseCommand" date="Sun Apr 16 12:11:33 EDT 2023" range="2s-5s" starttimestamp="1681660740055" timestamp="753502">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[4922]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="58" _type="SelectTextCommand" caretOffset="210" date="Sun Apr 16 12:11:34 EDT 2023" end="210" start="205" starttimestamp="1681660740055" timestamp="753954" />
  <Command __id="60" _type="PauseCommand" date="Sun Apr 16 12:11:40 EDT 2023" range="5s-10s" starttimestamp="1681660740055" timestamp="759999">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[6045]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="59" _type="ShellCommand" date="Sun Apr 16 12:11:40 EDT 2023" starttimestamp="1681660740055" timestamp="759999" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="62" _type="PauseCommand" date="Sun Apr 16 12:11:52 EDT 2023" range="10s-20s" starttimestamp="1681660740055" timestamp="772377">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[12378]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="61" _type="ShellCommand" date="Sun Apr 16 12:11:52 EDT 2023" starttimestamp="1681660740055" timestamp="772377" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="64" _type="PauseCommand" date="Sun Apr 16 12:11:53 EDT 2023" range="1s-2s" starttimestamp="1681660740055" timestamp="773758">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1381]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="63" _type="ShellCommand" date="Sun Apr 16 12:11:53 EDT 2023" starttimestamp="1681660740055" timestamp="773758" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="65" _type="ShellCommand" date="Sun Apr 16 12:11:53 EDT 2023" starttimestamp="1681660740055" timestamp="773858" type="ECLIPSE_MINIMIZED" />
  <Command __id="67" _type="PauseCommand" date="Sun Apr 16 12:12:00 EDT 2023" range="5s-10s" starttimestamp="1681660740055" timestamp="780695">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[6836]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="66" _type="ShellCommand" date="Sun Apr 16 12:12:00 EDT 2023" starttimestamp="1681660740055" timestamp="780694" type="ECLIPSE_MAXIMIZED" />
  <Command __id="68" _type="ShellCommand" date="Sun Apr 16 12:12:00 EDT 2023" starttimestamp="1681660740055" timestamp="780796" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="56" _type="DiffBasedFileOpenCommand" date="Sun Apr 16 12:11:33 EDT 2023" docASTNodeCount="334" docActiveCodeLength="1921" docExpressionCount="222" docLength="1921" projectName="ProducersConsumersV3" starttimestamp="1681660740055" timestamp="753501">
    <filePath><![CDATA[C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\graphics\ABell.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package graphics;

import java.awt.Color;

import bus.uigen.shapes.AStringModel;
import bus.uigen.shapes.AnImageModel;
import bus.uigen.shapes.OEShapeModel;
import shapes.FlexibleTextShape;
import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;

@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({
	"bell",
	"text"
})
@EditablePropertyNames({
	"bell",
	"text"
})
public class ABell implements Bell {
	int INIT_BELL_HEIGHT = 25;
	int INIT_BELL_WIDTH = 25;
	int INIT_BELL_X = 50;
	int INIT_BELL_Y = 40;

	String INIT_BELL_IMAGE = "images/bell.png";
	String INIT_BELL_TEXT = "";
	
	int INIT_TEXT_X = 65;
	int INIT_TEXT_Y = 40;

	int TEXT_X_OFFSET = 45;
	int TEXT_Y_OFFSET = 30;
	
	OEShapeModel bell;
	FlexibleTextShape text;
	
	public ABell() {
		bell = new AnImageModel(INIT_BELL_IMAGE);
		bell.setHeight(INIT_BELL_HEIGHT);
		bell.setWidth(INIT_BELL_WIDTH);
		bell.setX(INIT_BELL_X);
		bell.setY(INIT_BELL_Y);
		
		text = new AStringModel(INIT_BELL_TEXT);
		text.setX(INIT_TEXT_X);
		text.setY(INIT_TEXT_Y);
		text.setColor(Color.WHITE);
	}
	
	@Override
	public OEShapeModel getBell() {
		return bell;
	}
	
	@Override
	public FlexibleTextShape getText() {
		return text;
	}
	
	@Override
	public void setBell(OEShapeModel newBell) {
		bell = newBell;
	}
	
	@Override
	public void setText(FlexibleTextShape newText) {
		text = newText;
	}
	
	@Override
	public void move(int newX, int newY) {
		bell.setX(bell.getX() + newX);
		bell.setY(bell.getY() + newY);
		text.setX(text.getX() + newX);
		text.setY(text.getY() + newY);
	}
	
	@Override
	public void moveTo(int newX, int newY) {
		bell.setX(newX);
		bell.setY(newY);
		text.setX(newX+TEXT_X_OFFSET);
		text.setY(newY+TEXT_Y_OFFSET);
	}
	
	
}
]]></snapshot>
  </Command>
  <Command __id="70" _type="PauseCommand" date="Sun Apr 16 12:12:02 EDT 2023" range="1s-2s" starttimestamp="1681660740055" timestamp="782501">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1705]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="71" _type="MoveCaretCommand" caretOffset="656" date="Sun Apr 16 12:12:02 EDT 2023" docOffset="656" starttimestamp="1681660740055" timestamp="782814" />
  <Command __id="69" _type="DiffBasedFileOpenCommand" date="Sun Apr 16 12:12:02 EDT 2023" docASTNodeCount="1675" docActiveCodeLength="9789" docExpressionCount="1160" docLength="10396" projectName="ProducersConsumersV3" starttimestamp="1681660740055" timestamp="782501">
    <filePath><![CDATA[C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\graphics\AProducerConsumerScene.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package graphics;¶¶import java.util.ArrayList;¶import java.util.LinkedList;¶import java.util.List;¶import java.util.Queue;¶¶import animations.ACookingPlateAnimator;¶import animations.ACookingPlateCommand;¶import animations.AServingPlateAnimator;¶import animations.AServingPlateCommand;¶import animations.CookingPlateAnimator;¶import animations.ServingPlateAnimator;¶import bus.uigen.OEFrame;¶import bus.uigen.ObjectEditor;¶import bus.uigen.shapes.ALineModel;¶import bus.uigen.shapes.AStringModel;¶import bus.uigen.shapes.AnImageModel;¶import bus.uigen.shapes.OEShapeModel;¶import shapes.FlexibleTextShape;¶import util.annotations.EditablePropertyNames;¶import util.annotations.Label;¶import util.annotations.PropertyNames;¶import util.annotations.StructurePattern;¶import util.annotations.StructurePatternNames;¶import util.annotations.Visible;¶import util.misc.ThreadSupport;¶¶import java.awt.Color;¶¶@StructurePattern(StructurePatternNames.BEAN_PATTERN)¶@PropertyNames({¶	"patronList",¶	"chefList",¶	"buffer",¶	"plateList",¶	"otherPlateList",¶	"bellsList",¶	"queueBellList"¶})¶@EditablePropertyNames({¶})¶public class AProducerConsumerScene implements ProducerConsumerScene {¶	¶	//Avatar offsets inside scene¶	int[] chefXValues = {120,-50,-50,120};¶	int[] chefYValues = {-50,35,210,320};¶	int[] patronXValues = {650,850,850,650};¶	int[] patronYValues = {-50,35,220,320};¶	int[] bellXValues = {680,880,880,680};¶	int[] bellYValues = {75,160,345,445};¶	int INIT_HEAD_Y = 60;¶	int INIT_HEAD_X = 163;¶	int INIT_HEAD_HEIGHT = 90;¶	int INIT_HEAD_WIDTH = 80;¶	int PLATE_OFFSET_X = 30;¶	int PLATE_OFFSET_Y = 10;¶	int PAUSE = 5;¶	¶	//Booleans that help with the functionality of the below methods¶	boolean INIT_COOK = true;¶	boolean full = false;¶	int fullPlateOffset = -5;¶	¶	//Defining the chef and patron images¶	String[] chefImages = {"images/0.png","images/1.png","images/2.png","images/3.png"};¶	String[] patronImages = {"images/4.png", "images/5.png", "images/6.png", "images/7.png"};¶	¶	//Buffer arrays¶	int[] bufferXValues = {625, 680, 680, 620, 535, 460, 460, 535};¶	int[] bufferYValues = {200, 275, 365, 425, 425, 365, 275, 200};¶	boolean[] isFull = {false, false, false, false, false, false, false, false};¶	¶	//The properties of our class¶	List<APatron> patronList;¶	List<AChef> chefList;¶	BoundedBuffer buffer = new ABoundedBuffer();¶	List<APlate> plateList;¶	Queue<APlate> otherPlateList;¶	¶	OEShapeModel[] lineArray = {buffer.getLineTwo(), buffer.getLineThree(), buffer.getLineFour(), ¶								buffer.getLineFive(), buffer.getLineSix(), buffer.getLineSeven(), ¶								buffer.getLineEight(), buffer.getLineOne()};¶	¶	List<ABell> bellsList;¶	Queue<ABell> queueBellList;¶	int[] bellValues = {127, 212, 397, 497};¶	Queue<Integer> bellIntegerList;¶	¶	ACookingPlateCommand cookingCommand;¶	CookingPlateAnimator cookingAnimator;¶	¶	AServingPlateCommand servingCommand;¶	ServingPlateAnimator servingAnimator;¶	¶	//The constructor sets the scene with one chef, patron, a buffer, and a plate (not visible)¶	public AProducerConsumerScene() {¶		patronList = new ArrayList<APatron>();¶		chefList = new ArrayList<AChef>();¶		//buffer = new ABoundedBuffer();¶		plateList = new ArrayList<APlate>();¶		otherPlateList = new LinkedList<APlate>();¶		bellsList = new ArrayList<ABell>();¶		queueBellList = new LinkedList<ABell>();¶		bellIntegerList = new LinkedList<Integer>();¶		¶		patronList.add(0, new APatron());¶		OEShapeModel initPatronHead = new AnImageModel(patronImages[0]);¶		initPatronHead.setX(INIT_HEAD_X);¶		initPatronHead.setY(INIT_HEAD_Y);¶		initPatronHead.setHeight(INIT_HEAD_HEIGHT);¶		initPatronHead.setWidth(INIT_HEAD_WIDTH);¶		patronList.get(0).patron.setHead(initPatronHead);¶		patronList.get(0).move(patronXValues[0], patronYValues[0]);¶		¶		chefList.add(0, new AChef());¶		OEShapeModel initChefHead = new AnImageModel(chefImages[0]);¶		initChefHead.setX(INIT_HEAD_X);¶		initChefHead.setY(INIT_HEAD_Y);¶		initChefHead.setHeight(INIT_HEAD_HEIGHT);¶		initChefHead.setWidth(INIT_HEAD_WIDTH);¶		chefList.get(0).chef.setHead(initChefHead);¶		chefList.get(0).move(chefXValues[0], chefYValues[0]);¶		¶		plateList.add(new APlate());¶		plateList.get(0).getPlate().setHeight(0);¶		plateList.get(0).getPlate().setWidth(0);¶		¶		otherPlateList.add(new APlate());¶		otherPlateList.peek().getPlate().setHeight(0);¶		otherPlateList.peek().getPlate().setWidth(0);¶		¶		cookingAnimator = new ACookingPlateAnimator();¶		servingAnimator = new AServingPlateAnimator();¶		¶		bellsList.add(new ABell());¶		bellsList.get(0).getBell().setHeight(0);¶		bellsList.get(0).getBell().setWidth(0);¶		¶		queueBellList.add(new ABell());¶		queueBellList.peek().getBell().setHeight(0);¶		queueBellList.peek().getBell().setWidth(0);¶		¶		bellIntegerList.add(0);¶	}¶	¶	//Producer consumer methods¶	¶	//Init Scene sets the number of patrons and chefs in the scene¶	@Label("Init Scene")¶	public void initScene(int patronAmount, int chefAmount) {¶		bellsList.clear();¶		for (int i=0; i<patronAmount; i++) { ¶			APatron patron = new APatron();¶			patronList.add(i, patron);¶			OEShapeModel newHead = new AnImageModel(patronImages[i]);¶			patron.patron.setHead(newHead); ¶			newHead.setX(INIT_HEAD_X); ¶			newHead.setY(INIT_HEAD_Y);¶			newHead.setHeight(INIT_HEAD_HEIGHT);¶			newHead.setWidth(INIT_HEAD_WIDTH);¶			patron.move(patronXValues[i], patronYValues[i]);¶			¶			bellsList.add(new ABell());¶			bellsList.get(i).move(bellXValues[i], bellYValues[i]);¶		}¶		for (int i=0; i<chefAmount; i++) {¶			AChef chef = new AChef();¶			chefList.add(i, chef);¶			OEShapeModel newHead = new AnImageModel(chefImages[i]);¶			chef.chef.setHead(newHead);¶			newHead.setX(INIT_HEAD_X); ¶			newHead.setY(INIT_HEAD_Y);¶			newHead.setHeight(INIT_HEAD_HEIGHT);¶			newHead.setWidth(INIT_HEAD_WIDTH);¶			chef.move(chefXValues[i], chefYValues[i]);¶		}¶	}¶	¶	//Once the head of an avatar is chosen, it makes the plate that they "cook" appear¶	public void cook(OEShapeModel head) {¶		if (INIT_COOK) {¶			INIT_COOK=!INIT_COOK;¶			plateList.remove(0);¶			otherPlateList.remove();¶		}¶		¶		int headX = head.getCenterX();¶		int headY = head.getCenterY();¶		APlate newPlate = new APlate(plateList.size()+1);¶		newPlate.getPlate().setHeight(0);¶		newPlate.getPlate().setWidth(0);¶		plateList.add(newPlate);¶		otherPlateList.add(newPlate);¶		¶		if (full) {¶			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y+fullPlateOffset);¶			fullPlateOffset = fullPlateOffset - 5;¶		} else {¶			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y);¶		}¶		¶		cookingCommand = new ACookingPlateCommand(cookingAnimator, newPlate, 40, 15);¶		Thread thread = new Thread (cookingCommand);¶		thread.start();¶	}¶	¶	public void serve() {¶		//Checks to see if the buffer is full. If it is, then can't serve.¶		resetLineColors();¶		if(checkIfFull()) {¶			resetLineColors();¶			return;¶		}¶		¶		//Do put, it will disable from there¶		¶		Plate workingPlate = otherPlateList.peek();¶		int workingPlatePlace = Integer.valueOf(workingPlate.getText().getText())-1;¶		changeLineColors(workingPlatePlace);¶		¶		servingCommand = new AServingPlateCommand(servingAnimator,workingPlate,PAUSE, bufferXValues[workingPlatePlace], bufferYValues[workingPlatePlace]);¶		Thread thread = new Thread(servingCommand);¶		thread.start();¶		¶		isFull[workingPlatePlace] = true;¶		otherPlateList.remove();¶	}¶	¶	public void order(OEShapeModel bell) {¶		if(checkIfFull()) {¶			resetLineColors();¶			resetBuffer();¶		}¶		bellIntegerList.add(0);¶		int bellPlace = findBell(bell.getCenterY());¶		bellsList.get(bellPlace).getText().setText(String.valueOf(bellIntegerList.size()-1));¶		¶		int platePlace = findFirstAvailablePlate();¶		servingCommand = new AServingPlateCommand(servingAnimator,plateList.get(platePlace),PAUSE, bell.getCenterX() , bell.getCenterY());¶		Thread thread = new Thread(servingCommand);¶		thread.start();¶		¶		cookingCommand = new ACookingPlateCommand(cookingAnimator, plateList.get(0), 0, 15);¶		Thread eatingThread = new Thread (cookingCommand);¶		eatingThread.start();¶		plateList.get(0).getText().setText("");¶	}¶	¶	public void eat() {¶		plateList.remove(0);¶	}¶	¶	@Override¶	@Visible(false)¶	public int findBell(int centerY) {¶		for(int i=0; i<bellsList.size();i++) {¶			if(bellsList.get(i).getBell().getCenterY() == centerY) {¶				return i;¶			}¶		}¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public int findFirstAvailablePlate() {¶		for (int i=0; i<isFull.length;i++) {¶			if(isFull[i] == true) {¶				return i;¶			}¶		}¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public void resetBuffer() {¶		¶		for (int i=0; i<isFull.length;i++) {¶			isFull[i] = false;¶		}¶	}¶	¶	@Override¶	@Visible(false)¶	public int findPatron(OEShapeModel patronHead) {¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public boolean checkIfFull() {¶		for (int i=0; i<isFull.length;i++) {¶			if (isFull[i] == false) {¶				full = false;¶				return full;¶			}¶		}¶		full = true;¶		return full;¶	}¶	¶	@Override¶	@Visible(false)¶	public void changeLineColors(int workingPlatePlace) {¶		if(workingPlatePlace == lineArray.length-1) {¶			lineArray[workingPlatePlace].setColor(Color.GREEN);¶			lineArray[0].setColor(Color.GREEN);¶		} else {¶			lineArray[workingPlatePlace].setColor(Color.GREEN);¶			lineArray[workingPlatePlace+1].setColor(Color.GREEN);¶		}¶	}¶	¶	¶	@Override¶	@Visible(false)¶	public void resetLineColors() {¶		for (int i=0; i<lineArray.length; i++) {¶			lineArray[i].setColor(Color.WHITE);¶		}¶	}¶	¶	//Getters for properties of the scene¶	@Override¶	public List<AChef> getChefList() {¶		return chefList;¶	}¶	¶	@Override¶	public List<APatron> getPatronList() {¶		return patronList;¶	}¶	¶	@Override¶	public BoundedBuffer getBuffer() {¶		return buffer;¶	}¶	¶	@Override¶	public List<APlate> getPlateList() {¶		return plateList;¶	}	¶	¶	@Override¶	@util.annotations.Visible(false)¶	public Queue<APlate> getOtherPlateList() {¶		return otherPlateList;¶	}¶	¶	@Override¶	public List<ABell> getBellsList() {¶		return bellsList;¶	}¶	¶	@Override¶	@Visible(false)¶	public Queue<ABell> getQueueBellList() {¶		return queueBellList;¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="73" _type="PauseCommand" date="Sun Apr 16 12:12:10 EDT 2023" range="5s-10s" starttimestamp="1681660740055" timestamp="790127">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[7313]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="74" _type="MoveCaretCommand" caretOffset="0" date="Sun Apr 16 12:12:10 EDT 2023" docOffset="0" starttimestamp="1681660740055" timestamp="790415" />
  <Command __id="76" _type="PauseCommand" date="Sun Apr 16 12:12:19 EDT 2023" range="5s-10s" starttimestamp="1681660740055" timestamp="799493">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[9077]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="75" _type="ShellCommand" date="Sun Apr 16 12:12:19 EDT 2023" starttimestamp="1681660740055" timestamp="799492" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="78" _type="PauseCommand" date="Sun Apr 16 12:12:29 EDT 2023" range="5s-10s" starttimestamp="1681660740055" timestamp="809005">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[9513]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="77" _type="ShellCommand" date="Sun Apr 16 12:12:29 EDT 2023" starttimestamp="1681660740055" timestamp="809005" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="79" _type="ShellCommand" date="Sun Apr 16 12:12:29 EDT 2023" starttimestamp="1681660740055" timestamp="809829" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="81" _type="PauseCommand" date="Sun Apr 16 12:12:43 EDT 2023" range="10s-20s" starttimestamp="1681660740055" timestamp="823580">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[13751]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="80" _type="ShellCommand" date="Sun Apr 16 12:12:43 EDT 2023" starttimestamp="1681660740055" timestamp="823580" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="82" _type="ShellCommand" date="Sun Apr 16 12:12:44 EDT 2023" starttimestamp="1681660740055" timestamp="824419" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="84" _type="PauseCommand" date="Sun Apr 16 12:12:58 EDT 2023" range="10s-20s" starttimestamp="1681660740055" timestamp="838631">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[14212]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="83" _type="ShellCommand" date="Sun Apr 16 12:12:58 EDT 2023" starttimestamp="1681660740055" timestamp="838631" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="85" _type="ShellCommand" date="Sun Apr 16 12:12:59 EDT 2023" starttimestamp="1681660740055" timestamp="839365" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="87" _type="PauseCommand" date="Sun Apr 16 12:13:03 EDT 2023" range="2s-5s" starttimestamp="1681660740055" timestamp="843566">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[4201]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="86" _type="ShellCommand" date="Sun Apr 16 12:13:03 EDT 2023" starttimestamp="1681660740055" timestamp="843566" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="89" _type="PauseCommand" date="Sun Apr 16 12:13:05 EDT 2023" range="1s-2s" starttimestamp="1681660740055" timestamp="844979">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1413]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="88" _type="ShellCommand" date="Sun Apr 16 12:13:05 EDT 2023" starttimestamp="1681660740055" timestamp="844979" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="91" _type="PauseCommand" date="Sun Apr 16 12:13:26 EDT 2023" range="20s-30s" starttimestamp="1681660740055" timestamp="866863">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[21884]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="90" _type="ShellCommand" date="Sun Apr 16 12:13:26 EDT 2023" starttimestamp="1681660740055" timestamp="866863" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="72" _type="DiffBasedFileOpenCommand" date="Sun Apr 16 12:12:10 EDT 2023" docASTNodeCount="917" docActiveCodeLength="5404" docExpressionCount="657" docLength="6091" projectName="ProducersConsumersV3" starttimestamp="1681660740055" timestamp="790127">
    <filePath><![CDATA[C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\graphics\ABoundedBuffer.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package graphics;

import bus.uigen.OEFrame;
import bus.uigen.ObjectEditor;
import bus.uigen.shapes.ALineModel;
import bus.uigen.shapes.AnOvalModel;
import bus.uigen.shapes.OEShapeModel;
import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;

import java.awt.BasicStroke;
import java.awt.Color;

@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({
	"circle",
	"lineOne",
	"lineTwo",
	"lineThree",
	"lineFour",
	"lineFive",
	"lineSix",
	"lineSeven",
	"lineEight"
})
@EditablePropertyNames({
})
public class ABoundedBuffer implements BoundedBuffer {
	//Units for centering the circle
	int INIT_X = 420;
	int INIT_Y = 175;
	int INIT_CIRCLE_HEIGHT = 350;
	int INIT_CIRCLE_WIDTH = 350;
	
	//Line one is the left side of the first buffer & right side of the last buffer
	double LINE_ONE_ANGLE = (5*Math.PI)/4;
	int LINE_ONE_X = INIT_X + (INIT_CIRCLE_WIDTH/2);
	int LINE_ONE_Y = 350;
	int LINE_ONE_RADIUS = 176;
	
	//Line two is the right side of the first buffer & left side of the second buffer
	double LINE_TWO_ANGLE = (3*Math.PI)/2;
	
	//Line three is the right side of the second buffer & left side of the third buffer
	double LINE_THREE_ANGLE = (7*Math.PI)/4;
	
	//Line four is the right side of the third buffer & left side of the fourth buffer
	double LINE_FOUR_ANGLE = 0;
	
	//Line five is the right side of the fourth buffer & left side of the fifth buffer
	double LINE_FIVE_ANGLE = (Math.PI/4);
	
	//Line six is the right side of the fifth buffer & left side of the sixth buffer
	double LINE_SIX_ANGLE = (Math.PI/2);
	
	//Line seven is the right side of the sixth buffer & left side of the seventh buffer
	double LINE_SEVEN_ANGLE = (3*Math.PI/4);
	
	//Line eight is the right side of the seventh buffer & left side of the eight buffer
	double LINE_EIGHT_ANGLE = (Math.PI);
	
	OEShapeModel circle;
	OEShapeModel lineOne;
	OEShapeModel lineTwo;
	OEShapeModel lineThree;
	OEShapeModel lineFour;
	OEShapeModel lineFive;
	OEShapeModel lineSix;
	OEShapeModel lineSeven;
	OEShapeModel lineEight;
	
	public ABoundedBuffer() {
		circle = new AnOvalModel();
		circle.setHeight(INIT_CIRCLE_HEIGHT);
		circle.setWidth(INIT_CIRCLE_WIDTH);
		circle.setX(INIT_X);
		circle.setY(INIT_Y);
		circle.setColor(Color.WHITE);
		circle.setStroke(new BasicStroke(2.0F));
		
		lineOne = new ALineModel();
		lineOne.setX(LINE_ONE_X);
		lineOne.setY(LINE_ONE_Y);
		lineOne.setRadius(LINE_ONE_RADIUS);
		lineOne.setAngle(LINE_ONE_ANGLE);
		lineOne.setColor(Color.WHITE);
		lineOne.setStroke(new BasicStroke(2.0F));
		
		lineTwo = new ALineModel();
		lineTwo.setX(LINE_ONE_X);
		lineTwo.setY(LINE_ONE_Y);
		lineTwo.setRadius(LINE_ONE_RADIUS);
		lineTwo.setAngle(LINE_TWO_ANGLE);
		lineTwo.setColor(Color.WHITE);
		lineTwo.setStroke(new BasicStroke(2.0F));
		
		lineThree = new ALineModel();
		lineThree.setX(LINE_ONE_X);
		lineThree.setY(LINE_ONE_Y);
		lineThree.setRadius(LINE_ONE_RADIUS);
		lineThree.setAngle(LINE_THREE_ANGLE);
		lineThree.setColor(Color.WHITE);
		lineThree.setStroke(new BasicStroke(2.0F));
		
		lineFour = new ALineModel();
		lineFour.setX(LINE_ONE_X);
		lineFour.setY(LINE_ONE_Y);
		lineFour.setRadius(LINE_ONE_RADIUS);
		lineFour.setAngle(LINE_FOUR_ANGLE);
		lineFour.setColor(Color.WHITE);
		lineFour.setStroke(new BasicStroke(2.0F));
		
		lineFive = new ALineModel();
		lineFive.setX(LINE_ONE_X);
		lineFive.setY(LINE_ONE_Y);
		lineFive.setRadius(LINE_ONE_RADIUS);
		lineFive.setAngle(LINE_FIVE_ANGLE);
		lineFive.setColor(Color.WHITE);
		lineFive.setStroke(new BasicStroke(2.0F));
		
		lineSix = new ALineModel();
		lineSix.setX(LINE_ONE_X);
		lineSix.setY(LINE_ONE_Y);
		lineSix.setRadius(LINE_ONE_RADIUS);
		lineSix.setAngle(LINE_SIX_ANGLE);
		lineSix.setColor(Color.WHITE);
		lineSix.setStroke(new BasicStroke(2.0F));
		
		lineSeven = new ALineModel();
		lineSeven.setX(LINE_ONE_X);
		lineSeven.setY(LINE_ONE_Y);
		lineSeven.setRadius(LINE_ONE_RADIUS);
		lineSeven.setAngle(LINE_SEVEN_ANGLE);
		lineSeven.setColor(Color.WHITE);
		lineSeven.setStroke(new BasicStroke(2.0F));
		
		lineEight = new ALineModel();
		lineEight.setX(LINE_ONE_X);
		lineEight.setY(LINE_ONE_Y);
		lineEight.setRadius(LINE_ONE_RADIUS);
		lineEight.setAngle(LINE_EIGHT_ANGLE);
		lineEight.setColor(Color.WHITE);
		lineEight.setStroke(new BasicStroke(2.0F));
		
	}
	
	public OEShapeModel getCircle() {
		return circle;
	}
	
	public OEShapeModel getLineOne() {
		return lineOne;
	}
	
	public OEShapeModel getLineTwo() {
		return lineTwo;
	}
	
	public OEShapeModel getLineThree() {
		return lineThree;
	}
	
	public OEShapeModel getLineFour() {
		return lineFour;
	}
	
	public OEShapeModel getLineFive() {
		return lineFive;
	}
	
	public OEShapeModel getLineSix() {
		return lineSix;
	}
	
	public OEShapeModel getLineSeven() {
		return lineSeven;
	}
	
	public OEShapeModel getLineEight() {
		return lineEight;
	}
	
	public void move(int newX, int newY) {
		circle.setX(circle.getX()+newX);
		circle.setY(circle.getY()+newY);
		
		lineOne.setX(lineOne.getX()+newX);
		lineOne.setY(lineOne.getY()+newY);
		
		lineTwo.setX(lineTwo.getX()+newX);
		lineTwo.setY(lineTwo.getY()+newY);
		
		lineThree.setX(lineThree.getX()+newX);
		lineThree.setY(lineThree.getY()+newY);
		
		lineFour.setX(lineFour.getX()+newX);
		lineFour.setY(lineFour.getY()+newY);
		
		lineFive.setX(lineFive.getX()+newX);
		lineFive.setY(lineFive.getY()+newY);
		
		lineSix.setX(lineSix.getX()+newX);
		lineSix.setY(lineSix.getY()+newY);
		
		lineSeven.setX(lineSeven.getX()+newX);
		lineSeven.setY(lineSeven.getY()+newY);
		
		lineEight.setX(lineEight.getX()+newX);
		lineEight.setY(lineEight.getY()+newY);
		
		
	}
	
	public static void main(String[] args) {
		final BoundedBuffer buffer = new ABoundedBuffer();
		OEFrame editor = ObjectEditor.edit(buffer);
		editor.showDrawPanel();
	}

}
]]></snapshot>
  </Command>
  <Command __id="93" _type="PauseCommand" date="Sun Apr 16 12:13:32 EDT 2023" range="5s-10s" starttimestamp="1681660740055" timestamp="872326">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[5463]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="94" _type="MoveCaretCommand" caretOffset="656" date="Sun Apr 16 12:13:32 EDT 2023" docOffset="656" starttimestamp="1681660740055" timestamp="872725" />
  <Command __id="92" _type="DiffBasedFileOpenCommand" date="Sun Apr 16 12:13:32 EDT 2023" docASTNodeCount="1675" docActiveCodeLength="9789" docExpressionCount="1160" docLength="10396" projectName="ProducersConsumersV3" starttimestamp="1681660740055" timestamp="872326">
    <filePath><![CDATA[C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\graphics\AProducerConsumerScene.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package graphics;¶¶import java.util.ArrayList;¶import java.util.LinkedList;¶import java.util.List;¶import java.util.Queue;¶¶import animations.ACookingPlateAnimator;¶import animations.ACookingPlateCommand;¶import animations.AServingPlateAnimator;¶import animations.AServingPlateCommand;¶import animations.CookingPlateAnimator;¶import animations.ServingPlateAnimator;¶import bus.uigen.OEFrame;¶import bus.uigen.ObjectEditor;¶import bus.uigen.shapes.ALineModel;¶import bus.uigen.shapes.AStringModel;¶import bus.uigen.shapes.AnImageModel;¶import bus.uigen.shapes.OEShapeModel;¶import shapes.FlexibleTextShape;¶import util.annotations.EditablePropertyNames;¶import util.annotations.Label;¶import util.annotations.PropertyNames;¶import util.annotations.StructurePattern;¶import util.annotations.StructurePatternNames;¶import util.annotations.Visible;¶import util.misc.ThreadSupport;¶¶import java.awt.Color;¶¶@StructurePattern(StructurePatternNames.BEAN_PATTERN)¶@PropertyNames({¶	"patronList",¶	"chefList",¶	"buffer",¶	"plateList",¶	"otherPlateList",¶	"bellsList",¶	"queueBellList"¶})¶@EditablePropertyNames({¶})¶public class AProducerConsumerScene implements ProducerConsumerScene {¶	¶	//Avatar offsets inside scene¶	int[] chefXValues = {120,-50,-50,120};¶	int[] chefYValues = {-50,35,210,320};¶	int[] patronXValues = {650,850,850,650};¶	int[] patronYValues = {-50,35,220,320};¶	int[] bellXValues = {680,880,880,680};¶	int[] bellYValues = {75,160,345,445};¶	int INIT_HEAD_Y = 60;¶	int INIT_HEAD_X = 163;¶	int INIT_HEAD_HEIGHT = 90;¶	int INIT_HEAD_WIDTH = 80;¶	int PLATE_OFFSET_X = 30;¶	int PLATE_OFFSET_Y = 10;¶	int PAUSE = 5;¶	¶	//Booleans that help with the functionality of the below methods¶	boolean INIT_COOK = true;¶	boolean full = false;¶	int fullPlateOffset = -5;¶	¶	//Defining the chef and patron images¶	String[] chefImages = {"images/0.png","images/1.png","images/2.png","images/3.png"};¶	String[] patronImages = {"images/4.png", "images/5.png", "images/6.png", "images/7.png"};¶	¶	//Buffer arrays¶	int[] bufferXValues = {625, 680, 680, 620, 535, 460, 460, 535};¶	int[] bufferYValues = {200, 275, 365, 425, 425, 365, 275, 200};¶	boolean[] isFull = {false, false, false, false, false, false, false, false};¶	¶	//The properties of our class¶	List<APatron> patronList;¶	List<AChef> chefList;¶	BoundedBuffer buffer = new ABoundedBuffer();¶	List<APlate> plateList;¶	Queue<APlate> otherPlateList;¶	¶	OEShapeModel[] lineArray = {buffer.getLineTwo(), buffer.getLineThree(), buffer.getLineFour(), ¶								buffer.getLineFive(), buffer.getLineSix(), buffer.getLineSeven(), ¶								buffer.getLineEight(), buffer.getLineOne()};¶	¶	List<ABell> bellsList;¶	Queue<ABell> queueBellList;¶	int[] bellValues = {127, 212, 397, 497};¶	Queue<Integer> bellIntegerList;¶	¶	ACookingPlateCommand cookingCommand;¶	CookingPlateAnimator cookingAnimator;¶	¶	AServingPlateCommand servingCommand;¶	ServingPlateAnimator servingAnimator;¶	¶	//The constructor sets the scene with one chef, patron, a buffer, and a plate (not visible)¶	public AProducerConsumerScene() {¶		patronList = new ArrayList<APatron>();¶		chefList = new ArrayList<AChef>();¶		//buffer = new ABoundedBuffer();¶		plateList = new ArrayList<APlate>();¶		otherPlateList = new LinkedList<APlate>();¶		bellsList = new ArrayList<ABell>();¶		queueBellList = new LinkedList<ABell>();¶		bellIntegerList = new LinkedList<Integer>();¶		¶		patronList.add(0, new APatron());¶		OEShapeModel initPatronHead = new AnImageModel(patronImages[0]);¶		initPatronHead.setX(INIT_HEAD_X);¶		initPatronHead.setY(INIT_HEAD_Y);¶		initPatronHead.setHeight(INIT_HEAD_HEIGHT);¶		initPatronHead.setWidth(INIT_HEAD_WIDTH);¶		patronList.get(0).patron.setHead(initPatronHead);¶		patronList.get(0).move(patronXValues[0], patronYValues[0]);¶		¶		chefList.add(0, new AChef());¶		OEShapeModel initChefHead = new AnImageModel(chefImages[0]);¶		initChefHead.setX(INIT_HEAD_X);¶		initChefHead.setY(INIT_HEAD_Y);¶		initChefHead.setHeight(INIT_HEAD_HEIGHT);¶		initChefHead.setWidth(INIT_HEAD_WIDTH);¶		chefList.get(0).chef.setHead(initChefHead);¶		chefList.get(0).move(chefXValues[0], chefYValues[0]);¶		¶		plateList.add(new APlate());¶		plateList.get(0).getPlate().setHeight(0);¶		plateList.get(0).getPlate().setWidth(0);¶		¶		otherPlateList.add(new APlate());¶		otherPlateList.peek().getPlate().setHeight(0);¶		otherPlateList.peek().getPlate().setWidth(0);¶		¶		cookingAnimator = new ACookingPlateAnimator();¶		servingAnimator = new AServingPlateAnimator();¶		¶		bellsList.add(new ABell());¶		bellsList.get(0).getBell().setHeight(0);¶		bellsList.get(0).getBell().setWidth(0);¶		¶		queueBellList.add(new ABell());¶		queueBellList.peek().getBell().setHeight(0);¶		queueBellList.peek().getBell().setWidth(0);¶		¶		bellIntegerList.add(0);¶	}¶	¶	//Producer consumer methods¶	¶	//Init Scene sets the number of patrons and chefs in the scene¶	@Label("Init Scene")¶	public void initScene(int patronAmount, int chefAmount) {¶		bellsList.clear();¶		for (int i=0; i<patronAmount; i++) { ¶			APatron patron = new APatron();¶			patronList.add(i, patron);¶			OEShapeModel newHead = new AnImageModel(patronImages[i]);¶			patron.patron.setHead(newHead); ¶			newHead.setX(INIT_HEAD_X); ¶			newHead.setY(INIT_HEAD_Y);¶			newHead.setHeight(INIT_HEAD_HEIGHT);¶			newHead.setWidth(INIT_HEAD_WIDTH);¶			patron.move(patronXValues[i], patronYValues[i]);¶			¶			bellsList.add(new ABell());¶			bellsList.get(i).move(bellXValues[i], bellYValues[i]);¶		}¶		for (int i=0; i<chefAmount; i++) {¶			AChef chef = new AChef();¶			chefList.add(i, chef);¶			OEShapeModel newHead = new AnImageModel(chefImages[i]);¶			chef.chef.setHead(newHead);¶			newHead.setX(INIT_HEAD_X); ¶			newHead.setY(INIT_HEAD_Y);¶			newHead.setHeight(INIT_HEAD_HEIGHT);¶			newHead.setWidth(INIT_HEAD_WIDTH);¶			chef.move(chefXValues[i], chefYValues[i]);¶		}¶	}¶	¶	//Once the head of an avatar is chosen, it makes the plate that they "cook" appear¶	public void cook(OEShapeModel head) {¶		if (INIT_COOK) {¶			INIT_COOK=!INIT_COOK;¶			plateList.remove(0);¶			otherPlateList.remove();¶		}¶		¶		int headX = head.getCenterX();¶		int headY = head.getCenterY();¶		APlate newPlate = new APlate(plateList.size()+1);¶		newPlate.getPlate().setHeight(0);¶		newPlate.getPlate().setWidth(0);¶		plateList.add(newPlate);¶		otherPlateList.add(newPlate);¶		¶		if (full) {¶			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y+fullPlateOffset);¶			fullPlateOffset = fullPlateOffset - 5;¶		} else {¶			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y);¶		}¶		¶		cookingCommand = new ACookingPlateCommand(cookingAnimator, newPlate, 40, 15);¶		Thread thread = new Thread (cookingCommand);¶		thread.start();¶	}¶	¶	public void serve() {¶		//Checks to see if the buffer is full. If it is, then can't serve.¶		resetLineColors();¶		if(checkIfFull()) {¶			resetLineColors();¶			return;¶		}¶		¶		//Do put, it will disable from there¶		¶		Plate workingPlate = otherPlateList.peek();¶		int workingPlatePlace = Integer.valueOf(workingPlate.getText().getText())-1;¶		changeLineColors(workingPlatePlace);¶		¶		servingCommand = new AServingPlateCommand(servingAnimator,workingPlate,PAUSE, bufferXValues[workingPlatePlace], bufferYValues[workingPlatePlace]);¶		Thread thread = new Thread(servingCommand);¶		thread.start();¶		¶		isFull[workingPlatePlace] = true;¶		otherPlateList.remove();¶	}¶	¶	public void order(OEShapeModel bell) {¶		if(checkIfFull()) {¶			resetLineColors();¶			resetBuffer();¶		}¶		bellIntegerList.add(0);¶		int bellPlace = findBell(bell.getCenterY());¶		bellsList.get(bellPlace).getText().setText(String.valueOf(bellIntegerList.size()-1));¶		¶		int platePlace = findFirstAvailablePlate();¶		servingCommand = new AServingPlateCommand(servingAnimator,plateList.get(platePlace),PAUSE, bell.getCenterX() , bell.getCenterY());¶		Thread thread = new Thread(servingCommand);¶		thread.start();¶		¶		cookingCommand = new ACookingPlateCommand(cookingAnimator, plateList.get(0), 0, 15);¶		Thread eatingThread = new Thread (cookingCommand);¶		eatingThread.start();¶		plateList.get(0).getText().setText("");¶	}¶	¶	public void eat() {¶		plateList.remove(0);¶	}¶	¶	@Override¶	@Visible(false)¶	public int findBell(int centerY) {¶		for(int i=0; i<bellsList.size();i++) {¶			if(bellsList.get(i).getBell().getCenterY() == centerY) {¶				return i;¶			}¶		}¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public int findFirstAvailablePlate() {¶		for (int i=0; i<isFull.length;i++) {¶			if(isFull[i] == true) {¶				return i;¶			}¶		}¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public void resetBuffer() {¶		¶		for (int i=0; i<isFull.length;i++) {¶			isFull[i] = false;¶		}¶	}¶	¶	@Override¶	@Visible(false)¶	public int findPatron(OEShapeModel patronHead) {¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public boolean checkIfFull() {¶		for (int i=0; i<isFull.length;i++) {¶			if (isFull[i] == false) {¶				full = false;¶				return full;¶			}¶		}¶		full = true;¶		return full;¶	}¶	¶	@Override¶	@Visible(false)¶	public void changeLineColors(int workingPlatePlace) {¶		if(workingPlatePlace == lineArray.length-1) {¶			lineArray[workingPlatePlace].setColor(Color.GREEN);¶			lineArray[0].setColor(Color.GREEN);¶		} else {¶			lineArray[workingPlatePlace].setColor(Color.GREEN);¶			lineArray[workingPlatePlace+1].setColor(Color.GREEN);¶		}¶	}¶	¶	¶	@Override¶	@Visible(false)¶	public void resetLineColors() {¶		for (int i=0; i<lineArray.length; i++) {¶			lineArray[i].setColor(Color.WHITE);¶		}¶	}¶	¶	//Getters for properties of the scene¶	@Override¶	public List<AChef> getChefList() {¶		return chefList;¶	}¶	¶	@Override¶	public List<APatron> getPatronList() {¶		return patronList;¶	}¶	¶	@Override¶	public BoundedBuffer getBuffer() {¶		return buffer;¶	}¶	¶	@Override¶	public List<APlate> getPlateList() {¶		return plateList;¶	}	¶	¶	@Override¶	@util.annotations.Visible(false)¶	public Queue<APlate> getOtherPlateList() {¶		return otherPlateList;¶	}¶	¶	@Override¶	public List<ABell> getBellsList() {¶		return bellsList;¶	}¶	¶	@Override¶	@Visible(false)¶	public Queue<ABell> getQueueBellList() {¶		return queueBellList;¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="96" _type="PauseCommand" date="Sun Apr 16 12:13:34 EDT 2023" range="1s-2s" starttimestamp="1681660740055" timestamp="874307">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1581]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="97" _type="MoveCaretCommand" caretOffset="0" date="Sun Apr 16 12:13:34 EDT 2023" docOffset="0" starttimestamp="1681660740055" timestamp="874540" />
  <Command __id="99" _type="PauseCommand" date="Sun Apr 16 12:13:36 EDT 2023" range="2s-5s" starttimestamp="1681660740055" timestamp="876809">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2269]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="98" _type="ShellCommand" date="Sun Apr 16 12:13:36 EDT 2023" starttimestamp="1681660740055" timestamp="876809" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="101" _type="PauseCommand" date="Sun Apr 16 12:13:41 EDT 2023" range="2s-5s" starttimestamp="1681660740055" timestamp="881786">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[4977]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="100" _type="ShellCommand" date="Sun Apr 16 12:13:41 EDT 2023" starttimestamp="1681660740055" timestamp="881786" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="102" _type="ShellCommand" date="Sun Apr 16 12:13:42 EDT 2023" starttimestamp="1681660740055" timestamp="882567" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="104" _type="PauseCommand" date="Sun Apr 16 12:13:55 EDT 2023" range="10s-20s" starttimestamp="1681660740055" timestamp="895030">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[12463]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="103" _type="ShellCommand" date="Sun Apr 16 12:13:55 EDT 2023" starttimestamp="1681660740055" timestamp="895030" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="106" _type="PauseCommand" date="Sun Apr 16 12:13:57 EDT 2023" range="2s-5s" starttimestamp="1681660740055" timestamp="897807">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2777]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="105" _type="ShellCommand" date="Sun Apr 16 12:13:57 EDT 2023" starttimestamp="1681660740055" timestamp="897807" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="108" _type="PauseCommand" date="Sun Apr 16 12:14:05 EDT 2023" range="5s-10s" starttimestamp="1681660740055" timestamp="905801">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[7994]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="107" _type="ShellCommand" date="Sun Apr 16 12:14:05 EDT 2023" starttimestamp="1681660740055" timestamp="905801" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="95" _type="DiffBasedFileOpenCommand" date="Sun Apr 16 12:13:34 EDT 2023" docASTNodeCount="186" docActiveCodeLength="1095" docExpressionCount="116" docLength="1095" projectName="ProducersConsumersV3" starttimestamp="1681660740055" timestamp="874306">
    <filePath><![CDATA[C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\graphics\AChef.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package graphics;

import java.awt.Color;

import bus.uigen.OEFrame;
import bus.uigen.ObjectEditor;
import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;

@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({
	"chef",
	"table"
})
@EditablePropertyNames({
})
public class AChef implements Chef {
	Avatar chef;
	Table table;
	
	int INIT_X_OFFSET = 200;
	int INIT_Y_OFFSET = 25;
	
	public AChef() {
		chef = new AnAvatar();
		table = new ATable();
		table.move(INIT_X_OFFSET, INIT_Y_OFFSET);
	}
	
	public Avatar getChef() {
		return chef;
	}
	
	public Table getTable() {
		return table;
	}
	
	public void move(int newX, int newY) {
		chef.move(newX, newY);
		table.move(newX, newY);
	}
	
	public static void main(String[] args) {
		final Chef thisChef = new AChef();
		OEFrame editor = ObjectEditor.edit(thisChef);
		editor.getDrawComponent().setBackground(Color.DARK_GRAY);
		editor.showDrawPanel();
	}
	
}
]]></snapshot>
  </Command>
  <Command __id="110" _type="PauseCommand" date="Sun Apr 16 12:14:09 EDT 2023" range="2s-5s" starttimestamp="1681660740055" timestamp="909567">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3766]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="111" _type="MoveCaretCommand" caretOffset="656" date="Sun Apr 16 12:14:09 EDT 2023" docOffset="656" starttimestamp="1681660740055" timestamp="909747" />
  <Command __id="109" _type="DiffBasedFileOpenCommand" date="Sun Apr 16 12:14:09 EDT 2023" docASTNodeCount="1675" docActiveCodeLength="9789" docExpressionCount="1160" docLength="10396" projectName="ProducersConsumersV3" starttimestamp="1681660740055" timestamp="909567">
    <filePath><![CDATA[C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\graphics\AProducerConsumerScene.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package graphics;¶¶import java.util.ArrayList;¶import java.util.LinkedList;¶import java.util.List;¶import java.util.Queue;¶¶import animations.ACookingPlateAnimator;¶import animations.ACookingPlateCommand;¶import animations.AServingPlateAnimator;¶import animations.AServingPlateCommand;¶import animations.CookingPlateAnimator;¶import animations.ServingPlateAnimator;¶import bus.uigen.OEFrame;¶import bus.uigen.ObjectEditor;¶import bus.uigen.shapes.ALineModel;¶import bus.uigen.shapes.AStringModel;¶import bus.uigen.shapes.AnImageModel;¶import bus.uigen.shapes.OEShapeModel;¶import shapes.FlexibleTextShape;¶import util.annotations.EditablePropertyNames;¶import util.annotations.Label;¶import util.annotations.PropertyNames;¶import util.annotations.StructurePattern;¶import util.annotations.StructurePatternNames;¶import util.annotations.Visible;¶import util.misc.ThreadSupport;¶¶import java.awt.Color;¶¶@StructurePattern(StructurePatternNames.BEAN_PATTERN)¶@PropertyNames({¶	"patronList",¶	"chefList",¶	"buffer",¶	"plateList",¶	"otherPlateList",¶	"bellsList",¶	"queueBellList"¶})¶@EditablePropertyNames({¶})¶public class AProducerConsumerScene implements ProducerConsumerScene {¶	¶	//Avatar offsets inside scene¶	int[] chefXValues = {120,-50,-50,120};¶	int[] chefYValues = {-50,35,210,320};¶	int[] patronXValues = {650,850,850,650};¶	int[] patronYValues = {-50,35,220,320};¶	int[] bellXValues = {680,880,880,680};¶	int[] bellYValues = {75,160,345,445};¶	int INIT_HEAD_Y = 60;¶	int INIT_HEAD_X = 163;¶	int INIT_HEAD_HEIGHT = 90;¶	int INIT_HEAD_WIDTH = 80;¶	int PLATE_OFFSET_X = 30;¶	int PLATE_OFFSET_Y = 10;¶	int PAUSE = 5;¶	¶	//Booleans that help with the functionality of the below methods¶	boolean INIT_COOK = true;¶	boolean full = false;¶	int fullPlateOffset = -5;¶	¶	//Defining the chef and patron images¶	String[] chefImages = {"images/0.png","images/1.png","images/2.png","images/3.png"};¶	String[] patronImages = {"images/4.png", "images/5.png", "images/6.png", "images/7.png"};¶	¶	//Buffer arrays¶	int[] bufferXValues = {625, 680, 680, 620, 535, 460, 460, 535};¶	int[] bufferYValues = {200, 275, 365, 425, 425, 365, 275, 200};¶	boolean[] isFull = {false, false, false, false, false, false, false, false};¶	¶	//The properties of our class¶	List<APatron> patronList;¶	List<AChef> chefList;¶	BoundedBuffer buffer = new ABoundedBuffer();¶	List<APlate> plateList;¶	Queue<APlate> otherPlateList;¶	¶	OEShapeModel[] lineArray = {buffer.getLineTwo(), buffer.getLineThree(), buffer.getLineFour(), ¶								buffer.getLineFive(), buffer.getLineSix(), buffer.getLineSeven(), ¶								buffer.getLineEight(), buffer.getLineOne()};¶	¶	List<ABell> bellsList;¶	Queue<ABell> queueBellList;¶	int[] bellValues = {127, 212, 397, 497};¶	Queue<Integer> bellIntegerList;¶	¶	ACookingPlateCommand cookingCommand;¶	CookingPlateAnimator cookingAnimator;¶	¶	AServingPlateCommand servingCommand;¶	ServingPlateAnimator servingAnimator;¶	¶	//The constructor sets the scene with one chef, patron, a buffer, and a plate (not visible)¶	public AProducerConsumerScene() {¶		patronList = new ArrayList<APatron>();¶		chefList = new ArrayList<AChef>();¶		//buffer = new ABoundedBuffer();¶		plateList = new ArrayList<APlate>();¶		otherPlateList = new LinkedList<APlate>();¶		bellsList = new ArrayList<ABell>();¶		queueBellList = new LinkedList<ABell>();¶		bellIntegerList = new LinkedList<Integer>();¶		¶		patronList.add(0, new APatron());¶		OEShapeModel initPatronHead = new AnImageModel(patronImages[0]);¶		initPatronHead.setX(INIT_HEAD_X);¶		initPatronHead.setY(INIT_HEAD_Y);¶		initPatronHead.setHeight(INIT_HEAD_HEIGHT);¶		initPatronHead.setWidth(INIT_HEAD_WIDTH);¶		patronList.get(0).patron.setHead(initPatronHead);¶		patronList.get(0).move(patronXValues[0], patronYValues[0]);¶		¶		chefList.add(0, new AChef());¶		OEShapeModel initChefHead = new AnImageModel(chefImages[0]);¶		initChefHead.setX(INIT_HEAD_X);¶		initChefHead.setY(INIT_HEAD_Y);¶		initChefHead.setHeight(INIT_HEAD_HEIGHT);¶		initChefHead.setWidth(INIT_HEAD_WIDTH);¶		chefList.get(0).chef.setHead(initChefHead);¶		chefList.get(0).move(chefXValues[0], chefYValues[0]);¶		¶		plateList.add(new APlate());¶		plateList.get(0).getPlate().setHeight(0);¶		plateList.get(0).getPlate().setWidth(0);¶		¶		otherPlateList.add(new APlate());¶		otherPlateList.peek().getPlate().setHeight(0);¶		otherPlateList.peek().getPlate().setWidth(0);¶		¶		cookingAnimator = new ACookingPlateAnimator();¶		servingAnimator = new AServingPlateAnimator();¶		¶		bellsList.add(new ABell());¶		bellsList.get(0).getBell().setHeight(0);¶		bellsList.get(0).getBell().setWidth(0);¶		¶		queueBellList.add(new ABell());¶		queueBellList.peek().getBell().setHeight(0);¶		queueBellList.peek().getBell().setWidth(0);¶		¶		bellIntegerList.add(0);¶	}¶	¶	//Producer consumer methods¶	¶	//Init Scene sets the number of patrons and chefs in the scene¶	@Label("Init Scene")¶	public void initScene(int patronAmount, int chefAmount) {¶		bellsList.clear();¶		for (int i=0; i<patronAmount; i++) { ¶			APatron patron = new APatron();¶			patronList.add(i, patron);¶			OEShapeModel newHead = new AnImageModel(patronImages[i]);¶			patron.patron.setHead(newHead); ¶			newHead.setX(INIT_HEAD_X); ¶			newHead.setY(INIT_HEAD_Y);¶			newHead.setHeight(INIT_HEAD_HEIGHT);¶			newHead.setWidth(INIT_HEAD_WIDTH);¶			patron.move(patronXValues[i], patronYValues[i]);¶			¶			bellsList.add(new ABell());¶			bellsList.get(i).move(bellXValues[i], bellYValues[i]);¶		}¶		for (int i=0; i<chefAmount; i++) {¶			AChef chef = new AChef();¶			chefList.add(i, chef);¶			OEShapeModel newHead = new AnImageModel(chefImages[i]);¶			chef.chef.setHead(newHead);¶			newHead.setX(INIT_HEAD_X); ¶			newHead.setY(INIT_HEAD_Y);¶			newHead.setHeight(INIT_HEAD_HEIGHT);¶			newHead.setWidth(INIT_HEAD_WIDTH);¶			chef.move(chefXValues[i], chefYValues[i]);¶		}¶	}¶	¶	//Once the head of an avatar is chosen, it makes the plate that they "cook" appear¶	public void cook(OEShapeModel head) {¶		if (INIT_COOK) {¶			INIT_COOK=!INIT_COOK;¶			plateList.remove(0);¶			otherPlateList.remove();¶		}¶		¶		int headX = head.getCenterX();¶		int headY = head.getCenterY();¶		APlate newPlate = new APlate(plateList.size()+1);¶		newPlate.getPlate().setHeight(0);¶		newPlate.getPlate().setWidth(0);¶		plateList.add(newPlate);¶		otherPlateList.add(newPlate);¶		¶		if (full) {¶			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y+fullPlateOffset);¶			fullPlateOffset = fullPlateOffset - 5;¶		} else {¶			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y);¶		}¶		¶		cookingCommand = new ACookingPlateCommand(cookingAnimator, newPlate, 40, 15);¶		Thread thread = new Thread (cookingCommand);¶		thread.start();¶	}¶	¶	public void serve() {¶		//Checks to see if the buffer is full. If it is, then can't serve.¶		resetLineColors();¶		if(checkIfFull()) {¶			resetLineColors();¶			return;¶		}¶		¶		//Do put, it will disable from there¶		¶		Plate workingPlate = otherPlateList.peek();¶		int workingPlatePlace = Integer.valueOf(workingPlate.getText().getText())-1;¶		changeLineColors(workingPlatePlace);¶		¶		servingCommand = new AServingPlateCommand(servingAnimator,workingPlate,PAUSE, bufferXValues[workingPlatePlace], bufferYValues[workingPlatePlace]);¶		Thread thread = new Thread(servingCommand);¶		thread.start();¶		¶		isFull[workingPlatePlace] = true;¶		otherPlateList.remove();¶	}¶	¶	public void order(OEShapeModel bell) {¶		if(checkIfFull()) {¶			resetLineColors();¶			resetBuffer();¶		}¶		bellIntegerList.add(0);¶		int bellPlace = findBell(bell.getCenterY());¶		bellsList.get(bellPlace).getText().setText(String.valueOf(bellIntegerList.size()-1));¶		¶		int platePlace = findFirstAvailablePlate();¶		servingCommand = new AServingPlateCommand(servingAnimator,plateList.get(platePlace),PAUSE, bell.getCenterX() , bell.getCenterY());¶		Thread thread = new Thread(servingCommand);¶		thread.start();¶		¶		cookingCommand = new ACookingPlateCommand(cookingAnimator, plateList.get(0), 0, 15);¶		Thread eatingThread = new Thread (cookingCommand);¶		eatingThread.start();¶		plateList.get(0).getText().setText("");¶	}¶	¶	public void eat() {¶		plateList.remove(0);¶	}¶	¶	@Override¶	@Visible(false)¶	public int findBell(int centerY) {¶		for(int i=0; i<bellsList.size();i++) {¶			if(bellsList.get(i).getBell().getCenterY() == centerY) {¶				return i;¶			}¶		}¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public int findFirstAvailablePlate() {¶		for (int i=0; i<isFull.length;i++) {¶			if(isFull[i] == true) {¶				return i;¶			}¶		}¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public void resetBuffer() {¶		¶		for (int i=0; i<isFull.length;i++) {¶			isFull[i] = false;¶		}¶	}¶	¶	@Override¶	@Visible(false)¶	public int findPatron(OEShapeModel patronHead) {¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public boolean checkIfFull() {¶		for (int i=0; i<isFull.length;i++) {¶			if (isFull[i] == false) {¶				full = false;¶				return full;¶			}¶		}¶		full = true;¶		return full;¶	}¶	¶	@Override¶	@Visible(false)¶	public void changeLineColors(int workingPlatePlace) {¶		if(workingPlatePlace == lineArray.length-1) {¶			lineArray[workingPlatePlace].setColor(Color.GREEN);¶			lineArray[0].setColor(Color.GREEN);¶		} else {¶			lineArray[workingPlatePlace].setColor(Color.GREEN);¶			lineArray[workingPlatePlace+1].setColor(Color.GREEN);¶		}¶	}¶	¶	¶	@Override¶	@Visible(false)¶	public void resetLineColors() {¶		for (int i=0; i<lineArray.length; i++) {¶			lineArray[i].setColor(Color.WHITE);¶		}¶	}¶	¶	//Getters for properties of the scene¶	@Override¶	public List<AChef> getChefList() {¶		return chefList;¶	}¶	¶	@Override¶	public List<APatron> getPatronList() {¶		return patronList;¶	}¶	¶	@Override¶	public BoundedBuffer getBuffer() {¶		return buffer;¶	}¶	¶	@Override¶	public List<APlate> getPlateList() {¶		return plateList;¶	}	¶	¶	@Override¶	@util.annotations.Visible(false)¶	public Queue<APlate> getOtherPlateList() {¶		return otherPlateList;¶	}¶	¶	@Override¶	public List<ABell> getBellsList() {¶		return bellsList;¶	}¶	¶	@Override¶	@Visible(false)¶	public Queue<ABell> getQueueBellList() {¶		return queueBellList;¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="113" _type="PauseCommand" date="Sun Apr 16 12:14:11 EDT 2023" range="1s-2s" starttimestamp="1681660740055" timestamp="911495">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1748]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="114" _type="MoveCaretCommand" caretOffset="0" date="Sun Apr 16 12:14:11 EDT 2023" docOffset="0" starttimestamp="1681660740055" timestamp="911808" />
  <Command __id="116" _type="PauseCommand" date="Sun Apr 16 12:14:13 EDT 2023" range="1s-2s" starttimestamp="1681660740055" timestamp="913175">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1367]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="115" _type="ShellCommand" date="Sun Apr 16 12:14:13 EDT 2023" starttimestamp="1681660740055" timestamp="913175" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="118" _type="PauseCommand" date="Sun Apr 16 12:14:19 EDT 2023" range="5s-10s" starttimestamp="1681660740055" timestamp="919115">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[5940]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="117" _type="ShellCommand" date="Sun Apr 16 12:14:19 EDT 2023" starttimestamp="1681660740055" timestamp="919115" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="119" _type="ShellCommand" date="Sun Apr 16 12:14:19 EDT 2023" starttimestamp="1681660740055" timestamp="919727" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="121" _type="PauseCommand" date="Sun Apr 16 12:14:26 EDT 2023" range="5s-10s" starttimestamp="1681660740055" timestamp="926760">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[7032]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="120" _type="ShellCommand" date="Sun Apr 16 12:14:26 EDT 2023" starttimestamp="1681660740055" timestamp="926759" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="122" _type="ShellCommand" date="Sun Apr 16 12:14:27 EDT 2023" starttimestamp="1681660740055" timestamp="927253" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="124" _type="PauseCommand" date="Sun Apr 16 12:14:49 EDT 2023" range="20s-30s" starttimestamp="1681660740055" timestamp="949916">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[22663]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="123" _type="ShellCommand" date="Sun Apr 16 12:14:49 EDT 2023" starttimestamp="1681660740055" timestamp="949916" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="112" _type="DiffBasedFileOpenCommand" date="Sun Apr 16 12:14:11 EDT 2023" docASTNodeCount="255" docActiveCodeLength="1452" docExpressionCount="166" docLength="1639" projectName="ProducersConsumersV3" starttimestamp="1681660740055" timestamp="911495">
    <filePath><![CDATA[C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\graphics\AnAngle.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package graphics;

import bus.uigen.OEFrame;
import bus.uigen.ObjectEditor;
import bus.uigen.shapes.ALineModel;
import bus.uigen.shapes.OEShapeModel;
import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.misc.ThreadSupport;

@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({
	"left",
	"right"
})
@EditablePropertyNames({
	
})
public class AnAngle implements Angle {

	int init_left = 2;
	int init_right = 1;
	int init_radius = 60;
	OEShapeModel left;
	OEShapeModel right;
	
	public AnAngle() {
		left = new ALineModel();
		right = new ALineModel();
		left.setRadius(init_radius);
		right.setRadius(init_radius);
		left.setAngle(init_left);
		right.setAngle(init_right);
		left.setX(50);
		left.setY(50);
		right.setX(50);
		right.setY(50);
	}
	
	@Override
	public OEShapeModel getLeft() {
		return left;
	}
	
	@Override
	public OEShapeModel getRight() {
		return right;
	}
	
	@Override
	public void moveTo(int newX, int newY) {
		right.setX(newX);
		right.setY(newY);
		left.setX(newX);
		left.setY(newY);
		
	}
	
	public void animateLegs(OEShapeModel leg) {
//		AngleAnimator animator = new AnAngleAnimator();
//		AnAngleCommand command = new AnAngleCommand(animator, leg, 4, 500, 500);
//		Thread thread = new Thread (command);
//		thread.start();
	}
	
	public static void main(String[] args) {
		final AnAngle legs = new AnAngle();
		OEFrame editor = ObjectEditor.edit(legs);
		editor.showDrawPanel();
	}

}
]]></snapshot>
  </Command>
  <Command __id="126" _type="PauseCommand" date="Sun Apr 16 12:14:52 EDT 2023" range="2s-5s" starttimestamp="1681660740055" timestamp="952770">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2854]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="127" _type="MoveCaretCommand" caretOffset="656" date="Sun Apr 16 12:14:52 EDT 2023" docOffset="656" starttimestamp="1681660740055" timestamp="952941" />
  <Command __id="125" _type="DiffBasedFileOpenCommand" date="Sun Apr 16 12:14:52 EDT 2023" docASTNodeCount="1675" docActiveCodeLength="9789" docExpressionCount="1160" docLength="10396" projectName="ProducersConsumersV3" starttimestamp="1681660740055" timestamp="952770">
    <filePath><![CDATA[C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\graphics\AProducerConsumerScene.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package graphics;¶¶import java.util.ArrayList;¶import java.util.LinkedList;¶import java.util.List;¶import java.util.Queue;¶¶import animations.ACookingPlateAnimator;¶import animations.ACookingPlateCommand;¶import animations.AServingPlateAnimator;¶import animations.AServingPlateCommand;¶import animations.CookingPlateAnimator;¶import animations.ServingPlateAnimator;¶import bus.uigen.OEFrame;¶import bus.uigen.ObjectEditor;¶import bus.uigen.shapes.ALineModel;¶import bus.uigen.shapes.AStringModel;¶import bus.uigen.shapes.AnImageModel;¶import bus.uigen.shapes.OEShapeModel;¶import shapes.FlexibleTextShape;¶import util.annotations.EditablePropertyNames;¶import util.annotations.Label;¶import util.annotations.PropertyNames;¶import util.annotations.StructurePattern;¶import util.annotations.StructurePatternNames;¶import util.annotations.Visible;¶import util.misc.ThreadSupport;¶¶import java.awt.Color;¶¶@StructurePattern(StructurePatternNames.BEAN_PATTERN)¶@PropertyNames({¶	"patronList",¶	"chefList",¶	"buffer",¶	"plateList",¶	"otherPlateList",¶	"bellsList",¶	"queueBellList"¶})¶@EditablePropertyNames({¶})¶public class AProducerConsumerScene implements ProducerConsumerScene {¶	¶	//Avatar offsets inside scene¶	int[] chefXValues = {120,-50,-50,120};¶	int[] chefYValues = {-50,35,210,320};¶	int[] patronXValues = {650,850,850,650};¶	int[] patronYValues = {-50,35,220,320};¶	int[] bellXValues = {680,880,880,680};¶	int[] bellYValues = {75,160,345,445};¶	int INIT_HEAD_Y = 60;¶	int INIT_HEAD_X = 163;¶	int INIT_HEAD_HEIGHT = 90;¶	int INIT_HEAD_WIDTH = 80;¶	int PLATE_OFFSET_X = 30;¶	int PLATE_OFFSET_Y = 10;¶	int PAUSE = 5;¶	¶	//Booleans that help with the functionality of the below methods¶	boolean INIT_COOK = true;¶	boolean full = false;¶	int fullPlateOffset = -5;¶	¶	//Defining the chef and patron images¶	String[] chefImages = {"images/0.png","images/1.png","images/2.png","images/3.png"};¶	String[] patronImages = {"images/4.png", "images/5.png", "images/6.png", "images/7.png"};¶	¶	//Buffer arrays¶	int[] bufferXValues = {625, 680, 680, 620, 535, 460, 460, 535};¶	int[] bufferYValues = {200, 275, 365, 425, 425, 365, 275, 200};¶	boolean[] isFull = {false, false, false, false, false, false, false, false};¶	¶	//The properties of our class¶	List<APatron> patronList;¶	List<AChef> chefList;¶	BoundedBuffer buffer = new ABoundedBuffer();¶	List<APlate> plateList;¶	Queue<APlate> otherPlateList;¶	¶	OEShapeModel[] lineArray = {buffer.getLineTwo(), buffer.getLineThree(), buffer.getLineFour(), ¶								buffer.getLineFive(), buffer.getLineSix(), buffer.getLineSeven(), ¶								buffer.getLineEight(), buffer.getLineOne()};¶	¶	List<ABell> bellsList;¶	Queue<ABell> queueBellList;¶	int[] bellValues = {127, 212, 397, 497};¶	Queue<Integer> bellIntegerList;¶	¶	ACookingPlateCommand cookingCommand;¶	CookingPlateAnimator cookingAnimator;¶	¶	AServingPlateCommand servingCommand;¶	ServingPlateAnimator servingAnimator;¶	¶	//The constructor sets the scene with one chef, patron, a buffer, and a plate (not visible)¶	public AProducerConsumerScene() {¶		patronList = new ArrayList<APatron>();¶		chefList = new ArrayList<AChef>();¶		//buffer = new ABoundedBuffer();¶		plateList = new ArrayList<APlate>();¶		otherPlateList = new LinkedList<APlate>();¶		bellsList = new ArrayList<ABell>();¶		queueBellList = new LinkedList<ABell>();¶		bellIntegerList = new LinkedList<Integer>();¶		¶		patronList.add(0, new APatron());¶		OEShapeModel initPatronHead = new AnImageModel(patronImages[0]);¶		initPatronHead.setX(INIT_HEAD_X);¶		initPatronHead.setY(INIT_HEAD_Y);¶		initPatronHead.setHeight(INIT_HEAD_HEIGHT);¶		initPatronHead.setWidth(INIT_HEAD_WIDTH);¶		patronList.get(0).patron.setHead(initPatronHead);¶		patronList.get(0).move(patronXValues[0], patronYValues[0]);¶		¶		chefList.add(0, new AChef());¶		OEShapeModel initChefHead = new AnImageModel(chefImages[0]);¶		initChefHead.setX(INIT_HEAD_X);¶		initChefHead.setY(INIT_HEAD_Y);¶		initChefHead.setHeight(INIT_HEAD_HEIGHT);¶		initChefHead.setWidth(INIT_HEAD_WIDTH);¶		chefList.get(0).chef.setHead(initChefHead);¶		chefList.get(0).move(chefXValues[0], chefYValues[0]);¶		¶		plateList.add(new APlate());¶		plateList.get(0).getPlate().setHeight(0);¶		plateList.get(0).getPlate().setWidth(0);¶		¶		otherPlateList.add(new APlate());¶		otherPlateList.peek().getPlate().setHeight(0);¶		otherPlateList.peek().getPlate().setWidth(0);¶		¶		cookingAnimator = new ACookingPlateAnimator();¶		servingAnimator = new AServingPlateAnimator();¶		¶		bellsList.add(new ABell());¶		bellsList.get(0).getBell().setHeight(0);¶		bellsList.get(0).getBell().setWidth(0);¶		¶		queueBellList.add(new ABell());¶		queueBellList.peek().getBell().setHeight(0);¶		queueBellList.peek().getBell().setWidth(0);¶		¶		bellIntegerList.add(0);¶	}¶	¶	//Producer consumer methods¶	¶	//Init Scene sets the number of patrons and chefs in the scene¶	@Label("Init Scene")¶	public void initScene(int patronAmount, int chefAmount) {¶		bellsList.clear();¶		for (int i=0; i<patronAmount; i++) { ¶			APatron patron = new APatron();¶			patronList.add(i, patron);¶			OEShapeModel newHead = new AnImageModel(patronImages[i]);¶			patron.patron.setHead(newHead); ¶			newHead.setX(INIT_HEAD_X); ¶			newHead.setY(INIT_HEAD_Y);¶			newHead.setHeight(INIT_HEAD_HEIGHT);¶			newHead.setWidth(INIT_HEAD_WIDTH);¶			patron.move(patronXValues[i], patronYValues[i]);¶			¶			bellsList.add(new ABell());¶			bellsList.get(i).move(bellXValues[i], bellYValues[i]);¶		}¶		for (int i=0; i<chefAmount; i++) {¶			AChef chef = new AChef();¶			chefList.add(i, chef);¶			OEShapeModel newHead = new AnImageModel(chefImages[i]);¶			chef.chef.setHead(newHead);¶			newHead.setX(INIT_HEAD_X); ¶			newHead.setY(INIT_HEAD_Y);¶			newHead.setHeight(INIT_HEAD_HEIGHT);¶			newHead.setWidth(INIT_HEAD_WIDTH);¶			chef.move(chefXValues[i], chefYValues[i]);¶		}¶	}¶	¶	//Once the head of an avatar is chosen, it makes the plate that they "cook" appear¶	public void cook(OEShapeModel head) {¶		if (INIT_COOK) {¶			INIT_COOK=!INIT_COOK;¶			plateList.remove(0);¶			otherPlateList.remove();¶		}¶		¶		int headX = head.getCenterX();¶		int headY = head.getCenterY();¶		APlate newPlate = new APlate(plateList.size()+1);¶		newPlate.getPlate().setHeight(0);¶		newPlate.getPlate().setWidth(0);¶		plateList.add(newPlate);¶		otherPlateList.add(newPlate);¶		¶		if (full) {¶			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y+fullPlateOffset);¶			fullPlateOffset = fullPlateOffset - 5;¶		} else {¶			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y);¶		}¶		¶		cookingCommand = new ACookingPlateCommand(cookingAnimator, newPlate, 40, 15);¶		Thread thread = new Thread (cookingCommand);¶		thread.start();¶	}¶	¶	public void serve() {¶		//Checks to see if the buffer is full. If it is, then can't serve.¶		resetLineColors();¶		if(checkIfFull()) {¶			resetLineColors();¶			return;¶		}¶		¶		//Do put, it will disable from there¶		¶		Plate workingPlate = otherPlateList.peek();¶		int workingPlatePlace = Integer.valueOf(workingPlate.getText().getText())-1;¶		changeLineColors(workingPlatePlace);¶		¶		servingCommand = new AServingPlateCommand(servingAnimator,workingPlate,PAUSE, bufferXValues[workingPlatePlace], bufferYValues[workingPlatePlace]);¶		Thread thread = new Thread(servingCommand);¶		thread.start();¶		¶		isFull[workingPlatePlace] = true;¶		otherPlateList.remove();¶	}¶	¶	public void order(OEShapeModel bell) {¶		if(checkIfFull()) {¶			resetLineColors();¶			resetBuffer();¶		}¶		bellIntegerList.add(0);¶		int bellPlace = findBell(bell.getCenterY());¶		bellsList.get(bellPlace).getText().setText(String.valueOf(bellIntegerList.size()-1));¶		¶		int platePlace = findFirstAvailablePlate();¶		servingCommand = new AServingPlateCommand(servingAnimator,plateList.get(platePlace),PAUSE, bell.getCenterX() , bell.getCenterY());¶		Thread thread = new Thread(servingCommand);¶		thread.start();¶		¶		cookingCommand = new ACookingPlateCommand(cookingAnimator, plateList.get(0), 0, 15);¶		Thread eatingThread = new Thread (cookingCommand);¶		eatingThread.start();¶		plateList.get(0).getText().setText("");¶	}¶	¶	public void eat() {¶		plateList.remove(0);¶	}¶	¶	@Override¶	@Visible(false)¶	public int findBell(int centerY) {¶		for(int i=0; i<bellsList.size();i++) {¶			if(bellsList.get(i).getBell().getCenterY() == centerY) {¶				return i;¶			}¶		}¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public int findFirstAvailablePlate() {¶		for (int i=0; i<isFull.length;i++) {¶			if(isFull[i] == true) {¶				return i;¶			}¶		}¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public void resetBuffer() {¶		¶		for (int i=0; i<isFull.length;i++) {¶			isFull[i] = false;¶		}¶	}¶	¶	@Override¶	@Visible(false)¶	public int findPatron(OEShapeModel patronHead) {¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public boolean checkIfFull() {¶		for (int i=0; i<isFull.length;i++) {¶			if (isFull[i] == false) {¶				full = false;¶				return full;¶			}¶		}¶		full = true;¶		return full;¶	}¶	¶	@Override¶	@Visible(false)¶	public void changeLineColors(int workingPlatePlace) {¶		if(workingPlatePlace == lineArray.length-1) {¶			lineArray[workingPlatePlace].setColor(Color.GREEN);¶			lineArray[0].setColor(Color.GREEN);¶		} else {¶			lineArray[workingPlatePlace].setColor(Color.GREEN);¶			lineArray[workingPlatePlace+1].setColor(Color.GREEN);¶		}¶	}¶	¶	¶	@Override¶	@Visible(false)¶	public void resetLineColors() {¶		for (int i=0; i<lineArray.length; i++) {¶			lineArray[i].setColor(Color.WHITE);¶		}¶	}¶	¶	//Getters for properties of the scene¶	@Override¶	public List<AChef> getChefList() {¶		return chefList;¶	}¶	¶	@Override¶	public List<APatron> getPatronList() {¶		return patronList;¶	}¶	¶	@Override¶	public BoundedBuffer getBuffer() {¶		return buffer;¶	}¶	¶	@Override¶	public List<APlate> getPlateList() {¶		return plateList;¶	}	¶	¶	@Override¶	@util.annotations.Visible(false)¶	public Queue<APlate> getOtherPlateList() {¶		return otherPlateList;¶	}¶	¶	@Override¶	public List<ABell> getBellsList() {¶		return bellsList;¶	}¶	¶	@Override¶	@Visible(false)¶	public Queue<ABell> getQueueBellList() {¶		return queueBellList;¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="129" _type="PauseCommand" date="Sun Apr 16 12:14:54 EDT 2023" range="1s-2s" starttimestamp="1681660740055" timestamp="954711">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1770]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="130" _type="MoveCaretCommand" caretOffset="0" date="Sun Apr 16 12:14:55 EDT 2023" docOffset="0" starttimestamp="1681660740055" timestamp="954975" />
  <Command __id="132" _type="PauseCommand" date="Sun Apr 16 12:14:56 EDT 2023" range="1s-2s" starttimestamp="1681660740055" timestamp="956888">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1913]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="131" _type="ShellCommand" date="Sun Apr 16 12:14:56 EDT 2023" starttimestamp="1681660740055" timestamp="956888" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="134" _type="PauseCommand" date="Sun Apr 16 12:15:04 EDT 2023" range="5s-10s" starttimestamp="1681660740055" timestamp="964598">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[7710]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="133" _type="ShellCommand" date="Sun Apr 16 12:15:04 EDT 2023" starttimestamp="1681660740055" timestamp="964598" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="136" _type="PauseCommand" date="Sun Apr 16 12:15:06 EDT 2023" range="2s-5s" starttimestamp="1681660740055" timestamp="966916">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2318]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="135" _type="ShellCommand" date="Sun Apr 16 12:15:06 EDT 2023" starttimestamp="1681660740055" timestamp="966916" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="138" _type="PauseCommand" date="Sun Apr 16 12:15:13 EDT 2023" range="5s-10s" starttimestamp="1681660740055" timestamp="973000">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[6084]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="137" _type="ShellCommand" date="Sun Apr 16 12:15:13 EDT 2023" starttimestamp="1681660740055" timestamp="973000" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="140" _type="PauseCommand" date="Sun Apr 16 12:15:15 EDT 2023" range="1s-2s" starttimestamp="1681660740055" timestamp="974951">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1951]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="139" _type="ShellCommand" date="Sun Apr 16 12:15:15 EDT 2023" starttimestamp="1681660740055" timestamp="974951" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="142" _type="PauseCommand" date="Sun Apr 16 12:15:17 EDT 2023" range="2s-5s" starttimestamp="1681660740055" timestamp="977719">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2768]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="141" _type="ShellCommand" date="Sun Apr 16 12:15:17 EDT 2023" starttimestamp="1681660740055" timestamp="977719" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="143" _type="ShellCommand" date="Sun Apr 16 12:15:18 EDT 2023" starttimestamp="1681660740055" timestamp="978388" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="145" _type="PauseCommand" date="Sun Apr 16 12:15:25 EDT 2023" range="5s-10s" starttimestamp="1681660740055" timestamp="985574">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[7185]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="144" _type="ShellCommand" date="Sun Apr 16 12:15:25 EDT 2023" starttimestamp="1681660740055" timestamp="985573" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="128" _type="DiffBasedFileOpenCommand" date="Sun Apr 16 12:14:54 EDT 2023" docASTNodeCount="781" docActiveCodeLength="4249" docExpressionCount="554" docLength="4994" projectName="ProducersConsumersV3" starttimestamp="1681660740055" timestamp="954711">
    <filePath><![CDATA[C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\graphics\AnAvatar.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package graphics;

import bus.uigen.OEFrame;
import bus.uigen.ObjectEditor;
import bus.uigen.shapes.ALineModel;
import bus.uigen.shapes.AStringModel;
import bus.uigen.shapes.AnImageModel;
import bus.uigen.shapes.OEShapeModel;
import shapes.FlexibleTextShape;
import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import java.awt.Color;
import java.awt.Stroke;
import java.awt.BasicStroke;


@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({
	"arms",
	"legs",
	"torso",
	"head",
	"text"
})
@EditablePropertyNames({
	"arms",
	"legs",
	"torso",
	"head",
	"text"
})
public class AnAvatar implements Avatar {
	int INIT_X = 200;	
	int INIT_ARMS_Y = 150;
	int INIT_LEGS_Y = 190;
	int INIT_TORSO_Y = 150;
	double INIT_TORSO_ANGLE = (Math.PI/2);
	int INIT_TORSO_RADIUS = 40;
	int INIT_HEAD_Y = 60;
	int INIT_HEAD_X = 163;
	int INIT_HEAD_HEIGHT = 90;
	int INIT_HEAD_WIDTH = 80;
	String INIT_HEAD_STRING = "";
//	int INIT_PLATE_X = 50;
//	int INIT_PLATE_Y = 40;
//	int INIT_PLATE_HEIGHT = 50;
//	int INIT_PLATE_WIDTH = 40;
//	String INIT_PLATE_STRING = "images/12.png";
	int INIT_TEXT_X = 130;
	int INIT_TEXT_Y = 80;
	String INIT_TEXT_STRING = "";
	int TABLE_OFFSET_X = 18;
	int TABLE_OFFSET_Y = 25;
	
	Angle arms;
	Angle legs;
	OEShapeModel torso;
	OEShapeModel head;
	FlexibleTextShape text;
//	OEShapeModel plate;
//	Table table;

	public AnAvatar() {
		arms = new AnAngle();
		arms.moveTo(INIT_X, INIT_ARMS_Y);
		arms.getLeft().setColor(Color.WHITE);
		arms.getRight().setColor(Color.WHITE);
		arms.getLeft().setStroke(new BasicStroke(4.0F));
		arms.getRight().setStroke(new BasicStroke(4.0F));
		
		legs = new AnAngle();
		legs.moveTo(INIT_X, INIT_LEGS_Y);
		legs.getLeft().setColor(Color.WHITE);
		legs.getRight().setColor(Color.WHITE);
		legs.getLeft().setStroke(new BasicStroke(4.0F));
		legs.getRight().setStroke(new BasicStroke(4.0F));
		
		torso = new ALineModel();
		torso.setX(INIT_X);
		torso.setY(INIT_TORSO_Y);
		torso.setRadius(INIT_TORSO_RADIUS);
		torso.setAngle(INIT_TORSO_ANGLE);
		torso.setColor(Color.WHITE);
		torso.setStroke(new BasicStroke(4.0F));
		
		head = new AnImageModel(INIT_HEAD_STRING);
		head.setX(INIT_HEAD_X);
		head.setY(INIT_HEAD_Y);
		head.setHeight(INIT_HEAD_HEIGHT);
		head.setWidth(INIT_HEAD_WIDTH);
		
		text = new AStringModel(INIT_TEXT_STRING);
		text.setX(INIT_TEXT_X);
		text.setY(INIT_TEXT_Y);
		text.setColor(Color.WHITE);
		text.setText(INIT_TEXT_STRING);
		
//		plate = new AnImageModel(INIT_PLATE_STRING);
//		plate.setX(INIT_PLATE_X);
//		plate.setY(INIT_PLATE_Y);
//		plate.setHeight(INIT_PLATE_HEIGHT);
//		plate.setWidth(INIT_PLATE_WIDTH);
		
//		table = new ATable();
//		table.move(TABLE_OFFSET_X, TABLE_OFFSET_Y);
	}
	
	@Override
	public Angle getArms() {
		return arms;
	}
	
	@Override
	public void setArms(Angle newArms) {
		arms = newArms;
	}
	
	@Override
	public Angle getLegs() {
		return legs;
	}
	
	@Override
	public void setLegs(Angle newLegs) {
		legs = newLegs;
	}
	
	@Override
	public OEShapeModel getTorso() {
		return torso;
	}
	
	@Override
	public void setTorso(OEShapeModel newTorso) {
		torso = newTorso;
	}
	
	@Override
	public OEShapeModel getHead() {
		return head;
	}
	
	@Override
	public void setHead(OEShapeModel newHead) {
		head = newHead;
	}
	
	@Override
	public FlexibleTextShape getText() {
		return text;
	}
	
	@Override
	public void setText(shapes.FlexibleTextShape newText) {
		String input = newText.getText();
		text.setText(input);
	}
	
//	@Override 
//	public OEShapeModel getPlate() {
//		return plate;
//	}
//	
//	@Override
//	public void setPlate(OEShapeModel newPlate) {
//		plate = newPlate;
//	}
	
//	@Override
//	public Table getTable() {
//		return table;
//	}
//	
//	@Override
//	public void setTable(Table newTable) {
//		table = newTable;
//	}
	
	
	
	@Override
	public void move(int newX, int newY) {
		arms.getLeft().setX(arms.getLeft().getX()+newX);
		arms.getLeft().setY(arms.getLeft().getY()+newY);
		arms.getRight().setX(arms.getRight().getX()+newX);
		arms.getRight().setY(arms.getRight().getY()+newY);
		
		legs.getLeft().setX(legs.getLeft().getX()+newX);
		legs.getLeft().setY(legs.getLeft().getY()+newY);
		legs.getRight().setX(legs.getRight().getX()+newX);
		legs.getRight().setY(legs.getRight().getY()+newY);
		
		torso.setX(torso.getX()+newX);
		torso.setY(torso.getY()+newY);
		
		head.setX(head.getX()+newX);
		head.setY(head.getY()+newY);
		
		text.setX(text.getX()+newX);
		text.setY(text.getY()+newY);
	}
	
	public static void main(String[] args) {
		final Avatar avatar = new AnAvatar();
		OEFrame editor = ObjectEditor.edit(avatar);
		editor.getDrawComponent().setBackground(Color.DARK_GRAY);
		editor.showDrawPanel();
	}
	
}
]]></snapshot>
  </Command>
  <Command __id="147" _type="PauseCommand" date="Sun Apr 16 12:15:27 EDT 2023" range="1s-2s" starttimestamp="1681660740055" timestamp="987314">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1741]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="148" _type="MoveCaretCommand" caretOffset="656" date="Sun Apr 16 12:15:27 EDT 2023" docOffset="656" starttimestamp="1681660740055" timestamp="987574" />
  <Command __id="146" _type="DiffBasedFileOpenCommand" date="Sun Apr 16 12:15:27 EDT 2023" docASTNodeCount="1675" docActiveCodeLength="9789" docExpressionCount="1160" docLength="10396" projectName="ProducersConsumersV3" starttimestamp="1681660740055" timestamp="987314">
    <filePath><![CDATA[C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\graphics\AProducerConsumerScene.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package graphics;¶¶import java.util.ArrayList;¶import java.util.LinkedList;¶import java.util.List;¶import java.util.Queue;¶¶import animations.ACookingPlateAnimator;¶import animations.ACookingPlateCommand;¶import animations.AServingPlateAnimator;¶import animations.AServingPlateCommand;¶import animations.CookingPlateAnimator;¶import animations.ServingPlateAnimator;¶import bus.uigen.OEFrame;¶import bus.uigen.ObjectEditor;¶import bus.uigen.shapes.ALineModel;¶import bus.uigen.shapes.AStringModel;¶import bus.uigen.shapes.AnImageModel;¶import bus.uigen.shapes.OEShapeModel;¶import shapes.FlexibleTextShape;¶import util.annotations.EditablePropertyNames;¶import util.annotations.Label;¶import util.annotations.PropertyNames;¶import util.annotations.StructurePattern;¶import util.annotations.StructurePatternNames;¶import util.annotations.Visible;¶import util.misc.ThreadSupport;¶¶import java.awt.Color;¶¶@StructurePattern(StructurePatternNames.BEAN_PATTERN)¶@PropertyNames({¶	"patronList",¶	"chefList",¶	"buffer",¶	"plateList",¶	"otherPlateList",¶	"bellsList",¶	"queueBellList"¶})¶@EditablePropertyNames({¶})¶public class AProducerConsumerScene implements ProducerConsumerScene {¶	¶	//Avatar offsets inside scene¶	int[] chefXValues = {120,-50,-50,120};¶	int[] chefYValues = {-50,35,210,320};¶	int[] patronXValues = {650,850,850,650};¶	int[] patronYValues = {-50,35,220,320};¶	int[] bellXValues = {680,880,880,680};¶	int[] bellYValues = {75,160,345,445};¶	int INIT_HEAD_Y = 60;¶	int INIT_HEAD_X = 163;¶	int INIT_HEAD_HEIGHT = 90;¶	int INIT_HEAD_WIDTH = 80;¶	int PLATE_OFFSET_X = 30;¶	int PLATE_OFFSET_Y = 10;¶	int PAUSE = 5;¶	¶	//Booleans that help with the functionality of the below methods¶	boolean INIT_COOK = true;¶	boolean full = false;¶	int fullPlateOffset = -5;¶	¶	//Defining the chef and patron images¶	String[] chefImages = {"images/0.png","images/1.png","images/2.png","images/3.png"};¶	String[] patronImages = {"images/4.png", "images/5.png", "images/6.png", "images/7.png"};¶	¶	//Buffer arrays¶	int[] bufferXValues = {625, 680, 680, 620, 535, 460, 460, 535};¶	int[] bufferYValues = {200, 275, 365, 425, 425, 365, 275, 200};¶	boolean[] isFull = {false, false, false, false, false, false, false, false};¶	¶	//The properties of our class¶	List<APatron> patronList;¶	List<AChef> chefList;¶	BoundedBuffer buffer = new ABoundedBuffer();¶	List<APlate> plateList;¶	Queue<APlate> otherPlateList;¶	¶	OEShapeModel[] lineArray = {buffer.getLineTwo(), buffer.getLineThree(), buffer.getLineFour(), ¶								buffer.getLineFive(), buffer.getLineSix(), buffer.getLineSeven(), ¶								buffer.getLineEight(), buffer.getLineOne()};¶	¶	List<ABell> bellsList;¶	Queue<ABell> queueBellList;¶	int[] bellValues = {127, 212, 397, 497};¶	Queue<Integer> bellIntegerList;¶	¶	ACookingPlateCommand cookingCommand;¶	CookingPlateAnimator cookingAnimator;¶	¶	AServingPlateCommand servingCommand;¶	ServingPlateAnimator servingAnimator;¶	¶	//The constructor sets the scene with one chef, patron, a buffer, and a plate (not visible)¶	public AProducerConsumerScene() {¶		patronList = new ArrayList<APatron>();¶		chefList = new ArrayList<AChef>();¶		//buffer = new ABoundedBuffer();¶		plateList = new ArrayList<APlate>();¶		otherPlateList = new LinkedList<APlate>();¶		bellsList = new ArrayList<ABell>();¶		queueBellList = new LinkedList<ABell>();¶		bellIntegerList = new LinkedList<Integer>();¶		¶		patronList.add(0, new APatron());¶		OEShapeModel initPatronHead = new AnImageModel(patronImages[0]);¶		initPatronHead.setX(INIT_HEAD_X);¶		initPatronHead.setY(INIT_HEAD_Y);¶		initPatronHead.setHeight(INIT_HEAD_HEIGHT);¶		initPatronHead.setWidth(INIT_HEAD_WIDTH);¶		patronList.get(0).patron.setHead(initPatronHead);¶		patronList.get(0).move(patronXValues[0], patronYValues[0]);¶		¶		chefList.add(0, new AChef());¶		OEShapeModel initChefHead = new AnImageModel(chefImages[0]);¶		initChefHead.setX(INIT_HEAD_X);¶		initChefHead.setY(INIT_HEAD_Y);¶		initChefHead.setHeight(INIT_HEAD_HEIGHT);¶		initChefHead.setWidth(INIT_HEAD_WIDTH);¶		chefList.get(0).chef.setHead(initChefHead);¶		chefList.get(0).move(chefXValues[0], chefYValues[0]);¶		¶		plateList.add(new APlate());¶		plateList.get(0).getPlate().setHeight(0);¶		plateList.get(0).getPlate().setWidth(0);¶		¶		otherPlateList.add(new APlate());¶		otherPlateList.peek().getPlate().setHeight(0);¶		otherPlateList.peek().getPlate().setWidth(0);¶		¶		cookingAnimator = new ACookingPlateAnimator();¶		servingAnimator = new AServingPlateAnimator();¶		¶		bellsList.add(new ABell());¶		bellsList.get(0).getBell().setHeight(0);¶		bellsList.get(0).getBell().setWidth(0);¶		¶		queueBellList.add(new ABell());¶		queueBellList.peek().getBell().setHeight(0);¶		queueBellList.peek().getBell().setWidth(0);¶		¶		bellIntegerList.add(0);¶	}¶	¶	//Producer consumer methods¶	¶	//Init Scene sets the number of patrons and chefs in the scene¶	@Label("Init Scene")¶	public void initScene(int patronAmount, int chefAmount) {¶		bellsList.clear();¶		for (int i=0; i<patronAmount; i++) { ¶			APatron patron = new APatron();¶			patronList.add(i, patron);¶			OEShapeModel newHead = new AnImageModel(patronImages[i]);¶			patron.patron.setHead(newHead); ¶			newHead.setX(INIT_HEAD_X); ¶			newHead.setY(INIT_HEAD_Y);¶			newHead.setHeight(INIT_HEAD_HEIGHT);¶			newHead.setWidth(INIT_HEAD_WIDTH);¶			patron.move(patronXValues[i], patronYValues[i]);¶			¶			bellsList.add(new ABell());¶			bellsList.get(i).move(bellXValues[i], bellYValues[i]);¶		}¶		for (int i=0; i<chefAmount; i++) {¶			AChef chef = new AChef();¶			chefList.add(i, chef);¶			OEShapeModel newHead = new AnImageModel(chefImages[i]);¶			chef.chef.setHead(newHead);¶			newHead.setX(INIT_HEAD_X); ¶			newHead.setY(INIT_HEAD_Y);¶			newHead.setHeight(INIT_HEAD_HEIGHT);¶			newHead.setWidth(INIT_HEAD_WIDTH);¶			chef.move(chefXValues[i], chefYValues[i]);¶		}¶	}¶	¶	//Once the head of an avatar is chosen, it makes the plate that they "cook" appear¶	public void cook(OEShapeModel head) {¶		if (INIT_COOK) {¶			INIT_COOK=!INIT_COOK;¶			plateList.remove(0);¶			otherPlateList.remove();¶		}¶		¶		int headX = head.getCenterX();¶		int headY = head.getCenterY();¶		APlate newPlate = new APlate(plateList.size()+1);¶		newPlate.getPlate().setHeight(0);¶		newPlate.getPlate().setWidth(0);¶		plateList.add(newPlate);¶		otherPlateList.add(newPlate);¶		¶		if (full) {¶			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y+fullPlateOffset);¶			fullPlateOffset = fullPlateOffset - 5;¶		} else {¶			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y);¶		}¶		¶		cookingCommand = new ACookingPlateCommand(cookingAnimator, newPlate, 40, 15);¶		Thread thread = new Thread (cookingCommand);¶		thread.start();¶	}¶	¶	public void serve() {¶		//Checks to see if the buffer is full. If it is, then can't serve.¶		resetLineColors();¶		if(checkIfFull()) {¶			resetLineColors();¶			return;¶		}¶		¶		//Do put, it will disable from there¶		¶		Plate workingPlate = otherPlateList.peek();¶		int workingPlatePlace = Integer.valueOf(workingPlate.getText().getText())-1;¶		changeLineColors(workingPlatePlace);¶		¶		servingCommand = new AServingPlateCommand(servingAnimator,workingPlate,PAUSE, bufferXValues[workingPlatePlace], bufferYValues[workingPlatePlace]);¶		Thread thread = new Thread(servingCommand);¶		thread.start();¶		¶		isFull[workingPlatePlace] = true;¶		otherPlateList.remove();¶	}¶	¶	public void order(OEShapeModel bell) {¶		if(checkIfFull()) {¶			resetLineColors();¶			resetBuffer();¶		}¶		bellIntegerList.add(0);¶		int bellPlace = findBell(bell.getCenterY());¶		bellsList.get(bellPlace).getText().setText(String.valueOf(bellIntegerList.size()-1));¶		¶		int platePlace = findFirstAvailablePlate();¶		servingCommand = new AServingPlateCommand(servingAnimator,plateList.get(platePlace),PAUSE, bell.getCenterX() , bell.getCenterY());¶		Thread thread = new Thread(servingCommand);¶		thread.start();¶		¶		cookingCommand = new ACookingPlateCommand(cookingAnimator, plateList.get(0), 0, 15);¶		Thread eatingThread = new Thread (cookingCommand);¶		eatingThread.start();¶		plateList.get(0).getText().setText("");¶	}¶	¶	public void eat() {¶		plateList.remove(0);¶	}¶	¶	@Override¶	@Visible(false)¶	public int findBell(int centerY) {¶		for(int i=0; i<bellsList.size();i++) {¶			if(bellsList.get(i).getBell().getCenterY() == centerY) {¶				return i;¶			}¶		}¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public int findFirstAvailablePlate() {¶		for (int i=0; i<isFull.length;i++) {¶			if(isFull[i] == true) {¶				return i;¶			}¶		}¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public void resetBuffer() {¶		¶		for (int i=0; i<isFull.length;i++) {¶			isFull[i] = false;¶		}¶	}¶	¶	@Override¶	@Visible(false)¶	public int findPatron(OEShapeModel patronHead) {¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public boolean checkIfFull() {¶		for (int i=0; i<isFull.length;i++) {¶			if (isFull[i] == false) {¶				full = false;¶				return full;¶			}¶		}¶		full = true;¶		return full;¶	}¶	¶	@Override¶	@Visible(false)¶	public void changeLineColors(int workingPlatePlace) {¶		if(workingPlatePlace == lineArray.length-1) {¶			lineArray[workingPlatePlace].setColor(Color.GREEN);¶			lineArray[0].setColor(Color.GREEN);¶		} else {¶			lineArray[workingPlatePlace].setColor(Color.GREEN);¶			lineArray[workingPlatePlace+1].setColor(Color.GREEN);¶		}¶	}¶	¶	¶	@Override¶	@Visible(false)¶	public void resetLineColors() {¶		for (int i=0; i<lineArray.length; i++) {¶			lineArray[i].setColor(Color.WHITE);¶		}¶	}¶	¶	//Getters for properties of the scene¶	@Override¶	public List<AChef> getChefList() {¶		return chefList;¶	}¶	¶	@Override¶	public List<APatron> getPatronList() {¶		return patronList;¶	}¶	¶	@Override¶	public BoundedBuffer getBuffer() {¶		return buffer;¶	}¶	¶	@Override¶	public List<APlate> getPlateList() {¶		return plateList;¶	}	¶	¶	@Override¶	@util.annotations.Visible(false)¶	public Queue<APlate> getOtherPlateList() {¶		return otherPlateList;¶	}¶	¶	@Override¶	public List<ABell> getBellsList() {¶		return bellsList;¶	}¶	¶	@Override¶	@Visible(false)¶	public Queue<ABell> getQueueBellList() {¶		return queueBellList;¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="150" _type="PauseCommand" date="Sun Apr 16 12:15:30 EDT 2023" range="2s-5s" starttimestamp="1681660740055" timestamp="990199">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2625]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="151" _type="MoveCaretCommand" caretOffset="0" date="Sun Apr 16 12:15:30 EDT 2023" docOffset="0" starttimestamp="1681660740055" timestamp="990498" />
  <Command __id="152" _type="ShellCommand" date="Sun Apr 16 12:15:31 EDT 2023" starttimestamp="1681660740055" timestamp="991429" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="153" _type="ShellCommand" date="Sun Apr 16 12:15:31 EDT 2023" starttimestamp="1681660740055" timestamp="991439" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="154" _type="ShellCommand" date="Sun Apr 16 12:15:31 EDT 2023" starttimestamp="1681660740055" timestamp="991489" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="156" _type="PauseCommand" date="Sun Apr 16 12:15:39 EDT 2023" range="5s-10s" starttimestamp="1681660740055" timestamp="999462">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[7973]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="155" _type="ShellCommand" date="Sun Apr 16 12:15:39 EDT 2023" starttimestamp="1681660740055" timestamp="999462" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="157" _type="ShellCommand" date="Sun Apr 16 12:15:40 EDT 2023" starttimestamp="1681660740055" timestamp="1000141" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="159" _type="PauseCommand" date="Sun Apr 16 12:15:44 EDT 2023" range="2s-5s" starttimestamp="1681660740055" timestamp="1004837">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[4696]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="158" _type="ShellCommand" date="Sun Apr 16 12:15:44 EDT 2023" starttimestamp="1681660740055" timestamp="1004837" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="160" _type="ShellCommand" date="Sun Apr 16 12:15:45 EDT 2023" starttimestamp="1681660740055" timestamp="1005260" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="162" _type="PauseCommand" date="Sun Apr 16 12:15:49 EDT 2023" range="2s-5s" starttimestamp="1681660740055" timestamp="1009912">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[4652]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="161" _type="ShellCommand" date="Sun Apr 16 12:15:49 EDT 2023" starttimestamp="1681660740055" timestamp="1009912" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="149" _type="DiffBasedFileOpenCommand" date="Sun Apr 16 12:15:30 EDT 2023" docASTNodeCount="186" docActiveCodeLength="1119" docExpressionCount="116" docLength="1119" projectName="ProducersConsumersV3" starttimestamp="1681660740055" timestamp="990199">
    <filePath><![CDATA[C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\graphics\APatron.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package graphics;

import java.awt.Color;

import bus.uigen.OEFrame;
import bus.uigen.ObjectEditor;
import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;

@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({
	"patron",
	"table"
})
@EditablePropertyNames({
})
public class APatron implements Patron {
	Avatar patron;
	Table table;
	
	int INIT_X_OFFSET = 10;
	int INIT_Y_OFFSET = 25;
	
	public APatron() {
		patron = new AnAvatar();
		table = new ATable();
		table.move(INIT_X_OFFSET, INIT_Y_OFFSET);
	}
	
	public Avatar getPatron() {
		return patron;
	}
	
	public Table getTable() {
		return table;
	}
	
	public void move(int newX, int newY) {
		patron.move(newX, newY);
		table.move(newX, newY);
	}
	
	public static void main(String[] args) {
		final Patron thisPatron = new APatron();
		OEFrame editor = ObjectEditor.edit(thisPatron);
		editor.getDrawComponent().setBackground(Color.DARK_GRAY);
		editor.showDrawPanel();
	}

}
]]></snapshot>
  </Command>
  <Command __id="164" _type="PauseCommand" date="Sun Apr 16 12:15:52 EDT 2023" range="2s-5s" starttimestamp="1681660740055" timestamp="1012381">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2469]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="165" _type="MoveCaretCommand" caretOffset="656" date="Sun Apr 16 12:15:52 EDT 2023" docOffset="656" starttimestamp="1681660740055" timestamp="1012622" />
  <Command __id="163" _type="DiffBasedFileOpenCommand" date="Sun Apr 16 12:15:52 EDT 2023" docASTNodeCount="1675" docActiveCodeLength="9789" docExpressionCount="1160" docLength="10396" projectName="ProducersConsumersV3" starttimestamp="1681660740055" timestamp="1012381">
    <filePath><![CDATA[C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\graphics\AProducerConsumerScene.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package graphics;¶¶import java.util.ArrayList;¶import java.util.LinkedList;¶import java.util.List;¶import java.util.Queue;¶¶import animations.ACookingPlateAnimator;¶import animations.ACookingPlateCommand;¶import animations.AServingPlateAnimator;¶import animations.AServingPlateCommand;¶import animations.CookingPlateAnimator;¶import animations.ServingPlateAnimator;¶import bus.uigen.OEFrame;¶import bus.uigen.ObjectEditor;¶import bus.uigen.shapes.ALineModel;¶import bus.uigen.shapes.AStringModel;¶import bus.uigen.shapes.AnImageModel;¶import bus.uigen.shapes.OEShapeModel;¶import shapes.FlexibleTextShape;¶import util.annotations.EditablePropertyNames;¶import util.annotations.Label;¶import util.annotations.PropertyNames;¶import util.annotations.StructurePattern;¶import util.annotations.StructurePatternNames;¶import util.annotations.Visible;¶import util.misc.ThreadSupport;¶¶import java.awt.Color;¶¶@StructurePattern(StructurePatternNames.BEAN_PATTERN)¶@PropertyNames({¶	"patronList",¶	"chefList",¶	"buffer",¶	"plateList",¶	"otherPlateList",¶	"bellsList",¶	"queueBellList"¶})¶@EditablePropertyNames({¶})¶public class AProducerConsumerScene implements ProducerConsumerScene {¶	¶	//Avatar offsets inside scene¶	int[] chefXValues = {120,-50,-50,120};¶	int[] chefYValues = {-50,35,210,320};¶	int[] patronXValues = {650,850,850,650};¶	int[] patronYValues = {-50,35,220,320};¶	int[] bellXValues = {680,880,880,680};¶	int[] bellYValues = {75,160,345,445};¶	int INIT_HEAD_Y = 60;¶	int INIT_HEAD_X = 163;¶	int INIT_HEAD_HEIGHT = 90;¶	int INIT_HEAD_WIDTH = 80;¶	int PLATE_OFFSET_X = 30;¶	int PLATE_OFFSET_Y = 10;¶	int PAUSE = 5;¶	¶	//Booleans that help with the functionality of the below methods¶	boolean INIT_COOK = true;¶	boolean full = false;¶	int fullPlateOffset = -5;¶	¶	//Defining the chef and patron images¶	String[] chefImages = {"images/0.png","images/1.png","images/2.png","images/3.png"};¶	String[] patronImages = {"images/4.png", "images/5.png", "images/6.png", "images/7.png"};¶	¶	//Buffer arrays¶	int[] bufferXValues = {625, 680, 680, 620, 535, 460, 460, 535};¶	int[] bufferYValues = {200, 275, 365, 425, 425, 365, 275, 200};¶	boolean[] isFull = {false, false, false, false, false, false, false, false};¶	¶	//The properties of our class¶	List<APatron> patronList;¶	List<AChef> chefList;¶	BoundedBuffer buffer = new ABoundedBuffer();¶	List<APlate> plateList;¶	Queue<APlate> otherPlateList;¶	¶	OEShapeModel[] lineArray = {buffer.getLineTwo(), buffer.getLineThree(), buffer.getLineFour(), ¶								buffer.getLineFive(), buffer.getLineSix(), buffer.getLineSeven(), ¶								buffer.getLineEight(), buffer.getLineOne()};¶	¶	List<ABell> bellsList;¶	Queue<ABell> queueBellList;¶	int[] bellValues = {127, 212, 397, 497};¶	Queue<Integer> bellIntegerList;¶	¶	ACookingPlateCommand cookingCommand;¶	CookingPlateAnimator cookingAnimator;¶	¶	AServingPlateCommand servingCommand;¶	ServingPlateAnimator servingAnimator;¶	¶	//The constructor sets the scene with one chef, patron, a buffer, and a plate (not visible)¶	public AProducerConsumerScene() {¶		patronList = new ArrayList<APatron>();¶		chefList = new ArrayList<AChef>();¶		//buffer = new ABoundedBuffer();¶		plateList = new ArrayList<APlate>();¶		otherPlateList = new LinkedList<APlate>();¶		bellsList = new ArrayList<ABell>();¶		queueBellList = new LinkedList<ABell>();¶		bellIntegerList = new LinkedList<Integer>();¶		¶		patronList.add(0, new APatron());¶		OEShapeModel initPatronHead = new AnImageModel(patronImages[0]);¶		initPatronHead.setX(INIT_HEAD_X);¶		initPatronHead.setY(INIT_HEAD_Y);¶		initPatronHead.setHeight(INIT_HEAD_HEIGHT);¶		initPatronHead.setWidth(INIT_HEAD_WIDTH);¶		patronList.get(0).patron.setHead(initPatronHead);¶		patronList.get(0).move(patronXValues[0], patronYValues[0]);¶		¶		chefList.add(0, new AChef());¶		OEShapeModel initChefHead = new AnImageModel(chefImages[0]);¶		initChefHead.setX(INIT_HEAD_X);¶		initChefHead.setY(INIT_HEAD_Y);¶		initChefHead.setHeight(INIT_HEAD_HEIGHT);¶		initChefHead.setWidth(INIT_HEAD_WIDTH);¶		chefList.get(0).chef.setHead(initChefHead);¶		chefList.get(0).move(chefXValues[0], chefYValues[0]);¶		¶		plateList.add(new APlate());¶		plateList.get(0).getPlate().setHeight(0);¶		plateList.get(0).getPlate().setWidth(0);¶		¶		otherPlateList.add(new APlate());¶		otherPlateList.peek().getPlate().setHeight(0);¶		otherPlateList.peek().getPlate().setWidth(0);¶		¶		cookingAnimator = new ACookingPlateAnimator();¶		servingAnimator = new AServingPlateAnimator();¶		¶		bellsList.add(new ABell());¶		bellsList.get(0).getBell().setHeight(0);¶		bellsList.get(0).getBell().setWidth(0);¶		¶		queueBellList.add(new ABell());¶		queueBellList.peek().getBell().setHeight(0);¶		queueBellList.peek().getBell().setWidth(0);¶		¶		bellIntegerList.add(0);¶	}¶	¶	//Producer consumer methods¶	¶	//Init Scene sets the number of patrons and chefs in the scene¶	@Label("Init Scene")¶	public void initScene(int patronAmount, int chefAmount) {¶		bellsList.clear();¶		for (int i=0; i<patronAmount; i++) { ¶			APatron patron = new APatron();¶			patronList.add(i, patron);¶			OEShapeModel newHead = new AnImageModel(patronImages[i]);¶			patron.patron.setHead(newHead); ¶			newHead.setX(INIT_HEAD_X); ¶			newHead.setY(INIT_HEAD_Y);¶			newHead.setHeight(INIT_HEAD_HEIGHT);¶			newHead.setWidth(INIT_HEAD_WIDTH);¶			patron.move(patronXValues[i], patronYValues[i]);¶			¶			bellsList.add(new ABell());¶			bellsList.get(i).move(bellXValues[i], bellYValues[i]);¶		}¶		for (int i=0; i<chefAmount; i++) {¶			AChef chef = new AChef();¶			chefList.add(i, chef);¶			OEShapeModel newHead = new AnImageModel(chefImages[i]);¶			chef.chef.setHead(newHead);¶			newHead.setX(INIT_HEAD_X); ¶			newHead.setY(INIT_HEAD_Y);¶			newHead.setHeight(INIT_HEAD_HEIGHT);¶			newHead.setWidth(INIT_HEAD_WIDTH);¶			chef.move(chefXValues[i], chefYValues[i]);¶		}¶	}¶	¶	//Once the head of an avatar is chosen, it makes the plate that they "cook" appear¶	public void cook(OEShapeModel head) {¶		if (INIT_COOK) {¶			INIT_COOK=!INIT_COOK;¶			plateList.remove(0);¶			otherPlateList.remove();¶		}¶		¶		int headX = head.getCenterX();¶		int headY = head.getCenterY();¶		APlate newPlate = new APlate(plateList.size()+1);¶		newPlate.getPlate().setHeight(0);¶		newPlate.getPlate().setWidth(0);¶		plateList.add(newPlate);¶		otherPlateList.add(newPlate);¶		¶		if (full) {¶			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y+fullPlateOffset);¶			fullPlateOffset = fullPlateOffset - 5;¶		} else {¶			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y);¶		}¶		¶		cookingCommand = new ACookingPlateCommand(cookingAnimator, newPlate, 40, 15);¶		Thread thread = new Thread (cookingCommand);¶		thread.start();¶	}¶	¶	public void serve() {¶		//Checks to see if the buffer is full. If it is, then can't serve.¶		resetLineColors();¶		if(checkIfFull()) {¶			resetLineColors();¶			return;¶		}¶		¶		//Do put, it will disable from there¶		¶		Plate workingPlate = otherPlateList.peek();¶		int workingPlatePlace = Integer.valueOf(workingPlate.getText().getText())-1;¶		changeLineColors(workingPlatePlace);¶		¶		servingCommand = new AServingPlateCommand(servingAnimator,workingPlate,PAUSE, bufferXValues[workingPlatePlace], bufferYValues[workingPlatePlace]);¶		Thread thread = new Thread(servingCommand);¶		thread.start();¶		¶		isFull[workingPlatePlace] = true;¶		otherPlateList.remove();¶	}¶	¶	public void order(OEShapeModel bell) {¶		if(checkIfFull()) {¶			resetLineColors();¶			resetBuffer();¶		}¶		bellIntegerList.add(0);¶		int bellPlace = findBell(bell.getCenterY());¶		bellsList.get(bellPlace).getText().setText(String.valueOf(bellIntegerList.size()-1));¶		¶		int platePlace = findFirstAvailablePlate();¶		servingCommand = new AServingPlateCommand(servingAnimator,plateList.get(platePlace),PAUSE, bell.getCenterX() , bell.getCenterY());¶		Thread thread = new Thread(servingCommand);¶		thread.start();¶		¶		cookingCommand = new ACookingPlateCommand(cookingAnimator, plateList.get(0), 0, 15);¶		Thread eatingThread = new Thread (cookingCommand);¶		eatingThread.start();¶		plateList.get(0).getText().setText("");¶	}¶	¶	public void eat() {¶		plateList.remove(0);¶	}¶	¶	@Override¶	@Visible(false)¶	public int findBell(int centerY) {¶		for(int i=0; i<bellsList.size();i++) {¶			if(bellsList.get(i).getBell().getCenterY() == centerY) {¶				return i;¶			}¶		}¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public int findFirstAvailablePlate() {¶		for (int i=0; i<isFull.length;i++) {¶			if(isFull[i] == true) {¶				return i;¶			}¶		}¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public void resetBuffer() {¶		¶		for (int i=0; i<isFull.length;i++) {¶			isFull[i] = false;¶		}¶	}¶	¶	@Override¶	@Visible(false)¶	public int findPatron(OEShapeModel patronHead) {¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public boolean checkIfFull() {¶		for (int i=0; i<isFull.length;i++) {¶			if (isFull[i] == false) {¶				full = false;¶				return full;¶			}¶		}¶		full = true;¶		return full;¶	}¶	¶	@Override¶	@Visible(false)¶	public void changeLineColors(int workingPlatePlace) {¶		if(workingPlatePlace == lineArray.length-1) {¶			lineArray[workingPlatePlace].setColor(Color.GREEN);¶			lineArray[0].setColor(Color.GREEN);¶		} else {¶			lineArray[workingPlatePlace].setColor(Color.GREEN);¶			lineArray[workingPlatePlace+1].setColor(Color.GREEN);¶		}¶	}¶	¶	¶	@Override¶	@Visible(false)¶	public void resetLineColors() {¶		for (int i=0; i<lineArray.length; i++) {¶			lineArray[i].setColor(Color.WHITE);¶		}¶	}¶	¶	//Getters for properties of the scene¶	@Override¶	public List<AChef> getChefList() {¶		return chefList;¶	}¶	¶	@Override¶	public List<APatron> getPatronList() {¶		return patronList;¶	}¶	¶	@Override¶	public BoundedBuffer getBuffer() {¶		return buffer;¶	}¶	¶	@Override¶	public List<APlate> getPlateList() {¶		return plateList;¶	}	¶	¶	@Override¶	@util.annotations.Visible(false)¶	public Queue<APlate> getOtherPlateList() {¶		return otherPlateList;¶	}¶	¶	@Override¶	public List<ABell> getBellsList() {¶		return bellsList;¶	}¶	¶	@Override¶	@Visible(false)¶	public Queue<ABell> getQueueBellList() {¶		return queueBellList;¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="167" _type="PauseCommand" date="Sun Apr 16 12:15:54 EDT 2023" range="1s-2s" starttimestamp="1681660740055" timestamp="1014446">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1824]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="168" _type="MoveCaretCommand" caretOffset="0" date="Sun Apr 16 12:15:54 EDT 2023" docOffset="0" starttimestamp="1681660740055" timestamp="1014637" />
  <Command __id="170" _type="PauseCommand" date="Sun Apr 16 12:15:56 EDT 2023" range="1s-2s" starttimestamp="1681660740055" timestamp="1016527">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1890]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="169" _type="ShellCommand" date="Sun Apr 16 12:15:56 EDT 2023" starttimestamp="1681660740055" timestamp="1016527" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="172" _type="PauseCommand" date="Sun Apr 16 12:16:09 EDT 2023" range="10s-20s" starttimestamp="1681660740055" timestamp="1029190">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[12662]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="171" _type="ShellCommand" date="Sun Apr 16 12:16:09 EDT 2023" starttimestamp="1681660740055" timestamp="1029189" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="173" _type="ShellCommand" date="Sun Apr 16 12:16:09 EDT 2023" starttimestamp="1681660740055" timestamp="1029571" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="175" _type="PauseCommand" date="Sun Apr 16 12:16:12 EDT 2023" range="2s-5s" starttimestamp="1681660740055" timestamp="1032400">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2829]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="174" _type="ShellCommand" date="Sun Apr 16 12:16:12 EDT 2023" starttimestamp="1681660740055" timestamp="1032400" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="176" _type="ShellCommand" date="Sun Apr 16 12:16:12 EDT 2023" starttimestamp="1681660740055" timestamp="1032844" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="178" _type="PauseCommand" date="Sun Apr 16 12:16:15 EDT 2023" range="2s-5s" starttimestamp="1681660740055" timestamp="1035233">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2389]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="177" _type="ShellCommand" date="Sun Apr 16 12:16:15 EDT 2023" starttimestamp="1681660740055" timestamp="1035233" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="166" _type="DiffBasedFileOpenCommand" date="Sun Apr 16 12:15:54 EDT 2023" docASTNodeCount="449" docActiveCodeLength="2603" docExpressionCount="301" docLength="2603" projectName="ProducersConsumersV3" starttimestamp="1681660740055" timestamp="1014446">
    <filePath><![CDATA[C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\graphics\APlate.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package graphics;

import java.awt.Color;

import bus.uigen.OEFrame;
import bus.uigen.ObjectEditor;
import bus.uigen.shapes.AStringModel;
import bus.uigen.shapes.AnImageModel;
import bus.uigen.shapes.OEShapeModel;
import shapes.FlexibleTextShape;
import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;

@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({
	"plate",
	"text"
})
@EditablePropertyNames({
	"plate",
	"text"
})
public class APlate implements Plate {
	
	String INIT_PLATE_STRING = "images/12.png";
	int INIT_PLATE_X = 50;
	int INIT_PLATE_Y = 40;
	int INIT_PLATE_HEIGHT = 50;
	int INIT_PLATE_WIDTH = 40;
	
	String INIT_PLATE_TEXT = "";
	int INIT_TEXT_X = 95;
	int INIT_TEXT_Y = 70;
	
	int TEXT_X_OFFSET = 45;
	int TEXT_Y_OFFSET = 30;
	
	OEShapeModel plate;
	FlexibleTextShape text;
	
	
	public APlate() {
		plate = new AnImageModel(INIT_PLATE_STRING);
		text = new AStringModel(INIT_PLATE_TEXT);
		text.setX(INIT_TEXT_X);
		text.setY(INIT_TEXT_Y);
		text.setColor(Color.WHITE);
		
		plate.setX(INIT_PLATE_X);
		plate.setY(INIT_PLATE_Y);
		plate.setHeight(INIT_PLATE_HEIGHT);
		plate.setWidth(INIT_PLATE_WIDTH);
		
	}
	
	public APlate(int queue) {
		plate = new AnImageModel(INIT_PLATE_STRING);
		text = new AStringModel(String.valueOf(queue));
		text.setX(INIT_TEXT_X);
		text.setY(INIT_TEXT_Y);
		text.setColor(Color.WHITE);
		
		plate.setX(INIT_PLATE_X);
		plate.setY(INIT_PLATE_Y);
		plate.setHeight(INIT_PLATE_HEIGHT);
		plate.setWidth(INIT_PLATE_WIDTH);
	}
	
	@Override
	public OEShapeModel getPlate() {
		return plate;
	}
	
	@Override
	public FlexibleTextShape getText() {
		return text;
	}
	
	@Override
	public void setText(FlexibleTextShape newString) {
		text = newString;
	}
	
	@Override
	public void setPlate(OEShapeModel newPlate) {
		plate = newPlate;
	}
	
	@Override
	public void move(int newX, int newY) {
		plate.setX(plate.getX() + newX);
		plate.setY(plate.getY() + newY);
		text.setX(text.getX() + newX);
		text.setY(text.getY() + newY);
	}
	
	@Override
	public void moveTo(int newX, int newY) {
		plate.setX(newX);
		plate.setY(newY);
		text.setX(newX+TEXT_X_OFFSET);
		text.setY(newY+TEXT_Y_OFFSET);
	}
	
	public static void main(String[] args) {
		final Plate plate = new APlate();
		OEFrame editor = ObjectEditor.edit(plate);
		editor.getDrawComponent().setBackground(Color.DARK_GRAY);
		editor.showDrawPanel();
	}

}
]]></snapshot>
  </Command>
  <Command __id="180" _type="PauseCommand" date="Sun Apr 16 12:16:17 EDT 2023" range="1s-2s" starttimestamp="1681660740055" timestamp="1036952">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1719]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="181" _type="MoveCaretCommand" caretOffset="656" date="Sun Apr 16 12:16:17 EDT 2023" docOffset="656" starttimestamp="1681660740055" timestamp="1037173" />
  <Command __id="179" _type="DiffBasedFileOpenCommand" date="Sun Apr 16 12:16:17 EDT 2023" docASTNodeCount="1675" docActiveCodeLength="9789" docExpressionCount="1160" docLength="10396" projectName="ProducersConsumersV3" starttimestamp="1681660740055" timestamp="1036952">
    <filePath><![CDATA[C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\graphics\AProducerConsumerScene.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package graphics;¶¶import java.util.ArrayList;¶import java.util.LinkedList;¶import java.util.List;¶import java.util.Queue;¶¶import animations.ACookingPlateAnimator;¶import animations.ACookingPlateCommand;¶import animations.AServingPlateAnimator;¶import animations.AServingPlateCommand;¶import animations.CookingPlateAnimator;¶import animations.ServingPlateAnimator;¶import bus.uigen.OEFrame;¶import bus.uigen.ObjectEditor;¶import bus.uigen.shapes.ALineModel;¶import bus.uigen.shapes.AStringModel;¶import bus.uigen.shapes.AnImageModel;¶import bus.uigen.shapes.OEShapeModel;¶import shapes.FlexibleTextShape;¶import util.annotations.EditablePropertyNames;¶import util.annotations.Label;¶import util.annotations.PropertyNames;¶import util.annotations.StructurePattern;¶import util.annotations.StructurePatternNames;¶import util.annotations.Visible;¶import util.misc.ThreadSupport;¶¶import java.awt.Color;¶¶@StructurePattern(StructurePatternNames.BEAN_PATTERN)¶@PropertyNames({¶	"patronList",¶	"chefList",¶	"buffer",¶	"plateList",¶	"otherPlateList",¶	"bellsList",¶	"queueBellList"¶})¶@EditablePropertyNames({¶})¶public class AProducerConsumerScene implements ProducerConsumerScene {¶	¶	//Avatar offsets inside scene¶	int[] chefXValues = {120,-50,-50,120};¶	int[] chefYValues = {-50,35,210,320};¶	int[] patronXValues = {650,850,850,650};¶	int[] patronYValues = {-50,35,220,320};¶	int[] bellXValues = {680,880,880,680};¶	int[] bellYValues = {75,160,345,445};¶	int INIT_HEAD_Y = 60;¶	int INIT_HEAD_X = 163;¶	int INIT_HEAD_HEIGHT = 90;¶	int INIT_HEAD_WIDTH = 80;¶	int PLATE_OFFSET_X = 30;¶	int PLATE_OFFSET_Y = 10;¶	int PAUSE = 5;¶	¶	//Booleans that help with the functionality of the below methods¶	boolean INIT_COOK = true;¶	boolean full = false;¶	int fullPlateOffset = -5;¶	¶	//Defining the chef and patron images¶	String[] chefImages = {"images/0.png","images/1.png","images/2.png","images/3.png"};¶	String[] patronImages = {"images/4.png", "images/5.png", "images/6.png", "images/7.png"};¶	¶	//Buffer arrays¶	int[] bufferXValues = {625, 680, 680, 620, 535, 460, 460, 535};¶	int[] bufferYValues = {200, 275, 365, 425, 425, 365, 275, 200};¶	boolean[] isFull = {false, false, false, false, false, false, false, false};¶	¶	//The properties of our class¶	List<APatron> patronList;¶	List<AChef> chefList;¶	BoundedBuffer buffer = new ABoundedBuffer();¶	List<APlate> plateList;¶	Queue<APlate> otherPlateList;¶	¶	OEShapeModel[] lineArray = {buffer.getLineTwo(), buffer.getLineThree(), buffer.getLineFour(), ¶								buffer.getLineFive(), buffer.getLineSix(), buffer.getLineSeven(), ¶								buffer.getLineEight(), buffer.getLineOne()};¶	¶	List<ABell> bellsList;¶	Queue<ABell> queueBellList;¶	int[] bellValues = {127, 212, 397, 497};¶	Queue<Integer> bellIntegerList;¶	¶	ACookingPlateCommand cookingCommand;¶	CookingPlateAnimator cookingAnimator;¶	¶	AServingPlateCommand servingCommand;¶	ServingPlateAnimator servingAnimator;¶	¶	//The constructor sets the scene with one chef, patron, a buffer, and a plate (not visible)¶	public AProducerConsumerScene() {¶		patronList = new ArrayList<APatron>();¶		chefList = new ArrayList<AChef>();¶		//buffer = new ABoundedBuffer();¶		plateList = new ArrayList<APlate>();¶		otherPlateList = new LinkedList<APlate>();¶		bellsList = new ArrayList<ABell>();¶		queueBellList = new LinkedList<ABell>();¶		bellIntegerList = new LinkedList<Integer>();¶		¶		patronList.add(0, new APatron());¶		OEShapeModel initPatronHead = new AnImageModel(patronImages[0]);¶		initPatronHead.setX(INIT_HEAD_X);¶		initPatronHead.setY(INIT_HEAD_Y);¶		initPatronHead.setHeight(INIT_HEAD_HEIGHT);¶		initPatronHead.setWidth(INIT_HEAD_WIDTH);¶		patronList.get(0).patron.setHead(initPatronHead);¶		patronList.get(0).move(patronXValues[0], patronYValues[0]);¶		¶		chefList.add(0, new AChef());¶		OEShapeModel initChefHead = new AnImageModel(chefImages[0]);¶		initChefHead.setX(INIT_HEAD_X);¶		initChefHead.setY(INIT_HEAD_Y);¶		initChefHead.setHeight(INIT_HEAD_HEIGHT);¶		initChefHead.setWidth(INIT_HEAD_WIDTH);¶		chefList.get(0).chef.setHead(initChefHead);¶		chefList.get(0).move(chefXValues[0], chefYValues[0]);¶		¶		plateList.add(new APlate());¶		plateList.get(0).getPlate().setHeight(0);¶		plateList.get(0).getPlate().setWidth(0);¶		¶		otherPlateList.add(new APlate());¶		otherPlateList.peek().getPlate().setHeight(0);¶		otherPlateList.peek().getPlate().setWidth(0);¶		¶		cookingAnimator = new ACookingPlateAnimator();¶		servingAnimator = new AServingPlateAnimator();¶		¶		bellsList.add(new ABell());¶		bellsList.get(0).getBell().setHeight(0);¶		bellsList.get(0).getBell().setWidth(0);¶		¶		queueBellList.add(new ABell());¶		queueBellList.peek().getBell().setHeight(0);¶		queueBellList.peek().getBell().setWidth(0);¶		¶		bellIntegerList.add(0);¶	}¶	¶	//Producer consumer methods¶	¶	//Init Scene sets the number of patrons and chefs in the scene¶	@Label("Init Scene")¶	public void initScene(int patronAmount, int chefAmount) {¶		bellsList.clear();¶		for (int i=0; i<patronAmount; i++) { ¶			APatron patron = new APatron();¶			patronList.add(i, patron);¶			OEShapeModel newHead = new AnImageModel(patronImages[i]);¶			patron.patron.setHead(newHead); ¶			newHead.setX(INIT_HEAD_X); ¶			newHead.setY(INIT_HEAD_Y);¶			newHead.setHeight(INIT_HEAD_HEIGHT);¶			newHead.setWidth(INIT_HEAD_WIDTH);¶			patron.move(patronXValues[i], patronYValues[i]);¶			¶			bellsList.add(new ABell());¶			bellsList.get(i).move(bellXValues[i], bellYValues[i]);¶		}¶		for (int i=0; i<chefAmount; i++) {¶			AChef chef = new AChef();¶			chefList.add(i, chef);¶			OEShapeModel newHead = new AnImageModel(chefImages[i]);¶			chef.chef.setHead(newHead);¶			newHead.setX(INIT_HEAD_X); ¶			newHead.setY(INIT_HEAD_Y);¶			newHead.setHeight(INIT_HEAD_HEIGHT);¶			newHead.setWidth(INIT_HEAD_WIDTH);¶			chef.move(chefXValues[i], chefYValues[i]);¶		}¶	}¶	¶	//Once the head of an avatar is chosen, it makes the plate that they "cook" appear¶	public void cook(OEShapeModel head) {¶		if (INIT_COOK) {¶			INIT_COOK=!INIT_COOK;¶			plateList.remove(0);¶			otherPlateList.remove();¶		}¶		¶		int headX = head.getCenterX();¶		int headY = head.getCenterY();¶		APlate newPlate = new APlate(plateList.size()+1);¶		newPlate.getPlate().setHeight(0);¶		newPlate.getPlate().setWidth(0);¶		plateList.add(newPlate);¶		otherPlateList.add(newPlate);¶		¶		if (full) {¶			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y+fullPlateOffset);¶			fullPlateOffset = fullPlateOffset - 5;¶		} else {¶			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y);¶		}¶		¶		cookingCommand = new ACookingPlateCommand(cookingAnimator, newPlate, 40, 15);¶		Thread thread = new Thread (cookingCommand);¶		thread.start();¶	}¶	¶	public void serve() {¶		//Checks to see if the buffer is full. If it is, then can't serve.¶		resetLineColors();¶		if(checkIfFull()) {¶			resetLineColors();¶			return;¶		}¶		¶		//Do put, it will disable from there¶		¶		Plate workingPlate = otherPlateList.peek();¶		int workingPlatePlace = Integer.valueOf(workingPlate.getText().getText())-1;¶		changeLineColors(workingPlatePlace);¶		¶		servingCommand = new AServingPlateCommand(servingAnimator,workingPlate,PAUSE, bufferXValues[workingPlatePlace], bufferYValues[workingPlatePlace]);¶		Thread thread = new Thread(servingCommand);¶		thread.start();¶		¶		isFull[workingPlatePlace] = true;¶		otherPlateList.remove();¶	}¶	¶	public void order(OEShapeModel bell) {¶		if(checkIfFull()) {¶			resetLineColors();¶			resetBuffer();¶		}¶		bellIntegerList.add(0);¶		int bellPlace = findBell(bell.getCenterY());¶		bellsList.get(bellPlace).getText().setText(String.valueOf(bellIntegerList.size()-1));¶		¶		int platePlace = findFirstAvailablePlate();¶		servingCommand = new AServingPlateCommand(servingAnimator,plateList.get(platePlace),PAUSE, bell.getCenterX() , bell.getCenterY());¶		Thread thread = new Thread(servingCommand);¶		thread.start();¶		¶		cookingCommand = new ACookingPlateCommand(cookingAnimator, plateList.get(0), 0, 15);¶		Thread eatingThread = new Thread (cookingCommand);¶		eatingThread.start();¶		plateList.get(0).getText().setText("");¶	}¶	¶	public void eat() {¶		plateList.remove(0);¶	}¶	¶	@Override¶	@Visible(false)¶	public int findBell(int centerY) {¶		for(int i=0; i<bellsList.size();i++) {¶			if(bellsList.get(i).getBell().getCenterY() == centerY) {¶				return i;¶			}¶		}¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public int findFirstAvailablePlate() {¶		for (int i=0; i<isFull.length;i++) {¶			if(isFull[i] == true) {¶				return i;¶			}¶		}¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public void resetBuffer() {¶		¶		for (int i=0; i<isFull.length;i++) {¶			isFull[i] = false;¶		}¶	}¶	¶	@Override¶	@Visible(false)¶	public int findPatron(OEShapeModel patronHead) {¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public boolean checkIfFull() {¶		for (int i=0; i<isFull.length;i++) {¶			if (isFull[i] == false) {¶				full = false;¶				return full;¶			}¶		}¶		full = true;¶		return full;¶	}¶	¶	@Override¶	@Visible(false)¶	public void changeLineColors(int workingPlatePlace) {¶		if(workingPlatePlace == lineArray.length-1) {¶			lineArray[workingPlatePlace].setColor(Color.GREEN);¶			lineArray[0].setColor(Color.GREEN);¶		} else {¶			lineArray[workingPlatePlace].setColor(Color.GREEN);¶			lineArray[workingPlatePlace+1].setColor(Color.GREEN);¶		}¶	}¶	¶	¶	@Override¶	@Visible(false)¶	public void resetLineColors() {¶		for (int i=0; i<lineArray.length; i++) {¶			lineArray[i].setColor(Color.WHITE);¶		}¶	}¶	¶	//Getters for properties of the scene¶	@Override¶	public List<AChef> getChefList() {¶		return chefList;¶	}¶	¶	@Override¶	public List<APatron> getPatronList() {¶		return patronList;¶	}¶	¶	@Override¶	public BoundedBuffer getBuffer() {¶		return buffer;¶	}¶	¶	@Override¶	public List<APlate> getPlateList() {¶		return plateList;¶	}	¶	¶	@Override¶	@util.annotations.Visible(false)¶	public Queue<APlate> getOtherPlateList() {¶		return otherPlateList;¶	}¶	¶	@Override¶	public List<ABell> getBellsList() {¶		return bellsList;¶	}¶	¶	@Override¶	@Visible(false)¶	public Queue<ABell> getQueueBellList() {¶		return queueBellList;¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="183" _type="PauseCommand" date="Sun Apr 16 12:16:19 EDT 2023" range="2s-5s" starttimestamp="1681660740055" timestamp="1039920">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2747]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="184" _type="MoveCaretCommand" caretOffset="656" date="Sun Apr 16 12:16:20 EDT 2023" docOffset="656" starttimestamp="1681660740055" timestamp="1040042" />
  <Command __id="186" _type="PauseCommand" date="Sun Apr 16 12:16:23 EDT 2023" range="2s-5s" starttimestamp="1681660740055" timestamp="1043340">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3298]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="185" _type="ShellCommand" date="Sun Apr 16 12:16:23 EDT 2023" starttimestamp="1681660740055" timestamp="1043340" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="188" _type="PauseCommand" date="Sun Apr 16 12:17:12 EDT 2023" range="30s-1m" starttimestamp="1681660740055" timestamp="1092856">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[49516]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="187" _type="ShellCommand" date="Sun Apr 16 12:17:12 EDT 2023" starttimestamp="1681660740055" timestamp="1092856" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="189" _type="ShellCommand" date="Sun Apr 16 12:17:13 EDT 2023" starttimestamp="1681660740055" timestamp="1093774" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="190" _type="ShellCommand" date="Sun Apr 16 12:17:13 EDT 2023" starttimestamp="1681660740055" timestamp="1093867" type="ECLIPSE_MINIMIZED" />
  <Command __id="192" _type="PauseCommand" date="Sun Apr 16 12:17:20 EDT 2023" range="5s-10s" starttimestamp="1681660740055" timestamp="1100186">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[6319]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="191" _type="ShellCommand" date="Sun Apr 16 12:17:20 EDT 2023" starttimestamp="1681660740055" timestamp="1100186" type="ECLIPSE_MAXIMIZED" />
  <Command __id="193" _type="ShellCommand" date="Sun Apr 16 12:17:20 EDT 2023" starttimestamp="1681660740055" timestamp="1100245" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="195" _type="PauseCommand" date="Sun Apr 16 12:17:21 EDT 2023" range="1s-2s" starttimestamp="1681660740055" timestamp="1101398">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1153]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="194" _type="ShellCommand" date="Sun Apr 16 12:17:21 EDT 2023" starttimestamp="1681660740055" timestamp="1101398" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="196" _type="ShellCommand" date="Sun Apr 16 12:17:21 EDT 2023" starttimestamp="1681660740055" timestamp="1101502" type="ECLIPSE_MINIMIZED" />
  <Command __id="198" _type="PauseCommand" date="Sun Apr 16 12:17:25 EDT 2023" range="2s-5s" starttimestamp="1681660740055" timestamp="1105098">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3596]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="197" _type="ShellCommand" date="Sun Apr 16 12:17:25 EDT 2023" starttimestamp="1681660740055" timestamp="1105098" type="ECLIPSE_MAXIMIZED" />
  <Command __id="199" _type="ShellCommand" date="Sun Apr 16 12:17:25 EDT 2023" starttimestamp="1681660740055" timestamp="1105151" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="201" _type="PauseCommand" date="Sun Apr 16 12:17:26 EDT 2023" range="1s-2s" starttimestamp="1681660740055" timestamp="1106804">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1653]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="200" _type="ShellCommand" date="Sun Apr 16 12:17:26 EDT 2023" starttimestamp="1681660740055" timestamp="1106804" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="202" _type="ShellCommand" date="Sun Apr 16 12:17:26 EDT 2023" starttimestamp="1681660740055" timestamp="1106891" type="ECLIPSE_MINIMIZED" />
  <Command __id="204" _type="PauseCommand" date="Sun Apr 16 12:17:32 EDT 2023" range="5s-10s" starttimestamp="1681660740055" timestamp="1112304">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[5412]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="203" _type="ShellCommand" date="Sun Apr 16 12:17:32 EDT 2023" starttimestamp="1681660740055" timestamp="1112303" type="ECLIPSE_MAXIMIZED" />
  <Command __id="205" _type="ShellCommand" date="Sun Apr 16 12:17:32 EDT 2023" starttimestamp="1681660740055" timestamp="1112407" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="207" _type="PauseCommand" date="Sun Apr 16 12:17:35 EDT 2023" range="2s-5s" starttimestamp="1681660740055" timestamp="1115035">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2628]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="206" _type="ShellCommand" date="Sun Apr 16 12:17:35 EDT 2023" starttimestamp="1681660740055" timestamp="1115035" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="208" _type="ShellCommand" date="Sun Apr 16 12:17:35 EDT 2023" starttimestamp="1681660740055" timestamp="1115115" type="ECLIPSE_MINIMIZED" />
  <Command __id="210" _type="PauseCommand" date="Sun Apr 16 12:17:42 EDT 2023" range="5s-10s" starttimestamp="1681660740055" timestamp="1122585">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[7470]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="209" _type="ShellCommand" date="Sun Apr 16 12:17:42 EDT 2023" starttimestamp="1681660740055" timestamp="1122585" type="ECLIPSE_MAXIMIZED" />
  <Command __id="211" _type="ShellCommand" date="Sun Apr 16 12:17:42 EDT 2023" starttimestamp="1681660740055" timestamp="1122664" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="212" _type="ShellCommand" date="Sun Apr 16 12:17:43 EDT 2023" starttimestamp="1681660740055" timestamp="1123256" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="213" _type="ShellCommand" date="Sun Apr 16 12:17:43 EDT 2023" starttimestamp="1681660740055" timestamp="1123344" type="ECLIPSE_MINIMIZED" />
  <Command __id="215" _type="PauseCommand" date="Sun Apr 16 12:17:55 EDT 2023" range="10s-20s" starttimestamp="1681660740055" timestamp="1135785">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[12441]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="214" _type="ShellCommand" date="Sun Apr 16 12:17:55 EDT 2023" starttimestamp="1681660740055" timestamp="1135785" type="ECLIPSE_MAXIMIZED" />
  <Command __id="216" _type="ShellCommand" date="Sun Apr 16 12:17:55 EDT 2023" starttimestamp="1681660740055" timestamp="1135851" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="218" _type="PauseCommand" date="Sun Apr 16 12:18:01 EDT 2023" range="5s-10s" starttimestamp="1681660740055" timestamp="1141062">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[5211]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="217" _type="ShellCommand" date="Sun Apr 16 12:18:01 EDT 2023" starttimestamp="1681660740055" timestamp="1141062" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="220" _type="PauseCommand" date="Sun Apr 16 12:18:06 EDT 2023" range="5s-10s" starttimestamp="1681660740055" timestamp="1146108">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[5046]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="219" _type="ShellCommand" date="Sun Apr 16 12:18:06 EDT 2023" starttimestamp="1681660740055" timestamp="1146108" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="182" _type="DiffBasedFileOpenCommand" date="Sun Apr 16 12:16:19 EDT 2023" docASTNodeCount="1675" docActiveCodeLength="9789" docExpressionCount="1160" docLength="10396" projectName="ProducersConsumersV3" starttimestamp="1681660740055" timestamp="1039920">
    <filePath><![CDATA[C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\graphics\AProducerConsumerScene.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package graphics;¶¶import java.util.ArrayList;¶import java.util.LinkedList;¶import java.util.List;¶import java.util.Queue;¶¶import animations.ACookingPlateAnimator;¶import animations.ACookingPlateCommand;¶import animations.AServingPlateAnimator;¶import animations.AServingPlateCommand;¶import animations.CookingPlateAnimator;¶import animations.ServingPlateAnimator;¶import bus.uigen.OEFrame;¶import bus.uigen.ObjectEditor;¶import bus.uigen.shapes.ALineModel;¶import bus.uigen.shapes.AStringModel;¶import bus.uigen.shapes.AnImageModel;¶import bus.uigen.shapes.OEShapeModel;¶import shapes.FlexibleTextShape;¶import util.annotations.EditablePropertyNames;¶import util.annotations.Label;¶import util.annotations.PropertyNames;¶import util.annotations.StructurePattern;¶import util.annotations.StructurePatternNames;¶import util.annotations.Visible;¶import util.misc.ThreadSupport;¶¶import java.awt.Color;¶¶@StructurePattern(StructurePatternNames.BEAN_PATTERN)¶@PropertyNames({¶	"patronList",¶	"chefList",¶	"buffer",¶	"plateList",¶	"otherPlateList",¶	"bellsList",¶	"queueBellList"¶})¶@EditablePropertyNames({¶})¶public class AProducerConsumerScene implements ProducerConsumerScene {¶	¶	//Avatar offsets inside scene¶	int[] chefXValues = {120,-50,-50,120};¶	int[] chefYValues = {-50,35,210,320};¶	int[] patronXValues = {650,850,850,650};¶	int[] patronYValues = {-50,35,220,320};¶	int[] bellXValues = {680,880,880,680};¶	int[] bellYValues = {75,160,345,445};¶	int INIT_HEAD_Y = 60;¶	int INIT_HEAD_X = 163;¶	int INIT_HEAD_HEIGHT = 90;¶	int INIT_HEAD_WIDTH = 80;¶	int PLATE_OFFSET_X = 30;¶	int PLATE_OFFSET_Y = 10;¶	int PAUSE = 5;¶	¶	//Booleans that help with the functionality of the below methods¶	boolean INIT_COOK = true;¶	boolean full = false;¶	int fullPlateOffset = -5;¶	¶	//Defining the chef and patron images¶	String[] chefImages = {"images/0.png","images/1.png","images/2.png","images/3.png"};¶	String[] patronImages = {"images/4.png", "images/5.png", "images/6.png", "images/7.png"};¶	¶	//Buffer arrays¶	int[] bufferXValues = {625, 680, 680, 620, 535, 460, 460, 535};¶	int[] bufferYValues = {200, 275, 365, 425, 425, 365, 275, 200};¶	boolean[] isFull = {false, false, false, false, false, false, false, false};¶	¶	//The properties of our class¶	List<APatron> patronList;¶	List<AChef> chefList;¶	BoundedBuffer buffer = new ABoundedBuffer();¶	List<APlate> plateList;¶	Queue<APlate> otherPlateList;¶	¶	OEShapeModel[] lineArray = {buffer.getLineTwo(), buffer.getLineThree(), buffer.getLineFour(), ¶								buffer.getLineFive(), buffer.getLineSix(), buffer.getLineSeven(), ¶								buffer.getLineEight(), buffer.getLineOne()};¶	¶	List<ABell> bellsList;¶	Queue<ABell> queueBellList;¶	int[] bellValues = {127, 212, 397, 497};¶	Queue<Integer> bellIntegerList;¶	¶	ACookingPlateCommand cookingCommand;¶	CookingPlateAnimator cookingAnimator;¶	¶	AServingPlateCommand servingCommand;¶	ServingPlateAnimator servingAnimator;¶	¶	//The constructor sets the scene with one chef, patron, a buffer, and a plate (not visible)¶	public AProducerConsumerScene() {¶		patronList = new ArrayList<APatron>();¶		chefList = new ArrayList<AChef>();¶		//buffer = new ABoundedBuffer();¶		plateList = new ArrayList<APlate>();¶		otherPlateList = new LinkedList<APlate>();¶		bellsList = new ArrayList<ABell>();¶		queueBellList = new LinkedList<ABell>();¶		bellIntegerList = new LinkedList<Integer>();¶		¶		patronList.add(0, new APatron());¶		OEShapeModel initPatronHead = new AnImageModel(patronImages[0]);¶		initPatronHead.setX(INIT_HEAD_X);¶		initPatronHead.setY(INIT_HEAD_Y);¶		initPatronHead.setHeight(INIT_HEAD_HEIGHT);¶		initPatronHead.setWidth(INIT_HEAD_WIDTH);¶		patronList.get(0).patron.setHead(initPatronHead);¶		patronList.get(0).move(patronXValues[0], patronYValues[0]);¶		¶		chefList.add(0, new AChef());¶		OEShapeModel initChefHead = new AnImageModel(chefImages[0]);¶		initChefHead.setX(INIT_HEAD_X);¶		initChefHead.setY(INIT_HEAD_Y);¶		initChefHead.setHeight(INIT_HEAD_HEIGHT);¶		initChefHead.setWidth(INIT_HEAD_WIDTH);¶		chefList.get(0).chef.setHead(initChefHead);¶		chefList.get(0).move(chefXValues[0], chefYValues[0]);¶		¶		plateList.add(new APlate());¶		plateList.get(0).getPlate().setHeight(0);¶		plateList.get(0).getPlate().setWidth(0);¶		¶		otherPlateList.add(new APlate());¶		otherPlateList.peek().getPlate().setHeight(0);¶		otherPlateList.peek().getPlate().setWidth(0);¶		¶		cookingAnimator = new ACookingPlateAnimator();¶		servingAnimator = new AServingPlateAnimator();¶		¶		bellsList.add(new ABell());¶		bellsList.get(0).getBell().setHeight(0);¶		bellsList.get(0).getBell().setWidth(0);¶		¶		queueBellList.add(new ABell());¶		queueBellList.peek().getBell().setHeight(0);¶		queueBellList.peek().getBell().setWidth(0);¶		¶		bellIntegerList.add(0);¶	}¶	¶	//Producer consumer methods¶	¶	//Init Scene sets the number of patrons and chefs in the scene¶	@Label("Init Scene")¶	public void initScene(int patronAmount, int chefAmount) {¶		bellsList.clear();¶		for (int i=0; i<patronAmount; i++) { ¶			APatron patron = new APatron();¶			patronList.add(i, patron);¶			OEShapeModel newHead = new AnImageModel(patronImages[i]);¶			patron.patron.setHead(newHead); ¶			newHead.setX(INIT_HEAD_X); ¶			newHead.setY(INIT_HEAD_Y);¶			newHead.setHeight(INIT_HEAD_HEIGHT);¶			newHead.setWidth(INIT_HEAD_WIDTH);¶			patron.move(patronXValues[i], patronYValues[i]);¶			¶			bellsList.add(new ABell());¶			bellsList.get(i).move(bellXValues[i], bellYValues[i]);¶		}¶		for (int i=0; i<chefAmount; i++) {¶			AChef chef = new AChef();¶			chefList.add(i, chef);¶			OEShapeModel newHead = new AnImageModel(chefImages[i]);¶			chef.chef.setHead(newHead);¶			newHead.setX(INIT_HEAD_X); ¶			newHead.setY(INIT_HEAD_Y);¶			newHead.setHeight(INIT_HEAD_HEIGHT);¶			newHead.setWidth(INIT_HEAD_WIDTH);¶			chef.move(chefXValues[i], chefYValues[i]);¶		}¶	}¶	¶	//Once the head of an avatar is chosen, it makes the plate that they "cook" appear¶	public void cook(OEShapeModel head) {¶		if (INIT_COOK) {¶			INIT_COOK=!INIT_COOK;¶			plateList.remove(0);¶			otherPlateList.remove();¶		}¶		¶		int headX = head.getCenterX();¶		int headY = head.getCenterY();¶		APlate newPlate = new APlate(plateList.size()+1);¶		newPlate.getPlate().setHeight(0);¶		newPlate.getPlate().setWidth(0);¶		plateList.add(newPlate);¶		otherPlateList.add(newPlate);¶		¶		if (full) {¶			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y+fullPlateOffset);¶			fullPlateOffset = fullPlateOffset - 5;¶		} else {¶			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y);¶		}¶		¶		cookingCommand = new ACookingPlateCommand(cookingAnimator, newPlate, 40, 15);¶		Thread thread = new Thread (cookingCommand);¶		thread.start();¶	}¶	¶	public void serve() {¶		//Checks to see if the buffer is full. If it is, then can't serve.¶		resetLineColors();¶		if(checkIfFull()) {¶			resetLineColors();¶			return;¶		}¶		¶		//Do put, it will disable from there¶		¶		Plate workingPlate = otherPlateList.peek();¶		int workingPlatePlace = Integer.valueOf(workingPlate.getText().getText())-1;¶		changeLineColors(workingPlatePlace);¶		¶		servingCommand = new AServingPlateCommand(servingAnimator,workingPlate,PAUSE, bufferXValues[workingPlatePlace], bufferYValues[workingPlatePlace]);¶		Thread thread = new Thread(servingCommand);¶		thread.start();¶		¶		isFull[workingPlatePlace] = true;¶		otherPlateList.remove();¶	}¶	¶	public void order(OEShapeModel bell) {¶		if(checkIfFull()) {¶			resetLineColors();¶			resetBuffer();¶		}¶		bellIntegerList.add(0);¶		int bellPlace = findBell(bell.getCenterY());¶		bellsList.get(bellPlace).getText().setText(String.valueOf(bellIntegerList.size()-1));¶		¶		int platePlace = findFirstAvailablePlate();¶		servingCommand = new AServingPlateCommand(servingAnimator,plateList.get(platePlace),PAUSE, bell.getCenterX() , bell.getCenterY());¶		Thread thread = new Thread(servingCommand);¶		thread.start();¶		¶		cookingCommand = new ACookingPlateCommand(cookingAnimator, plateList.get(0), 0, 15);¶		Thread eatingThread = new Thread (cookingCommand);¶		eatingThread.start();¶		plateList.get(0).getText().setText("");¶	}¶	¶	public void eat() {¶		plateList.remove(0);¶	}¶	¶	@Override¶	@Visible(false)¶	public int findBell(int centerY) {¶		for(int i=0; i<bellsList.size();i++) {¶			if(bellsList.get(i).getBell().getCenterY() == centerY) {¶				return i;¶			}¶		}¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public int findFirstAvailablePlate() {¶		for (int i=0; i<isFull.length;i++) {¶			if(isFull[i] == true) {¶				return i;¶			}¶		}¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public void resetBuffer() {¶		¶		for (int i=0; i<isFull.length;i++) {¶			isFull[i] = false;¶		}¶	}¶	¶	@Override¶	@Visible(false)¶	public int findPatron(OEShapeModel patronHead) {¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public boolean checkIfFull() {¶		for (int i=0; i<isFull.length;i++) {¶			if (isFull[i] == false) {¶				full = false;¶				return full;¶			}¶		}¶		full = true;¶		return full;¶	}¶	¶	@Override¶	@Visible(false)¶	public void changeLineColors(int workingPlatePlace) {¶		if(workingPlatePlace == lineArray.length-1) {¶			lineArray[workingPlatePlace].setColor(Color.GREEN);¶			lineArray[0].setColor(Color.GREEN);¶		} else {¶			lineArray[workingPlatePlace].setColor(Color.GREEN);¶			lineArray[workingPlatePlace+1].setColor(Color.GREEN);¶		}¶	}¶	¶	¶	@Override¶	@Visible(false)¶	public void resetLineColors() {¶		for (int i=0; i<lineArray.length; i++) {¶			lineArray[i].setColor(Color.WHITE);¶		}¶	}¶	¶	//Getters for properties of the scene¶	@Override¶	public List<AChef> getChefList() {¶		return chefList;¶	}¶	¶	@Override¶	public List<APatron> getPatronList() {¶		return patronList;¶	}¶	¶	@Override¶	public BoundedBuffer getBuffer() {¶		return buffer;¶	}¶	¶	@Override¶	public List<APlate> getPlateList() {¶		return plateList;¶	}	¶	¶	@Override¶	@util.annotations.Visible(false)¶	public Queue<APlate> getOtherPlateList() {¶		return otherPlateList;¶	}¶	¶	@Override¶	public List<ABell> getBellsList() {¶		return bellsList;¶	}¶	¶	@Override¶	@Visible(false)¶	public Queue<ABell> getQueueBellList() {¶		return queueBellList;¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="222" _type="PauseCommand" date="Sun Apr 16 12:18:07 EDT 2023" range="1s-2s" starttimestamp="1681660740055" timestamp="1147863">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1755]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="223" _type="MoveCaretCommand" caretOffset="0" date="Sun Apr 16 12:18:08 EDT 2023" docOffset="0" starttimestamp="1681660740055" timestamp="1148070" />
  <Command __id="225" _type="PauseCommand" date="Sun Apr 16 12:18:10 EDT 2023" range="2s-5s" starttimestamp="1681660740055" timestamp="1150122">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2052]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="224" _type="ShellCommand" date="Sun Apr 16 12:18:10 EDT 2023" starttimestamp="1681660740055" timestamp="1150122" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="226" _type="ShellCommand" date="Sun Apr 16 12:18:10 EDT 2023" starttimestamp="1681660740055" timestamp="1150135" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="227" _type="ShellCommand" date="Sun Apr 16 12:18:10 EDT 2023" starttimestamp="1681660740055" timestamp="1150204" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="229" _type="PauseCommand" date="Sun Apr 16 12:18:22 EDT 2023" range="10s-20s" starttimestamp="1681660740055" timestamp="1162536">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[12332]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="228" _type="ShellCommand" date="Sun Apr 16 12:18:22 EDT 2023" starttimestamp="1681660740055" timestamp="1162536" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="231" _type="PauseCommand" date="Sun Apr 16 12:18:23 EDT 2023" range="1s-2s" starttimestamp="1681660740055" timestamp="1163674">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1138]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="230" _type="ShellCommand" date="Sun Apr 16 12:18:23 EDT 2023" starttimestamp="1681660740055" timestamp="1163674" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="233" _type="PauseCommand" date="Sun Apr 16 12:18:30 EDT 2023" range="5s-10s" starttimestamp="1681660740055" timestamp="1170861">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[7187]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="232" _type="ShellCommand" date="Sun Apr 16 12:18:30 EDT 2023" starttimestamp="1681660740055" timestamp="1170861" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="235" _type="PauseCommand" date="Sun Apr 16 12:18:32 EDT 2023" range="1s-2s" starttimestamp="1681660740055" timestamp="1172383">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1522]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="234" _type="ShellCommand" date="Sun Apr 16 12:18:32 EDT 2023" starttimestamp="1681660740055" timestamp="1172383" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="237" _type="PauseCommand" date="Sun Apr 16 12:18:38 EDT 2023" range="5s-10s" starttimestamp="1681660740055" timestamp="1178331">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[5948]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="236" _type="ShellCommand" date="Sun Apr 16 12:18:38 EDT 2023" starttimestamp="1681660740055" timestamp="1178331" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="239" _type="PauseCommand" date="Sun Apr 16 12:18:40 EDT 2023" range="1s-2s" starttimestamp="1681660740055" timestamp="1180096">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1765]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="238" _type="ShellCommand" date="Sun Apr 16 12:18:40 EDT 2023" starttimestamp="1681660740055" timestamp="1180096" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="241" _type="PauseCommand" date="Sun Apr 16 12:18:48 EDT 2023" range="5s-10s" starttimestamp="1681660740055" timestamp="1188617">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[8521]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="240" _type="ShellCommand" date="Sun Apr 16 12:18:48 EDT 2023" starttimestamp="1681660740055" timestamp="1188617" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="243" _type="PauseCommand" date="Sun Apr 16 12:18:50 EDT 2023" range="1s-2s" starttimestamp="1681660740055" timestamp="1190333">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1716]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="242" _type="ShellCommand" date="Sun Apr 16 12:18:50 EDT 2023" starttimestamp="1681660740055" timestamp="1190333" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="244" _type="ShellCommand" date="Sun Apr 16 12:18:51 EDT 2023" starttimestamp="1681660740055" timestamp="1191162" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="245" _type="ShellCommand" date="Sun Apr 16 12:18:51 EDT 2023" starttimestamp="1681660740055" timestamp="1191632" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="247" _type="PauseCommand" date="Sun Apr 16 12:18:59 EDT 2023" range="5s-10s" starttimestamp="1681660740055" timestamp="1199456">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[7824]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="246" _type="ShellCommand" date="Sun Apr 16 12:18:59 EDT 2023" starttimestamp="1681660740055" timestamp="1199456" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="221" _type="DiffBasedFileOpenCommand" date="Sun Apr 16 12:18:07 EDT 2023" docASTNodeCount="833" docActiveCodeLength="5091" docExpressionCount="568" docLength="5146" projectName="ProducersConsumersV3" starttimestamp="1681660740055" timestamp="1147863">
    <filePath><![CDATA[C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\graphics\ATable.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package graphics;

import java.awt.Color;

import bus.uigen.OEFrame;
import bus.uigen.ObjectEditor;
import bus.uigen.shapes.ALineModel;
import bus.uigen.shapes.OEShapeModel;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;

@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({
	"horizontalTop",
	"horizontalBottom",
	"verticalLeft",
	"verticalRight",
	"legOne",
	"legTwo",
	"legThree",
	"legFour"
})
public class ATable implements Table {
	double INIT_LEGS = Math.PI/2;
	
	int INIT_HT_X = 149;
	int INIT_HT_Y = 150;
	double INIT_HT_ANGLE = Math.PI;
	int INIT_HT_RADIUS = 70;
	
	int INIT_HB_X = 120;
	int INIT_HB_Y = 180;
	double INIT_HB_ANGLE = Math.PI;
	int INIT_HB_RADIUS = 70;
	
	int INIT_VL_X = 150-INIT_HT_RADIUS;
	int INIT_VL_Y = 150;
	double INIT_VL_ANGLE = (3*Math.PI)/4;
	int INIT_VL_RADIUS = 42;
	
	int INIT_VR_X = 149;
	int INIT_VR_Y = 150;
	double INIT_VR_ANGLE = (3*Math.PI)/4;
	int INIT_VR_RADIUS = 42;
	
	int INIT_LEGONE_X = 120-INIT_HB_RADIUS;
	int INIT_LEGONE_Y = 180;
	int INIT_LEGONE_RADIUS = 40;
	
	int INIT_LEGTWO_X = 149-INIT_HT_RADIUS;
	int INIT_LEGTWO_Y = 180;
	int INIT_LEGTWO_RADIUS = 25;
	
	int INIT_LEGTHREE_X = 120;
	int INIT_LEGTHREE_Y = 180;
	int INIT_LEGTHREE_RADIUS = 40;
	
	int INIT_LEGFOUR_X = 149;
	int INIT_LEGFOUR_Y = 150;
	int INIT_LEGFOUR_RADIUS = 45;
	
	
	OEShapeModel horizontalTop;
	OEShapeModel horizontalBottom;
	OEShapeModel verticalLeft;
	OEShapeModel verticalRight;
	OEShapeModel legOne;
	OEShapeModel legTwo;
	OEShapeModel legThree;
	OEShapeModel legFour;
	
	public ATable() {
		horizontalTop = new ALineModel();
		horizontalTop.setX(INIT_HT_X);
		horizontalTop.setY(INIT_HT_Y);
		horizontalTop.setRadius(INIT_HT_RADIUS);
		horizontalTop.setAngle(INIT_HT_ANGLE);
		horizontalTop.setColor(Color.WHITE);
		
		horizontalBottom = new ALineModel();
		horizontalBottom.setX(INIT_HB_X);
		horizontalBottom.setY(INIT_HB_Y);
		horizontalBottom.setRadius(INIT_HB_RADIUS);
		horizontalBottom.setAngle(INIT_HB_ANGLE);
		horizontalBottom.setColor(Color.WHITE);
		
		verticalLeft = new ALineModel();
		verticalLeft.setX(INIT_VL_X);
		verticalLeft.setY(INIT_VL_Y);
		verticalLeft.setRadius(INIT_VL_RADIUS);
		verticalLeft.setAngle(INIT_VL_ANGLE);
		verticalLeft.setColor(Color.WHITE);
		
		verticalRight = new ALineModel();
		verticalRight.setX(INIT_VR_X);
		verticalRight.setY(INIT_VR_Y);
		verticalRight.setRadius(INIT_VR_RADIUS);
		verticalRight.setAngle(INIT_VR_ANGLE);
		verticalRight.setColor(Color.WHITE);
		
		legOne = new ALineModel();
		legOne.setX(INIT_LEGONE_X);
		legOne.setY(INIT_LEGONE_Y);
		legOne.setRadius(INIT_LEGONE_RADIUS);
		legOne.setAngle(INIT_LEGS);
		legOne.setColor(Color.WHITE);
		
		legTwo = new ALineModel();
		legTwo.setX(INIT_LEGTWO_X);
		legTwo.setY(INIT_LEGTWO_Y);
		legTwo.setRadius(INIT_LEGTWO_RADIUS);
		legTwo.setAngle(INIT_LEGS);
		legTwo.setColor(Color.WHITE);
		
		legThree = new ALineModel();
		legThree.setX(INIT_LEGTHREE_X);
		legThree.setY(INIT_LEGTHREE_Y);
		legThree.setRadius(INIT_LEGTHREE_RADIUS);
		legThree.setAngle(INIT_LEGS);
		legThree.setColor(Color.WHITE);
		
		legFour = new ALineModel();
		legFour.setX(INIT_LEGFOUR_X);
		legFour.setY(INIT_LEGFOUR_Y);
		legFour.setRadius(INIT_LEGFOUR_RADIUS);
		legFour.setAngle(INIT_LEGS);
		legFour.setColor(Color.WHITE);
	}
	
	@Override
	public OEShapeModel getHorizontalTop() {
		return horizontalTop;
	}
	
	@Override
	public OEShapeModel getHorizontalBottom() {
		return horizontalBottom;
	}
	
	@Override
	public OEShapeModel getVerticalLeft() {
		return verticalLeft;
	}
	
	@Override
	public OEShapeModel getVerticalRight() {
		return verticalRight;
	}
	
	@Override
	public OEShapeModel getLegOne() {
		return legOne;
	}
	
	@Override
	public OEShapeModel getLegTwo() {
		return legTwo;
	}
	
	@Override
	public OEShapeModel getLegThree() {
		return legThree;
	}
	
	@Override
	public OEShapeModel getLegFour() {
		return legFour;
	}
	
	@Override
	public void move(int newX, int newY) {
		horizontalTop.setX(horizontalTop.getX()+newX);
		horizontalTop.setY(horizontalTop.getY()+newY);
		horizontalBottom.setX(horizontalBottom.getX()+newX);
		horizontalBottom.setY(horizontalBottom.getY()+newY);
		verticalLeft.setX(verticalLeft.getX()+newX);
		verticalLeft.setY(verticalLeft.getY()+newY);
		verticalRight.setX(verticalRight.getX()+newX);
		verticalRight.setY(verticalRight.getY()+newY);
		legOne.setX(legOne.getX()+newX);
		legOne.setY(legOne.getY()+newY);
		legTwo.setX(legTwo.getX()+newX);
		legTwo.setY(legTwo.getY()+newY);
		legThree.setX(legThree.getX()+newX);
		legThree.setY(legThree.getY()+newY);
		legFour.setX(legFour.getX()+newX);
		legFour.setY(legFour.getY()+newY);
	}
	
	public static void main(String[] args) {
		final Table table = new ATable();
		table.move(180, 80);
		OEFrame editor = ObjectEditor.edit(table);
		//editor.getDrawComponent().setBackground(Color.WHITE);
		editor.showDrawPanel();
	}
	
}
]]></snapshot>
  </Command>
  <Command __id="249" _type="PauseCommand" date="Sun Apr 16 12:19:01 EDT 2023" range="1s-2s" starttimestamp="1681660740055" timestamp="1201380">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1924]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="250" _type="MoveCaretCommand" caretOffset="656" date="Sun Apr 16 12:19:01 EDT 2023" docOffset="656" starttimestamp="1681660740055" timestamp="1201542" />
  <Command __id="252" _type="PauseCommand" date="Sun Apr 16 12:19:07 EDT 2023" range="5s-10s" starttimestamp="1681660740055" timestamp="1207179">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[5637]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="251" _type="ShellCommand" date="Sun Apr 16 12:19:07 EDT 2023" starttimestamp="1681660740055" timestamp="1207179" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="254" _type="PauseCommand" date="Sun Apr 16 12:19:32 EDT 2023" range="20s-30s" starttimestamp="1681660740055" timestamp="1232390">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[25211]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="253" _type="ShellCommand" date="Sun Apr 16 12:19:32 EDT 2023" starttimestamp="1681660740055" timestamp="1232390" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="248" _type="DiffBasedFileOpenCommand" date="Sun Apr 16 12:19:01 EDT 2023" docASTNodeCount="1675" docActiveCodeLength="9789" docExpressionCount="1160" docLength="10396" projectName="ProducersConsumersV3" starttimestamp="1681660740055" timestamp="1201380">
    <filePath><![CDATA[C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\graphics\AProducerConsumerScene.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package graphics;¶¶import java.util.ArrayList;¶import java.util.LinkedList;¶import java.util.List;¶import java.util.Queue;¶¶import animations.ACookingPlateAnimator;¶import animations.ACookingPlateCommand;¶import animations.AServingPlateAnimator;¶import animations.AServingPlateCommand;¶import animations.CookingPlateAnimator;¶import animations.ServingPlateAnimator;¶import bus.uigen.OEFrame;¶import bus.uigen.ObjectEditor;¶import bus.uigen.shapes.ALineModel;¶import bus.uigen.shapes.AStringModel;¶import bus.uigen.shapes.AnImageModel;¶import bus.uigen.shapes.OEShapeModel;¶import shapes.FlexibleTextShape;¶import util.annotations.EditablePropertyNames;¶import util.annotations.Label;¶import util.annotations.PropertyNames;¶import util.annotations.StructurePattern;¶import util.annotations.StructurePatternNames;¶import util.annotations.Visible;¶import util.misc.ThreadSupport;¶¶import java.awt.Color;¶¶@StructurePattern(StructurePatternNames.BEAN_PATTERN)¶@PropertyNames({¶	"patronList",¶	"chefList",¶	"buffer",¶	"plateList",¶	"otherPlateList",¶	"bellsList",¶	"queueBellList"¶})¶@EditablePropertyNames({¶})¶public class AProducerConsumerScene implements ProducerConsumerScene {¶	¶	//Avatar offsets inside scene¶	int[] chefXValues = {120,-50,-50,120};¶	int[] chefYValues = {-50,35,210,320};¶	int[] patronXValues = {650,850,850,650};¶	int[] patronYValues = {-50,35,220,320};¶	int[] bellXValues = {680,880,880,680};¶	int[] bellYValues = {75,160,345,445};¶	int INIT_HEAD_Y = 60;¶	int INIT_HEAD_X = 163;¶	int INIT_HEAD_HEIGHT = 90;¶	int INIT_HEAD_WIDTH = 80;¶	int PLATE_OFFSET_X = 30;¶	int PLATE_OFFSET_Y = 10;¶	int PAUSE = 5;¶	¶	//Booleans that help with the functionality of the below methods¶	boolean INIT_COOK = true;¶	boolean full = false;¶	int fullPlateOffset = -5;¶	¶	//Defining the chef and patron images¶	String[] chefImages = {"images/0.png","images/1.png","images/2.png","images/3.png"};¶	String[] patronImages = {"images/4.png", "images/5.png", "images/6.png", "images/7.png"};¶	¶	//Buffer arrays¶	int[] bufferXValues = {625, 680, 680, 620, 535, 460, 460, 535};¶	int[] bufferYValues = {200, 275, 365, 425, 425, 365, 275, 200};¶	boolean[] isFull = {false, false, false, false, false, false, false, false};¶	¶	//The properties of our class¶	List<APatron> patronList;¶	List<AChef> chefList;¶	BoundedBuffer buffer = new ABoundedBuffer();¶	List<APlate> plateList;¶	Queue<APlate> otherPlateList;¶	¶	OEShapeModel[] lineArray = {buffer.getLineTwo(), buffer.getLineThree(), buffer.getLineFour(), ¶								buffer.getLineFive(), buffer.getLineSix(), buffer.getLineSeven(), ¶								buffer.getLineEight(), buffer.getLineOne()};¶	¶	List<ABell> bellsList;¶	Queue<ABell> queueBellList;¶	int[] bellValues = {127, 212, 397, 497};¶	Queue<Integer> bellIntegerList;¶	¶	ACookingPlateCommand cookingCommand;¶	CookingPlateAnimator cookingAnimator;¶	¶	AServingPlateCommand servingCommand;¶	ServingPlateAnimator servingAnimator;¶	¶	//The constructor sets the scene with one chef, patron, a buffer, and a plate (not visible)¶	public AProducerConsumerScene() {¶		patronList = new ArrayList<APatron>();¶		chefList = new ArrayList<AChef>();¶		//buffer = new ABoundedBuffer();¶		plateList = new ArrayList<APlate>();¶		otherPlateList = new LinkedList<APlate>();¶		bellsList = new ArrayList<ABell>();¶		queueBellList = new LinkedList<ABell>();¶		bellIntegerList = new LinkedList<Integer>();¶		¶		patronList.add(0, new APatron());¶		OEShapeModel initPatronHead = new AnImageModel(patronImages[0]);¶		initPatronHead.setX(INIT_HEAD_X);¶		initPatronHead.setY(INIT_HEAD_Y);¶		initPatronHead.setHeight(INIT_HEAD_HEIGHT);¶		initPatronHead.setWidth(INIT_HEAD_WIDTH);¶		patronList.get(0).patron.setHead(initPatronHead);¶		patronList.get(0).move(patronXValues[0], patronYValues[0]);¶		¶		chefList.add(0, new AChef());¶		OEShapeModel initChefHead = new AnImageModel(chefImages[0]);¶		initChefHead.setX(INIT_HEAD_X);¶		initChefHead.setY(INIT_HEAD_Y);¶		initChefHead.setHeight(INIT_HEAD_HEIGHT);¶		initChefHead.setWidth(INIT_HEAD_WIDTH);¶		chefList.get(0).chef.setHead(initChefHead);¶		chefList.get(0).move(chefXValues[0], chefYValues[0]);¶		¶		plateList.add(new APlate());¶		plateList.get(0).getPlate().setHeight(0);¶		plateList.get(0).getPlate().setWidth(0);¶		¶		otherPlateList.add(new APlate());¶		otherPlateList.peek().getPlate().setHeight(0);¶		otherPlateList.peek().getPlate().setWidth(0);¶		¶		cookingAnimator = new ACookingPlateAnimator();¶		servingAnimator = new AServingPlateAnimator();¶		¶		bellsList.add(new ABell());¶		bellsList.get(0).getBell().setHeight(0);¶		bellsList.get(0).getBell().setWidth(0);¶		¶		queueBellList.add(new ABell());¶		queueBellList.peek().getBell().setHeight(0);¶		queueBellList.peek().getBell().setWidth(0);¶		¶		bellIntegerList.add(0);¶	}¶	¶	//Producer consumer methods¶	¶	//Init Scene sets the number of patrons and chefs in the scene¶	@Label("Init Scene")¶	public void initScene(int patronAmount, int chefAmount) {¶		bellsList.clear();¶		for (int i=0; i<patronAmount; i++) { ¶			APatron patron = new APatron();¶			patronList.add(i, patron);¶			OEShapeModel newHead = new AnImageModel(patronImages[i]);¶			patron.patron.setHead(newHead); ¶			newHead.setX(INIT_HEAD_X); ¶			newHead.setY(INIT_HEAD_Y);¶			newHead.setHeight(INIT_HEAD_HEIGHT);¶			newHead.setWidth(INIT_HEAD_WIDTH);¶			patron.move(patronXValues[i], patronYValues[i]);¶			¶			bellsList.add(new ABell());¶			bellsList.get(i).move(bellXValues[i], bellYValues[i]);¶		}¶		for (int i=0; i<chefAmount; i++) {¶			AChef chef = new AChef();¶			chefList.add(i, chef);¶			OEShapeModel newHead = new AnImageModel(chefImages[i]);¶			chef.chef.setHead(newHead);¶			newHead.setX(INIT_HEAD_X); ¶			newHead.setY(INIT_HEAD_Y);¶			newHead.setHeight(INIT_HEAD_HEIGHT);¶			newHead.setWidth(INIT_HEAD_WIDTH);¶			chef.move(chefXValues[i], chefYValues[i]);¶		}¶	}¶	¶	//Once the head of an avatar is chosen, it makes the plate that they "cook" appear¶	public void cook(OEShapeModel head) {¶		if (INIT_COOK) {¶			INIT_COOK=!INIT_COOK;¶			plateList.remove(0);¶			otherPlateList.remove();¶		}¶		¶		int headX = head.getCenterX();¶		int headY = head.getCenterY();¶		APlate newPlate = new APlate(plateList.size()+1);¶		newPlate.getPlate().setHeight(0);¶		newPlate.getPlate().setWidth(0);¶		plateList.add(newPlate);¶		otherPlateList.add(newPlate);¶		¶		if (full) {¶			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y+fullPlateOffset);¶			fullPlateOffset = fullPlateOffset - 5;¶		} else {¶			newPlate.move(headX+PLATE_OFFSET_X, headY+PLATE_OFFSET_Y);¶		}¶		¶		cookingCommand = new ACookingPlateCommand(cookingAnimator, newPlate, 40, 15);¶		Thread thread = new Thread (cookingCommand);¶		thread.start();¶	}¶	¶	public void serve() {¶		//Checks to see if the buffer is full. If it is, then can't serve.¶		resetLineColors();¶		if(checkIfFull()) {¶			resetLineColors();¶			return;¶		}¶		¶		//Do put, it will disable from there¶		¶		Plate workingPlate = otherPlateList.peek();¶		int workingPlatePlace = Integer.valueOf(workingPlate.getText().getText())-1;¶		changeLineColors(workingPlatePlace);¶		¶		servingCommand = new AServingPlateCommand(servingAnimator,workingPlate,PAUSE, bufferXValues[workingPlatePlace], bufferYValues[workingPlatePlace]);¶		Thread thread = new Thread(servingCommand);¶		thread.start();¶		¶		isFull[workingPlatePlace] = true;¶		otherPlateList.remove();¶	}¶	¶	public void order(OEShapeModel bell) {¶		if(checkIfFull()) {¶			resetLineColors();¶			resetBuffer();¶		}¶		bellIntegerList.add(0);¶		int bellPlace = findBell(bell.getCenterY());¶		bellsList.get(bellPlace).getText().setText(String.valueOf(bellIntegerList.size()-1));¶		¶		int platePlace = findFirstAvailablePlate();¶		servingCommand = new AServingPlateCommand(servingAnimator,plateList.get(platePlace),PAUSE, bell.getCenterX() , bell.getCenterY());¶		Thread thread = new Thread(servingCommand);¶		thread.start();¶		¶		cookingCommand = new ACookingPlateCommand(cookingAnimator, plateList.get(0), 0, 15);¶		Thread eatingThread = new Thread (cookingCommand);¶		eatingThread.start();¶		plateList.get(0).getText().setText("");¶	}¶	¶	public void eat() {¶		plateList.remove(0);¶	}¶	¶	@Override¶	@Visible(false)¶	public int findBell(int centerY) {¶		for(int i=0; i<bellsList.size();i++) {¶			if(bellsList.get(i).getBell().getCenterY() == centerY) {¶				return i;¶			}¶		}¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public int findFirstAvailablePlate() {¶		for (int i=0; i<isFull.length;i++) {¶			if(isFull[i] == true) {¶				return i;¶			}¶		}¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public void resetBuffer() {¶		¶		for (int i=0; i<isFull.length;i++) {¶			isFull[i] = false;¶		}¶	}¶	¶	@Override¶	@Visible(false)¶	public int findPatron(OEShapeModel patronHead) {¶		return 0;¶	}¶	¶	@Override¶	@Visible(false)¶	public boolean checkIfFull() {¶		for (int i=0; i<isFull.length;i++) {¶			if (isFull[i] == false) {¶				full = false;¶				return full;¶			}¶		}¶		full = true;¶		return full;¶	}¶	¶	@Override¶	@Visible(false)¶	public void changeLineColors(int workingPlatePlace) {¶		if(workingPlatePlace == lineArray.length-1) {¶			lineArray[workingPlatePlace].setColor(Color.GREEN);¶			lineArray[0].setColor(Color.GREEN);¶		} else {¶			lineArray[workingPlatePlace].setColor(Color.GREEN);¶			lineArray[workingPlatePlace+1].setColor(Color.GREEN);¶		}¶	}¶	¶	¶	@Override¶	@Visible(false)¶	public void resetLineColors() {¶		for (int i=0; i<lineArray.length; i++) {¶			lineArray[i].setColor(Color.WHITE);¶		}¶	}¶	¶	//Getters for properties of the scene¶	@Override¶	public List<AChef> getChefList() {¶		return chefList;¶	}¶	¶	@Override¶	public List<APatron> getPatronList() {¶		return patronList;¶	}¶	¶	@Override¶	public BoundedBuffer getBuffer() {¶		return buffer;¶	}¶	¶	@Override¶	public List<APlate> getPlateList() {¶		return plateList;¶	}	¶	¶	@Override¶	@util.annotations.Visible(false)¶	public Queue<APlate> getOtherPlateList() {¶		return otherPlateList;¶	}¶	¶	@Override¶	public List<ABell> getBellsList() {¶		return bellsList;¶	}¶	¶	@Override¶	@Visible(false)¶	public Queue<ABell> getQueueBellList() {¶		return queueBellList;¶	}¶}¶")]]]></diff>
  </Command>
  <Command __id="256" _type="PauseCommand" date="Sun Apr 16 12:19:41 EDT 2023" range="5s-10s" starttimestamp="1681660740055" timestamp="1241631">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[9241]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="257" _type="MoveCaretCommand" caretOffset="62" date="Sun Apr 16 12:19:41 EDT 2023" docOffset="366" starttimestamp="1681660740055" timestamp="1241794" />
  <Command __id="259" _type="PauseCommand" date="Sun Apr 16 12:20:02 EDT 2023" range="20s-30s" starttimestamp="1681660740055" timestamp="1262355">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[20561]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="258" _type="ShellCommand" date="Sun Apr 16 12:20:02 EDT 2023" starttimestamp="1681660740055" timestamp="1262355" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="261" _type="PauseCommand" date="Sun Apr 16 12:20:22 EDT 2023" range="10s-20s" starttimestamp="1681660740055" timestamp="1282046">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[19691]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="260" _type="ShellCommand" date="Sun Apr 16 12:20:22 EDT 2023" starttimestamp="1681660740055" timestamp="1282046" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="263" _type="PauseCommand" date="Sun Apr 16 12:20:24 EDT 2023" range="2s-5s" starttimestamp="1681660740055" timestamp="1284228">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2182]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="262" _type="ShellCommand" date="Sun Apr 16 12:20:24 EDT 2023" starttimestamp="1681660740055" timestamp="1284228" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="264" _type="ShellCommand" date="Sun Apr 16 12:20:24 EDT 2023" starttimestamp="1681660740055" timestamp="1284342" type="ECLIPSE_MINIMIZED" />
  <Command __id="266" _type="PauseCommand" date="Sun Apr 16 12:20:31 EDT 2023" range="5s-10s" starttimestamp="1681660740055" timestamp="1291085">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[6743]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="265" _type="ShellCommand" date="Sun Apr 16 12:20:31 EDT 2023" starttimestamp="1681660740055" timestamp="1291085" type="ECLIPSE_MAXIMIZED" />
  <Command __id="267" _type="ShellCommand" date="Sun Apr 16 12:20:31 EDT 2023" starttimestamp="1681660740055" timestamp="1291193" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="269" _type="PauseCommand" date="Sun Apr 16 12:20:36 EDT 2023" range="2s-5s" starttimestamp="1681660740055" timestamp="1296191">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[4998]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="268" _type="ShellCommand" date="Sun Apr 16 12:20:36 EDT 2023" starttimestamp="1681660740055" timestamp="1296191" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="270" _type="ShellCommand" date="Sun Apr 16 12:20:36 EDT 2023" starttimestamp="1681660740055" timestamp="1296312" type="ECLIPSE_MINIMIZED" />
  <Command __id="272" _type="PauseCommand" date="Sun Apr 16 12:20:39 EDT 2023" range="2s-5s" starttimestamp="1681660740055" timestamp="1299069">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2756]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="271" _type="ShellCommand" date="Sun Apr 16 12:20:39 EDT 2023" starttimestamp="1681660740055" timestamp="1299068" type="ECLIPSE_MAXIMIZED" />
  <Command __id="273" _type="ShellCommand" date="Sun Apr 16 12:20:39 EDT 2023" starttimestamp="1681660740055" timestamp="1299151" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="275" _type="PauseCommand" date="Sun Apr 16 12:20:42 EDT 2023" range="2s-5s" starttimestamp="1681660740055" timestamp="1302252">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3101]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="274" _type="ShellCommand" date="Sun Apr 16 12:20:42 EDT 2023" starttimestamp="1681660740055" timestamp="1302252" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="276" _type="ShellCommand" date="Sun Apr 16 12:20:42 EDT 2023" starttimestamp="1681660740055" timestamp="1302327" type="ECLIPSE_MINIMIZED" />
  <Command __id="278" _type="PauseCommand" date="Sun Apr 16 12:21:04 EDT 2023" range="20s-30s" starttimestamp="1681660740055" timestamp="1324379">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[22052]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="277" _type="ShellCommand" date="Sun Apr 16 12:21:04 EDT 2023" starttimestamp="1681660740055" timestamp="1324379" type="ECLIPSE_MAXIMIZED" />
  <Command __id="279" _type="ShellCommand" date="Sun Apr 16 12:21:04 EDT 2023" starttimestamp="1681660740055" timestamp="1324481" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="281" _type="PauseCommand" date="Sun Apr 16 12:21:10 EDT 2023" range="5s-10s" starttimestamp="1681660740055" timestamp="1330451">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[5970]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="280" _type="ShellCommand" date="Sun Apr 16 12:21:10 EDT 2023" starttimestamp="1681660740055" timestamp="1330451" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="283" _type="PauseCommand" date="Sun Apr 16 12:21:30 EDT 2023" range="20s-30s" starttimestamp="1681660740055" timestamp="1350540">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[20089]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="282" _type="ShellCommand" date="Sun Apr 16 12:21:30 EDT 2023" starttimestamp="1681660740055" timestamp="1350540" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="285" _type="PauseCommand" date="Sun Apr 16 12:21:38 EDT 2023" range="5s-10s" starttimestamp="1681660740055" timestamp="1358489">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[7949]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="284" _type="ShellCommand" date="Sun Apr 16 12:21:38 EDT 2023" starttimestamp="1681660740055" timestamp="1358489" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="286" _type="ShellCommand" date="Sun Apr 16 12:21:39 EDT 2023" starttimestamp="1681660740055" timestamp="1359106" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="288" _type="PauseCommand" date="Sun Apr 16 12:21:40 EDT 2023" range="1s-2s" starttimestamp="1681660740055" timestamp="1360244">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1138]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="287" _type="ShellCommand" date="Sun Apr 16 12:21:40 EDT 2023" starttimestamp="1681660740055" timestamp="1360244" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="289" _type="ShellCommand" date="Sun Apr 16 12:21:40 EDT 2023" starttimestamp="1681660740055" timestamp="1360343" type="ECLIPSE_MINIMIZED" />
  <Command __id="291" _type="PauseCommand" date="Sun Apr 16 12:21:44 EDT 2023" range="2s-5s" starttimestamp="1681660740055" timestamp="1364201">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3858]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="290" _type="ShellCommand" date="Sun Apr 16 12:21:44 EDT 2023" starttimestamp="1681660740055" timestamp="1364201" type="ECLIPSE_MAXIMIZED" />
  <Command __id="292" _type="ShellCommand" date="Sun Apr 16 12:21:44 EDT 2023" starttimestamp="1681660740055" timestamp="1364359" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="294" _type="PauseCommand" date="Sun Apr 16 12:21:45 EDT 2023" range="1s-2s" starttimestamp="1681660740055" timestamp="1365648">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1289]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="293" _type="ShellCommand" date="Sun Apr 16 12:21:45 EDT 2023" starttimestamp="1681660740055" timestamp="1365648" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="296" _type="PauseCommand" date="Sun Apr 16 12:22:06 EDT 2023" range="20s-30s" starttimestamp="1681660740055" timestamp="1386239">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[20591]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="295" _type="ShellCommand" date="Sun Apr 16 12:22:06 EDT 2023" starttimestamp="1681660740055" timestamp="1386239" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="298" _type="PauseCommand" date="Sun Apr 16 12:22:11 EDT 2023" range="5s-10s" starttimestamp="1681660740055" timestamp="1391787">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[5548]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="297" _type="ShellCommand" date="Sun Apr 16 12:22:11 EDT 2023" starttimestamp="1681660740055" timestamp="1391787" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="299" _type="ShellCommand" date="Sun Apr 16 12:22:11 EDT 2023" starttimestamp="1681660740055" timestamp="1391889" type="ECLIPSE_MINIMIZED" />
  <Command __id="301" _type="PauseCommand" date="Sun Apr 16 12:23:21 EDT 2023" range="1m-2m" starttimestamp="1681660740055" timestamp="1461127">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[69238]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="305" _type="ShellCommand" date="Sun Apr 16 12:24:07 EDT 2023" starttimestamp="1681660740055" timestamp="1507189" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="255" _type="DiffBasedFileOpenCommand" date="Sun Apr 16 12:19:41 EDT 2023" docASTNodeCount="221" docActiveCodeLength="1639" docExpressionCount="148" docLength="1741" projectName="ProducersConsumersV3" starttimestamp="1681660740055" timestamp="1241631">
    <filePath><![CDATA[C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\main\Main.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package main;

import java.awt.Color;
import java.lang.reflect.Method;

import bus.uigen.OEFrame;
import bus.uigen.ObjectEditor;
import bus.uigen.attributes.AttributeNames;
import graphics.AProducerConsumerScene;
import graphics.AProducerConsumerScene2;
import graphics.ProducerConsumerScene;
import graphics.ProducerConsumerScene2;

public class Main {
	static ProducerConsumerScene2 scene = new AProducerConsumerScene2();
	
	public static void main(String[] args) {
		animateScene();
	}
	
	public static void animateScene() {
		
		//Adding labels and buttons inside object editor screen
		ObjectEditor.confirmSelectedMethodParameters(false);
		ObjectEditor.setMethodAttribute(AProducerConsumerScene2.class, "initScene", AttributeNames.TOOLBAR_METHOD, true);
		ObjectEditor.setMethodAttribute(AProducerConsumerScene2.class, "initScene", AttributeNames.LABEL, "Init Scene");
		
		//Setting up init scene method in object editor
		try {
			Class[] initSceneArgTypes = {Integer.TYPE, Integer.TYPE};
			Object[] initSceneDefaultArgs = {4, 4};
			String[] initSceneArgNames = {"Number of Patrons", "Number of Chefs"};
			Method initSceneMethod = AProducerConsumerScene2.class.getMethod("initScene", initSceneArgTypes);
			ObjectEditor.registerDefaultParameterValues(initSceneMethod, initSceneDefaultArgs);
			ObjectEditor.registerParameterNames(initSceneMethod, initSceneArgNames);
		} catch (NoSuchMethodException e) {
			e.printStackTrace();
		} catch (SecurityException e) {
			e.printStackTrace();
		}
		
		
		OEFrame editor = ObjectEditor.edit(scene);
		editor.getDrawComponent().setBackground(Color.DARK_GRAY);
		editor.getDrawPanel().setSize(450, 450);
		editor.showDrawPanel();
		
	}

}
]]></snapshot>
  </Command>
  <Command __id="308" _type="PauseCommand" date="Sun Apr 16 12:24:09 EDT 2023" range="1s-2s" starttimestamp="1681660740055" timestamp="1508979">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1790]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="309" _type="MoveCaretCommand" caretOffset="376" date="Sun Apr 16 12:24:09 EDT 2023" docOffset="376" starttimestamp="1681660740055" timestamp="1509214" />
  <Command __id="311" _type="PauseCommand" date="Sun Apr 16 12:24:13 EDT 2023" range="2s-5s" starttimestamp="1681660740055" timestamp="1513011">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3797]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="310" _type="ShellCommand" date="Sun Apr 16 12:24:13 EDT 2023" starttimestamp="1681660740055" timestamp="1513011" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="313" _type="PauseCommand" date="Sun Apr 16 12:24:31 EDT 2023" range="10s-20s" starttimestamp="1681660740055" timestamp="1531466">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[18455]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="312" _type="ShellCommand" date="Sun Apr 16 12:24:31 EDT 2023" starttimestamp="1681660740055" timestamp="1531466" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="315" _type="PauseCommand" date="Sun Apr 16 12:24:34 EDT 2023" range="2s-5s" starttimestamp="1681660740055" timestamp="1534530">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3064]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="314" _type="ShellCommand" date="Sun Apr 16 12:24:34 EDT 2023" starttimestamp="1681660740055" timestamp="1534530" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="316" _type="ShellCommand" date="Sun Apr 16 12:24:34 EDT 2023" starttimestamp="1681660740055" timestamp="1534638" type="ECLIPSE_MINIMIZED" />
  <Command __id="318" _type="PauseCommand" date="Sun Apr 16 12:24:57 EDT 2023" range="20s-30s" starttimestamp="1681660740055" timestamp="1557023">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[22385]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="317" _type="ShellCommand" date="Sun Apr 16 12:24:57 EDT 2023" starttimestamp="1681660740055" timestamp="1557023" type="ECLIPSE_MAXIMIZED" />
  <Command __id="319" _type="ShellCommand" date="Sun Apr 16 12:24:57 EDT 2023" starttimestamp="1681660740055" timestamp="1557100" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="307" _type="DiffBasedFileOpenCommand" date="Sun Apr 16 12:24:09 EDT 2023" docASTNodeCount="91" docActiveCodeLength="535" docExpressionCount="49" docLength="535" projectName="ProducersConsumersV3" starttimestamp="1681660740055" timestamp="1508979">
    <filePath><![CDATA[C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\animations\ACookingPlateCommand.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package animations;

import graphics.Plate;

public class ACookingPlateCommand implements Runnable {

	CookingPlateAnimator animator;
	Plate plate;
	int size;
	int pause;
	 
	public ACookingPlateCommand(CookingPlateAnimator inAnimator, Plate inPlate, int inSize, int inPause) {
		animator = inAnimator;
		plate = inPlate;
		size = inSize;
		pause = inPause;
	}
	
	@Override
	public void run() {
		if (size>0) {
			animator.cook(plate, size, pause);
		} else {
			animator.eat(plate, size, pause);
		}
	}

}
]]></snapshot>
  </Command>
  <Command __id="321" _type="PauseCommand" date="Sun Apr 16 12:24:58 EDT 2023" range="1s-2s" starttimestamp="1681660740055" timestamp="1558816">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1716]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="322" _type="MoveCaretCommand" caretOffset="62" date="Sun Apr 16 12:24:59 EDT 2023" docOffset="366" starttimestamp="1681660740055" timestamp="1559004" />
  <Command __id="320" _type="DiffBasedFileOpenCommand" date="Sun Apr 16 12:24:58 EDT 2023" docASTNodeCount="221" docActiveCodeLength="1639" docExpressionCount="148" docLength="1741" projectName="ProducersConsumersV3" starttimestamp="1681660740055" timestamp="1558816">
    <filePath><![CDATA[C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\main\Main.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package main;¶¶import java.awt.Color;¶import java.lang.reflect.Method;¶¶import bus.uigen.OEFrame;¶import bus.uigen.ObjectEditor;¶import bus.uigen.attributes.AttributeNames;¶import graphics.AProducerConsumerScene;¶import graphics.AProducerConsumerScene2;¶import graphics.ProducerConsumerScene;¶import graphics.ProducerConsumerScene2;¶¶public class Main {¶	static ProducerConsumerScene2 scene = new AProducerConsumerScene2();¶	¶	public static void main(String[] args) {¶		animateScene();¶	}¶	¶	public static void animateScene() {¶		¶		//Adding labels and buttons inside object editor screen¶		ObjectEditor.confirmSelectedMethodParameters(false);¶		ObjectEditor.setMethodAttribute(AProducerConsumerScene2.class, "initScene", AttributeNames.TOOLBAR_METHOD, true);¶		ObjectEditor.setMethodAttribute(AProducerConsumerScene2.class, "initScene", AttributeNames.LABEL, "Init Scene");¶		¶		//Setting up init scene method in object editor¶		try {¶			Class[] initSceneArgTypes = {Integer.TYPE, Integer.TYPE};¶			Object[] initSceneDefaultArgs = {4, 4};¶			String[] initSceneArgNames = {"Number of Patrons", "Number of Chefs"};¶			Method initSceneMethod = AProducerConsumerScene2.class.getMethod("initScene", initSceneArgTypes);¶			ObjectEditor.registerDefaultParameterValues(initSceneMethod, initSceneDefaultArgs);¶			ObjectEditor.registerParameterNames(initSceneMethod, initSceneArgNames);¶		} catch (NoSuchMethodException e) {¶			e.printStackTrace();¶		} catch (SecurityException e) {¶			e.printStackTrace();¶		}¶		¶		¶		OEFrame editor = ObjectEditor.edit(scene);¶		editor.getDrawComponent().setBackground(Color.DARK_GRAY);¶		editor.getDrawPanel().setSize(450, 450);¶		editor.showDrawPanel();¶		¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="324" _type="PauseCommand" date="Sun Apr 16 12:25:01 EDT 2023" range="2s-5s" starttimestamp="1681660740055" timestamp="1561121">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2117]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="325" _type="MoveCaretCommand" caretOffset="0" date="Sun Apr 16 12:25:01 EDT 2023" docOffset="0" starttimestamp="1681660740055" timestamp="1561388" />
  <Command __id="327" _type="PauseCommand" date="Sun Apr 16 12:25:03 EDT 2023" range="1s-2s" starttimestamp="1681660740055" timestamp="1563105">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1717]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="326" _type="ShellCommand" date="Sun Apr 16 12:25:03 EDT 2023" starttimestamp="1681660740055" timestamp="1563105" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="329" _type="PauseCommand" date="Sun Apr 16 12:25:36 EDT 2023" range="30s-1m" starttimestamp="1681660740055" timestamp="1596198">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[33093]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="328" _type="ShellCommand" date="Sun Apr 16 12:25:36 EDT 2023" starttimestamp="1681660740055" timestamp="1596198" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="323" _type="DiffBasedFileOpenCommand" date="Sun Apr 16 12:25:01 EDT 2023" docASTNodeCount="267" docActiveCodeLength="1470" docExpressionCount="209" docLength="1470" projectName="ProducersConsumersV3" starttimestamp="1681660740055" timestamp="1561121">
    <filePath><![CDATA[C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\animations\AServingPlateAnimator.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package animations;

import graphics.Plate;
import util.misc.ThreadSupport;

public class AServingPlateAnimator implements ServingPlateAnimator {
	int TEXT_X_OFFSET = 45;
	int TEXT_Y_OFFSET = 30;

	public AServingPlateAnimator() {
		
	}
	
	public void animateServingPlate(Plate aPlate, int pauseTime, int destX, int destY) {
		boolean alt = false;
		
		if (aPlate.getPlate().getY() < destY) {
			
			while (aPlate.getPlate().getX()!=destX || aPlate.getPlate().getY()!=destY) {
				
				if (aPlate.getPlate().getX()!=destX) {
					aPlate.getPlate().setX(aPlate.getPlate().getX()+1);
					aPlate.getText().setX(aPlate.getText().getX()+1);
				}
				
				if (aPlate.getPlate().getY()!=destY && alt == true) {
					aPlate.getPlate().setY(aPlate.getPlate().getY()+1);
					aPlate.getText().setY(aPlate.getText().getY()+1);
				}
				
				ThreadSupport.sleep(pauseTime);
				alt = !alt;
			}
			
		} else {
			
			while (aPlate.getPlate().getX()!=destX || aPlate.getPlate().getY()!=destY) {
				
				if (aPlate.getPlate().getX()!=destX) {
					aPlate.getPlate().setX(aPlate.getPlate().getX()+1);
					aPlate.getText().setX(aPlate.getText().getX()+1);
				}
				
				if (aPlate.getPlate().getY()!=destY && alt == true) {
					aPlate.getPlate().setY(aPlate.getPlate().getY()-1);
					aPlate.getText().setY(aPlate.getText().getY()-1);
				}
				
				ThreadSupport.sleep(pauseTime);
				alt = !alt;
			}
			
		}

		
	}

}
]]></snapshot>
  </Command>
  <Command __id="331" _type="PauseCommand" date="Sun Apr 16 12:25:38 EDT 2023" range="2s-5s" starttimestamp="1681660740055" timestamp="1598361">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2162]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="332" _type="MoveCaretCommand" caretOffset="62" date="Sun Apr 16 12:25:38 EDT 2023" docOffset="366" starttimestamp="1681660740055" timestamp="1598622" />
  <Command __id="330" _type="DiffBasedFileOpenCommand" date="Sun Apr 16 12:25:38 EDT 2023" docASTNodeCount="221" docActiveCodeLength="1639" docExpressionCount="148" docLength="1741" projectName="ProducersConsumersV3" starttimestamp="1681660740055" timestamp="1598360">
    <filePath><![CDATA[C:\Users\wid\eclipse-workspace\ProducersConsumersV3\src\main\Main.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package main;¶¶import java.awt.Color;¶import java.lang.reflect.Method;¶¶import bus.uigen.OEFrame;¶import bus.uigen.ObjectEditor;¶import bus.uigen.attributes.AttributeNames;¶import graphics.AProducerConsumerScene;¶import graphics.AProducerConsumerScene2;¶import graphics.ProducerConsumerScene;¶import graphics.ProducerConsumerScene2;¶¶public class Main {¶	static ProducerConsumerScene2 scene = new AProducerConsumerScene2();¶	¶	public static void main(String[] args) {¶		animateScene();¶	}¶	¶	public static void animateScene() {¶		¶		//Adding labels and buttons inside object editor screen¶		ObjectEditor.confirmSelectedMethodParameters(false);¶		ObjectEditor.setMethodAttribute(AProducerConsumerScene2.class, "initScene", AttributeNames.TOOLBAR_METHOD, true);¶		ObjectEditor.setMethodAttribute(AProducerConsumerScene2.class, "initScene", AttributeNames.LABEL, "Init Scene");¶		¶		//Setting up init scene method in object editor¶		try {¶			Class[] initSceneArgTypes = {Integer.TYPE, Integer.TYPE};¶			Object[] initSceneDefaultArgs = {4, 4};¶			String[] initSceneArgNames = {"Number of Patrons", "Number of Chefs"};¶			Method initSceneMethod = AProducerConsumerScene2.class.getMethod("initScene", initSceneArgTypes);¶			ObjectEditor.registerDefaultParameterValues(initSceneMethod, initSceneDefaultArgs);¶			ObjectEditor.registerParameterNames(initSceneMethod, initSceneArgNames);¶		} catch (NoSuchMethodException e) {¶			e.printStackTrace();¶		} catch (SecurityException e) {¶			e.printStackTrace();¶		}¶		¶		¶		OEFrame editor = ObjectEditor.edit(scene);¶		editor.getDrawComponent().setBackground(Color.DARK_GRAY);¶		editor.getDrawPanel().setSize(450, 450);¶		editor.showDrawPanel();¶		¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="334" _type="PauseCommand" date="Sun Apr 16 12:25:47 EDT 2023" range="5s-10s" starttimestamp="1681660740055" timestamp="1607860">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[9238]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="336" _type="ProgramExecutionEvent" className="/ProducersConsumersV3/src/main/Main.java" date="Sun Apr 16 12:25:59 EDT 2023" kind="HitBreakPoint" projectName="ProducersConsumersV3" starttimestamp="1681660740055" timestamp="1619838" type="Run" />
  <Command __id="338" _type="RunCommand" className="/ProducersConsumersV3/src/main/Main.java" date="Sun Apr 16 12:25:59 EDT 2023" kind="HitBreakPoint" projectName="ProducersConsumersV3" starttimestamp="1681660740055" timestamp="1619839" type="Run" />
  <Command __id="340" _type="PauseCommand" date="Sun Apr 16 12:26:02 EDT 2023" range="2s-5s" starttimestamp="1681660740055" timestamp="1622196">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[2357]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="339" _type="ShellCommand" date="Sun Apr 16 12:26:02 EDT 2023" starttimestamp="1681660740055" timestamp="1622196" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="342" _type="PauseCommand" date="Sun Apr 16 12:26:06 EDT 2023" range="2s-5s" starttimestamp="1681660740055" timestamp="1626054">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3858]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="341" _type="ConsoleOutput" date="Sun Apr 16 12:26:06 EDT 2023" overflow="false" starttimestamp="1681660740055" timestamp="1626054" type="ConsoleOutput">
    <outputString><![CDATA[E*** Object:graphics.ABell@4bd1f8dd displayed multiple times with following references:
 [AProducerConsumerScene2.queueBellList.first, AProducerConsumerScene2.queueBellList.last]
 Remove one of these references in the displayed logical structure by, for instance, renaming the getter for the property storing the shared object or adding the @util.annotations.Visible(false) annotation before the getter.
If you think it is safe to tareverse  all of these  references then add the annotattion @util.annotattions.AllowMultipleEqualReferences(false) nefore the getter.
E*** Object:graphics.ABell@4bd1f8dd displayed multiple times with following references:
 [AProducerConsumerScene2.queueBellList.first, AProducerConsumerScene2.queueBellList.0, AProducerConsumerScene2.queueBellList.last]
 Remove one of these references in the displayed logical structure by, for instance, renaming the getter for the property storing the shared object or adding the @util.annotations.Visible(false) annotation before the getter.
If you think it is safe to tareverse  all of these  references then add the annotattion @util.annotattions.AllowMultipleEqualReferences(false) nefore the getter.
E*** Object:graphics.APlate@301ec38b displayed multiple times with following references:
 [AProducerConsumerScene2.queuedList.first, AProducerConsumerScene2.queuedList.last]
 Remove one of these references in the displayed logical structure by, for instance, renaming the getter for the property storing the shared object or adding the @util.annotations.Visible(false) annotation before the getter.
If you think it is safe to tareverse  all of these  references then add the annotattion @util.annotattions.AllowMultipleEqualReferences(false) nefore the getter.
E*** Object:graphics.APlate@301ec38b displayed multiple times with following references:
 [AProducerConsumerScene2.queuedList.0, AProducerConsumerScene2.queuedList.first, AProducerConsumerScene2.queuedList.last]
 Remove one of these references in the displayed logical structure by, for instance, renaming the getter for the property storing the shared object or adding the @util.annotations.Visible(false) annotation before the getter.
If you think it is safe to tareverse  all of these  references then add the annotattion @util.annotattions.AllowMultipleEqualReferences(false) nefore the getter.
]]></outputString>
    <diff><![CDATA[null]]></diff>
  </Command>
  <Command __id="344" _type="PauseCommand" date="Sun Apr 16 12:26:23 EDT 2023" range="10s-20s" starttimestamp="1681660740055" timestamp="1643857">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[17803]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="343" _type="ShellCommand" date="Sun Apr 16 12:26:23 EDT 2023" starttimestamp="1681660740055" timestamp="1643857" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="346" _type="PauseCommand" date="Sun Apr 16 12:26:25 EDT 2023" range="1s-2s" starttimestamp="1681660740055" timestamp="1645672">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1815]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="345" _type="ShellCommand" date="Sun Apr 16 12:26:25 EDT 2023" starttimestamp="1681660740055" timestamp="1645672" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="348" _type="PauseCommand" date="Sun Apr 16 12:27:03 EDT 2023" range="30s-1m" starttimestamp="1681660740055" timestamp="1683513">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[37841]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="347" _type="ShellCommand" date="Sun Apr 16 12:27:03 EDT 2023" starttimestamp="1681660740055" timestamp="1683513" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="350" _type="PauseCommand" date="Sun Apr 16 12:27:05 EDT 2023" range="1s-2s" starttimestamp="1681660740055" timestamp="1685030">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1517]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="349" _type="ShellCommand" date="Sun Apr 16 12:27:05 EDT 2023" starttimestamp="1681660740055" timestamp="1685030" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="352" _type="PauseCommand" date="Sun Apr 16 14:47:19 EDT 2023" range=">1h" starttimestamp="1681660740055" timestamp="10099773">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[8414737]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[BalloonCommand]]></next>
  </Command>
  <Command __id="351" _type="BalloonCommand" date="Sun Apr 16 14:47:19 EDT 2023" message="*******************************************
Worked 14 minutes(fixed)/21 minutes(context based) from
Sun Apr 16 11:59:00 EDT 2023 to Sun Apr 16 12:27:05 EDT 2023
Edited 0 Projects: 
Edited 0 Files: 
Number of insert: 0
Number of delete: 0
" starttimestamp="1681660740055" timestamp="10099767">
    <fineGrainedWorkTime><![CDATA[21]]></fineGrainedWorkTime>
    <insert><![CDATA[0]]></insert>
    <startTime><![CDATA[1681660740654]]></startTime>
    <endTime><![CDATA[1681662425085]]></endTime>
    <workTime><![CDATA[14]]></workTime>
    <delete><![CDATA[0]]></delete>
  </Command>
  <Command __id="354" _type="PauseCommand" date="Sun Apr 16 21:49:00 EDT 2023" range=">1h" starttimestamp="1681660740055" timestamp="35400722">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[BalloonCommand]]></prev>
    <pause><![CDATA[25300952]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
</Events>
